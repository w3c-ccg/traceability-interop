{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "df489840-606f-4745-a2c9-901fe9e03032",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1ce20775-f9aa-4974-bbb0-9ae316070728",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "af1d9615-a7d7-432f-a2e9-5e87497fc897",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6d8e4d84-edfb-49a2-8b88-5c8684d7fc7f"
                }
              }
            ]
          },
          {
            "id": "6ee65620-2228-4ed7-982b-c2e1f0f68141",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e35a9963-65e2-4404-b93c-83509640bc88",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "18ccd900-d65f-40f1-8409-38c1d94cc83a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d6b5fd6f-b205-4cbb-a853-0bd8e2d5d9ce",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "19a742f4-daa1-40bd-aec0-5f02c7bd4f6f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ab9d53d4-2018-4408-b75f-57cdb00a2112",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81592018-f9a0-40fc-9816-6e770b5a27ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f01ed0c-c02b-4fab-be64-8fc1b1682d3e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d364a0bf-2db6-4c9a-80ae-0921c9f7602e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "52d1211c-33dc-4584-9e2a-23bb99a4620f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4f183146-14ce-4ea5-8ed4-6d75e259babc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e7a6313-edcc-4b47-848c-e68a6d0bfaa4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1797b8ff-c6f9-4698-81a5-723c2e39743d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6beb0210-6640-479b-8368-257f8d5a3f00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac4e4902-a1b3-4ffc-80bd-c6db6ff7799f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "250cadf7-f6fc-4648-82c8-cc415eb17d14"
            }
          }
        ]
      },
      {
        "id": "50a20080-81dc-40df-92d8-e25d92a52054",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b4e8e767-603f-4cf4-9903-6334932e18a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "881e50db-8db8-4867-8ced-8bb5e24ece0a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "100a8df5-1860-424e-8da2-7c37bc47ffde",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee43711-2a1a-42cb-9e2d-a578fd405e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d720bf29-b355-4267-a9c1-de64ba32c87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638559b8-e69a-4247-af62-7a33e6eaa1b9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b826de6-d6ba-491a-bc4e-af09417f2c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daf97cf3-29ab-47bf-bc01-00a9d74a6e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258d3d85-73c9-4595-844f-b63d559be8a2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d82056-f0e8-4eaa-96c9-7b66e0ddc417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce7fe143-7e02-4798-b11e-8e9f390cbde5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2d5e26a6-13d6-4657-bb75-69a015dc0663",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82b6de44-7a65-4bca-83d2-02c4a06b1da5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2cffe7-6c43-40bd-996e-443a57716307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b870898-6e3c-4421-aabc-3d34eb334982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ad80f7-95e5-49ee-b640-2729a8891d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "791224b6-3d13-44e7-9049-ba49c9d0cbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8b6860-742d-4247-ac8d-81a7471a9cc1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7bacad-1155-4bd0-8de2-b98f2d3d26d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e00846bd-68bf-4231-86dd-6aa236e06126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180567e0-f31f-4c91-88f5-43895a7a9d8e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c8f63532-844d-4dec-85a9-819c9e0cab4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f8d95df6-7666-4e3c-936a-4c3be8343e18",
            "name": "Positive Testing",
            "item": [
              {
                "id": "539ded5f-1ffd-4b21-b23e-95a1ded84c36",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0bcd74c-50e1-49b8-b8dc-285dfbb154fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6628f64c-c045-4489-86ac-b1761b1a1cf4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6941e33f-6303-4217-8a28-68933c968e2b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "52039d4c-354c-4dc4-b97d-41431d7195e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33d3a085-55a1-4327-a820-2fa02271ab83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fd5ea12-a49b-4d60-985a-27255cefed1b"
            }
          }
        ]
      },
      {
        "id": "077548e0-167d-43ae-b1a3-6cd553f44c20",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4b754114-c17e-437c-91cc-e1eaa760230a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4486a38c-01a2-4d25-aaa5-c21fd63aca9c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9ea03367-cf40-4a6e-b0d6-d76366e7ab6e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b4567f-8beb-4837-9fb2-3c7b16cd4320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e59e3f3-f474-43d1-8d74-5bace2350b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c1196b-a428-426a-bae7-1482190860e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b0da6ba-0738-4c9e-93c9-579320460dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822cd331-28bd-419f-8650-3d1391c7d8ab",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b174403a-8f6b-4975-b3e4-a089dbad3c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9d31ff-0f38-434f-ac1a-acfd4f2984c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d34f3f2-b998-4b49-bf96-276f4c52adcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1165c442-dbed-4705-bd3a-5ce25a58ce20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfb8c3c-45ca-4e3a-a650-8d2271d28f4c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af0a734-3b84-433e-834c-f668b7caa24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d916b7-03ce-474b-8a90-5f9084248723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7ffbbf-55fb-47a0-975c-18b2c6f6b1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6341b469-5f9a-4240-a866-3f3952f5268c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650ed47a-d654-4566-afa0-f67bb472a039",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6189ead-60f0-4b5a-8891-2f161e62b12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3817b99-e49e-4201-842d-4f3638df2ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c0822e-f737-47e4-b486-3895f4e5684e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94ef3cc3-49e8-470c-acfb-86f4c7cb7cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44c79fb-6926-4d78-8f8b-427b39117adf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26dc17e-dbef-4e5d-afc9-334dbe7cead9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecee9eb0-9440-4a6e-979c-82820baac00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a217782-0f26-4bb1-8701-1a9262b777e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7c1769a-9c1a-45a4-a2ea-d345dadf8872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f6979f-61c1-45ab-b723-0d4ccab99422",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44c0ede-f81b-45ce-9856-bebdd79c9316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681b21f3-abab-4c5a-919e-49c6c32a0324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175f174f-a76a-41cf-bbe2-8bf0f176bd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "246d9853-1dbd-4a5b-9a02-790dc64355e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb56b31-d214-4abc-8f6c-ce420682748c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c34276-0ed2-4b76-8136-6a714bb52e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c39fd0-fa94-4eee-8d64-f70749a09a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206d9fd2-e5cd-49d9-9cc3-e1226223c7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "142f800f-2e48-4056-9785-95320f932524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813ded9f-4be4-41ee-a1b4-462e84234ae4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdbbd9a-a15c-4278-a12b-d656c924d013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be5d32e-d55c-460d-8e9f-b6960d60598f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72da4280-21fb-403a-b5ce-3f231a413c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3265caa-d3a1-4c27-80d8-5634dc0cf0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7592302a-e57a-4c15-8762-b04d1679010a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98276ad-b434-4fe8-888a-ec4e7ffdecb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4e6dcd-a743-4f47-a342-cef064e60b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e448f0c0-a626-4ac3-a107-2c65eff0d51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61c6d3c6-2ec2-4dd4-be88-f925bd451443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec428f3b-a563-4535-96e7-c86ad58fd69e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c6b303-a097-4d2b-888b-05da4d99150d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c9bc42-65db-49b8-a4cf-5178a0502f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d484104b-a6b3-46c3-abac-248b2502d839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4caa3a22-b26d-4e45-a418-c4c3a3b68628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa15d40b-41c8-4116-a250-b2352080c65b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc1f923-d6dd-4f18-87ea-bd90be8ba8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ff14dc-caed-4340-b6b5-53b4e260c7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609e821a-c76c-4653-a61c-b4284e3fbff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4722167a-bf13-4c6a-9b4e-b67d8f4d8e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58612121-d319-4920-b321-f1820916de83",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b19f64-e0de-4896-adf9-3cfda2f7dec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc3ee4e-6d34-4c1d-9a01-85dee2eae088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8023f012-694a-434d-bd78-1a03f39e030f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "823cbe24-1a28-4122-ab79-622074645fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b5fab4-3387-4326-9645-12bef4e65ba8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108fdfed-00d8-4789-9e1c-742b39033d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d473ca0-6630-4e8a-896c-2761cdf7097f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fbc78e-86ca-4eb1-8c8a-f2e3396354c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5217e3c-f470-40dc-9291-bca9791f1fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25594195-30fb-4eb1-acf8-cf5f228fad69",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2585d34-e170-4c4b-9f95-636f6cb4b419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbf48c5-ba64-4e3d-84b4-a114bb6e7b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba593f4-b6bc-4c2f-8c77-0019b0c598e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77ff5aea-3ae7-440c-8938-8b48dfb994dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d44bca-d3e2-47fa-8592-eb1159265b5f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270ff557-1a92-476b-8b8f-a9c2a2aab1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1380832b-c31a-46b5-bbb1-00eed39435af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83908241-8040-4c05-a631-a25acef9adf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd26c7bb-7ac4-4488-a0c0-f64bee8d2e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95779a1c-2436-42e7-b9d4-39320df9bea6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289f1f22-b115-4b38-bded-6c1c45b632f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a284b7f-729e-4538-a179-b43476511057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ddc5cd-717b-4fbd-8d92-4c580cdb8cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83d930fb-e5cd-4ffa-8418-eefa3307d599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ff30f0-ba4a-4637-b35f-d65cef84835d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d0dfa4-2ea1-4c19-af2e-0ffcfe6bdbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef7b4bf-f7a2-46a2-9f99-9766bc539ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c46ae8-9620-4450-a337-6df3858b3cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7205360a-7e92-46f1-8595-6692d1ba7c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83eab9a1-2b0f-4c1a-b6b6-83b96a93416a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b860c4-75db-4057-b899-9ba898343441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f153dad-4b43-491c-bae3-1e2c7e5f9dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc591b5-b335-4c17-8f28-b6253eae5b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "19a1606b-1b6b-4159-8fae-162a6ca5bdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae9460d-1adf-48bd-af7a-319d709eed59",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315010f0-dad6-438b-a75c-b90777c3101e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e08dc60f-b51a-4429-acf8-8cc95e536531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb81b1f-dcd2-4e34-be2b-e9acb8f56411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03ea548c-5f93-4078-9a99-00095081f1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a8d3b0-800a-4efb-9e32-8f636d46685f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ab059c-7769-4d6e-9c67-9f6424f3feb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e18a2c-3b90-4822-8f95-5b4959fdd3f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416c48af-e12b-4cf9-84e9-aad13c0425fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32bcafbc-c3e1-49cf-be31-97da3d32298f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158cd2e5-a8a2-481f-b4a7-a0c587048570",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80eaed29-5897-4b4a-9b3f-979c8b1c3ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38f39a6-4167-4576-9e0f-d12c72e5e9f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2a00fa-9dd0-4858-a9c9-1c7c43814e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a215d64-35d2-4a44-afdd-15538501a3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3f1e04-98c4-47bf-a450-c742135ce336",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fc34ae-658c-42ef-a76a-370bb440c4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec699312-c807-4149-8e35-bd169c1856c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09479623-8863-4390-8b3c-5c1a1604b371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f078bd08-9460-4b59-8197-a0c10e7e0862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112e0e7a-7046-4ea5-8626-5defa2e743fb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95dee3a-1803-481f-8361-d351b7a3145c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1f0ffb-c119-411d-b188-8fea5a131d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8591ce82-5205-43b1-88d5-f46487832658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "720c1881-74d9-4c26-be0c-608ed4ce50d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f311058-55c2-44b6-90ac-1879989456ff",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e061278-3ce0-4645-9848-1995bd1c0074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dfb8a56-17b6-4d4c-ac40-2d4f2a0c7ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c209ba74-c8c7-41ed-ab24-ecf740273c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a02d119c-8946-4761-a9e9-cc74abcdd945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118977b7-1a05-4de5-ba88-26f45294a260",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18604241-13c9-4cd1-b64d-55eca3c51bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f6c5a9-7566-4e7d-98c8-8b59d7c2cc27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f92642d-b1d1-4bce-bbb7-8151f19a10f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88e57aa3-eb46-44b2-a5af-d534684b3bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee38b23-a285-4fcd-bd2d-a7c1b250c7ad",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c4b9a00-c69c-4419-b037-a4f9837fc0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d043b20-45e0-48c0-8d8b-6c20e641bf77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fb33be-d3ad-4d0a-94dc-5c1730311602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e6e55a1-fd7a-4770-93c7-96eb26ca61b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06421c80-9d87-42b3-9f01-a13c5402b20a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e348140a-9a81-421e-90c7-f572c0228622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be88c1e2-37b2-436e-b99a-0c3e8767f0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600b7652-8e5c-484e-b4c0-57ed05a3145e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ef451fa-dc2e-495f-b5d8-a88b4c9040a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf5b5ca-6a6f-41fd-9c08-b0cbdd35ec54",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd8a550-2841-4fa1-8b7d-20c66b7bfac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc7e84f-aa87-4463-a63e-5169504f3bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589b8f67-87cc-4ddd-adab-4402bdef7e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "89c378e4-7b81-4c8b-8827-8cd151b4eb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd26ac8d-6681-45d3-b3f1-9ae518a382e7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77a1d9a-d403-41de-8958-b335d3efa468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe654370-ca38-4d3c-a744-668c4010b3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84885699-26cf-453c-9208-15d65605761b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5686f67c-c011-41f9-ad12-39c1674c02b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511fbed3-ee8e-4ed4-a179-b341521b4092",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb255d33-7f18-49e2-aa82-fe888e947ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e3110e-ddfb-4ab0-ba90-8ca9ea761961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ca551d-e2a2-4f8a-890f-dd358acd6e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "465ed212-0037-48cd-9e25-964e61f27a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58347d4-d0ae-488c-a2ae-114ad4f75fe2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e58f214-6301-4fa5-8513-a49048cefa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbdaf364-9d4f-4bac-a120-d3ab2a0158de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422fae03-c942-44ef-a409-04b049b5c251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2592fa29-5a61-4760-ac84-c0afd915869c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85de002-7453-4bab-b2fc-e6a1af0a167a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49982ded-b5d0-4d42-9029-848790f46329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b40377-2539-4f1f-a5cd-2d0882961145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f337bd5-9ac0-468b-8bf7-abaf160e9b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfefc690-97b4-43f6-9556-96ada8d64d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4a4342-adcd-4072-a84c-fbb079acc7a8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e69233-128b-484a-a80e-13bb5ce18344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7cb98e-2800-4855-9972-1a34d85bc391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d933b1a-a943-4815-82bd-29f22083db97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74e99e3d-1924-48b9-a213-0ec9928a9414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81840f1-9ee0-482a-ad47-7f36600a7399",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79093fc6-e0e2-4002-86c0-5e34ae8b087f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf38ced-13aa-4423-be4e-f702b175fc68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7ce1bd-0d84-4506-abd5-49f9ec0d2076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa0ec95-cf88-4751-987f-1bba352d3635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6600088-7c7e-44b4-ae6d-3c85fcff7582",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b211fc7f-fd67-4e93-9195-87276238e7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4e7307-0b2a-4bb1-8d42-b8375f86d047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda04dcb-a53d-4138-9d14-cc20734af1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4f8b96-1eb1-42df-92bb-215620cbff06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e2ada5-4167-49bc-9ae9-50d51c4160f0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1476e52-2ef4-42db-9685-4e38ddf89a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a6abb3b-043f-45b8-9ae1-e12ed6bbf01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8b77f9-9d48-4014-b108-b90b34d62bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "385a82e9-9858-4b82-89cb-5bb8d5200b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ee5987-3a5f-4ed9-9695-1fe0417d257b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e437d76-939a-42a1-8a54-0ef1d543f3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9943b7-81e8-4e5f-abf6-e1323ce4c9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c727339-342e-4f25-aa4f-aa1e0bef023c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd02da0b-0ec9-443b-ac60-635bd3f1c9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769b3903-93cb-41eb-9343-779b5f21f914",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b88fb5-259f-42e3-acc0-4bae743fed0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945ea593-a298-4877-bd6d-10a6c84051f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c56565-9c86-4547-9789-b40018c92589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b59e3d2-7e07-477d-af45-ae7ecae05f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3872d471-b310-42f3-a3fc-c6b7ebf3c714",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "625959bc-f3b0-4b40-870c-ea57919909b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92750c1c-577a-4884-a109-29bde3fe2dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616b8fe6-a71d-4ba3-ba44-a1ccc3200054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d44d54c2-9a47-457c-81da-acfc79878440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea569371-4e38-4008-9086-d0c7c8c6da66",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f2cc82-3e34-41b5-8625-f2a3fb7734b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47757805-9fae-4d65-97c6-f0f41482f323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4601b9c-3339-4ebb-9c87-749da497813a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "00a781cc-036d-478e-96fd-62fbbcd78f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ca5ae2-62b3-4272-a175-40b6dd61863a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587faf8b-0268-4efd-a125-9d003e715e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60d95df-fa34-4b9b-a7a8-e5ad705df32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5016fb-50d9-4eeb-8d17-4c34b1478a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "07b5fd29-9e83-4a65-9052-02ee8cc24c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55b96e6-d93c-4467-8fe3-bec2b4674a8b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7244cc1a-6c3d-4f55-b7ce-9f992878bf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90447cb8-2609-47d6-93c7-1ca20f17a9bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f943d8b6-02fe-47d9-8d48-85c1b6b9abb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b53f36a5-4006-459f-9434-da4f72569224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efda5be9-9462-45ca-bbbb-747d43c95b30",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b672d4c6-62bb-4964-8ce5-7b548e717c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e526ea1-b6bc-40e1-8c86-9f6be21bf7b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6b908a-967e-4b28-8bbe-454fa2035e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf65c63-0712-458c-a513-3511661806f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931e64ab-601b-4943-85ad-b235a4db3890",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "795c8c13-ce79-4c95-9cce-c2d4d9c987c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21404284-a6bd-47eb-863a-395289ee4951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1b063b-9cbc-4038-a266-1e60a948add3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad013a42-d587-4683-ad66-dea901019c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2529857-082f-456e-bded-be5b80f30708",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fb1f1b-8f40-4c08-9a24-f3c783e158c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf92ab99-095c-4cb4-bed3-7eab22df62b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6485c560-bc12-446a-a1eb-016c570b312b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a22c4150-270d-417a-9c96-2270575917b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0665bc-bdfe-4117-8abd-53695322a09e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76dd6e4a-f0fb-4e9b-8a50-8925cf75444a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d48d0a0-6ac2-40c5-be0c-ed14204f0bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1517547-2662-43cc-a0c8-f416f4a7e25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76527ffc-8803-41f0-8d23-16b0edac765c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20af2045-dee8-470f-acb9-b7edd5782603",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234eebf0-efbe-4096-a84b-ec12e04daa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0d76de-4672-4ad3-859b-3ac4249b18b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032959c0-390e-4a49-abf7-1f1edd85872a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec38ad3c-cea0-4234-9978-e34611ac9215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26def15-f555-4109-80fb-9fadba0e83c7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b291642-1222-46d5-9804-5f08624179a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6babe353-8c1d-4376-b88f-6a4dbc8b1a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce12495b-f97a-4e66-907f-a5d096e40916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d49d934-6472-45bd-ad58-caf689004698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b25942-c060-498d-be34-90e39774f07d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d01c2cb-02b3-4d67-9940-660a040cacf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e51ec89-7deb-4104-b98c-25331a8731d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d220c22-1866-4652-b584-879ee55d38f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "777385ae-1421-46ec-a390-cce393de9d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84888c06-a3a4-43c4-b63a-f44f8af9ddcd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc57447-8276-4977-839e-7eed07ab3698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3061d6a0-c230-42bf-aeac-0dd536a8ed14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ededa3a2-1bd7-4135-9637-e1799487794d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "07030c41-4124-4623-90f7-b3c197ce0944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418fa5bd-51ed-4811-8f5f-4bb55a830783",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c2bc46-bc00-4037-a533-d688783b26e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c3ce17-8777-4089-b363-2e76c8fa245a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15a7fb9-1063-4370-a090-3b1b35da1bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab3a7b6-4212-4ac2-b543-417965367f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0256723-a8ba-4ece-a37b-d555b00c9a48",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e39108-448e-4478-aa2c-0a2bc8fe918d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5825864d-9b90-4f83-8f74-47fd1c944cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d51f13-9bea-471c-9d48-9fdf0f6289a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6537120e-0af6-44ba-af52-3567a905ae00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b3f783-9005-4e26-95d2-81fa35c45a24",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c40e01-c190-40ce-a4a9-b0046f21d351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5837fddb-e4d8-40dd-816e-350015ce3a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa99710-b6b6-4d7c-9c76-eea1e1fed98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39b78ecb-b97f-42e8-a563-dc5a305bc4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549f15d5-99b7-4d82-bc45-b07406a3b7f3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afadb73-e55f-4f91-90cf-a260d3b08d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74abff7-db51-49db-8777-2b6c2669c852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebdd725-bbe2-49a4-99a4-1598aeba8477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1c6ce83-515f-4d80-ad48-ff7dcbebef05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9015722-176d-4d21-89c5-05a571f13256",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3d7f80-6bcf-4b6c-8751-706123fcb540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a76e0f-6000-4116-aae9-305436e2268b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4103be64-d5ce-4219-ba6a-ac1bd12b2309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82ec45d3-600e-4823-b087-466db2b15071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109b1b00-0864-43d9-b0d0-8ebfb12482f8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aaae712-6b1d-454f-88aa-6c2158b143f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55d24b0-3536-4470-ae4e-fdbdb092bbdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22d2030-1c80-4a83-afa1-8cd5b8d86749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd73a20-a763-422d-af37-709ae0b7c4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9c2b6d-8e43-452c-8296-8bdc9b9b7b11",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6965a6f7-fa6e-470a-9e76-5808eb460af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbdaab7e-8167-40af-807a-f60294ac204e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320d1d58-b917-4a1f-96bf-fdd35d191b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ea9ed9-6b06-4350-81b2-5b278df30519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bae4e1-ae42-4ac5-b1a2-5355de3c0b52",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65275a3c-cca5-4fa7-aa1f-5bf1c5109d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe0a671-1997-41f4-b4a7-0a323b835123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ee0d2e-a459-4af3-97cf-23008ebea3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc3a1c5-4ae1-4c6c-b046-4c981caf97b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ed2865-fd74-4a6e-9cef-f5a6a9e32369",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1355be5a-8319-4913-9614-53ed4b855af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de96328-ec20-4d99-aa92-75b8a726f21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff314581-7d18-466f-9465-8ae65eb48a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "29697252-3588-4eed-ba11-a494e16367ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3814382b-805e-40a9-937d-20af8412ae20",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84e71fd-bf51-4b77-bbf7-78946b393792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff08036-d633-4e6f-b532-6f16f53d424b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f6e57c-1e9e-4428-ae37-fb126c9af756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "31aa520c-5416-4280-8437-068e6c9b9482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc82d362-b175-4431-89d6-3a008573b80f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c18c074-f761-49a5-ba72-9ec449f160b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b946b33-bdaf-4d05-b742-c5d496a18c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82e8cfd-a092-4c0d-9a80-c8c28327f33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "79cc213b-349d-44b1-8797-62a4e4b93e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b3e942-7697-45b7-8016-95aa0f690578",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bac3f6-a515-44a2-b9df-87a0a52ab980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d49f10-cd82-40a4-924b-99e7b89d1d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca436cd-8e6e-4470-8a20-5a12fbe9ae5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "eae6f879-d17a-448f-929e-9162160c39f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c872bce-7e63-4320-ae36-5dd6e438339d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489d59af-b1b9-4d2e-8002-82b1e90e8dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c168233-bbbb-479a-98ac-898a6f7c98af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96932645-7c2f-4c42-a028-a56607b4bdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3788fa7-d9b6-4178-9594-7c79a3c5ee8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba67a36-5ffa-458b-9981-463c64729bea",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c594063d-eb96-441f-817d-7d8f6619f160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900c7aa0-d960-4c3e-a057-c162e59d2857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7ea300-7743-493b-b0d5-62f43633bb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "257f5605-1edd-4bd5-81f1-4e8177457904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75923397-71ff-474d-9d6e-43ee8256e9e8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8eefdb0-1c4d-4171-a151-e2de796dd2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100dcdc9-6436-4f96-85cd-b2b7e4b15e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6dce09-99f6-4e79-b0b2-e87958383f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef330c66-1e6e-4447-84e6-7333718c3248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b61f1a-b0cc-44b8-b6d2-464053e6908d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31df7e12-9972-4618-9ee7-7868ddf4da75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ade6ad6-8a15-4315-9c6b-419bf53cd3f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a115207-0e66-4f01-b9b1-64fe4be7ec3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af9e7d7e-b838-40b8-a5c7-24a3cdd61422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c23c6e-a56a-48e7-8d5e-06b462d9a19e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd156ab-4061-43a1-8847-6344f48a99bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff677b6a-d1be-4b23-8754-5617ec91a914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f994fa6d-132f-45f7-b048-16a0de90a0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d2f13a-baae-44dd-ba8e-259b9f292b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd9378b-6569-44b4-97a8-53e9b6541592",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f56b716-6008-45dc-8d60-6bc6b0dc9717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412689c4-cac2-4789-b8e1-f8bea1041e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d7bd05-acec-4b31-b1b7-4d85ec24622c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b026616-6e9b-4fc2-a7fc-69348c4c2281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab66ba76-b5ba-4ada-a0b0-a5f3acfdef7d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf3a727-3d8c-45cf-9e71-0b8b9d7bfec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93da2f5e-687d-4534-a304-6b7ac3c5a67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad8f2b4-f033-4091-8598-f846a0d0ee32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "23fae686-832e-43a1-80d7-0b821711266d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e906c4b-b5fb-4a5f-868f-2263434953ae",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24da71e5-68cd-4a69-a2f6-0d9c7e63f1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811e94e3-9382-4309-884b-de6c1e1fcaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2489b907-73ed-43dc-b9bc-956c1af4078c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe27731-f5c8-4dab-9403-e5d4f834fb7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b44f3f7-c05d-49b7-a1e1-b54e8febb0ba",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2341f0c2-822e-4500-8299-75bf142a9b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d806d48-63e8-4024-9f93-dd1c24b1b69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ca304c-82c3-4c13-90d5-86d22ca81a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4912cd1-c43f-454a-ad6e-381b146b384c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95939454-43b4-4103-a57e-90606cfb87ae",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb3fa5f-4c00-4d35-b43f-fedfd2422cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "173760f4-dcf5-4e0b-ac4b-7b883388ad1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ada687-240c-4206-acb9-b5f3262f40af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f9827d-4ed4-43e9-a0fc-ab69b543939d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12922761-9455-45e9-806e-305e7ad32b37",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643a1033-fd98-49c9-bf3e-072e6e4ea777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7eb20e6-bd65-459f-906b-416ed16524b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975072bf-8143-4574-908f-577a1fa08fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ebc362e-a27d-4580-8491-c498aab53e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77774cfd-5cc4-4be4-92b9-45abcdc435a4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbf7c8c-e6aa-4111-ace4-8f12d02b9146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac45aaaa-0dca-44d1-8347-c3806464d9fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f859f66-2054-4069-a439-5084957c3108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9bca6d77-ff85-4209-815b-4d0dec017bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e11e57-f20d-4d60-922d-e0af34eb24ed",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f67a319-e2cb-4bcc-afc7-15f615a43aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8a91b7-1bde-4918-971d-d294d992c9cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbee9c3-0ba1-4ccb-8b44-2c6b90cba167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1594ab6-967c-434b-9ad3-955fafe82e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7996ec47-3a3a-497a-a55d-757abc66c19a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f10b058-7bc4-499d-920d-6b19b6403437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9408bc7c-ab6c-4e1c-9a90-df8d7c3e2ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075a1056-0203-447b-ac40-611a22699128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e451f8d-f168-4dde-b703-baab517a7e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933a02e4-6f2b-42b8-b34a-2df27ae5732e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b8423c-4e0c-4310-a78b-c2c764b7b368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631fb0d0-9106-43d0-9bdf-4971f82a3949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c879c0d0-b2d2-462e-b6cb-1d53bdfc6c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b75cfbb-7e58-400c-ae0a-c381d7f86512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171df3ad-19a9-4d26-84bc-496f4c8ac976",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dadbfc1-9644-45fa-a4ee-ce3192b55a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab99712f-821b-47d2-acca-0f4d8503629b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91979d8-29ff-4a9e-8072-05d03efadafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e3e70d-683b-414a-95f9-899c566d3201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d98fec1-5d23-4163-b8b0-7d719eeb8d86",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a252ed14-79b4-46ea-b8cd-bf5e78590d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1badbb-7789-4524-a034-86a83b48084d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce60607d-5a6e-4ffb-a5af-34b3e26fa2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e75aa5a6-112c-48ff-9a6d-3cc84b324c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc87524-062f-4d74-87d6-8db0bc8dcb84",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bf6af4-4472-4bfa-b2ca-b4d05cce1901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1aa7cb-f75d-40de-9b56-bfabfaeb1728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3d3eb6-5f29-4d51-968f-278161384dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a172e3-6606-4130-b74c-88e59d1f02a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868cc5c9-6c61-479c-8443-3ee1b012a13f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b555d4a-b44f-4964-a96c-581146756449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a584ae58-75c8-4472-870b-b048cbf4004f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c939cf3-6397-46d6-8bc5-d6c5f192e13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3122b5-6521-421f-956f-982a3a6518c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212877cc-39c7-4bf6-a7a8-c344a2bc443e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2322ee3c-7751-4e26-b32e-3123353f3c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eddf90b-0e2c-4afa-be1d-779ecc6cbeca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8cc850-cacf-4bd6-8460-3774d93766cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca0ddbd-9b2e-41d6-8cfe-0cdaa5b17a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0658ea5f-66c2-479c-9bbc-937faff2a17c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35d80b6-0ca5-4c6e-a103-73754c8c3b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab54781-6069-4b1c-84f0-771635b637ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751fc328-316b-4bfc-a3b7-795548a78657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0935d774-e79e-4671-b54a-3c5165a1c2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24283ba1-1e3f-4af0-9c0e-a09043707d21",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e3385b-7af4-40b8-8c5e-12b3d8026ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e15eb0-94af-4ad5-8d61-0ba327923e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe674e58-5e9c-4929-bb8f-fc6d0db66c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "370de4c3-99b4-4d2a-ab31-de854800683f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d16868-7700-4b68-b132-afd6faa369b0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a535bd5-fdef-43ba-baf9-327138e17d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d96eea3e-93af-4aaf-b278-354e76804cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e41695-a500-412a-9e49-7dfa22957bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a452659-ae31-4a36-affd-faf2a79a4a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595d9a38-629f-4444-9f6e-b73a37415de7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e85d2f-2f68-44c0-a650-1868dac818c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12158335-eb6c-40b3-90f9-3b114bbe8c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8997289b-f975-40d9-be36-b4617783b943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0956d3-3605-4f70-90b7-70d97a60d299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1c53a0-89e9-446b-95a7-5aa05b9a3328",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92b8089-97b0-4816-adc7-3a67b07db576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddefaf04-4466-425f-80fd-3ed192972547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249e7fab-b07c-484e-9b9d-d8fcf8e89f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "30c3f922-a684-4630-88c1-ed7563b197a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915ca13e-820e-468e-b0fe-9b7f7b7c37bf",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a196e6-ec0c-4c24-8420-ddc9ae87d8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3509f92c-3b23-4df4-926e-0a577a308019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ff4bf2-3a3a-47d1-ab41-e8dc8539d463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "96884ccc-20ba-4408-8331-cd59410bc394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dea117-9cec-4beb-bb98-99521eec2cd8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdf5824-29db-435d-b882-b3efef1d0f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df24384-703d-4fbd-b5d1-46a80d746710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a50548f-acbc-4dc9-8bd0-cf5ac9642829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "01bfb73e-5d79-404b-ad94-bc598bfef1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1c1a85-2e90-4c55-824b-843337f313d1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6991cc-a30a-4ece-a1bc-11c712628311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bbd562-28d2-4cd8-aed7-0a9b5f8af84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8824f7a7-06be-4109-a8e3-eb5126afaecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3e36a1-53fd-402e-b858-d67e1a8b964f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23982027-c1cf-4351-85f9-82771a07983e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcc7efe-9618-4cf2-b21d-90592e6c95dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8bb6d9-11f8-499a-859a-d50eaabc18df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a35f84-f724-46df-95fd-5ebab563449d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5419adaf-ccac-4ccc-83d8-98ba0959f9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58df367c-81fb-4a87-8674-d721f32be489",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77eb6c59-55b2-4c91-b05b-6b9c4c626d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e2a03d8d-e143-44c4-a8de-1ad4628129e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f324fb-5713-42d9-9274-495ac618a41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e440b6bf-9b47-44f3-aeb2-09489e5d568c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "277cd762-51e4-4363-8da1-d1eecc28a8f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b5b3389-518e-40a9-a1ec-09b0f03fefec",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0598328-fc4d-4fd1-acfe-13163125d685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db9392f5-1f87-42af-b172-a51b75610a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49beb385-a7e3-4ffc-aeba-965a4bab8b4b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b23daa1f-e035-4526-a3e3-6589fd4fa693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbd1509-f670-4ac5-8bc8-4a545a445184",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cad0a4-2084-43b6-9285-f89b81afc35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "058fc8c4-22aa-4ee1-a21f-ee8d70d0e095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d472070-3c2e-49b8-b396-51da8679bd39",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb9b34e3-7169-48ca-8a1a-dcf95b6d9f52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bc72381-f241-41ef-aabe-7e7a627d15cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df950569-eceb-46c1-b179-765fb3a6983c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b86b548a-c9e1-462f-80f8-3ee5ea243989",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "122ece0f-3f2f-4eb9-ae20-80d3349dc44c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff16665a-033e-4c6f-9165-e7d844c6acaf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ebc7258c-af55-4f4d-bd5e-6a0abf0f721a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1fae1ccb-44e2-4e6b-8467-dd68e94c54eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f463eab9-0858-4500-a01d-4fcd057ed748"
                }
              }
            ]
          },
          {
            "id": "cbee8b12-b1c6-4b1d-8275-072ac78b77e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "572bdee7-b260-4de9-a43f-727b994cc556",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a3387fd-df95-4f30-83a5-da1bb9d8fa0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfe69c98-0172-4490-97a2-27457af55371"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f57934a9-3e99-470b-887d-1d4ac2a2cd8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1ae3bf59-cfc4-4b0e-a8c8-9882c04ff6a9"
                    }
                  }
                ]
              },
              {
                "id": "d2741692-659a-412d-81a6-0a0cc427dbc1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eeda7f89-9e6d-41a1-9f72-026ae8dc37fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a7654bf-1a19-4a89-afda-e5bd81e0ee0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c2d0df0-1536-44cb-8b22-594e308135d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36809da3-0f86-4383-a3ce-73f51d414f36"
                    }
                  }
                ]
              },
              {
                "id": "927f7fb4-4ce9-43e5-8114-15fba23eb850",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acfcf101-c7ca-4ccd-85fd-1aef021f971a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c7a2e1a-7db0-440d-8fb5-dee521230d6f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "076d29fb-5da5-413a-ac29-9e1e15dfec11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd81220b-efc1-4a36-bf2e-bd9f34dd5fa7"
                    }
                  }
                ]
              },
              {
                "id": "5be7883a-49ff-408a-98e8-7ca4941a344e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "300cfd3b-cf09-404c-bdab-85f96a17c277",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd1b8dfe-22eb-4379-8900-4084380a0255"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b30644c3-c7bf-47fa-9f1b-83c6737f0f91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ebf894a9-5999-4faf-a8eb-71f085107ca2"
                    }
                  }
                ]
              },
              {
                "id": "a4853a26-99d6-4207-a176-a71b276c74a6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27c553f0-ca3c-4d59-909d-9a1a7301c938",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb54a33c-3f64-4b4e-9514-87a87916c356"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ba4675f-fea6-480f-a9ce-529cc19f5da4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2ab590b2-d169-4189-ad96-30c16a801ba2"
                    }
                  }
                ]
              },
              {
                "id": "515e21a1-e3d8-4b46-ae3a-fc42c8d2bef0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33381a42-410a-4250-9212-ff00d153523a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c62dd37a-886e-4232-925d-896d60044b32"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79d55349-710d-43da-8eb0-1b58f480e1a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bb9ec402-3e84-4ec6-a563-e86283e0c152"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2c500bfc-d237-455d-90a9-ad4150370979",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "436b2918-566b-460b-853b-4867847e1b45"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e030191f-266d-4523-9549-8dc337ea5e35",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a78e9fc-e9a6-46b5-9b03-f717e774456e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dedae2e9-e4ea-4f46-99b6-45080780b8bd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "481932d9-e29f-4b84-a9b4-996f8dea8817"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0e7d6fc-6a71-4596-8989-2b6c95c7b377",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b9494c2-ec64-4c0e-af8c-a618434401eb"
            }
          }
        ]
      },
      {
        "id": "0eff00d0-fa47-4c52-987c-49f7eaa7e2a9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b1d03fe4-e8cd-413d-a84a-d6c92c5c40af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e93b9471-9e38-420d-9056-49afef5506bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f48029ee-0a43-4329-aa2b-46b4f539a766",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083f4e89-760b-4d3f-b80d-93d208755ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09dab979-78bb-45c3-bf86-437f2ca0e652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62be65ec-74fd-4afc-b8df-6757bc79ead9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "91330491-1e15-4060-a11f-7fea3a83af39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23ea6f6-22e6-4bcd-bb1c-000d5d820e3c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29074df-940a-44a7-8af0-a0685e4d0f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd9657a-40ff-44ea-bb4a-799191c20f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a79ca2-e7d4-4afa-80ca-46534d9cbb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e751cb3-eb39-404e-92cb-5876adccfbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192f0543-3f3e-4068-ab1c-1e0076128b4d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6176f0-77c6-451b-a5fe-e141f3ed6298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a0900a-b383-4967-beed-feacba4d1ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaca64ee-ae5f-4e5b-b8e4-caf86df1925a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae563444-fbea-4d4f-9efb-853651635d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c95e775-bad7-44a4-9122-74ea048bb15a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b915562-540e-4c9e-a303-56b8ae90d437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe16d89-2d8b-462b-930c-4e39420856db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9364f23-c1bb-4f93-849a-621b8dc02866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04b71197-4df2-43f1-b8ba-86c60832300b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2cfef6-54be-40e6-b938-378906e12c3f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "163f0825-1a0f-4492-9c5a-dc4b1dd6ff13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7233114e-97f2-4e5d-b6bc-d279eabe3b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6a6167-1b9a-4153-a9a2-e15e7f1c6bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5493cc57-0d5d-4e33-a71d-053145e9f4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815c03d8-402f-4c52-b434-f414893b1998",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40917b42-85c7-4068-93a8-8025f14030a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbbddfbb-68ee-4708-b93d-75015f080ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c634fb6f-1b53-4cac-a25d-5d53f009bf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8eaf39b-6a70-4108-9b75-971981e2a661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1ef2a0-b995-4bc0-8e15-38f91ecb265b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4e4d6a-289b-41be-8188-ad815ae6d19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8694d6-1257-4f0e-bcd6-bf5e7c269c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8477b418-a275-400b-998b-88b8e5ddc918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a7d691-8335-4db2-999b-d7ede3f060c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be151a6b-27ca-4120-a608-4981c84a7383",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080984f0-76e1-4b10-9701-145e03120eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f38965-8a65-485b-8f81-9a686079b01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52cc1eb6-2e60-4f37-860f-fbb114a3c12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e035002-ad90-4216-882d-8c7c8e1fe084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575accc7-cb0f-476a-8cce-52bb5d8ffad2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642bd28b-7991-49d4-8025-b2bd99f4b740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084fdc58-ebfc-4f2a-a390-a618d9759cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5c52c5-a753-488f-8289-eb76cff3bc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de805d0f-6f01-4e34-8a87-d302b34d1ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d3c3b7-ec46-4a58-8453-1c225772179d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6971f3-c1d3-4cd3-9060-2d12fd1cde99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420e68c7-6707-43c2-a50d-94f0cefc025a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f38d6b6-735a-47ab-9a6f-200da50e69b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0becbcc6-5c36-4ed5-9e22-2972d2d6fa05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42bf353-fe2a-49d6-8ec3-49aa5c67ae2f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b057a368-c493-4b18-adf2-54434d1a027f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249953b7-b259-4221-bf01-fe69c9ec573d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a05c3cc-a539-452d-9aed-086ae9948173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4e91c9e0-7ddc-415c-b83f-5cfc09545f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0bae79-78a2-42f8-a1c3-222b6409ee66",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41564c56-fa80-4529-80f2-9f4b34dd4ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a9a6bc2-81e1-4028-b6f0-9fde58a437ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7646843e-ebd2-4aaa-8719-9a7f70420f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb660f1b-5d91-4892-85d4-176e2a1bc4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fd010e-5e90-43bd-b88e-ca5d39d47b54",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02a8fa8-c4d9-44fe-8daf-a0a5f131d881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af10215-88e9-488a-8820-94a7751b8146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d49b499-91df-4fad-8f18-67c3e8246d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38b1fd57-25e2-46e4-93b4-7fd5420c90b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b613261-4d1e-441a-bf67-c2574efbe9a4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab11542-c144-4bb8-b101-02714122f6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172269f4-888e-4d82-856c-e4616b44f62c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da8cd04-ac14-4ae0-bd6c-ed20cd7edcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1508a9-e466-43f2-a985-4bee6b707ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215b981b-bec4-4fce-a27b-c7a15c8f1c01",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7010ff8-bfdb-4ebc-a129-71b8979352e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25927452-0a51-49a5-8188-c6ca06bc1539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dad8a4-ecdd-4d81-84a1-0d25786229f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8c0772-3994-4f3f-b87f-49fd86ba0bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea2d233-8268-405b-a0b8-408abe84664d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd6dcca-71a9-4e75-ada5-7b5a11c3d27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a76b5f-2aaf-42a2-ad37-773fe93b7276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8398b30-91cd-4962-bc80-1df099f9e017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "41646c93-40b2-4905-b3bb-445a831e7a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c002da03-a2aa-46ba-a630-12cc183f6720",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666727b8-5f0f-48c5-b005-f3026c7d545d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080303c0-e275-4322-a1b0-d8ebcc32ae4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1beb42ce-2a22-4d87-bc5b-b001709163e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f03c06d-1a51-4a0c-9dcd-efed2f5c14ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89974c5-2571-4370-911a-4eed2c726645",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c935e0-eb56-44f1-9918-b4159cdea347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075d8762-f790-4fd6-af78-c50799d9bc36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5b7194-a5eb-446b-bc8e-71de97490acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cac5846a-64b6-4240-b818-40d76bf9f304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8584bc-d25e-4249-9675-c0f20c6db484",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb68753a-818c-4fbf-86ac-006b83b7a38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f0e7a9-846a-4b97-bc3d-cc63a46cde3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d7b635-2bbd-4207-90b9-cd99ea76c741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28523b3b-ef4c-48a2-ac70-ea1871c71469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6d3b86-f879-418c-a456-25f9fce1c9b8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85e20d5-b4f5-4797-ab93-6a7a723c1cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67e4981-0e13-4f06-8c13-6ebdac02a924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68127983-25ba-46b6-9f81-bf57f824b3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7db9a7d-e176-4388-8da8-407fb1020c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c88773f-54b5-4546-a718-4a2c59998dbe",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d843202e-7be4-4e7a-9c4a-83fbfc3e1bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d52a91-a993-48f8-a49b-7eb714ced358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080e31b7-54f4-47dc-a29f-973bdfaaad00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15261d20-e7fc-4a77-9454-f7a118f071ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94846953-8d2f-442c-be1a-3e3d3e25b318",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f0a6b9-55ff-44d6-8952-640af07b6a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f8c036-8556-49c3-8118-f89dc6dcc743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e73c70-4fff-41d7-a0c8-1e88a4aad3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ddf949-d508-4f39-be74-50feb38264ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26d96a6-2659-4fb9-94f0-dd867f3497d7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4282c9b6-b9ed-4e59-8006-914c5e48cc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37da00f2-15c3-4819-b070-4e180ab3055f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4cc7f8-b66e-4260-8aa1-f18eab861079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e31f21e-3c1b-4dcc-8397-f491e9e63034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bbbebb-3fda-4cba-b06f-54e9d69b7809",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e6864c-b112-4f52-a3cb-e98d91df6b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1bedcc-c2be-41cc-baea-ff6e1e98dde4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7277109-8eed-4c97-921a-189d4a6c68b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d20d8b3-6d90-4221-9b7c-e3a108f942d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5554b5-8e92-4a57-81ad-271e9f6a874f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0040fc-2215-48ee-97b0-b37fb3db8fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026dc487-6cfc-4b0b-85c0-0841f074a134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2b14d2-9ce9-4556-8f80-cff305c7f988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff08831-3416-464f-a6e9-84eb70dedd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acccb0b-da3e-43d5-9588-c653db4fac72",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6413418e-120f-463d-a407-81447ac6b6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "342cef08-2db6-41b1-aed6-a51fe4d12a2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95548f6a-03a4-44b7-acd6-e228463f6755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba474cc-deaa-40ea-b76a-ee57d1aab417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c80ab47-c2f8-49b2-8f3a-ad96ed88cee6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8f0fd0-2334-4395-9797-e19d027ec649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01108cd-897a-4e29-9926-55832e4a3d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edd1cb3-45ea-4100-87a2-d456dc00e742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd5668fb-15db-41ab-b698-1c24ecec40b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a93052f-46ac-49b0-b690-49563543eaea",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07860247-6139-465e-b70e-198b907180a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c0d801-4579-4275-9f92-12be05410a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6863ae90-42a2-46bb-abf6-0f540feb6f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9df88e9d-9a25-47b1-ad9a-8358689b6664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f441f5eb-a21a-47e0-8d16-d3dec5ea1d6e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0a1b3d-a7c0-4e7e-b846-1b4fe811690d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68db71f1-05a5-4fdd-a99b-6dc83e00908f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1f1935-923d-48ac-b6b2-5993e1b2b295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b13483f-d290-4481-b305-2697af2ad38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e63c234-23a1-4333-b061-9721d05d2133",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2040901-2ef8-4c30-90ca-8f6b829b5ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1364d8b-d811-49a3-8a8e-69b05ccd7629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc537c67-081a-48b8-9098-4969730facef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f3ef8f-188b-41d9-9b5a-741bd0739053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b23720-e336-4605-ad4b-e5c26e5bf1c0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954d072c-e709-4d35-bccd-b1d317ff7059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9280e8ba-60a2-4d77-ba45-2f451f383388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2897371c-a4ec-425e-a668-72ed4582bd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30307f7f-a26a-4d84-a22c-e0be3facc864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1daf10a7-4c68-4a98-b37d-05309fc7906c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550c8ad7-bebe-463d-b47b-294d3fc39228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4b9b77-a3e7-4805-ba24-6788b33c9d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd8f0cc-0d35-4ef5-b45e-4bb9de38f7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb1aa7f-dfb8-4490-a03c-6767b4bf4458"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "73b582a6-b4a1-4d57-a498-4119a0829e64",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "68be406e-baf3-4615-a72b-cd5107db8340",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0837d6e3-3846-4470-9cec-514bf3d10f56",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "253f1f3e-3559-4a58-bed2-09c1c1ff735f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc6debc-0393-4124-9f2e-290974d52064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "672fca67-1870-4029-a7f8-bab48283fb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34e8594-07f6-49dc-ba2c-f38ed5b1c111",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9055e6a5-7744-44c5-95f8-75a15582ca92",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "70160cc2-a655-4317-8334-7b501d07bbae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43669aed-2cc0-4cfc-8a4f-5f3f0a25ec89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9433d058-1e4a-4461-99f5-994b3313fd7d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74a7de68-6a40-42c5-934a-93a3b292fc9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6cf1278-005f-4931-81b7-12ee01bf2223"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4a6460e-f435-4839-a130-fe3232844406",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57a1281e-7078-416d-9eb6-a54765ba0b4e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1932a50c-54ba-4ce5-8692-89f88ff12be0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2f85d761-91fd-44a7-b8b3-64f034f10cf6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26708dca-12b3-4d74-aee5-b6ba3c5a29e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "842e77db-a89b-4b23-90c4-c7f949d8852c"
            }
          }
        ]
      },
      {
        "id": "eaacfd20-6527-4604-a815-06a3ca2f400b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "69331e1d-d216-4910-9c04-a19c2be03ca9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3298692-e102-4638-8d0c-198b22cae465",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3f8c6348-c3e5-4b25-a152-e3ccd530ec00",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7b1579-c2f0-4294-ba58-5974d9f0fdf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db123153-0f2f-4f77-9695-2a3b2952e3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780a998c-ae29-45b9-bcc7-35aac9d81004",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f2955d-ce95-41e0-9811-7f58faa58350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af75906d-bd9f-4059-a669-ad5d95af3094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07cc7dd-5a47-4290-ba79-ab1e9fb8a5ad",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf222b1-283f-4d2b-8278-1610be6ecf2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca240d2-b14e-4346-bb0d-946a53db232a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da13e10b-45d6-489c-93a9-38d3cf57eef5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a4efa6-b042-4e09-9f50-6c526f01df72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e75cf0e-6615-4cfc-a8c0-22d714884c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde5a7cd-4c06-4f3c-aa5e-6a65a9b465fc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e93982-5620-4729-8a00-d62967823673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273eea8b-6849-42c5-86da-9a8b9f57d232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3477653f-a313-411a-867f-f8f81bc974de",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caac94ae-191d-48ae-a670-e35d907c70e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8cab64-c4bd-4998-bf85-1969de20f655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139889bc-92be-4172-af95-8bf080a92e1d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91391546-7548-47c8-a39d-665b35f14fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784c2d06-4f0a-4ee5-ba03-d6b52abde437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c24e4a7-a740-4182-9228-de8ac8bc369a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6d7c84-01ba-45d0-b845-230254aae72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c1c765-607d-494e-bad5-36e8f9b542b8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ffbb47-fc69-403a-9d62-b3027c523ba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c396a27a-0e36-4d00-9674-ff599ff412c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daba0efc-9944-4657-bb5c-ee463eeec26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef11d1b4-f1f6-4be1-8a21-b6d28e8a41b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9ee63f-46c7-46f3-b11d-2324b97456da",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8890d5a-c943-470e-bea9-f688e68fc941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b68361c2-9f3f-4432-aa25-e0549d6ab314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6fcc3c-4e38-44b0-830c-565af097fb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82084fb-5212-45f8-8e49-c72c642f69e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05bb3a0-0000-40d8-93d6-47e49de30391",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895f2d02-aaab-4386-8577-bc58ca857490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74f7ab8a-3c42-4c04-942c-fa12f4ea1ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e27388-c73d-4ecb-aa19-3b1be87a741b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0149a6-7cca-4d17-93a6-bcb8b64ba13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc688632-192e-455e-a06f-a3f1aa1d849f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4a360e-19e0-429b-a643-e293e649633a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7567494-8e2e-41bc-aaa1-d57682956bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "951097e5-e057-439d-9b1f-51ff20f4c324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08a325b-c8fa-4b49-81e2-660beb5b2b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8a95ea-3dbd-4586-9833-5412fddabda0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146f6dc0-4d73-4950-bb54-8237ffce672b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b489b6-eae2-4d5b-aed9-6a12e674d24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7824e3fd-29a5-4cd9-8669-f6159838c37d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3111eaf8-f45a-4ca3-8586-e70a63b5325b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f69b940-8724-43c2-82ec-a7313b4470db",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b07738-0ece-4f9a-ae60-5408eef2bdb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80fb7af4-31a0-4db7-a61f-15e498040047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "618b6599-75b1-4566-a58f-c972df610498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b572f69-045a-45a2-9965-adc432a73734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6deac18a-340c-4079-af79-c5163ba31e30",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f986dc99-0d30-46d0-98b5-eb3ab795128c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca718b99-fd99-4929-8848-89fe9e6d4f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd05cbb7-ea8a-4fdb-92dd-21bbbcd06902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee1f7c2-3dc2-4d4b-a9c6-bd78bc4d1d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c7c4f7-b4d6-4f3f-b363-3ac723d1cc94",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1414d8c-97bf-4f33-bf74-b774f06f7f1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c96b2217-45f4-4a36-82c3-a882ff6a9652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aad3075-80b7-4d2f-b9f0-5659e3850187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb42b67-bedc-455c-84be-bc1f30340ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49e844d-5cd9-429a-ab66-b7c14e4cf4a9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156a4264-1f21-4877-984c-9a94f55bf21b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41acf391-afea-4ea7-b52a-7173cf8f416c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a730c9c-03a8-4a29-83e2-d83b26f77cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "585b7490-2d16-4f35-b753-bff60d19a947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc06deb-8841-4292-bd7d-f40f5619e0bd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ce28b9-7517-44b0-847b-f163bb337e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b942941-aa9e-402a-bfbc-ca02a6b8d02b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34151491-36ce-46e1-b4db-d538f51783ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06751b4f-4715-4b8f-9c2c-1970bbc2d209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aec0fff-453a-4b32-bc9a-a6a6c81cda9f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677dc9ec-fc51-4ca0-ad5e-b47b3129982e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b00688f-1b3f-4f85-b207-7c6c8116d26f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32355ef-4764-4f56-b1f0-070612052113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3b13af-0501-4a69-aecd-b7943c396ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19dbbcd-718b-467a-b983-73d1a9cad206",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b518968-e864-4166-9792-5272941b976c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbc630e-1574-4722-9c45-cfdde15ad9e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61341b7-b0d1-48c7-a32b-b257fb5ef258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6bdf41-634e-45b2-a560-797961fe145c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebeaf4d-ecfb-4d18-aad6-661ef57fcc64",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3858d05-4472-4736-b58a-d4067e9fd870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd8e5eb-47b1-41e4-a604-31850af2b603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9832d3a3-8563-4dc2-bfe2-3fc711048e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbcbc09-ff0f-485e-8a43-0e859a43e1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdcf5df5-1c3f-43cb-aa7f-776926e0e429",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cd1025-7460-49cf-89fd-398187f15f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37fc4123-3d08-4ad6-8f50-bd10b9dbc7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca687599-3380-40ca-9acb-b9a6a3a0f5b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be2641ef-041b-4089-8625-fb562cbaa091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd579b6-e980-484c-8241-596defe4dd04",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d98495-900e-4aae-8fdd-66fd9e44cf93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ac49ad-2d46-4d63-93bb-fdefae52ef4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b56fab5-3b4e-4125-a0e9-a6c03af03e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "507c304f-8f01-4939-8f97-cf68900c1a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9b6713-5265-4ef7-81ee-acb26ed94701",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231918f7-9f5f-4789-a276-7371102d23b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2d3361-48bc-4721-942c-ca5c4bdc2e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1eae1b-4a8e-427e-8212-94138ecbca1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785ece0a-3ebb-4912-aad2-514e34de9f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c372f93-776d-420f-9d2e-f05af8aad9f1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8482e439-eabe-4808-9b98-b949db0a9f59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13d7960f-462d-42bc-83c0-51911a28a357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986b9bed-f188-459d-b1f4-797b8f413b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7b1144-6014-4e20-a1ea-595e23c5ca3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992da25d-e8b9-42ba-98c5-bf4b742833d1",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54cc15a-6221-4254-9e87-fe6c897a8c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "278f94ca-e366-418a-8365-623ae2f4bdfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bf515f-05a0-40dc-85f7-56f683a2d173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b5ef84-6d5b-48fd-b777-640818c7e315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d303f107-ae50-4165-b650-42bcd7d23ad1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372fa5d9-71f0-48d6-bac0-f462e2f0875d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "500d154b-4caa-4431-8661-9a02d7af5751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfcf2ca-7ef9-49e2-a3f5-7bd8c3046ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e6be5d-5cfc-434e-9fea-ed00cc59468a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367fdb3f-5333-4c5a-a37d-5cb658bcc7ab",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34846a65-3311-4871-ad03-858c1d720762",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63ba38ad-c82a-4a6f-82a3-e6bbf89d82f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca64325c-6ddc-43ad-bfb6-74c7e65156e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc14eacf-2a36-458e-9981-9fdf3385ffb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfdb0d7-44c6-4373-a3ae-9d5692aa6a47",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec0fcb5-64d2-450e-a281-ca2ed07bfe13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c3fbafd-ec2e-49d5-97eb-56e7146d1c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5981059c-7269-432a-9a1a-fe12fabb31d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac83b8d-743f-4880-974f-137df249831a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32cdbc2-b857-4b4c-a249-71ed48b6d743",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358c3714-3865-4265-be9d-b9279375e229",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36b29633-4e65-4de9-8066-3d7cdc202ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "616c5c41-601f-475d-875b-34673a2d1a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d005c364-b942-47b5-9fa8-9836c39b2ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90006fe7-27a8-43f8-af68-b80e25b1350f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dcc9df-2df1-47d3-a166-048c017fc1ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eb79664-fc73-4797-b42d-c64fff436dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78f7625-3362-468b-b3e5-629965bc014f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bddae032-e485-4848-88b7-08e304d04682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04652412-4506-4d86-9e5a-c4322f0f980e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21e7f51-5dc4-4807-b1ff-48e8fe6292a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a013ef9f-afa4-4a12-9b70-61cbfed02aa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "049e25bc-1ea9-4d80-afdf-eb22d7806544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f9216b-1d45-4ad4-9c23-2ae4dca75833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934895a5-ead3-4c0d-8ba8-8193bab76868",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69345a0e-016e-477b-8352-c26e4406c60a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b14a1bb4-f5f2-43ee-aa26-413a8e78671f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10d0972-e982-4a9a-af4b-70a16fd74f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "578de0a6-7fa7-4276-9930-c68735624966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e783a4c-5ab5-40c4-8831-26e12f8ded2c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2a3f47-a99d-4d06-9531-de20f15af37c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a5d695-b2b7-4e60-9226-b689f1541fb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db5c9dc-f6b9-40a9-84e4-25e9a8328982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd41586-6f58-4663-8aad-da3d26574d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3035514c-808b-40a3-840a-07f0ae9ab35c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e3a1a9-4876-4a0a-bf71-47cbbf5894a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d53b1815-53ad-4d44-9f55-14697e96f11e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb49ab8b-5cd5-4409-b22b-2d8d1966552f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90940b9b-2926-4484-aad1-c775765bf377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b722652b-465c-492b-a297-6dca7992958c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2466e4-60da-4f51-842e-cec6c66b0675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f61dacc-072b-440f-8e2b-6cb96e0a4944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9056e90b-6802-4d1d-accc-4b2065e7e1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4de22a-3377-43d4-8a42-48d089b21493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deed23ff-2fe4-4c1f-b679-529bda435541",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbeadaf-b674-481b-bee1-0c7fc90231a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f7b581-7a63-4fb1-9486-0122be69a177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a0c910-03dd-4c08-8d75-cff441620478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c53040e-58c4-46fa-bdbe-5936593b9385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efdfdc12-eb73-4f1f-9de0-fbae69ef946a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a146d131-9fbc-48e4-9848-3c202a233a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f91a4a-8674-4014-b001-7e26cf4350be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb76fb9f-0a90-4ab3-b6cc-88c785ebdaa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41e6e8a-b352-4586-a8a0-8f8e7615fd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c03da60-edd9-4f23-bca9-989d47580759",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfa1816-b970-468b-b6a4-246bad8a5724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d54fa6b-11cb-4992-adb8-3bec8a3e8515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab7ed57-c9d9-4d15-b806-d398c1e21383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a2be6b9-3da2-4766-9405-4e8c4cef7086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741d0489-3f56-458f-90d6-ecf474e146d0",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d6b77c-63e1-4756-9efa-d37c85b41417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4324de8f-a669-47c1-800e-64ab69869523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d3ab9e-8dc6-4688-893c-62938211e762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e403bde0-cb6d-45d4-b4cd-a4332892a2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1041fc-c6cc-4bcb-928c-aa371ca29f79",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c9917a-8d16-4f33-afe0-d0711c2282db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff36752-7673-4093-909c-54ec9bd2e823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0a001c-e9a8-4221-960c-2c19fbc2aa0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6137ff0-85bc-4a3a-b399-9759c52bb6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2678147-d675-4879-b40b-dac61ef8d739",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffa93e3-6a48-4d92-81f3-5c599e329d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3eec840-3e4f-490d-bed5-240460afaf2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ab374d-eb5b-4a13-a911-689dd6d62aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d24149b-ba31-4390-9f1e-7717490f535f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fb416c-f187-4e53-88b9-5897fd5cb38e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825a6f6f-f305-41f2-b677-081bd63b8594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5278f77e-7ed3-4309-98fb-66be20885020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43eebba-f69d-4669-a4be-b46176e63541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394b6607-ff59-4767-82b8-a4f285c840c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d1ba83-3277-4cee-b880-4518c426e5fe",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df20cfde-7d66-404e-972a-a667bee2e180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b878501-8d60-4b95-8584-45bc9de6619b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d774c2b-1f97-4db9-b0dc-5046854cf00b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d52261-be1c-48c2-a2e2-375091ee1e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cb6929-e780-4942-9fda-a8baa7143fe8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65b9211-9f44-4a22-a445-2a74823138a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab4b10e-4afe-4a88-97c2-47859d39249a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c623c28-73e8-4815-b8c7-a84b7c903936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a0af1b-8be2-4957-96f2-5e25125d4b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a4bc97-bc99-4a89-b160-b62eee25ce6d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8049631-e971-4ce1-b2f4-780969791e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f83d117-09e2-48d1-a38d-5a3fa8b41dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b2a1b0-f3bc-4e47-bafb-88cd5855528d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9b07d0-6ff6-444f-8ef3-85ba69185122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7704b25f-eabe-4482-be39-61cd06a6af3d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29eb4d80-fd8d-4104-aac0-ccf69acffe13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21d6905-632b-43be-87cb-9327a876170b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6ca7e2-580c-4500-b573-7bd4143fcfcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96c7cfd7-e02c-4d88-82b2-7b093fb53865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b933042-544d-4367-b7cf-aa6f43bad34b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8cf15a-60dd-4ecb-a697-feacd0252fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba87fb47-36c2-40e0-9b62-68644c9b397d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa7f1a4-5e1f-40fd-9e21-db51f58e1a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1472d3-f5b4-4275-8561-8f66f00c53cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95a541c-852f-4454-9236-f7b44b6a49aa",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bad1512-c858-4b8f-be85-ec7d546db3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf8ea2a-e2a3-4a3e-afba-b0978a55a453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dd31e4-a360-44a9-9de3-e7ed2e3c4999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f973c38-e4f3-4e0f-bdf3-8a067f448095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d95acd7-8ae6-47c1-a7ce-7a7eecb450fc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd918c1-62ac-4351-9482-56e452ec4cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59d085a-f37c-40e2-b92d-bcf94f104222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1745c5-fa8a-4755-a192-711cc712647e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3665897d-da47-4e43-877c-1692c435cfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1396aa1c-0ffa-4033-9189-c383256ee4d3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e84533-dffd-40fa-87c8-588ec49f100e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0967c2-4cf8-44a3-9b47-59593b2dfccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f9829f-153d-4303-a2b6-0f11446e2730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cdf36b1-a489-46f3-8432-30551f4ba5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a7f640-e8a8-4953-88b2-1ff54dd6a420",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3702df3-fc16-44b2-94e7-c33ba612883e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14616845-48e8-4cc0-a56e-83dd0b3e3618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c096d0a-b451-4e63-824b-4ed3d9b7f7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f414f548-d1eb-4622-b412-08d39f1cde2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128e52b0-ce4d-4799-ab9c-21667acf53c3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edb4c0e-e759-4554-90cf-e1e3d4c70fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c5f9a5-d841-4519-ad5a-af70521a3699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88916582-5afd-4b21-b45e-58b8128c843d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e924e5c-4738-428f-b9f9-dd08f1e594bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b173bd08-5f07-48a8-87ad-6a7828131108",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8646a543-cf9d-4204-a74b-0c9b7e267bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a586beed-687e-4b54-99e1-1308489e0b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a83a4a-3937-44f6-96e9-07bf1f8febfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74666d01-5585-4530-b211-3cf5fa88502b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4779e96-0180-4c17-91c5-608df509f39e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25352c9-e3ce-439f-8e87-c1376ada88cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b523c1-9772-4867-a72d-55f8444fd402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84dabe36-47f9-4c7e-aba1-a7c943c1210c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b580bfe-2ff2-418d-a00f-77b4d800b99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a295f921-9f92-4361-adab-2759cea7dfe5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346a1286-6b94-42f6-bd3a-5379b16aace6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a1d0a2-d125-4aaf-b022-63d9e5dee92b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "007950c9-ebc3-41a6-97dc-823f0f41e79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c777b66-a3d5-4531-ac74-a77122a5289d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88c457b-a72c-4681-a051-410bf58864ed",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c9abbd-1956-4b3e-b298-490fabcee97c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e9a24b-a921-4734-832d-7e959f13b2f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7e3f94-ca1b-44b6-abad-2892442f8f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a6506cc-a6a6-4433-8241-44fe8dfbee42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792a53b3-117d-4b0c-9426-0b811dc05b31",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e85a91-11dd-41ef-9857-1bb93278732b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16451886-3637-4b47-9fff-3069101e350a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea53f4f6-9291-478c-b8c9-df0bd57dc7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d76b5e6-c849-4e44-ac67-362997e98ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45705143-10d9-448c-afab-265b39544f7c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6609eb2-0353-440b-a4e1-c2e6ac842c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9dc56a9-5c0c-433b-b478-3975b9280302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6033b3d0-f287-4b45-88ce-b035499be05e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcedc4a1-22b7-402c-85e4-e51b1f84ffe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdf75a2-032a-4198-ae27-73361f6af9eb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b2f00a-377b-4f0b-b682-e0923f454d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd32a15-6fc9-423f-b4a7-b6568d49723d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f4b0da-2a48-44da-9803-cbb280dc085a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1612df2b-5455-4238-9ea1-4e48dbcc4d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7297430e-dd96-4628-ad21-d50e3bad8eb6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230d5746-5347-4bb6-9f22-45539d456ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40678b9-5e9a-4ad0-8a84-5ee5f52482e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f533ca-1f27-4093-b672-385702aa0c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74383e51-de38-4cd3-82b3-a624aca8bf58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2907bcc6-fb0a-4a49-a558-40a4c650bdb0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706bc85c-099a-4cce-9049-4b9a5eeda3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d39745-c604-45be-a47c-97c396117c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ba0dbc-fb64-499a-84e1-a6ac1c5e40eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6bf0e1-4651-406b-a38e-89957b2c6d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e07161-bd9f-43b8-a4f5-4ea0b26fcb40",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5336fe-6d9b-4de4-a93d-2dfdab2659af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4328fcc-87b9-4b1c-bb7b-caa45a237926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebfefb4-1f22-4de2-a739-fdf6f80a8c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00846e48-31c8-4e8e-8a1c-f564a22fc325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df1a12c-fe5d-499a-81d4-a0218dce309c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377664b3-cc1c-4a20-84c1-65d5f4ab06df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29c6329-da4e-4959-a113-b1baa3af0048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2afd9de-67eb-4403-b188-e1431e77adad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c148b3af-5e3c-4769-bf33-dcc0c57dabf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1020a03a-f6d3-4fcd-a4b8-31c26a9a54f5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c5ea25-b6e6-4eea-9f50-52fcd15cc294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe667a0-c5e2-4bd6-9578-0c85b0ec52ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ee0f66-4689-4333-b4bc-950dffc61cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb63f5c-b4b7-47cf-8179-52555a73f53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cd4e28-8061-42d1-bd9a-02246412d981",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9adb8225-0c42-469d-ace5-86196d62736d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eaa1147-9b31-4602-a46f-959a48cdd103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bdac80-60fc-4511-a9d9-a493e537c261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9026b71-6432-469e-95bf-098d6207614d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3572d8-b950-47dd-8f83-0a89a71b59ef",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8926c499-9a94-4dc3-ab60-1f43ea66f6c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddc782b4-37c8-42cc-9560-a8d8ff363ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b95bca9-49d0-4495-812e-f6c957d58880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0318a18a-6be4-4a82-b3d5-05e1513b28bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d0cf8a-df1e-4067-aec2-d098eed633c2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f637ad7-a711-4fe1-a6ce-b1e3d692a1a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f644e2c-810d-4565-afee-32e612001776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd570e53-0410-4600-95af-cda60dee958f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664997fa-978a-4ea5-82fb-8b6148a9df3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fd3907-38a4-4a32-8d5d-f84429e1dafc",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd544d7d-ed88-4955-9bdd-0415ad000eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7cb2f59-f8c3-413c-9e60-180e3c63ab48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b55179-cd1f-4bb6-9a58-230e12d80fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb75da21-4ad0-4408-8ea3-1c54126a171c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a852e4-9c62-40b9-9919-f976634a4ff0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df40287-56e2-485e-92dc-3cccbcb83c08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8fd4a63-a084-4341-a098-e683005431b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb4f67c-1422-4bdb-932c-f4a68b252673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f813ee87-581c-4ff1-a61e-caad810a721c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e24ffda-f873-4069-94b2-1815060383cb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09ea60c-898c-47d4-af8a-11169c1e0bc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28c4d78d-c693-40ca-8000-34886d4cd3aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77546ac-5531-42c3-862e-5d789fef45bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d60ed86-cbab-43d1-8ff3-e85f88f5b16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23131ee1-2a4b-4286-9408-cf8402c4ce88",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86057436-73ce-48d8-a51c-e822a00f245e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f542c9d-f30d-426c-afab-700784848a4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1359d0bc-bfbd-45f0-a22a-1d2510206d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2174cbc1-1853-41d4-bfa4-7938d63d4a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e609ecc7-2e11-4dcb-ac2b-d21798a23304",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908f97b9-cbfd-49eb-93d5-28352bcb73d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af9c2e1d-d72b-4fc4-b909-e748591774e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26054fe4-1e7d-4eca-8cba-6087233f5414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d864853-b22b-431b-8ff3-5756909623b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c11ae53-edbf-48e3-81f4-ece99dfa1460",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6953192d-df57-41e8-ae4e-46bbecc72071",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78cba913-710d-4264-a325-14f8a47cda10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f945d1-6508-4fae-a409-b97ca0af2c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb7321b-3fb2-42ae-a519-bb9e0d6a44e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49129b9b-864f-411b-b556-a398ba579068",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d857cf-036e-4239-9dd6-85b56ff0fd5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a964c2c-e276-42a3-91fc-81fec71ed0ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26e5544-be12-4d9e-bcc9-aa521e50a17b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3360817d-ef01-486b-afcb-71f53bcd65b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be043f7-e111-4d62-8a9e-20d93ca3894a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ad81e9-d3ab-457e-bbce-217053ff67a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceb55d54-c090-4cb8-b99d-db7976670c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2561ad-a2b4-44ca-9d2d-d2cfd6855520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb031e9d-a4df-4216-b497-32d9122ad8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edb6f2c-b365-42ac-a179-f7196e3109d9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce40d10-b6f4-4c6e-aa06-e887e2eedb82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "408d8c97-7646-401c-b3cf-c47e01599f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "307495f9-6b6d-4574-91e5-7de13e09233d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f985e631-2ac3-445d-8fd0-627fedce8108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c124173b-4592-416d-8e44-09ba43f9bc7c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa46664-1d6b-4291-8d4f-06f22c66c9d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4cff297-5ab3-483f-9850-d83500d9d74c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1d0bcf-ed96-4126-98ff-133372e413b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa98ab74-18e4-4169-a4ff-1770becaa500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1958d33-777e-4618-9db9-b219b7baf3b6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4207c1a6-a67a-4bfc-81b6-6dd96c550ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f514e31-b944-46f5-9762-977b61f2ac6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f86f142-fe94-40f1-a49e-712434574d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e97f5c3-f3e6-4391-88da-97952de8ac5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d117cc-cd12-4091-be6d-05d352ee2a14",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfcba9b-4e40-4ab1-9903-bc55f749dd6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06b415fd-2e89-4b2e-bc9b-4549c2dbd9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054d1daa-7fc0-40c1-a2ac-3a5435c05939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e41cfaf-dcf7-4df0-8380-659c657214a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1927e3e2-f309-4f51-9194-7349f867f738",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf09b93-677b-4b55-90ef-881e16b02ca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4036871b-73ef-4d52-be8d-b69a6eeb8f77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4640d877-c6f3-42da-941a-36920f025e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a6028d-7993-4944-bb1d-8784c05aa154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bd2bc4-bbca-4d0d-b38c-4cee635d5eff",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba95988f-cd2a-4d40-a39a-05e60308a719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d81bc624-5d8b-4bab-98f0-7149e3739a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf45ca6-0c1b-49cb-b3d2-4c0fffa73010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9142182-171a-4a74-b0b1-2e593056a0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7482a1-2f28-4afb-8576-08540e052349",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fd0fb9-3647-42bf-aa64-b697df6d66ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f681639-55c2-4971-8a70-2d5d29035964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3813fae8-8337-4948-aa7d-b18677d6404e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f82f64d-7e2c-4d98-a606-56afb98aac0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45ba4a0-9fa8-4af6-b98a-20c55655d35b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1942c7-238e-438f-8536-267d98949b31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0f21eda-d973-4432-98c9-8f240f696457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1387b2be-ab5b-435f-b7a0-72520fcf92d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7eb077-6e86-49ed-8ed5-736bde7e6374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaed9ea0-8b20-4beb-85cf-ba0c9a9fa4aa",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405a0533-0fe5-4717-970b-2b64a89b48b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e69eb07-bd4d-4b06-aa0c-cde2f74bdb80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89cd7b2-7a9e-4b24-94a8-b5b5ce16b98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce36be2-45df-46d0-8f8a-d650e76eb5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b661fa-59ab-42df-9b97-323eff4981e0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bca4d8-0662-4f51-b76a-1b97d04000df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "686931c2-43ad-41be-a02e-43b65f53fe10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4c3d11-ed5c-42ea-b30c-85e6824fb3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0369ee3d-8bc2-4af7-895d-6102f702aa4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941890fb-e20d-44b7-9f3f-700416c0b31c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ec2534-ac94-4cf9-bdf0-e5abaaa7f959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "081fe48f-a139-429b-98df-3e646da9fc12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c4745a-9441-4f57-8299-1314029b86f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4189fdce-a657-4a39-b5e4-72cbf1de02e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71674e6b-c16e-4877-adcf-6a7239dfaa2f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21d1528-803d-43d2-b882-71939f3b1d1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d854ad9-8340-469a-b048-265c1eb592b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb4bfda-55d3-4221-a10d-6bc413247717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54bd99e-9034-4fdc-9135-1dd473718673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aad6b64-cacf-407d-959a-4b80b136c290",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfdee46-2f14-4960-b383-94ff8fa36ae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb2c587f-89c4-45a1-ba10-ed92b96c840c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e6061b-d849-4188-a11b-ec9bdd168a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c32444-4b8b-40f3-bd50-624e36b5e35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8368be-df4a-434d-82a2-ce42e2e4c5f3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430582bc-2831-4226-999d-da9aae747f79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33e3a374-10b8-4810-82aa-f3097a9959d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8303f15-de0e-4146-842e-e48174f9962b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe487bd-efaa-484b-8754-e4dbe3a52354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebe52dc-d993-4441-9a6f-df1fc78873d2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac8eadf-92e4-44a5-bf24-e05de09a89b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b272391a-d590-4b1f-859f-6ccfc6ad2637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d025cc2-7c64-40bb-83bc-dbc0c01a187f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47ee64a-d693-4a34-b259-048e2feb6941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4291f115-3dc5-4bba-8786-c3ff27061303",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd4fcfe-88c8-4fcf-aee2-dde937a21454",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f993c558-4bde-40fd-ab19-8b32c37b57bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13144299-5cc6-4273-9394-3c1a21134397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57929634-502d-4115-a81c-5a42a79c6351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1da7e3b-dc95-45a0-9b18-06506ff3b656",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb66812-3e7f-488c-8d49-dce1bec3a373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23c28b3e-b050-456a-a698-13e409f3ad6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab22a59-7977-4f55-becf-eedf78c7122f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fbaf74-bb3c-4457-8956-1503cc7fe38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e107326e-b27d-47b9-a156-82aeeae2677d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fa6376-1b09-44ee-bedf-20c0e9bacb63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21b01623-070f-4795-9265-1ea7865ce24f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9a9931-b257-4ae7-92b3-d99f3cffe58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91256a76-ea2f-4ce4-bd13-1f5f1c2b553c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de41a3f8-2b91-4d87-92dd-d37160e7e1f8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2b87b6-50c8-431c-9224-b90343752738",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "871adb8c-5848-4547-bffb-bb6d30a828aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05551bfb-d8e1-4b74-968a-5eb3216944e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685b9c55-fb59-4e96-9d32-4c344a59c194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25588d5d-fa5f-4d9b-99c6-373a2382b85c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc66e2b-6de7-4b5f-9a86-456d8e36239d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c73b223-579a-43b1-be07-d31ddf511642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d3c6da-9bf3-403e-b43f-d41275d5a5b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69dcb319-226c-4ecf-9a3c-0969c3028d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7311b3a1-343f-4cf8-86a0-b8999c575bcc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6f177c-b5fc-45fd-889e-c413443a1016",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ded4e350-ae54-44bc-a399-a2c443e9d710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981d635b-f6dc-466d-a60c-af50ce2c798f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da494a4-db3f-45cb-b8fd-3165f00c58a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3d8e5c-65a9-4e7b-996c-d9449c84a4d1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7a1ee4-5511-4a7e-ad65-4e6aa5498037",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df1bd561-7442-4a19-b831-a45083ecf4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49f7125-593f-491d-b091-ab78fffe4c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e966e176-d635-46c9-8f83-53cdf8dd6436"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7547c803-6659-4a35-8a6f-20e5abc43465",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f183f73-f522-442d-a662-f735fad9196e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ba56f92-0774-4797-9e02-3c54eb254793",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f031627f-a601-4475-b33d-1a75ef59b308"
                    }
                  }
                ]
              },
              {
                "id": "0a89994f-e530-4f32-97db-b94122463e2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b9285a6-afa8-4fa3-8ba5-bb2eb7ef5d8d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24caeade-c5f2-424c-9610-5ea4d4783353",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "df795213-cf4f-4782-8926-c64552910674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f2c442-a3ec-4746-b910-047bffaac83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9dd5211-083c-4443-966a-02a2ca2af206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcbe946e-1bad-447f-b0e1-2bbdbd777215",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49a3713-c822-455e-8518-a2aa1ba846c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d20e2763-0145-42c3-b351-d51bdc91d864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b808f7ad-d95a-4bf9-aaa0-0dbb0acc20f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03426fb3-9634-487e-a617-d33c388ee51b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fec315bc-31a7-411f-ae0d-f16d45f33432",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec0ee6be-9357-4c55-ae69-c8e90d250bf6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9170959d-fd62-43e4-a7da-be1a2956e2d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aca496f1-af8a-4f10-8688-2fe3831e40ec"
                    }
                  }
                ]
              },
              {
                "id": "8f26cfae-b1e8-4671-936d-5267bc5a6a14",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f0baf4cf-478c-483a-a9d8-c12636e3f629",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49590ef5-7244-4ab9-bf97-5f51b965f081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6712ffa7-c0ac-455b-a00b-ba02a6e717ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2030d08-174e-4edd-8618-8996f3908242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ded2bc-ce3a-45ff-ba87-6e406f6f6d9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4bc48502-6039-4efb-9159-1753cc325210",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a1051f9-6fed-4a21-9a6f-1d731ae0f8f4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdf6c3d5-0488-4eab-977d-e336cbe7bc12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "89ca415b-07d6-4d97-aaa3-4c62df60b4d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7a602c5-af03-45ba-ae38-88ebec52f1d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24f12341-c103-407f-9898-5671980e4972"
                    }
                  }
                ]
              },
              {
                "id": "a7164f2d-f206-46bb-8d81-d1c962220517",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dac48648-48fe-4106-8b9a-82a80205a1f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e1f511c6-6723-4ec7-970e-eef8725f51ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3b6fca4-70a2-47e6-beb0-ab48b8b5998a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f597b40-ed30-4782-9aad-3ca79a16a6e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "938b8554-4fa5-4acf-b00a-d38cb615238b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f9d81f43-698a-4405-bf3e-bd313a629b73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a50351e8-6d39-4d54-a315-a4c54c335801",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91ea0cad-d065-42ca-9706-b6738bb35ceb"
            }
          }
        ]
      },
      {
        "id": "505dc8ee-a96a-4320-808f-ca0ac7de5fad",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3c8429af-0afe-4dbc-a91b-d0a45bf7af7a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07319ed1-70ec-497a-b342-9e95fdd901b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a2596bc5-1d4d-4756-a128-d0ac31c30fa1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1360eb3-9fd8-490a-805b-8fb146fc2e30",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "97d8da7b-823c-4909-b36c-8e37cbedf894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4987db-057a-44e3-8bc0-ba0c406ae2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2780c89-58b3-4ffc-b48d-4955f650f8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e665092-13e7-41ac-94b6-458c2d1b4a51",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ce6e6c-ad50-4e34-a225-24efa348dcc5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "333b70d4-052c-4f97-b14c-0699bdd84445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcbe0d5-f02b-48b1-92ca-72eb88d56c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7eb44105-eb12-480d-a007-ceb795f5b1f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebd8b19f-2261-4a2e-9fa9-ffb859d8e74c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1aa7500-d521-4407-97da-8eef627ce16a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2b6b1af-85a3-4a10-9be0-c348008c5d6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1ab6c7b-7cd1-4aa5-b717-1179b52cc56c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27f48e70-6617-48e0-9911-e2446437b9df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "082d83e7-c73f-41a6-abc0-60f0685e0820"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "efa23699-c266-44ad-aa35-d579736b7d52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a478d46-d30d-4a65-a0ee-a117a76161e4"
            }
          }
        ]
      },
      {
        "id": "2d4f6e34-3658-4e7b-a5d8-82b64baf2f78",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "345611d1-b141-4c7b-bf41-8471547146f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90c761ae-94e4-43cb-bd6e-2ac8fa95a72d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ddea61c-b6d5-4a1a-b347-7c6f6e311e80",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a65616-3071-4238-9a8c-61807a63aa4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d39607c1-33da-4e6c-9adc-e04f3e9cf04c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e03c5a-d517-4f8b-b49e-f14954abf711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b45f7526-713b-4b76-97df-82c8994734e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd52256-f71e-44d3-9b1d-05a385c8219a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edff249-5eb6-4cc8-a019-9c436afa1b6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "85062939-e081-4216-9fd0-a2e7177a7aa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ceba9f-00b4-4730-915f-99bac719b612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "290c29cc-51dc-41d3-ae7b-493ae35ac150"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55c3d27c-c99a-4b6a-b364-9fda15ca06cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dfec480-9ca0-42a4-a34f-8cf2015ae53f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "814d4abf-ac81-4122-a281-fe2b645abae4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e47d3df-d19f-48d2-8e7b-714489ac2cde"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4bdb6397-54f7-4808-adf4-5ccbbceac2dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5ece935f-2489-4bc5-aeb2-d58a12c26756"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c45979bc-5f25-41fd-ae5f-3c281bfb47c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0e7920a-fd45-42e0-b0e0-b135a389312c"
            }
          }
        ]
      },
      {
        "id": "112251fa-9fd3-41e1-bb18-0d3e36945843",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "89b26987-34c7-4dcc-84ad-d0eaa5f9ebbf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a474e2ff-893a-4c56-b52f-89b844f787dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c191cfa2-9cf8-4403-b251-0527e93a351a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24df4a0a-ec0f-406e-88ea-67fee6537fec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ece923f4-46f6-4e86-bd71-1b73039883a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4724416e-6ac2-48ba-8e2f-fd8adae24849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40a062e3-ecf0-4c73-8ee5-6066068389a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1533fbae-8d59-4b80-bd20-657331a3197a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136ed823-9fc4-44bf-a4fc-9f918ec0d73e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "040e5c12-002b-4d7b-b106-d21d7a39ffa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54c2ef8-4b8f-4e07-a90e-29d155f120cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf060eba-a921-47c9-91d5-a8a4d63b4985"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "754cffad-ac8c-41bf-ba70-4e35c088485d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8be708b0-6d96-4df9-90a9-2f55ab3c844c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2587eb1-7c3a-4233-9385-4033d008a96d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9c04a31-7337-4aaa-9d25-067cb2dc0656"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb381de0-a113-4e10-81ac-313b3f0ab626",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3c7932be-c876-4226-a621-ef3db70e088f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b27878b0-fd5c-4a51-aab4-ed25fc4dc1bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8afd6fab-06e7-48f2-b39d-aa35cbf339ac"
            }
          }
        ]
      },
      {
        "id": "e2bc5b57-1caa-4553-b9b6-28099b2e33f7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a69b6467-fccb-439c-b303-f194d2b74b82",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7d6075f-7a47-49ad-9e56-91bbb9a65497",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7897eb49-9cd8-488c-8318-5bc39a0eaee2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29ee9657-142d-4b35-b814-baae782c6f01",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db75054f-76a0-48fa-b299-5b1b13a1ea8c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 271.07307692307694,
      "responseMin": 10,
      "responseMax": 7388,
      "responseSd": 799.9237117749191,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683851772523,
      "completed": 1683851853565
    },
    "executions": [
      {
        "id": "1ce20775-f9aa-4974-bbb0-9ae316070728",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "718744c5-4b11-40b8-822b-d936966bf2ba",
          "httpRequestId": "70bcfa27-11d2-4146-a3ee-f90ef7c1a5f9"
        },
        "item": {
          "id": "1ce20775-f9aa-4974-bbb0-9ae316070728",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ebac6d81-81de-456d-93a5-417cae671e99",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "6ee65620-2228-4ed7-982b-c2e1f0f68141",
        "cursor": {
          "ref": "223b1658-e769-4ab3-8871-cd0cd0318bcb",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "33400599-bc64-42d2-a197-ac95aa9b78a6"
        },
        "item": {
          "id": "6ee65620-2228-4ed7-982b-c2e1f0f68141",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0edc9fca-53f2-42ab-ad5f-8d43b043c390",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "ab9d53d4-2018-4408-b75f-57cdb00a2112",
        "cursor": {
          "ref": "375cf3ce-1a58-4d7d-b390-a37f27115987",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "587e9182-421f-4d25-9ffb-b3be800f9f04"
        },
        "item": {
          "id": "ab9d53d4-2018-4408-b75f-57cdb00a2112",
          "name": "did_json"
        },
        "response": {
          "id": "ecf52500-4e74-4921-b0aa-758ae8eb17ee",
          "status": "OK",
          "code": 200,
          "responseTime": 420,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100a8df5-1860-424e-8da2-7c37bc47ffde",
        "cursor": {
          "ref": "360bdbb9-9176-40d2-b9d0-a43cd7220bbb",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cf5a4b1b-2952-4567-9d5f-552e05c4f731"
        },
        "item": {
          "id": "100a8df5-1860-424e-8da2-7c37bc47ffde",
          "name": "did:invalid"
        },
        "response": {
          "id": "90b76ca4-95a5-4fb1-9c1d-8852372bed7d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1143,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "100a8df5-1860-424e-8da2-7c37bc47ffde",
        "cursor": {
          "ref": "360bdbb9-9176-40d2-b9d0-a43cd7220bbb",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cf5a4b1b-2952-4567-9d5f-552e05c4f731"
        },
        "item": {
          "id": "100a8df5-1860-424e-8da2-7c37bc47ffde",
          "name": "did:invalid"
        },
        "response": {
          "id": "90b76ca4-95a5-4fb1-9c1d-8852372bed7d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1143,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "638559b8-e69a-4247-af62-7a33e6eaa1b9",
        "cursor": {
          "ref": "44c43c6c-262d-4aa4-94d2-a25527342ab1",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1227e6cb-3d1b-40b3-bfd8-95b66c2402e1"
        },
        "item": {
          "id": "638559b8-e69a-4247-af62-7a33e6eaa1b9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1f8ba29d-9544-4359-9079-4873773df4c3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258d3d85-73c9-4595-844f-b63d559be8a2",
        "cursor": {
          "ref": "523ef6a7-0da1-4eb3-9144-ab4c1812c4e4",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "205408cd-9607-494a-a70a-921b3a01e641"
        },
        "item": {
          "id": "258d3d85-73c9-4595-844f-b63d559be8a2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "93722517-4828-4632-afec-f1a1a0831fc8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b6de44-7a65-4bca-83d2-02c4a06b1da5",
        "cursor": {
          "ref": "04dcbead-87b5-4efd-9ffb-d15b341f63c3",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "579df5b6-049f-4128-a77d-2480b97d9567"
        },
        "item": {
          "id": "82b6de44-7a65-4bca-83d2-02c4a06b1da5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f36e4c50-1bd3-4bc1-a1af-19912db25c46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "8b8b6860-742d-4247-ac8d-81a7471a9cc1",
        "cursor": {
          "ref": "3d6b33a0-f189-49d8-8460-6a71c7d0fbb3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2fa88ee3-471f-47ac-849a-62ff07ea4f81"
        },
        "item": {
          "id": "8b8b6860-742d-4247-ac8d-81a7471a9cc1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "64f0b352-fcd8-426a-9ab4-d061039e12f2",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8b8b6860-742d-4247-ac8d-81a7471a9cc1",
        "cursor": {
          "ref": "3d6b33a0-f189-49d8-8460-6a71c7d0fbb3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2fa88ee3-471f-47ac-849a-62ff07ea4f81"
        },
        "item": {
          "id": "8b8b6860-742d-4247-ac8d-81a7471a9cc1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "64f0b352-fcd8-426a-9ab4-d061039e12f2",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "539ded5f-1ffd-4b21-b23e-95a1ded84c36",
        "cursor": {
          "ref": "48521da8-d502-4598-9f34-60d768cf9174",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7bbbd213-4981-4102-b6e3-242532441f66"
        },
        "item": {
          "id": "539ded5f-1ffd-4b21-b23e-95a1ded84c36",
          "name": "identifiers"
        },
        "response": {
          "id": "d689c341-e29c-4032-ab90-f2bbef7c1c0a",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea03367-cf40-4a6e-b0d6-d76366e7ab6e",
        "cursor": {
          "ref": "69776260-e927-4723-b331-5d8316dfcb2b",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "703177f4-1876-4f29-a2af-9e1cc43add68"
        },
        "item": {
          "id": "9ea03367-cf40-4a6e-b0d6-d76366e7ab6e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4571236c-6148-4c1e-9074-fc87948527be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea03367-cf40-4a6e-b0d6-d76366e7ab6e",
        "cursor": {
          "ref": "69776260-e927-4723-b331-5d8316dfcb2b",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "703177f4-1876-4f29-a2af-9e1cc43add68"
        },
        "item": {
          "id": "9ea03367-cf40-4a6e-b0d6-d76366e7ab6e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4571236c-6148-4c1e-9074-fc87948527be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822cd331-28bd-419f-8650-3d1391c7d8ab",
        "cursor": {
          "ref": "b54a6ac9-ff79-40a8-8591-977e5732cdbf",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f55304a6-014f-4025-bb99-6a69e353f950"
        },
        "item": {
          "id": "822cd331-28bd-419f-8650-3d1391c7d8ab",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9709fae5-7c42-4818-b4b4-fad4077d9048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfb8c3c-45ca-4e3a-a650-8d2271d28f4c",
        "cursor": {
          "ref": "d6c5b967-8a15-49fa-b80a-b8b58a8b6e27",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "57d58662-c68d-437e-8072-46905b93af39"
        },
        "item": {
          "id": "8dfb8c3c-45ca-4e3a-a650-8d2271d28f4c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "30a76a73-c877-49a9-8903-cb56da5539f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650ed47a-d654-4566-afa0-f67bb472a039",
        "cursor": {
          "ref": "9dbc57b0-e6d0-459e-9a25-d1a829f242ad",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7eab13cb-6850-4aea-a01e-6c0e305c0180"
        },
        "item": {
          "id": "650ed47a-d654-4566-afa0-f67bb472a039",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a6fc1281-b688-4f9b-a0a8-a3115dc83a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44c79fb-6926-4d78-8f8b-427b39117adf",
        "cursor": {
          "ref": "20e53f40-3d43-4c70-aef7-bdaddd29b476",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9f5602f0-a6cf-49d1-9831-4350682f6d05"
        },
        "item": {
          "id": "a44c79fb-6926-4d78-8f8b-427b39117adf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fc60bdac-13ea-4fa6-b420-4210b28ad30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f6979f-61c1-45ab-b723-0d4ccab99422",
        "cursor": {
          "ref": "5827d4dc-66f0-40f4-9b70-55eb85d5d505",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "603df7c7-e81e-4518-b776-c7c775d1f08f"
        },
        "item": {
          "id": "a9f6979f-61c1-45ab-b723-0d4ccab99422",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0b1f4ecb-686f-4e2b-995e-98b15e075edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb56b31-d214-4abc-8f6c-ce420682748c",
        "cursor": {
          "ref": "39390265-fcaf-4f89-b7b3-3b3cebba1a2b",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9f4d0842-dda9-4531-9299-f6da774fff6b"
        },
        "item": {
          "id": "0fb56b31-d214-4abc-8f6c-ce420682748c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9fd5b201-f60a-40e8-9bb1-cbfe3c52c417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813ded9f-4be4-41ee-a1b4-462e84234ae4",
        "cursor": {
          "ref": "24eb406e-7b94-4722-99f3-9f8fb8e8cba5",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bdd98473-5695-4d5f-8b7c-ade47d73966c"
        },
        "item": {
          "id": "813ded9f-4be4-41ee-a1b4-462e84234ae4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bc6f9640-8a16-4b98-a04c-8c1d0cb12857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7592302a-e57a-4c15-8762-b04d1679010a",
        "cursor": {
          "ref": "de007f2f-e2df-45e0-ba0d-c68a46657a3e",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6029ed7e-adf6-430e-b1a8-0def7080bf05"
        },
        "item": {
          "id": "7592302a-e57a-4c15-8762-b04d1679010a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3bf04915-db7c-43a5-9a07-81a274ac3943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec428f3b-a563-4535-96e7-c86ad58fd69e",
        "cursor": {
          "ref": "d8e88a06-950b-4c3c-b4f6-7ff07a668364",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a1719f38-09cf-42d2-ba18-5a0e03cbc22e"
        },
        "item": {
          "id": "ec428f3b-a563-4535-96e7-c86ad58fd69e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e8727351-5646-4d14-8dd7-5514d05e562b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa15d40b-41c8-4116-a250-b2352080c65b",
        "cursor": {
          "ref": "554e0852-aca9-4f0c-8aed-31aedf28fa9c",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ca587276-7358-4a57-8b76-5dbb30792b69"
        },
        "item": {
          "id": "fa15d40b-41c8-4116-a250-b2352080c65b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "da898b15-6cde-4a5e-9beb-bc5847906bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58612121-d319-4920-b321-f1820916de83",
        "cursor": {
          "ref": "bae5db97-9fd7-47b9-8699-c62f29c99a6e",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "962819f9-5de0-4fba-bde1-2fe63d99ce0e"
        },
        "item": {
          "id": "58612121-d319-4920-b321-f1820916de83",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "168444bf-a6b0-4d9e-8440-7165aca52918",
          "status": "Created",
          "code": 201,
          "responseTime": 772,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "c8b5fab4-3387-4326-9645-12bef4e65ba8",
        "cursor": {
          "ref": "9cbe36fd-9b67-409c-91d0-921bd773a851",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5f17eb2c-ab3c-47a2-a1e9-4e9b9d992ca0"
        },
        "item": {
          "id": "c8b5fab4-3387-4326-9645-12bef4e65ba8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8025e2d4-c96b-4f56-b249-a1c473809a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25594195-30fb-4eb1-acf8-cf5f228fad69",
        "cursor": {
          "ref": "5e51ad49-cb38-40ab-aa9d-853ff7c3f0ab",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a2e525c5-f4d5-4349-93ad-30d589a2f209"
        },
        "item": {
          "id": "25594195-30fb-4eb1-acf8-cf5f228fad69",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "de0895cd-9af2-4aad-8c59-59b3a7791e5c",
          "status": "Created",
          "code": 201,
          "responseTime": 7388,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "96d44bca-d3e2-47fa-8592-eb1159265b5f",
        "cursor": {
          "ref": "1defa9d2-ed71-484a-ab01-b82e7cff7e00",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "60421843-5df9-4305-bd74-819b527d285a"
        },
        "item": {
          "id": "96d44bca-d3e2-47fa-8592-eb1159265b5f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "81a01f0d-cd8b-4673-b71a-8fa3ab5b519c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95779a1c-2436-42e7-b9d4-39320df9bea6",
        "cursor": {
          "ref": "16b036ab-606c-4a37-8f27-626c76c89254",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1625f2a3-02de-4bc8-9d4d-fc58d4fae0ca"
        },
        "item": {
          "id": "95779a1c-2436-42e7-b9d4-39320df9bea6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "efd3d50d-4b06-47a6-bb95-def8280702e2",
          "status": "Created",
          "code": 201,
          "responseTime": 3994,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "43ff30f0-ba4a-4637-b35f-d65cef84835d",
        "cursor": {
          "ref": "35434cb5-dfbb-486e-928e-e591d657b682",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "992a94bf-4fee-429d-9453-3543e1105559"
        },
        "item": {
          "id": "43ff30f0-ba4a-4637-b35f-d65cef84835d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e524dd78-d7cc-4353-9e80-c1bf1806b58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83eab9a1-2b0f-4c1a-b6b6-83b96a93416a",
        "cursor": {
          "ref": "f18f1051-9207-4387-88a3-d84b692a6705",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6c3f9978-ae0e-448e-8a58-50563b8b0599"
        },
        "item": {
          "id": "83eab9a1-2b0f-4c1a-b6b6-83b96a93416a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cb97c2a9-5cd8-4842-9758-be464fd65df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae9460d-1adf-48bd-af7a-319d709eed59",
        "cursor": {
          "ref": "a6403b6a-b37d-45f7-bd1a-40acdfdee652",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d8cddd37-def7-4b1b-9aa3-bff8f06f12b6"
        },
        "item": {
          "id": "bae9460d-1adf-48bd-af7a-319d709eed59",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5c2fa4e9-4038-475d-817e-f1e13ef5daf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a8d3b0-800a-4efb-9e32-8f636d46685f",
        "cursor": {
          "ref": "c427e96d-00ff-4c49-87ad-ad43782242a7",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fc4f3065-3538-4e29-a956-c67a1f4257e8"
        },
        "item": {
          "id": "28a8d3b0-800a-4efb-9e32-8f636d46685f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "56651800-0497-456f-8b81-7ca67ffb76c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158cd2e5-a8a2-481f-b4a7-a0c587048570",
        "cursor": {
          "ref": "980954a9-57ad-469f-a5ec-2b8456289092",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "12f2ef4e-3fd0-4bea-9387-13168ea3b3dd"
        },
        "item": {
          "id": "158cd2e5-a8a2-481f-b4a7-a0c587048570",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "88c65a80-05ef-4afb-80f3-fdf356a3d165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3f1e04-98c4-47bf-a450-c742135ce336",
        "cursor": {
          "ref": "aeb7cf46-575f-4b8f-b6a0-37a4085b2498",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9ef7757e-3063-4caf-93db-44809b132cc8"
        },
        "item": {
          "id": "3d3f1e04-98c4-47bf-a450-c742135ce336",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "cc474987-9333-4a8c-b5c2-8c52fdeafdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112e0e7a-7046-4ea5-8626-5defa2e743fb",
        "cursor": {
          "ref": "d95fcaa2-0844-42a4-a156-d99e6fd993f4",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "59279a04-14e0-4e8a-8ab6-da935d3ff9f7"
        },
        "item": {
          "id": "112e0e7a-7046-4ea5-8626-5defa2e743fb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1b2293bb-82d2-4fda-87b8-ad9c9474f7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f311058-55c2-44b6-90ac-1879989456ff",
        "cursor": {
          "ref": "f0924705-8d4f-4b9e-8100-185ff6ba8dec",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a9e78f62-99d7-4d7d-98fc-1f86c590eefb"
        },
        "item": {
          "id": "7f311058-55c2-44b6-90ac-1879989456ff",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a9b2cb3f-22c5-477f-8474-d59d78f52d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118977b7-1a05-4de5-ba88-26f45294a260",
        "cursor": {
          "ref": "cbca9b52-fa71-4ba3-9d1d-fe6d2bbef196",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "950a512f-6543-4d14-a23d-222e1d93c628"
        },
        "item": {
          "id": "118977b7-1a05-4de5-ba88-26f45294a260",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "844dec06-11c1-4079-9a94-080b0e2586e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee38b23-a285-4fcd-bd2d-a7c1b250c7ad",
        "cursor": {
          "ref": "2fd5aee6-5704-401b-94f1-c5b2f3d07db2",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "827a56d3-8c6f-4818-8837-ef07781ba2f9"
        },
        "item": {
          "id": "3ee38b23-a285-4fcd-bd2d-a7c1b250c7ad",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ce44efab-3597-4a27-b473-88cfd1012226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06421c80-9d87-42b3-9f01-a13c5402b20a",
        "cursor": {
          "ref": "a30f5520-2f5d-491d-9a94-9502a4175560",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b4e04810-1d69-4a73-9ef6-4e718b912718"
        },
        "item": {
          "id": "06421c80-9d87-42b3-9f01-a13c5402b20a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0a883364-0544-4e7b-9d10-9b9aea420b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf5b5ca-6a6f-41fd-9c08-b0cbdd35ec54",
        "cursor": {
          "ref": "5c742923-d56f-4f54-b109-33186dad74f8",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ef13f6eb-2703-4a17-b3bf-bb18f8666c0a"
        },
        "item": {
          "id": "bcf5b5ca-6a6f-41fd-9c08-b0cbdd35ec54",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4461b3a7-05aa-42fb-a780-3e4e090f28bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd26ac8d-6681-45d3-b3f1-9ae518a382e7",
        "cursor": {
          "ref": "3eeba768-d98d-47d7-a318-df6250177a80",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1fba8a25-21c7-412a-9854-3ade18d75352"
        },
        "item": {
          "id": "bd26ac8d-6681-45d3-b3f1-9ae518a382e7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "45a1571e-5979-40f8-b51f-a62c0c5bd9d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511fbed3-ee8e-4ed4-a179-b341521b4092",
        "cursor": {
          "ref": "28982209-579b-4425-ab54-860c13731d50",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5a8f9557-ec84-40a0-a0c1-521baa9d55b3"
        },
        "item": {
          "id": "511fbed3-ee8e-4ed4-a179-b341521b4092",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "61bc0e6a-a715-4f45-9591-cd743ad538db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58347d4-d0ae-488c-a2ae-114ad4f75fe2",
        "cursor": {
          "ref": "a8a88d85-4358-4fe4-991f-34dcd74e5b80",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4f18aee5-86a4-4a66-90f3-c8ab69ba0929"
        },
        "item": {
          "id": "c58347d4-d0ae-488c-a2ae-114ad4f75fe2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6384a8de-ed3e-4352-bf7f-b4a0ee738896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85de002-7453-4bab-b2fc-e6a1af0a167a",
        "cursor": {
          "ref": "2630f79c-08ca-461d-94c0-7ad8fc4737eb",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "03a1ef1d-19cf-4894-acbc-d5c9c7cb5b11"
        },
        "item": {
          "id": "e85de002-7453-4bab-b2fc-e6a1af0a167a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b50c50c3-a971-4829-9536-47e79927e9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4a4342-adcd-4072-a84c-fbb079acc7a8",
        "cursor": {
          "ref": "2c7ea3ad-0653-4f1c-9a8f-1c5b76ec5157",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7d0b8bac-3e7a-41aa-9838-f42fe942cc25"
        },
        "item": {
          "id": "ea4a4342-adcd-4072-a84c-fbb079acc7a8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bcef2f2c-03fa-47af-91ae-89db1500331a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81840f1-9ee0-482a-ad47-7f36600a7399",
        "cursor": {
          "ref": "5506bd9e-7e44-45d8-b279-c6f4b367fc9e",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cb54604d-4d8f-4fc1-82a6-c6a708757137"
        },
        "item": {
          "id": "d81840f1-9ee0-482a-ad47-7f36600a7399",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "de1c64bd-cce9-47ca-8593-46612b304027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6600088-7c7e-44b4-ae6d-3c85fcff7582",
        "cursor": {
          "ref": "3868d006-c32d-49a0-9dfe-dd4ff71e17ed",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3784dc2e-9752-42ed-83ef-141971d5f267"
        },
        "item": {
          "id": "c6600088-7c7e-44b4-ae6d-3c85fcff7582",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7923f1ba-febd-4c4d-a2f7-64dd6f78d496",
          "status": "Created",
          "code": 201,
          "responseTime": 2701,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c8e2ada5-4167-49bc-9ae9-50d51c4160f0",
        "cursor": {
          "ref": "4a9686cf-3b71-4111-87c1-4d411aabb82a",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "eb1a6b72-b5f7-4577-a89f-685c5c1109d1"
        },
        "item": {
          "id": "c8e2ada5-4167-49bc-9ae9-50d51c4160f0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4af30840-c5e3-4159-80b9-5d3406df779b",
          "status": "Created",
          "code": 201,
          "responseTime": 2533,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e9ee5987-3a5f-4ed9-9695-1fe0417d257b",
        "cursor": {
          "ref": "8e15bde8-4846-4b41-8755-6c8727748055",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "595722c6-e1c0-4421-8ca8-d10f718addc7"
        },
        "item": {
          "id": "e9ee5987-3a5f-4ed9-9695-1fe0417d257b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e8975196-34ae-4f8d-bddb-543ab3fb9162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769b3903-93cb-41eb-9343-779b5f21f914",
        "cursor": {
          "ref": "cfdc2235-cd34-4eea-826f-829979eb728d",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "999dc47d-f3c5-40d5-b6d9-ea3fe8871b8e"
        },
        "item": {
          "id": "769b3903-93cb-41eb-9343-779b5f21f914",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1722eff3-b5bf-43da-b07a-3727e325b8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3872d471-b310-42f3-a3fc-c6b7ebf3c714",
        "cursor": {
          "ref": "8b4ee9e6-a22a-4369-bc53-a84177a989ea",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2504addf-4460-4060-bc8f-38e99f5b563d"
        },
        "item": {
          "id": "3872d471-b310-42f3-a3fc-c6b7ebf3c714",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "863bff98-bacd-4a05-bc87-e0251de0793c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea569371-4e38-4008-9086-d0c7c8c6da66",
        "cursor": {
          "ref": "b0db731d-28aa-4fb6-b9f1-2141684f5aaf",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b2b112f6-739c-4250-928d-87d1eded1868"
        },
        "item": {
          "id": "ea569371-4e38-4008-9086-d0c7c8c6da66",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bde049ea-46a3-463a-be3e-e89b756a104d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ca5ae2-62b3-4272-a175-40b6dd61863a",
        "cursor": {
          "ref": "528dc93d-ba27-4a35-8250-af3be2a9dfd9",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0c344d08-eaca-4c78-a5c8-f6265436c343"
        },
        "item": {
          "id": "33ca5ae2-62b3-4272-a175-40b6dd61863a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3523e9a4-d047-4d96-8993-c182b350468c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55b96e6-d93c-4467-8fe3-bec2b4674a8b",
        "cursor": {
          "ref": "bfe53e28-686a-4668-b854-069532691d60",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b4108717-853c-4fff-bcf4-d0e9d65a5bfd"
        },
        "item": {
          "id": "b55b96e6-d93c-4467-8fe3-bec2b4674a8b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9f48fef3-9d1d-4cd8-818f-da70b2baa875",
          "status": "Created",
          "code": 201,
          "responseTime": 2146,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "efda5be9-9462-45ca-bbbb-747d43c95b30",
        "cursor": {
          "ref": "6d0b6e6b-82cc-4096-90b6-462b14acdc82",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "67575cb3-96c0-4615-be85-21471d881a33"
        },
        "item": {
          "id": "efda5be9-9462-45ca-bbbb-747d43c95b30",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e751679f-03a4-4aad-8344-4aa44d1d73e1",
          "status": "Created",
          "code": 201,
          "responseTime": 2335,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "931e64ab-601b-4943-85ad-b235a4db3890",
        "cursor": {
          "ref": "1ff4db8a-4f70-4479-9658-8112710e3739",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4997a48a-5875-493c-83e4-fccc009987ba"
        },
        "item": {
          "id": "931e64ab-601b-4943-85ad-b235a4db3890",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "759ca926-7a1a-4706-a0b9-ef12d79c57e1",
          "status": "Created",
          "code": 201,
          "responseTime": 2217,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "c2529857-082f-456e-bded-be5b80f30708",
        "cursor": {
          "ref": "85934f87-0aea-41db-ba3b-d4b6dc5f8d6a",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8e962103-e74c-496a-9ec4-ee758defdb27"
        },
        "item": {
          "id": "c2529857-082f-456e-bded-be5b80f30708",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "91a45ccf-f7c0-4e9a-a576-b3c11ae7a114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0665bc-bdfe-4117-8abd-53695322a09e",
        "cursor": {
          "ref": "43636163-5723-40ab-aabc-259650e66711",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "39d966a0-f02b-4221-99ee-7e7b9eb91127"
        },
        "item": {
          "id": "1a0665bc-bdfe-4117-8abd-53695322a09e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "29b7e50f-4e99-4bcb-ae6b-9eed5827b0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20af2045-dee8-470f-acb9-b7edd5782603",
        "cursor": {
          "ref": "21b2f868-8d04-4d53-af9b-8a7e14c7f2ba",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c3b95807-16c0-4831-892d-3aeee413cfb7"
        },
        "item": {
          "id": "20af2045-dee8-470f-acb9-b7edd5782603",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1dc796f3-cbc9-4c7b-bacd-583aa3b9a030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26def15-f555-4109-80fb-9fadba0e83c7",
        "cursor": {
          "ref": "0cc1c1be-82a2-4399-a416-2c9afcc0fb97",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b282e5ac-cfc5-4e48-a174-0351d8c04ae4"
        },
        "item": {
          "id": "f26def15-f555-4109-80fb-9fadba0e83c7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "14fe1e42-7828-47f6-8a09-6898c06d29b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b25942-c060-498d-be34-90e39774f07d",
        "cursor": {
          "ref": "8bff277a-08fb-4996-8e6b-01216d9b025b",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "353f3645-55f6-4f5b-b81c-126ae3e90a7b"
        },
        "item": {
          "id": "11b25942-c060-498d-be34-90e39774f07d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "62f37c76-edf9-482f-9910-e48d592ac362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84888c06-a3a4-43c4-b63a-f44f8af9ddcd",
        "cursor": {
          "ref": "fce52aa8-7fe5-48bc-8e6e-44e495efc242",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fcf99e8a-1c9f-43f1-8a88-ed22b7028b77"
        },
        "item": {
          "id": "84888c06-a3a4-43c4-b63a-f44f8af9ddcd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f8c196a9-27b4-4178-952a-3bbe06d0e519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418fa5bd-51ed-4811-8f5f-4bb55a830783",
        "cursor": {
          "ref": "ccd61298-bb3f-4e7f-8b05-edd55d88aa64",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "467a2833-01ac-4b07-87da-9bf06b354e64"
        },
        "item": {
          "id": "418fa5bd-51ed-4811-8f5f-4bb55a830783",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2872792b-3c07-4ef1-9b76-c7caf5315194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0256723-a8ba-4ece-a37b-d555b00c9a48",
        "cursor": {
          "ref": "29fa5df6-c59c-4c9f-8c5a-e7f5b37fed08",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d2f583b2-1abf-4a61-bbeb-ad530f0c5f5c"
        },
        "item": {
          "id": "f0256723-a8ba-4ece-a37b-d555b00c9a48",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d99cb65c-4b08-475a-9b21-5410c0b28b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b3f783-9005-4e26-95d2-81fa35c45a24",
        "cursor": {
          "ref": "5db3cf89-f6a4-435c-b411-513e712c88a3",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f69a1887-eed1-4288-95e6-533c1618a5f9"
        },
        "item": {
          "id": "d8b3f783-9005-4e26-95d2-81fa35c45a24",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "83dfd937-23f3-4791-899f-2a8ff35c392b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549f15d5-99b7-4d82-bc45-b07406a3b7f3",
        "cursor": {
          "ref": "a93f6a3f-36dc-487c-bbd6-b5fbc19ebdd7",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0413f17d-52c7-4928-98d4-e86f6d4032fa"
        },
        "item": {
          "id": "549f15d5-99b7-4d82-bc45-b07406a3b7f3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9974e458-d743-4c5e-9866-3b92925fb107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9015722-176d-4d21-89c5-05a571f13256",
        "cursor": {
          "ref": "8486878e-39fd-4179-966d-f7b6784fa3d3",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "77d42912-5e24-495a-8a42-fc5962bffddd"
        },
        "item": {
          "id": "c9015722-176d-4d21-89c5-05a571f13256",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "80b3e8ec-4303-449a-9c1f-e25921de9f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109b1b00-0864-43d9-b0d0-8ebfb12482f8",
        "cursor": {
          "ref": "ee59605b-790b-42ef-b1f5-8c12e6c5a121",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "246443f0-97fc-45d1-af34-5293d54fce6b"
        },
        "item": {
          "id": "109b1b00-0864-43d9-b0d0-8ebfb12482f8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cfcc4397-be4b-4096-acc4-436d14ab7e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9c2b6d-8e43-452c-8296-8bdc9b9b7b11",
        "cursor": {
          "ref": "93c71d85-0f7b-445e-8394-54ccbaa829a3",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8e7afbb3-4243-460a-b543-14366f393fe3"
        },
        "item": {
          "id": "df9c2b6d-8e43-452c-8296-8bdc9b9b7b11",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cbb694ca-bf6a-47b2-bd6a-5bd47b3c624d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1bae4e1-ae42-4ac5-b1a2-5355de3c0b52",
        "cursor": {
          "ref": "5ee1fbb3-fe23-4ad7-9291-c45409c35b58",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f58de575-0d09-4b66-b683-b49715299fed"
        },
        "item": {
          "id": "a1bae4e1-ae42-4ac5-b1a2-5355de3c0b52",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ded51952-e6cb-4a29-9813-0849793dcbd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ed2865-fd74-4a6e-9cef-f5a6a9e32369",
        "cursor": {
          "ref": "ce9aec86-2d2a-4c7e-90b2-de3831c67fed",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2d66fabc-de35-44b4-9599-eb0327d77beb"
        },
        "item": {
          "id": "f3ed2865-fd74-4a6e-9cef-f5a6a9e32369",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8583f0eb-b03b-4178-8c95-d9fa3344dd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3814382b-805e-40a9-937d-20af8412ae20",
        "cursor": {
          "ref": "c0b20ac7-fd34-4962-9481-b3c6f2bc0000",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1945d7f9-1771-4ac1-9ce7-8ba5230a93c9"
        },
        "item": {
          "id": "3814382b-805e-40a9-937d-20af8412ae20",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "048be6cd-2f4e-4f2b-a1b7-601d7fe01fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc82d362-b175-4431-89d6-3a008573b80f",
        "cursor": {
          "ref": "24210bab-d018-45a8-9979-9727b2ee021c",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "94c08e80-8f04-4647-bb48-002be59a4cae"
        },
        "item": {
          "id": "cc82d362-b175-4431-89d6-3a008573b80f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8a891dbe-be5d-4094-b9a5-a6eb8de46b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b3e942-7697-45b7-8016-95aa0f690578",
        "cursor": {
          "ref": "143adbce-b743-432b-bcbc-64b110f49fa1",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c8246ed3-cc52-42d2-8fe5-787bf89438e7"
        },
        "item": {
          "id": "85b3e942-7697-45b7-8016-95aa0f690578",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6bf9935e-97ee-47c2-93ad-af67e8cbaf2c",
          "status": "Created",
          "code": 201,
          "responseTime": 2114,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "4c872bce-7e63-4320-ae36-5dd6e438339d",
        "cursor": {
          "ref": "d484ca01-eff3-42e3-b7e3-c4396bab352b",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ce56713c-65bf-4b46-a015-7b98e828026b"
        },
        "item": {
          "id": "4c872bce-7e63-4320-ae36-5dd6e438339d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "930517c0-e7e2-4cc1-8679-fd9eec1ed47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba67a36-5ffa-458b-9981-463c64729bea",
        "cursor": {
          "ref": "ecbb38e7-96eb-495f-932f-e66f17712479",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3a6e98de-0b4d-471f-819b-28ab58735e8c"
        },
        "item": {
          "id": "4ba67a36-5ffa-458b-9981-463c64729bea",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "94f19016-be87-4360-8093-821b38dc7af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75923397-71ff-474d-9d6e-43ee8256e9e8",
        "cursor": {
          "ref": "05dd6fa0-f304-493b-a84d-8bfb38265202",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "01339b67-2d1f-45fc-9223-ab704efb7450"
        },
        "item": {
          "id": "75923397-71ff-474d-9d6e-43ee8256e9e8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ad619971-2dcd-4e9c-8dfe-5bf8f1d5a0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b61f1a-b0cc-44b8-b6d2-464053e6908d",
        "cursor": {
          "ref": "8e1b8f0c-e78d-4271-9b0b-6bc30a4464da",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7660bc78-9953-450f-bb81-294186b290ca"
        },
        "item": {
          "id": "f8b61f1a-b0cc-44b8-b6d2-464053e6908d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5c673d43-87dd-4c05-8427-6074b304b3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c23c6e-a56a-48e7-8d5e-06b462d9a19e",
        "cursor": {
          "ref": "3240df37-fafd-43b9-a9e8-db15ab6cf824",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a0dc09db-fddd-4ccb-a1d7-853127ebbd7a"
        },
        "item": {
          "id": "c3c23c6e-a56a-48e7-8d5e-06b462d9a19e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2f1fa068-14fb-4e56-9f93-459ad302bdcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd9378b-6569-44b4-97a8-53e9b6541592",
        "cursor": {
          "ref": "395e760f-9af0-499c-aa14-adab5f0ae291",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e71c8891-868b-4e35-85fe-4008a116eb96"
        },
        "item": {
          "id": "4bd9378b-6569-44b4-97a8-53e9b6541592",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "46a69af3-ff58-4176-9cee-f8d256f95ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab66ba76-b5ba-4ada-a0b0-a5f3acfdef7d",
        "cursor": {
          "ref": "4d11a3fb-2256-490f-bb13-2902a4607879",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "09a92a9d-43d3-4966-a5e9-df0d0aaa8be2"
        },
        "item": {
          "id": "ab66ba76-b5ba-4ada-a0b0-a5f3acfdef7d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3de47713-4ac7-45dc-bde6-b95139663c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e906c4b-b5fb-4a5f-868f-2263434953ae",
        "cursor": {
          "ref": "2e5135a2-8b11-46d5-80e0-864897879d81",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "893db4bb-d790-481d-a990-161217f3b6ff"
        },
        "item": {
          "id": "4e906c4b-b5fb-4a5f-868f-2263434953ae",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ecd3c138-6785-41d6-87e2-6eb39ceb6c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b44f3f7-c05d-49b7-a1e1-b54e8febb0ba",
        "cursor": {
          "ref": "0662702a-60c5-4230-8329-6872a11211a0",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4d274862-d52e-433b-91c8-e13fd9dc991b"
        },
        "item": {
          "id": "8b44f3f7-c05d-49b7-a1e1-b54e8febb0ba",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "87bf62b7-225a-4511-9277-aa70252c7980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95939454-43b4-4103-a57e-90606cfb87ae",
        "cursor": {
          "ref": "8514c49b-4440-412c-aa92-e839db46a578",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9c50622e-5403-4994-964c-db47c8db7d3c"
        },
        "item": {
          "id": "95939454-43b4-4103-a57e-90606cfb87ae",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e0164b8e-4cb9-4215-8679-80a12a1f6a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12922761-9455-45e9-806e-305e7ad32b37",
        "cursor": {
          "ref": "765b5925-209c-40ea-8f8a-2c2ddb7e9f78",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8e42b629-d843-41bc-93f3-a26c7f811ac7"
        },
        "item": {
          "id": "12922761-9455-45e9-806e-305e7ad32b37",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d8476fff-02c4-419d-8f3c-b2e2d03b38e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77774cfd-5cc4-4be4-92b9-45abcdc435a4",
        "cursor": {
          "ref": "8184a9a1-bc41-4b85-ad6a-241412b36d87",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c13c8bf2-d300-4f3b-8ee4-288817f477e8"
        },
        "item": {
          "id": "77774cfd-5cc4-4be4-92b9-45abcdc435a4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cccd3225-7690-4475-be03-b1ce8700e30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e11e57-f20d-4d60-922d-e0af34eb24ed",
        "cursor": {
          "ref": "195974b3-31c9-4511-9732-30cbe7bd7945",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "95b79f17-f0d5-4b65-b042-7a0b408fcce4"
        },
        "item": {
          "id": "e7e11e57-f20d-4d60-922d-e0af34eb24ed",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "242f936d-ea8a-4154-9a5c-6294312e1c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7996ec47-3a3a-497a-a55d-757abc66c19a",
        "cursor": {
          "ref": "e9e9be35-bb4a-4ddd-b270-b81eb2c80173",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6ea70789-5bbb-47c8-8137-339cd6f8e052"
        },
        "item": {
          "id": "7996ec47-3a3a-497a-a55d-757abc66c19a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "67ea027a-84d7-4e37-8b02-4ea6c4acd5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933a02e4-6f2b-42b8-b34a-2df27ae5732e",
        "cursor": {
          "ref": "65250703-0e5b-4a8c-9025-9e49384d0085",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "eddf024e-99ec-4c07-a9c5-54c2d40b3bc4"
        },
        "item": {
          "id": "933a02e4-6f2b-42b8-b34a-2df27ae5732e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "096e1afe-6daf-46a2-b168-9d60ee0d7d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171df3ad-19a9-4d26-84bc-496f4c8ac976",
        "cursor": {
          "ref": "aded7178-66df-44e0-9032-e6f297433acd",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "054f05e8-3870-4ee2-9a07-c0ab6f33df37"
        },
        "item": {
          "id": "171df3ad-19a9-4d26-84bc-496f4c8ac976",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b7e6d223-b677-4b4c-81fb-c0df2ee6df78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d98fec1-5d23-4163-b8b0-7d719eeb8d86",
        "cursor": {
          "ref": "d6939838-939b-43ba-a4ec-78c8736add70",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0738dfd6-eaa2-442f-a492-a74038aa15a8"
        },
        "item": {
          "id": "6d98fec1-5d23-4163-b8b0-7d719eeb8d86",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "99883198-09a8-4f42-8bc1-4090b3b140fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc87524-062f-4d74-87d6-8db0bc8dcb84",
        "cursor": {
          "ref": "06e290df-dad7-4a20-8319-c33ed7c7a3b3",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "57b22378-125a-45be-843d-2b624c9ea470"
        },
        "item": {
          "id": "9dc87524-062f-4d74-87d6-8db0bc8dcb84",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "47572efb-eb99-45ee-afa0-14f6caff3c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868cc5c9-6c61-479c-8443-3ee1b012a13f",
        "cursor": {
          "ref": "2a406f89-a770-450b-8483-dce54ad59432",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d3e575b3-eff5-49e3-9a08-075a55c28a81"
        },
        "item": {
          "id": "868cc5c9-6c61-479c-8443-3ee1b012a13f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e3893d9a-c847-412a-b2e7-b689be0ff2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212877cc-39c7-4bf6-a7a8-c344a2bc443e",
        "cursor": {
          "ref": "845a5a51-a67c-40ce-aebe-1c3120b0e55a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6587bd00-74c5-4ceb-80d4-15a7f197e519"
        },
        "item": {
          "id": "212877cc-39c7-4bf6-a7a8-c344a2bc443e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "349f2d61-4244-4e87-a923-07d55867da61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0658ea5f-66c2-479c-9bbc-937faff2a17c",
        "cursor": {
          "ref": "ea2e2f87-85e3-4ea5-8d0a-fced892ce47c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "61d9535f-20dc-47a3-8919-e416a969ca80"
        },
        "item": {
          "id": "0658ea5f-66c2-479c-9bbc-937faff2a17c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6c8650b4-ec91-4707-b1fc-53669fd834e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24283ba1-1e3f-4af0-9c0e-a09043707d21",
        "cursor": {
          "ref": "2d45c474-455c-4409-806d-0c7aa6e5f860",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "54b5aa08-905f-4039-8c97-34c154f9ae87"
        },
        "item": {
          "id": "24283ba1-1e3f-4af0-9c0e-a09043707d21",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e12f78de-a5a0-4b8a-8953-e4dbfa658009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d16868-7700-4b68-b132-afd6faa369b0",
        "cursor": {
          "ref": "67d7a24c-a73a-43b5-9441-bf52d9b65786",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3c0ed84f-bf26-47e1-a7f5-daac523f33d4"
        },
        "item": {
          "id": "b9d16868-7700-4b68-b132-afd6faa369b0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c68c6f0a-2365-477a-b2d5-7fe43f8cba22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595d9a38-629f-4444-9f6e-b73a37415de7",
        "cursor": {
          "ref": "55d44c4a-a502-457a-bff8-379ef8d6fbe7",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3731984a-5cad-4ce8-8c39-05bb3daa6dde"
        },
        "item": {
          "id": "595d9a38-629f-4444-9f6e-b73a37415de7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "065fc4b4-3a12-47a3-9560-db6de9da9fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1c53a0-89e9-446b-95a7-5aa05b9a3328",
        "cursor": {
          "ref": "63d1c579-2d1a-4b6a-8481-903d1c60f591",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "38b86df1-1683-4471-b111-c766830d6f57"
        },
        "item": {
          "id": "de1c53a0-89e9-446b-95a7-5aa05b9a3328",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a734135d-6212-4422-a4d3-08a2bd333e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915ca13e-820e-468e-b0fe-9b7f7b7c37bf",
        "cursor": {
          "ref": "7d289864-5c42-4a98-a5dc-1b5f9130983d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "77593bf5-050b-4b8b-b737-05d3c88d2395"
        },
        "item": {
          "id": "915ca13e-820e-468e-b0fe-9b7f7b7c37bf",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "85365964-dbb3-4074-b3b4-ded4d89c64a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38dea117-9cec-4beb-bb98-99521eec2cd8",
        "cursor": {
          "ref": "42c7f626-21d5-45d6-9450-bf27d5273dfd",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "80eed38d-678b-41a0-9040-9a3903bdf674"
        },
        "item": {
          "id": "38dea117-9cec-4beb-bb98-99521eec2cd8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f2016036-4405-4705-904f-042b980d3118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1c1a85-2e90-4c55-824b-843337f313d1",
        "cursor": {
          "ref": "67d94608-4761-419d-8fe7-b9a53bcd938a",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b5e063c6-4a1c-40b0-8a57-3e8b630522ea"
        },
        "item": {
          "id": "1d1c1a85-2e90-4c55-824b-843337f313d1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5f68d19c-1d31-4072-b13e-6931ef917feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23982027-c1cf-4351-85f9-82771a07983e",
        "cursor": {
          "ref": "500a60f7-4b48-443e-a040-8f40b244340a",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "192a54c3-63f2-44f2-b484-ef1061b68f7d"
        },
        "item": {
          "id": "23982027-c1cf-4351-85f9-82771a07983e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9df8d343-38be-4b67-88e8-41b0928bc1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58df367c-81fb-4a87-8674-d721f32be489",
        "cursor": {
          "ref": "f12afd27-cd65-415e-9953-ee264c867ed0",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4ad3c21e-f9e7-4ab9-9e56-d67e4dc49f56"
        },
        "item": {
          "id": "58df367c-81fb-4a87-8674-d721f32be489",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "99bdacd8-67b1-426a-817d-fcdde820c5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5b3389-518e-40a9-a1ec-09b0f03fefec",
        "cursor": {
          "ref": "1044ae12-6f69-431b-8b0c-7eafdcb21d3c",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "63722c9b-3cd7-44c5-be0f-4e2413135b6e"
        },
        "item": {
          "id": "4b5b3389-518e-40a9-a1ec-09b0f03fefec",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9eb1da45-b2dc-4a8f-9219-c140baa74a39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "6bbd1509-f670-4ac5-8bc8-4a545a445184",
        "cursor": {
          "ref": "7b171f1f-96fc-4bca-aa27-e4b00f5bf80c",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bbdcde0b-4868-4c29-a8c3-bd84d94f45cc"
        },
        "item": {
          "id": "6bbd1509-f670-4ac5-8bc8-4a545a445184",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "92f594bf-88a0-4d5a-85d6-b55e66265739",
          "status": "Created",
          "code": 201,
          "responseTime": 1991,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "572bdee7-b260-4de9-a43f-727b994cc556",
        "cursor": {
          "ref": "17e3c81c-566e-45fa-ac81-ef127f3f3c56",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "25542424-7360-4ad1-8e35-3cc5ba4db7d0"
        },
        "item": {
          "id": "572bdee7-b260-4de9-a43f-727b994cc556",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d6043523-6a30-47e8-ba76-0d88a15fe749",
          "status": "Created",
          "code": 201,
          "responseTime": 2240,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2741692-659a-412d-81a6-0a0cc427dbc1",
        "cursor": {
          "ref": "e21b7aa9-21fd-4f03-84eb-204080201e08",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "de303d1b-e011-41e5-9605-1cbd4073033a"
        },
        "item": {
          "id": "d2741692-659a-412d-81a6-0a0cc427dbc1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6d317888-d438-4ee1-9781-4e974c455404",
          "status": "Created",
          "code": 201,
          "responseTime": 2574,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "927f7fb4-4ce9-43e5-8114-15fba23eb850",
        "cursor": {
          "ref": "5b7331f9-4c76-44a9-a2c0-aaabaef7ad8c",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2ffdb3e8-a0e1-4ee5-958b-e3bfba950e27"
        },
        "item": {
          "id": "927f7fb4-4ce9-43e5-8114-15fba23eb850",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "674a8fe2-8430-4bd7-86e4-fcb483d42b3f",
          "status": "Created",
          "code": 201,
          "responseTime": 2384,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be7883a-49ff-408a-98e8-7ca4941a344e",
        "cursor": {
          "ref": "6bafd18b-d8f7-4472-a452-0310a70c4782",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c47ffcda-9f58-41d8-9980-7a34405b8f6c"
        },
        "item": {
          "id": "5be7883a-49ff-408a-98e8-7ca4941a344e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "798c2f46-988c-4d20-a730-dcae7dbe5636",
          "status": "Created",
          "code": 201,
          "responseTime": 3941,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4853a26-99d6-4207-a176-a71b276c74a6",
        "cursor": {
          "ref": "f2deb4d1-6e66-4806-beab-0f31b9bb0c9b",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ebd36e56-d6b6-4c7c-b8e6-4fc3a3b5829f"
        },
        "item": {
          "id": "a4853a26-99d6-4207-a176-a71b276c74a6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a3d89dc3-be6b-4840-92fc-ee3037c1e765",
          "status": "Created",
          "code": 201,
          "responseTime": 2293,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-12T00:37:05Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-12T00:37:05Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "515e21a1-e3d8-4b46-ae3a-fc42c8d2bef0",
        "cursor": {
          "ref": "5722485c-77e6-4fce-bed2-755d6be053cf",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6c65456b-4be1-4c5c-96eb-9147cff59ddc"
        },
        "item": {
          "id": "515e21a1-e3d8-4b46-ae3a-fc42c8d2bef0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "49389fdf-16bf-4e9d-b3ea-8f0579b29668",
          "status": "Created",
          "code": 201,
          "responseTime": 3062,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48029ee-0a43-4329-aa2b-46b4f539a766",
        "cursor": {
          "ref": "ddcd4949-aabc-46c5-b609-e38bd25a159e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "022fbaaf-312b-4d16-bd70-150e3d6449ab"
        },
        "item": {
          "id": "f48029ee-0a43-4329-aa2b-46b4f539a766",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "12bb5f22-60ff-440a-9840-9bb74055a124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48029ee-0a43-4329-aa2b-46b4f539a766",
        "cursor": {
          "ref": "ddcd4949-aabc-46c5-b609-e38bd25a159e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "022fbaaf-312b-4d16-bd70-150e3d6449ab"
        },
        "item": {
          "id": "f48029ee-0a43-4329-aa2b-46b4f539a766",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "12bb5f22-60ff-440a-9840-9bb74055a124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23ea6f6-22e6-4bcd-bb1c-000d5d820e3c",
        "cursor": {
          "ref": "c6919e0b-5e00-4564-b337-c0e5cc1c84ed",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "eb8770d2-cdeb-452a-ba3c-052d19ba8ff8"
        },
        "item": {
          "id": "a23ea6f6-22e6-4bcd-bb1c-000d5d820e3c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "98067f82-80e5-4c01-bf8d-b8697e14c79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192f0543-3f3e-4068-ab1c-1e0076128b4d",
        "cursor": {
          "ref": "5535f877-7733-4c47-b23f-af5a8d846e54",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0ace96a9-9f59-485d-a396-b66d30d2b11b"
        },
        "item": {
          "id": "192f0543-3f3e-4068-ab1c-1e0076128b4d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "19c7b032-415d-4e58-a915-756adf7ff25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c95e775-bad7-44a4-9122-74ea048bb15a",
        "cursor": {
          "ref": "6600761a-574c-4b37-8a86-a82871d2e322",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "63a11a2f-cd91-4d7c-9feb-96df77bb9d2d"
        },
        "item": {
          "id": "4c95e775-bad7-44a4-9122-74ea048bb15a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "96562c48-a619-4334-af2d-c1c8c7df4556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2cfef6-54be-40e6-b938-378906e12c3f",
        "cursor": {
          "ref": "93067e79-6c24-4742-b2c4-569f647f4bc1",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "78b50602-38d1-4bc6-9e1e-40f2d44e94d2"
        },
        "item": {
          "id": "db2cfef6-54be-40e6-b938-378906e12c3f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f6683142-9f0a-4de6-8f02-77a57feb4d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815c03d8-402f-4c52-b434-f414893b1998",
        "cursor": {
          "ref": "f0d7ea8f-073b-4f41-bd47-b29c122d5ba7",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4120878d-08d3-4a21-ac5b-39350caedcc3"
        },
        "item": {
          "id": "815c03d8-402f-4c52-b434-f414893b1998",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "538ac46c-8e3d-4376-b96b-a13b986fdc6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1ef2a0-b995-4bc0-8e15-38f91ecb265b",
        "cursor": {
          "ref": "e26c8be7-a14f-4b70-98ae-2efdfcad444e",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0763438a-fc6c-4f45-a393-48a38c267b82"
        },
        "item": {
          "id": "ca1ef2a0-b995-4bc0-8e15-38f91ecb265b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0749ba24-f0da-4076-a0df-e3ca540eba23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be151a6b-27ca-4120-a608-4981c84a7383",
        "cursor": {
          "ref": "353502c7-09e8-4376-842d-44f93828e448",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "717787ef-4a93-4161-8eed-2470898745a2"
        },
        "item": {
          "id": "be151a6b-27ca-4120-a608-4981c84a7383",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a3dae7de-0732-4d58-bdf6-89c590f5dd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575accc7-cb0f-476a-8cce-52bb5d8ffad2",
        "cursor": {
          "ref": "bdb57744-f20d-498c-8211-319659c74de4",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7e0d96ce-0d10-40dd-a1f1-6c81f15bf79b"
        },
        "item": {
          "id": "575accc7-cb0f-476a-8cce-52bb5d8ffad2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dab62a82-aee6-4719-927c-358c4adf3f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d3c3b7-ec46-4a58-8453-1c225772179d",
        "cursor": {
          "ref": "55a35027-1b7e-443d-90a8-f0c0f373ca87",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b5dbf4fb-d449-450a-b01d-0fb6fe4e2cfc"
        },
        "item": {
          "id": "c2d3c3b7-ec46-4a58-8453-1c225772179d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0b63a389-aa5d-4f50-b95e-c260a3756cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42bf353-fe2a-49d6-8ec3-49aa5c67ae2f",
        "cursor": {
          "ref": "46a56f86-d9ce-49f2-b89e-97979e67cbc1",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "18ebfe13-3dd9-4c0d-a1df-bbf82b05cb46"
        },
        "item": {
          "id": "d42bf353-fe2a-49d6-8ec3-49aa5c67ae2f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "236a5367-25b8-44dc-aa5e-c7c35a887de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0bae79-78a2-42f8-a1c3-222b6409ee66",
        "cursor": {
          "ref": "e355a623-2bbc-4f82-b13a-f85307fbe1f6",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1da5173b-6a6c-4faf-8dc3-1c17ef05fc64"
        },
        "item": {
          "id": "9c0bae79-78a2-42f8-a1c3-222b6409ee66",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3d3d1d52-d63d-49ff-bf2d-e4e61286bccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fd010e-5e90-43bd-b88e-ca5d39d47b54",
        "cursor": {
          "ref": "b7ce1092-492f-480a-9547-9019b04d541b",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a8bd7c08-b364-4a22-b7ac-e9d76c26cc0b"
        },
        "item": {
          "id": "43fd010e-5e90-43bd-b88e-ca5d39d47b54",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f9de041d-8177-4936-9b5f-0df40f9847d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b613261-4d1e-441a-bf67-c2574efbe9a4",
        "cursor": {
          "ref": "96bc6491-a8fc-418b-b427-7540b082bf5b",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "11743180-eaf5-4cca-98d3-76346ae5559a"
        },
        "item": {
          "id": "4b613261-4d1e-441a-bf67-c2574efbe9a4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0b076a59-ce9c-48c0-8b3e-5961cf1e4443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215b981b-bec4-4fce-a27b-c7a15c8f1c01",
        "cursor": {
          "ref": "2b8c6b59-8207-4890-a8dc-c18c1611a2a4",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "730493a9-f20b-43e6-81e6-64eaa418aee8"
        },
        "item": {
          "id": "215b981b-bec4-4fce-a27b-c7a15c8f1c01",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "43734387-defc-4e54-9175-13a83fa87f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea2d233-8268-405b-a0b8-408abe84664d",
        "cursor": {
          "ref": "84590998-73c8-48ea-a953-6d6e9321eb22",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3149f496-73fd-4000-aff3-bf83d6e21288"
        },
        "item": {
          "id": "fea2d233-8268-405b-a0b8-408abe84664d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0cece8f5-aaf1-4026-807c-4a866b36ab99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c002da03-a2aa-46ba-a630-12cc183f6720",
        "cursor": {
          "ref": "adcebfe0-a313-42e3-8b97-0e4358b3c3b0",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2e5c5d42-5201-4e0c-af0c-28731756a84d"
        },
        "item": {
          "id": "c002da03-a2aa-46ba-a630-12cc183f6720",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e4566d0b-893e-4f0d-b6b9-4594e8b94f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89974c5-2571-4370-911a-4eed2c726645",
        "cursor": {
          "ref": "007ac85a-cc43-4e3a-a15f-c58a6a0db271",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8666bf5d-4bd7-45ef-a96b-948b56500660"
        },
        "item": {
          "id": "e89974c5-2571-4370-911a-4eed2c726645",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "755a217c-2564-4a69-84aa-20040fa4e2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8584bc-d25e-4249-9675-c0f20c6db484",
        "cursor": {
          "ref": "5dccdaba-d788-4552-b06a-5387dbcbf5ef",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "29c1d00f-6527-43f2-8f43-3042f543275a"
        },
        "item": {
          "id": "df8584bc-d25e-4249-9675-c0f20c6db484",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0004d4bf-d9c6-4e50-81c9-22b3a56a7614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6d3b86-f879-418c-a456-25f9fce1c9b8",
        "cursor": {
          "ref": "d200c230-29d5-4d9a-a9cb-dad6c7848e16",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6b185a6f-da28-4f4b-8039-c9e553eba7df"
        },
        "item": {
          "id": "fe6d3b86-f879-418c-a456-25f9fce1c9b8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4898f09c-bbd0-4466-87de-46a0c0e3a3d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c88773f-54b5-4546-a718-4a2c59998dbe",
        "cursor": {
          "ref": "8dc8495a-344a-424b-b6a9-c5e6fdbf400d",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d084eb02-dece-4b15-920f-d08eba88d5bc"
        },
        "item": {
          "id": "8c88773f-54b5-4546-a718-4a2c59998dbe",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "41673610-ebab-4f96-a347-bbf1f4dee8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94846953-8d2f-442c-be1a-3e3d3e25b318",
        "cursor": {
          "ref": "b6f25435-78fa-437f-8e19-737a0e556884",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fd7dc933-4a61-4dd8-b607-6426234a8d37"
        },
        "item": {
          "id": "94846953-8d2f-442c-be1a-3e3d3e25b318",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "157fb97c-fe39-4e8e-b9da-7bec9c63559c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26d96a6-2659-4fb9-94f0-dd867f3497d7",
        "cursor": {
          "ref": "017d4f58-b36c-403d-83ad-4baf1b18057b",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b5853931-a1c5-4d29-bea8-03ec1c1bfdef"
        },
        "item": {
          "id": "a26d96a6-2659-4fb9-94f0-dd867f3497d7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b4b556a4-f959-4a19-825b-cbf4896b17c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bbbebb-3fda-4cba-b06f-54e9d69b7809",
        "cursor": {
          "ref": "8d550819-86ae-4669-87d0-aa4b19f002e3",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4978caa1-e516-4fe2-b052-73ae9a06160a"
        },
        "item": {
          "id": "d6bbbebb-3fda-4cba-b06f-54e9d69b7809",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "383aa1cd-a93a-4cc6-9c23-41bef4f88823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5554b5-8e92-4a57-81ad-271e9f6a874f",
        "cursor": {
          "ref": "02b53881-65be-4a23-a068-7ca1bad581f3",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c6735456-7946-420a-9b61-ca2008560cd5"
        },
        "item": {
          "id": "5c5554b5-8e92-4a57-81ad-271e9f6a874f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "712a0334-ecb4-4168-9556-31d4558473e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acccb0b-da3e-43d5-9588-c653db4fac72",
        "cursor": {
          "ref": "c3eb55fd-56ce-4cea-ad01-a1115f802d60",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c1fe0d68-552c-4f2a-a7f7-8eb618fcfdb1"
        },
        "item": {
          "id": "1acccb0b-da3e-43d5-9588-c653db4fac72",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "001d467b-73a1-4c40-94cd-a5ba02931827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c80ab47-c2f8-49b2-8f3a-ad96ed88cee6",
        "cursor": {
          "ref": "e137c445-8e96-4e48-89b7-b1bfd9ca31df",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "750ada5d-ca3f-45e1-a3fd-1e4209810152"
        },
        "item": {
          "id": "9c80ab47-c2f8-49b2-8f3a-ad96ed88cee6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6438c521-c892-4029-85c1-fd153128cd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a93052f-46ac-49b0-b690-49563543eaea",
        "cursor": {
          "ref": "5b66bbd3-8df0-4f74-a9a1-4227dbbd13ef",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0b0c8a58-1215-47e5-a76c-b44085f2d620"
        },
        "item": {
          "id": "6a93052f-46ac-49b0-b690-49563543eaea",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "31c2fdc3-85f9-4bf1-9f66-c1f74db0e1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f441f5eb-a21a-47e0-8d16-d3dec5ea1d6e",
        "cursor": {
          "ref": "72b22a9d-b933-475c-ad89-b6860d28b3c8",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "17d37960-a9b0-4042-a3aa-06964a4de4c9"
        },
        "item": {
          "id": "f441f5eb-a21a-47e0-8d16-d3dec5ea1d6e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "47b8fd19-3c3e-44de-b466-a27201d0ac70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e63c234-23a1-4333-b061-9721d05d2133",
        "cursor": {
          "ref": "01b5581a-fb78-48c0-9642-b8ad8b0e28c9",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "25e9ab01-4e3a-43e9-b88f-0f8e47d689a4"
        },
        "item": {
          "id": "7e63c234-23a1-4333-b061-9721d05d2133",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "eadb508d-78a5-4745-831e-24cf47852f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b23720-e336-4605-ad4b-e5c26e5bf1c0",
        "cursor": {
          "ref": "eb515a15-08aa-49fb-94ca-afc9f21bbb50",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0dd114a8-af43-4411-b597-5ac5bbdee7f2"
        },
        "item": {
          "id": "02b23720-e336-4605-ad4b-e5c26e5bf1c0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cbd01369-7a98-4995-9dab-22cd9e0b569c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1daf10a7-4c68-4a98-b37d-05309fc7906c",
        "cursor": {
          "ref": "f08dd6c5-f933-4a9a-9e7c-dc1fca97071c",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "543ccf2a-30d3-414f-ab8a-b6ed8efa836c"
        },
        "item": {
          "id": "1daf10a7-4c68-4a98-b37d-05309fc7906c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a32ebe37-f73d-42b0-9850-283430c9106d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68be406e-baf3-4615-a72b-cd5107db8340",
        "cursor": {
          "ref": "e45901f1-83d3-4615-8ecf-4f9988353436",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3a38c035-a3cc-40f5-8eb9-200a6f9d2af4"
        },
        "item": {
          "id": "68be406e-baf3-4615-a72b-cd5107db8340",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4081da23-32e2-4035-9bab-77e5952453ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e34e8594-07f6-49dc-ba2c-f38ed5b1c111",
        "cursor": {
          "ref": "4391ddcd-1902-4e33-89a4-1b284c14cc88",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "13c1d08f-223a-4974-ad76-9ee4f4d7c8f6"
        },
        "item": {
          "id": "e34e8594-07f6-49dc-ba2c-f38ed5b1c111",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ff85b186-7916-49ed-8770-4f3ef71f25f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "3f8c6348-c3e5-4b25-a152-e3ccd530ec00",
        "cursor": {
          "ref": "3c39f9b8-c6f0-456e-9705-8f245e3e105f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b5519755-eaae-4b9d-8d02-b170746262fa"
        },
        "item": {
          "id": "3f8c6348-c3e5-4b25-a152-e3ccd530ec00",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a56dcf37-d276-4fbd-93e3-10ad5aa90d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8c6348-c3e5-4b25-a152-e3ccd530ec00",
        "cursor": {
          "ref": "3c39f9b8-c6f0-456e-9705-8f245e3e105f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b5519755-eaae-4b9d-8d02-b170746262fa"
        },
        "item": {
          "id": "3f8c6348-c3e5-4b25-a152-e3ccd530ec00",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a56dcf37-d276-4fbd-93e3-10ad5aa90d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780a998c-ae29-45b9-bcc7-35aac9d81004",
        "cursor": {
          "ref": "976e13a1-3df3-4470-90ec-9ff99869de00",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c68a5f58-f32a-47f0-bee9-8d253eadf114"
        },
        "item": {
          "id": "780a998c-ae29-45b9-bcc7-35aac9d81004",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "631398bf-1cc0-4633-9429-afc37b1b43e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07cc7dd-5a47-4290-ba79-ab1e9fb8a5ad",
        "cursor": {
          "ref": "d0ebca38-2e6e-4b8b-8a50-6a1773866831",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2b37815e-5a55-4b4c-8d1f-c3559311e064"
        },
        "item": {
          "id": "d07cc7dd-5a47-4290-ba79-ab1e9fb8a5ad",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "adacdca2-9d13-44e5-94e5-e5ece5595a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da13e10b-45d6-489c-93a9-38d3cf57eef5",
        "cursor": {
          "ref": "1e5adca1-97b3-430c-b1eb-ef252100a098",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "29d84a8a-3b2a-42eb-b2a2-b284a9a2ab89"
        },
        "item": {
          "id": "da13e10b-45d6-489c-93a9-38d3cf57eef5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7034c3a6-dddc-488b-93b3-ec81cfbcf7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde5a7cd-4c06-4f3c-aa5e-6a65a9b465fc",
        "cursor": {
          "ref": "1a7525d8-4221-4e99-8d12-11d2afd9f1f9",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "00896bb6-82f0-458b-8a72-f1bb8b8a7ad0"
        },
        "item": {
          "id": "dde5a7cd-4c06-4f3c-aa5e-6a65a9b465fc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "99fde8da-aaa4-4fa7-8b95-4a7bebe29338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3477653f-a313-411a-867f-f8f81bc974de",
        "cursor": {
          "ref": "cd0f95f5-76b7-4acd-8392-786f104f7673",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3cd0bf3f-63ab-4e57-b8ab-6cf8e96f323a"
        },
        "item": {
          "id": "3477653f-a313-411a-867f-f8f81bc974de",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2caadf70-3b22-48c6-a693-321b88d451f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139889bc-92be-4172-af95-8bf080a92e1d",
        "cursor": {
          "ref": "c3cf8f2c-b36d-4ef1-9162-00176d69e05b",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dd89693f-2b78-41d1-8b17-9c7d839f51e0"
        },
        "item": {
          "id": "139889bc-92be-4172-af95-8bf080a92e1d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e4cff2d8-2495-4649-adab-d67504ea0f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c1c765-607d-494e-bad5-36e8f9b542b8",
        "cursor": {
          "ref": "abddba5e-0404-44b3-b6b2-89a81c4df7df",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "569c45ed-a512-4978-b04c-ae2f96b28c6a"
        },
        "item": {
          "id": "55c1c765-607d-494e-bad5-36e8f9b542b8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8ed66ddc-67aa-42a0-ab4e-95d55e3f17d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9ee63f-46c7-46f3-b11d-2324b97456da",
        "cursor": {
          "ref": "18314e8f-c6f0-400a-ad80-aff233c735dc",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5a9cfcca-6743-485b-8938-a35d440bd7cb"
        },
        "item": {
          "id": "4c9ee63f-46c7-46f3-b11d-2324b97456da",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "77368211-2497-4900-9c31-40e5274e9d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05bb3a0-0000-40d8-93d6-47e49de30391",
        "cursor": {
          "ref": "a514dbfb-1dfe-48f7-89aa-b757e905ef7a",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "84abebfc-8613-4326-bef4-58267403b1e0"
        },
        "item": {
          "id": "c05bb3a0-0000-40d8-93d6-47e49de30391",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d10762e4-a7e3-4090-b9bf-690a1ea31e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc688632-192e-455e-a06f-a3f1aa1d849f",
        "cursor": {
          "ref": "9ff03ddf-3645-4ea4-8c7b-0ca04a3cdbc0",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e926bcde-8829-4ab7-ac43-337215c39bf6"
        },
        "item": {
          "id": "cc688632-192e-455e-a06f-a3f1aa1d849f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f1d40c63-f2ad-4372-8305-baf0ed7aee32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8a95ea-3dbd-4586-9833-5412fddabda0",
        "cursor": {
          "ref": "2aab7894-4805-44f1-b1f8-8b6625d50eb1",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7ae6f255-4755-4254-87d0-fa5c644b99aa"
        },
        "item": {
          "id": "7d8a95ea-3dbd-4586-9833-5412fddabda0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "179558ad-4555-4747-a014-c5a5996ab39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f69b940-8724-43c2-82ec-a7313b4470db",
        "cursor": {
          "ref": "994e8362-88b2-425d-a80a-796a02f14a83",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e1abd403-6b0d-4efe-9df4-2799bf7dd2a2"
        },
        "item": {
          "id": "3f69b940-8724-43c2-82ec-a7313b4470db",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "33f489ff-08f1-4513-86d2-26cb6997ba17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6deac18a-340c-4079-af79-c5163ba31e30",
        "cursor": {
          "ref": "4eb5ed6e-aac5-447b-8dde-1683846eda0a",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e95100fd-7026-4f54-bc1c-5440500fb861"
        },
        "item": {
          "id": "6deac18a-340c-4079-af79-c5163ba31e30",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a1316ae3-5518-47d0-9bf2-b3970526c73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c7c4f7-b4d6-4f3f-b363-3ac723d1cc94",
        "cursor": {
          "ref": "bf531200-873a-4755-a5df-823969e9905c",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9e16fc65-d3fb-43dc-8f72-0b3b27cab78b"
        },
        "item": {
          "id": "37c7c4f7-b4d6-4f3f-b363-3ac723d1cc94",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b4d90ccd-00f5-483c-8566-3e80b2f7f61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49e844d-5cd9-429a-ab66-b7c14e4cf4a9",
        "cursor": {
          "ref": "0b0fa6fe-48b3-4e5a-a655-9129ceba376d",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2d7d3cb1-d47f-4873-ac83-6f8217a16cdd"
        },
        "item": {
          "id": "f49e844d-5cd9-429a-ab66-b7c14e4cf4a9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3df896c7-692c-494f-ab5e-871017a457c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc06deb-8841-4292-bd7d-f40f5619e0bd",
        "cursor": {
          "ref": "5eb3f385-a4f7-4e49-8b28-9badef1275fe",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7b89f83e-c7a0-49f8-9fc2-f742e8a12d34"
        },
        "item": {
          "id": "3fc06deb-8841-4292-bd7d-f40f5619e0bd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5f568715-4ff4-4656-beae-73f51cb80dbb",
          "status": "OK",
          "code": 200,
          "responseTime": 505,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "6aec0fff-453a-4b32-bc9a-a6a6c81cda9f",
        "cursor": {
          "ref": "b2ce5e5c-8e03-4113-9c17-a491bd7894f0",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e1f75b01-2591-486e-bc17-df9f07b72826"
        },
        "item": {
          "id": "6aec0fff-453a-4b32-bc9a-a6a6c81cda9f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4ad0209d-8dac-4748-8134-0b9f81fcc9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19dbbcd-718b-467a-b983-73d1a9cad206",
        "cursor": {
          "ref": "c14d2898-b0af-4e39-8dca-1660d581bea3",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b9ecd0a2-868c-497d-89a8-6b60d9b06e37"
        },
        "item": {
          "id": "c19dbbcd-718b-467a-b983-73d1a9cad206",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e85d2bb3-cefe-42e4-aa61-12a5d7793c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ebeaf4d-ecfb-4d18-aad6-661ef57fcc64",
        "cursor": {
          "ref": "a40bba8c-d1dc-4129-96c3-c5d25467290a",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f0a8a837-26a6-4ac0-82c2-8e14e3920fb3"
        },
        "item": {
          "id": "9ebeaf4d-ecfb-4d18-aad6-661ef57fcc64",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ff278253-3de2-46cf-9f49-937ab140e122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcf5df5-1c3f-43cb-aa7f-776926e0e429",
        "cursor": {
          "ref": "98db82fb-776d-4bae-ad92-92b36bc0a242",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d9c28d57-e0b7-4323-b5a8-96ec61d14ef8"
        },
        "item": {
          "id": "fdcf5df5-1c3f-43cb-aa7f-776926e0e429",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e61a55c7-ab28-4380-b7cd-43dc7a63e1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd579b6-e980-484c-8241-596defe4dd04",
        "cursor": {
          "ref": "ee4ef39c-d421-44c4-843d-46bdcd3f7ede",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "052f32e9-d973-4aa9-b56a-c1e1a631c7ef"
        },
        "item": {
          "id": "edd579b6-e980-484c-8241-596defe4dd04",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "dfca8bbb-af4a-4d75-9076-4e63372f9ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9b6713-5265-4ef7-81ee-acb26ed94701",
        "cursor": {
          "ref": "2e32f34c-6f68-43e0-8bc6-77dcfe1ef261",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fc68f845-dff8-4567-a071-5eb6f0d2dc74"
        },
        "item": {
          "id": "bb9b6713-5265-4ef7-81ee-acb26ed94701",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "56b7a5bb-cedd-4044-886f-a128634c6d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c372f93-776d-420f-9d2e-f05af8aad9f1",
        "cursor": {
          "ref": "44ddfa95-caba-4eb8-ab98-89d319cba50c",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f8e55776-09ba-4188-a1b1-9115f47f8c6d"
        },
        "item": {
          "id": "3c372f93-776d-420f-9d2e-f05af8aad9f1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9c3c022b-4457-4e45-b215-dbb76be83993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992da25d-e8b9-42ba-98c5-bf4b742833d1",
        "cursor": {
          "ref": "8b7ef031-e014-4638-9123-4bf3f5e7bc29",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ea0ab6e7-7776-4115-a7ec-2041eb61cfc3"
        },
        "item": {
          "id": "992da25d-e8b9-42ba-98c5-bf4b742833d1",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "68b7c4c9-622b-4dbe-9e77-5f73f3d44b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d303f107-ae50-4165-b650-42bcd7d23ad1",
        "cursor": {
          "ref": "d4017fe7-2155-4fbc-9c49-ed38add021b9",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f1bde825-d051-4546-b1b7-c4ae27d706d1"
        },
        "item": {
          "id": "d303f107-ae50-4165-b650-42bcd7d23ad1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ebd49658-3d26-47a1-9d62-77948a6f6b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367fdb3f-5333-4c5a-a37d-5cb658bcc7ab",
        "cursor": {
          "ref": "d8870445-5f24-4161-a4ff-4068360dbad6",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b4fd5869-f39e-470e-8975-d937e0b9cc30"
        },
        "item": {
          "id": "367fdb3f-5333-4c5a-a37d-5cb658bcc7ab",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dbe521a9-1b2b-4eab-913f-1068ed170860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfdb0d7-44c6-4373-a3ae-9d5692aa6a47",
        "cursor": {
          "ref": "6e68cfae-064f-4114-84ea-10833a0e88cf",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1ba828a7-c7d3-4f4d-826f-5b20d0550c41"
        },
        "item": {
          "id": "ecfdb0d7-44c6-4373-a3ae-9d5692aa6a47",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3363d26c-8ef0-421c-a166-03ea964ec399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32cdbc2-b857-4b4c-a249-71ed48b6d743",
        "cursor": {
          "ref": "b5cb9585-4db9-4887-860c-c807696f32a0",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3c28a6fd-b4f0-48bc-a890-eaa06f07b1a3"
        },
        "item": {
          "id": "a32cdbc2-b857-4b4c-a249-71ed48b6d743",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a70d63f3-8f71-456f-be6f-35cfc6cbb0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90006fe7-27a8-43f8-af68-b80e25b1350f",
        "cursor": {
          "ref": "e82db452-4828-4147-a2f6-e23ec293caa8",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "73591a0c-2025-4445-a8ef-eb30ee31384e"
        },
        "item": {
          "id": "90006fe7-27a8-43f8-af68-b80e25b1350f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "274e643d-8518-40bd-bc5b-f919c04a6243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04652412-4506-4d86-9e5a-c4322f0f980e",
        "cursor": {
          "ref": "662b1a71-3282-48d2-8c22-2546d7519063",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5e157fb2-df4e-432b-af12-06a6e73d61bd"
        },
        "item": {
          "id": "04652412-4506-4d86-9e5a-c4322f0f980e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "245c9ebf-0f3c-434e-a8a9-b485ab59d3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934895a5-ead3-4c0d-8ba8-8193bab76868",
        "cursor": {
          "ref": "7ff44f21-692a-45dc-9545-973469b4d89a",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a2250afc-1bd6-4eb4-870d-eb241e44605f"
        },
        "item": {
          "id": "934895a5-ead3-4c0d-8ba8-8193bab76868",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "32ec3113-fd0e-4f0b-9667-72b927df8780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e783a4c-5ab5-40c4-8831-26e12f8ded2c",
        "cursor": {
          "ref": "5b5ab1cd-3c44-4a19-82b4-b37481e5fa31",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3fd2727c-fefc-4d89-8dc0-57d9f8dc4ac6"
        },
        "item": {
          "id": "9e783a4c-5ab5-40c4-8831-26e12f8ded2c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3abb1842-9939-47a3-8fba-80ee423016c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3035514c-808b-40a3-840a-07f0ae9ab35c",
        "cursor": {
          "ref": "f9c439bf-4def-4fc6-9b32-d16260f1ac8a",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "68dc5810-da8a-4a0a-aacc-e59cbb65f870"
        },
        "item": {
          "id": "3035514c-808b-40a3-840a-07f0ae9ab35c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8e8202c3-d51e-44c2-b6ec-f52996d01b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b722652b-465c-492b-a297-6dca7992958c",
        "cursor": {
          "ref": "a798cbfa-af9b-4b7e-94f3-beca3839e84b",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1efb82e3-2388-409c-85a0-4e3024f152f7"
        },
        "item": {
          "id": "b722652b-465c-492b-a297-6dca7992958c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "969ab80c-d47d-447c-b689-004bf4aa216e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deed23ff-2fe4-4c1f-b679-529bda435541",
        "cursor": {
          "ref": "07352437-a98f-47dc-86c0-668838a73174",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5ffe0b26-7fdc-40b1-a0a8-231a41350be6"
        },
        "item": {
          "id": "deed23ff-2fe4-4c1f-b679-529bda435541",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f38c6739-f3e2-454c-ae3d-a5e6153e0ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efdfdc12-eb73-4f1f-9de0-fbae69ef946a",
        "cursor": {
          "ref": "c00ed20b-a77e-4006-bfa5-9c95701684a3",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4783f910-f278-440c-8001-04d9e799ff1b"
        },
        "item": {
          "id": "efdfdc12-eb73-4f1f-9de0-fbae69ef946a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "18a52c04-e904-4425-be82-91ccd038c1d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c03da60-edd9-4f23-bca9-989d47580759",
        "cursor": {
          "ref": "422e41e4-8919-4a7b-88e3-c8c17a5ad18b",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5adb1fe9-8a8e-4fe6-b549-4077460cdfbd"
        },
        "item": {
          "id": "7c03da60-edd9-4f23-bca9-989d47580759",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c94f9d73-9970-412c-91ff-78e194195168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741d0489-3f56-458f-90d6-ecf474e146d0",
        "cursor": {
          "ref": "e2234b5b-65e8-4085-8a73-bd262e5dcb84",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cb5f1a02-2bc9-4359-8af6-69ed51539aaf"
        },
        "item": {
          "id": "741d0489-3f56-458f-90d6-ecf474e146d0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "504a4f23-533b-49c4-8bae-f65ee53a4def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1041fc-c6cc-4bcb-928c-aa371ca29f79",
        "cursor": {
          "ref": "3d0b0930-99a2-4b56-a064-1caf2bd42fd4",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e63544c0-d891-4c1d-9ae0-8de3367ef27e"
        },
        "item": {
          "id": "1b1041fc-c6cc-4bcb-928c-aa371ca29f79",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b93d6b5d-7e02-42aa-b9fc-f5952292eb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2678147-d675-4879-b40b-dac61ef8d739",
        "cursor": {
          "ref": "2b17bd94-f933-4179-9835-8e9fec624212",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ae86baff-e6a1-4e4e-98ea-726d62cd438b"
        },
        "item": {
          "id": "e2678147-d675-4879-b40b-dac61ef8d739",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f7ea8b71-98ae-4d79-8c45-9605c0304fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54fb416c-f187-4e53-88b9-5897fd5cb38e",
        "cursor": {
          "ref": "a5c64c35-12b4-4e08-b081-d97cf90a3818",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2757bb65-bbb0-47dd-a22c-a5688a51684e"
        },
        "item": {
          "id": "54fb416c-f187-4e53-88b9-5897fd5cb38e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "979028d6-6c21-45b0-b266-9d5f4e906196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d1ba83-3277-4cee-b880-4518c426e5fe",
        "cursor": {
          "ref": "25d7599e-51d6-40ef-a486-dcb45f896d2c",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d9cb255d-a023-4723-b941-d33f3ddacf7e"
        },
        "item": {
          "id": "20d1ba83-3277-4cee-b880-4518c426e5fe",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "59053945-d797-4988-a5a9-a58b5c7041e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cb6929-e780-4942-9fda-a8baa7143fe8",
        "cursor": {
          "ref": "183eca21-bc62-4c09-b2de-314292e6a615",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a86a51bc-4dda-40bb-8312-04f6fd983319"
        },
        "item": {
          "id": "59cb6929-e780-4942-9fda-a8baa7143fe8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7a2a359b-b705-43b7-a5c3-f02d670ae9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a4bc97-bc99-4a89-b160-b62eee25ce6d",
        "cursor": {
          "ref": "1746ceac-1076-4709-aee7-629288a40df7",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "236ec003-9890-4c5d-b2c0-326c020ccedd"
        },
        "item": {
          "id": "30a4bc97-bc99-4a89-b160-b62eee25ce6d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ff220523-ac64-40fc-945e-3dadae576bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7704b25f-eabe-4482-be39-61cd06a6af3d",
        "cursor": {
          "ref": "bec075ec-ad8a-48ae-a188-7c8d5dc10fd6",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b9683c73-b484-4cd2-83ca-5df9faed82d3"
        },
        "item": {
          "id": "7704b25f-eabe-4482-be39-61cd06a6af3d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1b55c164-dfc7-404e-9c6a-799b221a97cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b933042-544d-4367-b7cf-aa6f43bad34b",
        "cursor": {
          "ref": "71498e1d-9eb9-43b7-906a-0efcd89a0998",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e6619644-a2f8-4c21-9d9e-9984d8ff6415"
        },
        "item": {
          "id": "3b933042-544d-4367-b7cf-aa6f43bad34b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3b43d47f-c892-49a9-81f5-fe8c2ee48e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95a541c-852f-4454-9236-f7b44b6a49aa",
        "cursor": {
          "ref": "64d97246-b4f1-49e8-b093-061a18f75047",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "463d7284-f909-4a93-a5b6-5415e74fec0e"
        },
        "item": {
          "id": "a95a541c-852f-4454-9236-f7b44b6a49aa",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0fd2bc12-bfdd-48f0-8bc1-a2bd7b50da49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d95acd7-8ae6-47c1-a7ce-7a7eecb450fc",
        "cursor": {
          "ref": "d7e1ef9f-249a-452d-a50b-1c1e91934ad7",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "26de98fb-b620-4a31-b2f2-94fac20beefe"
        },
        "item": {
          "id": "1d95acd7-8ae6-47c1-a7ce-7a7eecb450fc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4abd2098-4366-4e8c-81e5-51a66afe266b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1396aa1c-0ffa-4033-9189-c383256ee4d3",
        "cursor": {
          "ref": "38595e4c-909f-4387-a059-ef16f528e869",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bdf67d30-047f-45ea-9b70-4ea885a4c7f1"
        },
        "item": {
          "id": "1396aa1c-0ffa-4033-9189-c383256ee4d3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "20fc75d0-9f9f-4e49-abac-8557faeb6a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a7f640-e8a8-4953-88b2-1ff54dd6a420",
        "cursor": {
          "ref": "c2e110ec-9981-478c-8335-58f274dc1a3b",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "045f1204-e15a-4135-ba56-794deae0f2d0"
        },
        "item": {
          "id": "a8a7f640-e8a8-4953-88b2-1ff54dd6a420",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "67fde403-60ae-49de-a3b7-8be87be3216c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128e52b0-ce4d-4799-ab9c-21667acf53c3",
        "cursor": {
          "ref": "03a17d54-8fbc-4f2a-9175-4fb5cd1c7621",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2795c48f-7e9b-431f-ae91-5757057b6f97"
        },
        "item": {
          "id": "128e52b0-ce4d-4799-ab9c-21667acf53c3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "75f95486-79fd-40df-b26d-b680880d975e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b173bd08-5f07-48a8-87ad-6a7828131108",
        "cursor": {
          "ref": "af79e76a-2b03-4c82-9a5c-17897621219e",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "14a0662b-698f-445d-ad40-c117d865acd5"
        },
        "item": {
          "id": "b173bd08-5f07-48a8-87ad-6a7828131108",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e9276f4c-9f6b-4636-a489-a7c9a43d9774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4779e96-0180-4c17-91c5-608df509f39e",
        "cursor": {
          "ref": "ab23c274-779b-4628-84ab-9e2f8ff32b93",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "755ca76e-f7f7-448a-927c-cd823efced8e"
        },
        "item": {
          "id": "f4779e96-0180-4c17-91c5-608df509f39e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2bd004b9-474c-4290-80a3-3ac05caff322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a295f921-9f92-4361-adab-2759cea7dfe5",
        "cursor": {
          "ref": "4476a3c5-e9b2-43d8-91fc-e352c5bcc5b5",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7e904bdb-f6d0-4dbe-9cd7-e7111974227c"
        },
        "item": {
          "id": "a295f921-9f92-4361-adab-2759cea7dfe5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fbc58402-ddc3-4edc-88be-a528ed39244f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88c457b-a72c-4681-a051-410bf58864ed",
        "cursor": {
          "ref": "438a7f18-f811-482f-9584-1e94c745648b",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0fa2da9e-a2ba-48c8-9a4b-dba02a6166e5"
        },
        "item": {
          "id": "e88c457b-a72c-4681-a051-410bf58864ed",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7161bb3d-4c2b-4563-8bbf-c5ee5673db81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792a53b3-117d-4b0c-9426-0b811dc05b31",
        "cursor": {
          "ref": "5e321afa-1698-4a06-a788-7d70b245d5ed",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "75981ecd-5da5-42f8-a0f6-a41a47601d6b"
        },
        "item": {
          "id": "792a53b3-117d-4b0c-9426-0b811dc05b31",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "66d9bd13-33aa-4bd0-8eb4-101852964942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45705143-10d9-448c-afab-265b39544f7c",
        "cursor": {
          "ref": "98be8778-398f-4386-9a6b-a59ad86383c8",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fefb6836-78f5-4137-b00b-e21f1e5013e3"
        },
        "item": {
          "id": "45705143-10d9-448c-afab-265b39544f7c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "64ec1b06-fbbe-446e-ad1d-977b675ecc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdf75a2-032a-4198-ae27-73361f6af9eb",
        "cursor": {
          "ref": "51fb265e-e8ad-43b4-af30-658cadbbc2bd",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e315187c-184f-4a71-84d1-c804fecf5ed2"
        },
        "item": {
          "id": "8bdf75a2-032a-4198-ae27-73361f6af9eb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0d0ad1c7-7cc4-4017-bb0d-2897ab0e64e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7297430e-dd96-4628-ad21-d50e3bad8eb6",
        "cursor": {
          "ref": "6cc30860-9826-4438-88f7-ead9c76e0bfc",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e0862b1b-1040-4d85-8be0-b30b5aa7220e"
        },
        "item": {
          "id": "7297430e-dd96-4628-ad21-d50e3bad8eb6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ea729d73-e6f4-4e93-b2f6-ac646589b266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2907bcc6-fb0a-4a49-a558-40a4c650bdb0",
        "cursor": {
          "ref": "c81f4d1d-59bf-43ef-b7a1-6f3398e55cc8",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9ec969e2-e6b9-4bd7-b26e-9a076663009c"
        },
        "item": {
          "id": "2907bcc6-fb0a-4a49-a558-40a4c650bdb0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "16f1ffef-b12f-4ca8-8fbc-de5e6ca34fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e07161-bd9f-43b8-a4f5-4ea0b26fcb40",
        "cursor": {
          "ref": "0b8f7c6d-09c1-4767-b361-c5cb5e0e6ebb",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c9bf9390-2226-498e-948a-b3d2c77c3d7c"
        },
        "item": {
          "id": "55e07161-bd9f-43b8-a4f5-4ea0b26fcb40",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8eebc62b-868e-4489-9b76-d5761752889b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df1a12c-fe5d-499a-81d4-a0218dce309c",
        "cursor": {
          "ref": "2a594c24-ab28-445d-9968-26d18eeea453",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5a3d24ee-2700-415c-8281-268b8422300e"
        },
        "item": {
          "id": "7df1a12c-fe5d-499a-81d4-a0218dce309c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "61bc7f25-8afd-4214-bb8c-da9096b39ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1020a03a-f6d3-4fcd-a4b8-31c26a9a54f5",
        "cursor": {
          "ref": "867cd683-e5f6-4638-a39d-331cf9d8cdaa",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8e3c2a18-90ae-44bd-b91b-c867f5ceba49"
        },
        "item": {
          "id": "1020a03a-f6d3-4fcd-a4b8-31c26a9a54f5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2f9bb7f9-52c7-454b-818c-b0937c4b7921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cd4e28-8061-42d1-bd9a-02246412d981",
        "cursor": {
          "ref": "2c2f7a24-b623-43fc-95af-7742c25d2a42",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "062ec0bd-9920-4a44-8bbe-d7a69126f751"
        },
        "item": {
          "id": "24cd4e28-8061-42d1-bd9a-02246412d981",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a3cef864-bb92-44ff-9392-d12a23e07f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3572d8-b950-47dd-8f83-0a89a71b59ef",
        "cursor": {
          "ref": "47927737-9017-4f0c-83d2-8fa6a2ae61e9",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f2f2b1c2-cdf2-4ca7-aa71-3b4ca387ba36"
        },
        "item": {
          "id": "6a3572d8-b950-47dd-8f83-0a89a71b59ef",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1192a16d-7c62-48e9-99c9-a24ef79f7bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d0cf8a-df1e-4067-aec2-d098eed633c2",
        "cursor": {
          "ref": "bf929912-e4b7-4ce9-80e7-b64c8ea0de91",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "987590c1-84ca-40e4-918c-76ca64c5e407"
        },
        "item": {
          "id": "68d0cf8a-df1e-4067-aec2-d098eed633c2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4fa3dbdb-3bbe-4d31-8a85-5bb0c393f31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6fd3907-38a4-4a32-8d5d-f84429e1dafc",
        "cursor": {
          "ref": "0769b037-6ba7-4efd-9c4e-ed6128690cd2",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a2be74ed-07b0-454f-8d64-0ae8eb881896"
        },
        "item": {
          "id": "f6fd3907-38a4-4a32-8d5d-f84429e1dafc",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "08e7a954-8b28-49ce-ae81-401543b6c309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a852e4-9c62-40b9-9919-f976634a4ff0",
        "cursor": {
          "ref": "e81009d5-994c-46a8-a366-77441112651f",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1f95bdab-05c1-413b-b195-7b4c66d9da56"
        },
        "item": {
          "id": "14a852e4-9c62-40b9-9919-f976634a4ff0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3a4de4d3-773d-4090-8fca-eb135656b81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e24ffda-f873-4069-94b2-1815060383cb",
        "cursor": {
          "ref": "c5d88ef4-58d6-4048-9f3b-8110d4b8380d",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "38d5c8b0-31fe-4ffa-a64b-366efa20d0cf"
        },
        "item": {
          "id": "0e24ffda-f873-4069-94b2-1815060383cb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cacdefb0-7fc0-4e10-9f42-e3c59e1910cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23131ee1-2a4b-4286-9408-cf8402c4ce88",
        "cursor": {
          "ref": "b1d2a42e-c46c-4ad7-aa50-34a600dda5d8",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "588e85f7-dd67-4908-ab6d-dbc85f436d0d"
        },
        "item": {
          "id": "23131ee1-2a4b-4286-9408-cf8402c4ce88",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b8789a6f-4b63-4533-b513-0a6c4e36e5f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e609ecc7-2e11-4dcb-ac2b-d21798a23304",
        "cursor": {
          "ref": "7eed2d2e-9d7e-44db-960e-b2ae9c7395d0",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "729e50b2-fb10-41df-8f66-4bcc6f5ca7c1"
        },
        "item": {
          "id": "e609ecc7-2e11-4dcb-ac2b-d21798a23304",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fc8d6bd6-46f8-4a5f-aca4-6d2478e292a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c11ae53-edbf-48e3-81f4-ece99dfa1460",
        "cursor": {
          "ref": "96c7b1a8-4209-407f-b06e-1710f15bfb85",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5462aa8d-a0af-407a-83f9-cb1d84e98e12"
        },
        "item": {
          "id": "8c11ae53-edbf-48e3-81f4-ece99dfa1460",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a198e9fb-0232-42e9-8aad-fbbcb87d4682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49129b9b-864f-411b-b556-a398ba579068",
        "cursor": {
          "ref": "04981458-000b-469b-964d-3a02c52c955f",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "62821650-065a-4293-993a-df5f99d475ae"
        },
        "item": {
          "id": "49129b9b-864f-411b-b556-a398ba579068",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c829c091-4c88-478a-9825-65d2b21372b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be043f7-e111-4d62-8a9e-20d93ca3894a",
        "cursor": {
          "ref": "2b63ae16-d1db-43ad-93fa-7860f9366585",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3cf89fec-b97f-42a3-ae10-4a41f378fdd0"
        },
        "item": {
          "id": "3be043f7-e111-4d62-8a9e-20d93ca3894a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8350a546-0621-407c-a224-8076fce9d29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edb6f2c-b365-42ac-a179-f7196e3109d9",
        "cursor": {
          "ref": "09d63212-0c03-4b0e-853e-8de96435d257",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5be1cbde-d803-421f-b453-cb7f90bc937c"
        },
        "item": {
          "id": "4edb6f2c-b365-42ac-a179-f7196e3109d9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c9555d77-3191-4080-8322-24aa595ad32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c124173b-4592-416d-8e44-09ba43f9bc7c",
        "cursor": {
          "ref": "e78f731d-fbb0-4e9d-9473-9d07bbf92908",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "543212df-0453-45dc-92dc-e0891c35e41f"
        },
        "item": {
          "id": "c124173b-4592-416d-8e44-09ba43f9bc7c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c46f55be-4473-4558-b0bf-1cab6a10b42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1958d33-777e-4618-9db9-b219b7baf3b6",
        "cursor": {
          "ref": "4cb6b097-bf82-4675-9d4e-b43a50a16434",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a03d9963-29af-4574-9f5f-0903eb025f40"
        },
        "item": {
          "id": "a1958d33-777e-4618-9db9-b219b7baf3b6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e4076aa8-e878-4197-819d-2a4d365a2ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d117cc-cd12-4091-be6d-05d352ee2a14",
        "cursor": {
          "ref": "972a54e4-d986-4d26-ab41-46edee412338",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "107e8d57-e6d1-455c-b95c-28365cb32eb8"
        },
        "item": {
          "id": "c5d117cc-cd12-4091-be6d-05d352ee2a14",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "465d1556-e2c1-4f99-b6d7-3eb4abebd033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1927e3e2-f309-4f51-9194-7349f867f738",
        "cursor": {
          "ref": "6c9bb520-5093-47d4-bbc2-72d24b3d0ecf",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c8d2f0fb-095d-43bc-aeb1-1370ba4fb1e9"
        },
        "item": {
          "id": "1927e3e2-f309-4f51-9194-7349f867f738",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "253c38ab-d0f2-425d-b73b-c050d4e1dc8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bd2bc4-bbca-4d0d-b38c-4cee635d5eff",
        "cursor": {
          "ref": "cf799aa3-795d-429a-909a-0060b38d27b3",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0b28d73d-b3fc-4826-9e99-865ca19a9255"
        },
        "item": {
          "id": "07bd2bc4-bbca-4d0d-b38c-4cee635d5eff",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0f24ecc2-55ad-4e2f-9989-a78ef49eacbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7482a1-2f28-4afb-8576-08540e052349",
        "cursor": {
          "ref": "92241bf6-0b89-478f-8eb6-35f845b759be",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3ed788a0-151d-475a-9bfd-f1729c17845f"
        },
        "item": {
          "id": "ec7482a1-2f28-4afb-8576-08540e052349",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1d2e7632-5fc2-428c-b239-0dabb522cfb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45ba4a0-9fa8-4af6-b98a-20c55655d35b",
        "cursor": {
          "ref": "5e994797-72cf-476a-87ec-6203c3d4459c",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "df1cd458-a6f3-4227-94ca-4f70e8305177"
        },
        "item": {
          "id": "e45ba4a0-9fa8-4af6-b98a-20c55655d35b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9150001d-eedd-4676-9ff7-1bca0bf989ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaed9ea0-8b20-4beb-85cf-ba0c9a9fa4aa",
        "cursor": {
          "ref": "26244829-8411-4ab6-afde-1a8e63d20b35",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0fd4d467-8caf-400c-8ee7-15e0439640df"
        },
        "item": {
          "id": "eaed9ea0-8b20-4beb-85cf-ba0c9a9fa4aa",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b082e0e2-3d49-4cd8-a96f-588a85e36a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b661fa-59ab-42df-9b97-323eff4981e0",
        "cursor": {
          "ref": "0bdf795c-a86b-4679-8279-957aea6dd5f2",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "217da6e3-8369-48da-842b-ed44078d1473"
        },
        "item": {
          "id": "06b661fa-59ab-42df-9b97-323eff4981e0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d63f768c-69a1-4100-8479-7f3686751451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941890fb-e20d-44b7-9f3f-700416c0b31c",
        "cursor": {
          "ref": "511f9f05-8b43-40cc-9fce-00a46d99290a",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a7596d28-d6d0-4414-a84f-9a6f8cd48d09"
        },
        "item": {
          "id": "941890fb-e20d-44b7-9f3f-700416c0b31c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "49866cf7-ec9b-48ae-b231-8c581f8aceb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71674e6b-c16e-4877-adcf-6a7239dfaa2f",
        "cursor": {
          "ref": "50323a36-8bff-49a0-8715-ebbfbd77004d",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f1fe930d-a76e-4a61-87a8-127d89ae5e0b"
        },
        "item": {
          "id": "71674e6b-c16e-4877-adcf-6a7239dfaa2f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "29792984-e832-4e01-9d94-4132ea217d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aad6b64-cacf-407d-959a-4b80b136c290",
        "cursor": {
          "ref": "2be848aa-4023-4e38-bba8-d914d9049bbb",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bb5f4ab7-ed2e-48e8-b9f4-38b7e0eb4824"
        },
        "item": {
          "id": "0aad6b64-cacf-407d-959a-4b80b136c290",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "82f32e82-c439-4f74-94e5-3897a7085811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8368be-df4a-434d-82a2-ce42e2e4c5f3",
        "cursor": {
          "ref": "b15f5abf-e859-4c5e-911f-6f5a9b3662f5",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "85d679f3-7aea-4a65-b832-5b52195715d9"
        },
        "item": {
          "id": "2f8368be-df4a-434d-82a2-ce42e2e4c5f3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c6a1eaf7-f308-41c9-9a0e-fb36fed5bf1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebe52dc-d993-4441-9a6f-df1fc78873d2",
        "cursor": {
          "ref": "1e8eff65-0ce3-45bd-9096-a564adb8fe8c",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b2ce4e59-ec03-4577-be45-6ac90e5ee84b"
        },
        "item": {
          "id": "4ebe52dc-d993-4441-9a6f-df1fc78873d2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d981a972-7361-43bd-91fb-074e1e802d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4291f115-3dc5-4bba-8786-c3ff27061303",
        "cursor": {
          "ref": "11f264dc-44b4-43a7-b45c-599af899db65",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "36c3853a-5bfb-4725-b7b6-620e9cdc968b"
        },
        "item": {
          "id": "4291f115-3dc5-4bba-8786-c3ff27061303",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1a3c1d92-bc81-4745-9279-a139d184131e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1da7e3b-dc95-45a0-9b18-06506ff3b656",
        "cursor": {
          "ref": "0be15d7f-c8a0-46bf-8281-382835ad91cc",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8ad95e1e-0e5a-4ece-b2a7-5ced14341e46"
        },
        "item": {
          "id": "e1da7e3b-dc95-45a0-9b18-06506ff3b656",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cd2299ec-d22d-4dad-84cf-343f2091963d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e107326e-b27d-47b9-a156-82aeeae2677d",
        "cursor": {
          "ref": "43e5de94-3905-4f04-8cd4-895ceb600525",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8d0d4b00-1f36-4ecf-9b46-3d3d0a9b9f9e"
        },
        "item": {
          "id": "e107326e-b27d-47b9-a156-82aeeae2677d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8466df42-31a8-45ae-ba71-5c0078cfa011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de41a3f8-2b91-4d87-92dd-d37160e7e1f8",
        "cursor": {
          "ref": "7f0096c4-8639-4080-ae2e-a33800c7006b",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0dcaf9de-5e3b-4f1b-b8ba-90eb089ad4e9"
        },
        "item": {
          "id": "de41a3f8-2b91-4d87-92dd-d37160e7e1f8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2f90ed28-b969-45b4-beea-c077cecc33b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25588d5d-fa5f-4d9b-99c6-373a2382b85c",
        "cursor": {
          "ref": "1378a62e-2176-4370-8406-8ec5edffe09b",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "940daff7-c490-47bc-8f92-14bdbf0f7245"
        },
        "item": {
          "id": "25588d5d-fa5f-4d9b-99c6-373a2382b85c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "101f77c3-8256-47b5-a6a2-6cfe6a7a1ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7311b3a1-343f-4cf8-86a0-b8999c575bcc",
        "cursor": {
          "ref": "65c33686-3d49-4c44-ac64-bec377e8d836",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "686d68e3-82ec-468b-b1f8-15eb69f0fe14"
        },
        "item": {
          "id": "7311b3a1-343f-4cf8-86a0-b8999c575bcc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e2610151-55d9-4917-92ce-998a05c9ef39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3d8e5c-65a9-4e7b-996c-d9449c84a4d1",
        "cursor": {
          "ref": "f7453d18-013a-41cc-8dcf-b56663e50514",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "565472e9-4877-4c16-b23a-186c72aa26dd"
        },
        "item": {
          "id": "fa3d8e5c-65a9-4e7b-996c-d9449c84a4d1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c083155e-9a0d-45c7-bc8c-e25baf0b4344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9285a6-afa8-4fa3-8ba5-bb2eb7ef5d8d",
        "cursor": {
          "ref": "1c1e1539-64e5-4406-80f0-82608bd61f62",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e5a06630-235d-4a5e-9c76-f52c8cbcb7ac"
        },
        "item": {
          "id": "9b9285a6-afa8-4fa3-8ba5-bb2eb7ef5d8d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a8b4b5e4-f3f7-448d-881b-2326f5406b2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "bcbe946e-1bad-447f-b0e1-2bbdbd777215",
        "cursor": {
          "ref": "f0ecca75-e90e-4a2c-8c58-9ceee05bb59d",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c06b580a-3ec1-4fa4-93e7-ad35a0dc62da"
        },
        "item": {
          "id": "bcbe946e-1bad-447f-b0e1-2bbdbd777215",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "9a0527eb-838f-4488-bb60-f59f93d54c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f0baf4cf-478c-483a-a9d8-c12636e3f629",
        "cursor": {
          "ref": "7868890f-e31b-4a92-b95e-1891f12c8759",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b8f536da-dd7f-460c-8ebf-ee44724c3952"
        },
        "item": {
          "id": "f0baf4cf-478c-483a-a9d8-c12636e3f629",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "52323802-9ebb-4fbb-9728-547df595f57b",
          "status": "OK",
          "code": 200,
          "responseTime": 402,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1051f9-6fed-4a21-9a6f-1d731ae0f8f4",
        "cursor": {
          "ref": "19d7bb9b-1af7-44ff-bf33-47338837cf9e",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7c803fc5-9b7f-4cba-a155-b8d95fc47d35"
        },
        "item": {
          "id": "0a1051f9-6fed-4a21-9a6f-1d731ae0f8f4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b7278980-4164-4d20-87b7-65b8adf08861",
          "status": "OK",
          "code": 200,
          "responseTime": 2979,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7164f2d-f206-46bb-8d81-d1c962220517",
        "cursor": {
          "ref": "250339bf-e211-46e0-bac4-094578d608fb",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8c41e422-031e-4211-9567-2a1132310d1c"
        },
        "item": {
          "id": "a7164f2d-f206-46bb-8d81-d1c962220517",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "eb817f5b-12d9-4394-843c-b68405686cfb",
          "status": "OK",
          "code": 200,
          "responseTime": 2162,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2596bc5-1d4d-4756-a128-d0ac31c30fa1",
        "cursor": {
          "ref": "263139af-dbaf-4af3-a49a-6b8be951f13b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "17afe61b-405a-4b16-95d0-e66e2a5011eb"
        },
        "item": {
          "id": "a2596bc5-1d4d-4756-a128-d0ac31c30fa1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0d8e3b74-8c89-4637-a62d-8e957968b2f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a2596bc5-1d4d-4756-a128-d0ac31c30fa1",
        "cursor": {
          "ref": "263139af-dbaf-4af3-a49a-6b8be951f13b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "17afe61b-405a-4b16-95d0-e66e2a5011eb"
        },
        "item": {
          "id": "a2596bc5-1d4d-4756-a128-d0ac31c30fa1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0d8e3b74-8c89-4637-a62d-8e957968b2f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a2596bc5-1d4d-4756-a128-d0ac31c30fa1",
        "cursor": {
          "ref": "263139af-dbaf-4af3-a49a-6b8be951f13b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "17afe61b-405a-4b16-95d0-e66e2a5011eb"
        },
        "item": {
          "id": "a2596bc5-1d4d-4756-a128-d0ac31c30fa1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0d8e3b74-8c89-4637-a62d-8e957968b2f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3e665092-13e7-41ac-94b6-458c2d1b4a51",
        "cursor": {
          "ref": "f55ae213-29c6-4fad-90a1-16c9f00b0af0",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8166cd1e-10aa-41dc-988a-3b28005b13c2"
        },
        "item": {
          "id": "3e665092-13e7-41ac-94b6-458c2d1b4a51",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ce7bae41-1189-45bb-a85e-c7a07645af2a",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "4ddea61c-b6d5-4a1a-b347-7c6f6e311e80",
        "cursor": {
          "ref": "9ed12bf9-fc36-4dda-8f24-39ce056a594f",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "15336b4c-6024-4ec1-84b6-1acbc6d5f648"
        },
        "item": {
          "id": "4ddea61c-b6d5-4a1a-b347-7c6f6e311e80",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e3b7cccb-b36b-4003-bd2d-b0851b41dadf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4ddea61c-b6d5-4a1a-b347-7c6f6e311e80",
        "cursor": {
          "ref": "9ed12bf9-fc36-4dda-8f24-39ce056a594f",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "15336b4c-6024-4ec1-84b6-1acbc6d5f648"
        },
        "item": {
          "id": "4ddea61c-b6d5-4a1a-b347-7c6f6e311e80",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e3b7cccb-b36b-4003-bd2d-b0851b41dadf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4cd52256-f71e-44d3-9b1d-05a385c8219a",
        "cursor": {
          "ref": "e09f6784-31ea-4330-a0a9-34fe118c52fe",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "caf74dd1-2cf9-41d4-9ab2-8de7ea5ca250"
        },
        "item": {
          "id": "4cd52256-f71e-44d3-9b1d-05a385c8219a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f59d2fd0-7ec1-459a-8c84-0f11a42122d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 129,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "c191cfa2-9cf8-4403-b251-0527e93a351a",
        "cursor": {
          "ref": "ccc14aa4-2bf9-47ef-adb8-65b63fc65491",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c917dff2-5dfb-43cf-b5dd-06cc42e44c2f"
        },
        "item": {
          "id": "c191cfa2-9cf8-4403-b251-0527e93a351a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "466825fc-d22a-4d86-8751-9b5b89eb9aa5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c191cfa2-9cf8-4403-b251-0527e93a351a",
        "cursor": {
          "ref": "ccc14aa4-2bf9-47ef-adb8-65b63fc65491",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c917dff2-5dfb-43cf-b5dd-06cc42e44c2f"
        },
        "item": {
          "id": "c191cfa2-9cf8-4403-b251-0527e93a351a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "466825fc-d22a-4d86-8751-9b5b89eb9aa5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1533fbae-8d59-4b80-bd20-657331a3197a",
        "cursor": {
          "ref": "746ed52a-765a-4e22-873f-1973929f656c",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9f57aa8e-bae5-4562-bb37-f4187314a760"
        },
        "item": {
          "id": "1533fbae-8d59-4b80-bd20-657331a3197a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "cc58bd34-6d92-4162-a516-a1624ff2dabc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}