{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8babaa33-c356-404a-a10e-088697323bb0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1d214264-730c-4b35-ae80-1efb34278b4b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eff47c5e-78d3-43f4-8924-269633443a46",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f7307883-a9d3-4d96-a9e3-1335006568b1"
                }
              }
            ]
          },
          {
            "id": "2c33cbbe-096c-4f6b-8754-b1ad6f13996a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f18a985d-02c0-4961-843d-07ddbbfbdaec",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "55a02ba3-5d10-4cc3-8137-997e34d8f6f2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "82bea1bf-204c-480f-89a9-72eb99945d24",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "08491ed8-4d00-4df6-af52-0b5bb1ef10a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "884d316e-53bf-4d17-aa49-f5fb5be6ad3f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1adb8eca-1498-4416-8444-87f09c2a7159",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e1a8fee-585f-4c4c-817a-007ff65d3ff2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6b2670a8-58da-4394-ab61-4f912c85085e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5965291b-c005-4303-90de-e1d363287db9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "860609c7-5209-4046-9e67-ab38f15d5e35",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86e93c6f-5bda-4a27-bd9e-c15bb1fdc3aa"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc93ab08-01d1-47a1-990c-be858fe7c662",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ba1366fc-5859-4a74-8760-1b0e92eaa919"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b4468c5-35a2-4826-a867-cac1d5ad7a2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7833aa05-c92c-43f9-bb32-03eb5021b0a2"
            }
          }
        ]
      },
      {
        "id": "a50dbca4-e80e-4b1e-9697-4b31bdc46768",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8b4df151-1c3e-44a3-ad60-79107d91cdc9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cec15ef8-9421-4e8d-8e69-1671bc60cf3b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "32925a74-5f6c-41a2-9059-2b9502fd0875",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fed3d3d-d80a-4425-a33d-2a65a6cbf485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8af69e4b-a7f5-44c9-85b5-ae74e5b56928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59b22f7-f2f6-4887-a408-29e02af94c18",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266c06a3-1924-44f1-8c5b-27aa8d6a2a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6214a6ec-ec04-4435-83eb-d7b67882239f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a53c75-a0e3-4757-8de0-a550a5464eac",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46ab9f8-7784-4294-843a-7da9aa0d0dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb54e51e-c69f-4299-a13c-fe32d383250b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7f9f3648-7ad9-4b6d-8463-52a1f6137a34",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45695c55-0652-4fa4-83fc-6f8a259d0f10",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f078ce-4f25-4e5c-9a6f-615f9196dc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5b404df-8945-4a12-b8c0-d29a5e93fa39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63db95af-aa70-4d75-8f85-9e0220dee7ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c71591f-fc8d-4547-8f11-d09a57217a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a47cc38-9822-4498-9634-929a5026fdea",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c1be03-7731-4ec4-8a9a-5d71750e612d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd8beec4-6044-4c12-b705-b7abdd92096e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b370646-86ba-4623-be01-77c72b2989ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "5f361072-0f6b-4e3a-b9cb-b8c7722fdbf1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fed2581c-b51b-4890-99fb-1c0f3b8ae4e5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7bef6e24-934b-4408-8f3c-f2ef03c8e1fd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f99f934-1a7a-460e-8454-c9c8e5ec0e48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "60cecdc3-4497-486d-bff0-854312800004"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd5a3d28-09b1-4e6c-9ab1-89b7046c6055",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "54cabcc7-153e-4e08-a925-a1b4654ddc2d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30d50c67-aed4-4c3d-a3eb-1d78ebd615b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af5aa822-4a13-4af6-a4b2-ed46d5189496"
            }
          }
        ]
      },
      {
        "id": "1ccc2c9f-db52-4130-827e-1e23f5f6f57e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "074251b9-22ef-40cc-ae35-905c4ae5f060",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f1484930-88dd-4dca-b621-d15851af8987",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "73f3cbe3-b560-46b0-b978-18934c349ef0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9c100e-1c06-4fa7-bc75-1d00bf41e8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9761282c-f7ec-47bc-b31d-e86959ff8c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d226f4a-a757-409f-a18c-471d98b585fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61243b96-6515-4441-9896-a39e8ee7ee82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87dbe3f-4356-4810-b108-6f14eaa5d933",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75396888-f3b6-4a4a-99b3-dbc921a9aa8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59df79e-b41e-4d0d-90af-69866c268151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882099e8-f4a6-431a-9560-d6300d704365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "625651cf-26e2-4d40-aa60-4b876093a4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5c8702-b828-4870-bbe9-94aa2e012fda",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e990ac-4cee-412b-8ace-3f34b021011b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d2fada3-2c02-48c7-8add-adee47b37c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4383b52-c20a-48f8-9fb8-7e4b3d0168ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb34d0e6-11a9-4dd9-9713-aae7ed13b099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7756fa46-bbfc-4b23-bd6f-c840c39d9f23",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374364ca-d65a-4785-a5d5-b07d49e1ed8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d9bf0b-18ac-4e31-a508-ef2123e4d125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aaa5b41-0681-4f9d-8e49-211704b1e3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00e489ce-a514-4054-a28c-c6aa51a4679d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185d2348-5f99-4cb9-99c0-22dca1e695dd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c0840c-2516-4143-9102-3db587790e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890fe6a2-31dd-45f9-b006-3bfb21560ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995dd1f1-c853-4dcd-8fb8-a4e3b6e8edb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d10363a-54d5-410a-b7da-54ae649d0b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a7d908-d477-450d-85a2-417ad2fc3110",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a3a145-79ed-4749-8265-de475a2bd3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49a84fc-bdaa-41e5-9e8f-7c828fec9dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bab670-37a9-401c-89d8-5fbd9c69dec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8966e776-7d0d-4157-9381-629764796a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54295546-ad28-4488-b97d-f0f8724ad484",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4627ad0c-fae2-4b86-828c-0bbf0c98495a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0860e2c-d08f-4da8-8cfc-dca56875c2b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225e07cf-4b0e-433f-93c2-419e959f0a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4486f14-e635-40d3-941b-90b3d0ae5e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678aff29-ea22-4323-b296-e4bf4f3c9c0e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64aed34f-5adf-417e-a9ad-38579f6b1611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1863b256-6d53-4e19-9dc3-c7ddc6236083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e73820e-9692-4ed8-a174-487fd3f17027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7f0283f-2740-4c63-98df-d3f1f325800a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0a90cc-9f1a-46ae-9ff2-63bd9013af2a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab4cffa-9604-4796-9c08-3270351b3a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77663ade-96b6-4b4a-b896-b0f05e0730a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3892ff-c6c0-4552-87f0-85cbeed21eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b2116a3-46b8-48ed-a081-ccfc27cfd11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20bca93-a8b7-446b-964f-e4fda6c1507b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0634af0e-d3a1-4278-ae66-399ea80e6d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f099d0-ced9-444b-b3fd-3465676de442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79148721-ec25-4289-92f1-513cc34bff6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a285bfe0-8dca-4592-bae4-7b93e0f4e945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de53a72-45d4-493f-a981-11e9fe344920",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4524dbc-9a02-447d-bf03-964534b2da5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8614fb56-9af1-4a26-9109-7fe2432a52b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640b19ee-f805-4198-9ebf-a3aebf5dcd2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93c2a5af-2487-49e1-9971-cf56d2016422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda7e39d-1196-46b5-9be5-84781738edd8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7563dbe2-1f90-4c3c-8ad6-1764f2e6a44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8bb5a6-1ffa-4395-aeb1-50b9201f4212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a7a3ab-53a0-42c2-81b7-365df6b41493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "444c1ad6-2907-4f0f-886d-548b14367fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b35bbe-849b-45a6-af35-2cf6c283af0b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588ab69d-0598-42e0-82e1-60b1418b947a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14054a15-baef-4863-8e5f-a0e594dd4f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4c9c1b-0b88-488a-b65a-d72b3057797b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4af0236-6d9c-490b-a7e3-a8fac493a3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d26d0ef-3616-4935-842c-d5ceeb5ebc3a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f09161-65c6-41f2-aafa-e62c1242bca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217c4345-4047-4f4a-963c-88e98aabc1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3477ea-e6c4-4ba6-9ddb-71c6eb543429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2c19768-6ccd-4b74-9f1a-9e57b72fa018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29faf2a2-3478-4b2c-86de-14aa32c8c302",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3abb59-1349-46a4-9ff9-7a13ba68bd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fc0307-b779-4869-8f08-6767d4f8e27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3357af71-f220-4b3a-a81e-4ab2366f1721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21354ab4-b6d2-41e8-bbb3-5f552adb5e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36935c74-1e42-422d-84b2-4dd9b4ca9ced",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71515ae-d1c3-45a1-980f-9a8873a5dac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf073475-bee0-438b-bf9e-a44605ebb9a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e90d961-49d5-43fb-a299-36ae96f1cc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1df1f9f5-e48a-45a1-aa13-20d450bd7449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa889c10-f292-4f5e-8a38-90825b66cdbf",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48614fb-2d80-4490-87a9-fd7948b5713a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c8b2642-6239-4324-aa31-de2822d17a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcadcd98-84e8-4d7a-822b-3f86275fe148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b34b3f3-0ece-4ce7-a3bd-0b8b987b7c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccbf2854-35d1-4558-9429-14b7fc4ca347",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c672d83b-9220-4021-92a1-eddcd306cd9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e7055e-9eaa-4c5f-9757-e716e8ff711f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf4c0c6-9330-4420-8cc6-4fb349e9948e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "836afc9e-2471-4d99-9ac4-a56062907365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367b1049-7ee8-47e2-8edc-3b1f20aca7d3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b306cd-661d-4d7e-a44c-8333084baebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39aa4914-4d20-4095-93cf-1399cdcd8477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a9b51b-0324-4f7d-80f1-daf3860424b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b769aa-7f6b-4be2-ac78-02fef730dc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf7931e-cf8d-4fb5-8bea-62e03d0eeabb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9233e571-f542-4799-95e5-c43f365ca6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e4e005-e76a-4bb9-9f99-ddfc64247b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ad238a-1575-49c7-81ec-19c7903081a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25fb0554-50c8-411a-bd87-0a5e2821e0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0801a4d7-5efe-4281-bc5c-9ae969069e73",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af91788c-7301-4bd2-b29e-7359957dcf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3e9c6b-d236-4483-ae5a-86f14f2deff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f323a5-1a7a-44a3-9e75-f3d98ababfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c32882-904c-4794-8c3a-8886ab6854f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33ab776-2546-4e3d-a9dc-466949cbe2ad",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0735a3d-568a-4b65-8b60-4529b80884cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d44391-8845-4034-9b30-ebb045ea26f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720d1d0a-ed66-4100-b567-055cc8d15520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "78af1bd8-9d18-415c-8e85-df391274174e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acaae372-d74b-45f2-80fd-12b3fdddcea7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916c038e-26e4-4174-b2a4-3d5e39e007d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc0d200-527e-4efe-8587-014a64c14d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700e0dc3-ebfd-4a2c-ba3e-1faf77cd2398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dedc25d3-f06e-428e-aedf-5b37500e789d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8516be4-2a14-4120-99a8-ded06e18f440",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6f53d6-591c-4487-a746-7ae6d1f9416f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5709af18-efdc-46a5-a49b-d317bac733d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd88415-0bfa-4f25-9b5d-a6aeb67d897a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed21eda-1a43-45bb-9881-12888ff2ebe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ca8faf-ffd7-411b-92a0-838f1fa52e28",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea68b8ac-bbc7-4581-9567-9a3cdde6485f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68032ff-c87d-4ca0-87ca-8f885c29384a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c7b730-24c1-4b52-859e-3e6cf594f97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "676fb4c2-76e9-4e4a-8103-33473bbefae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a952f0c6-2183-44cd-bf47-0098f4f9a160",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "017de10a-9a14-4172-8959-1459dfaaf561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e28a7123-19a7-41b3-a2ea-14121b4756e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f63fe7f-1474-49d7-8ddb-c2ccc0d14b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bae0f45-82e6-4a13-b65a-dd34e381d81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de5fd3d-1ff7-4e31-98ac-845b7c84a46d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f42ed3a-5e89-45a7-872f-51328db2fb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a246b8-4d96-4a26-bb41-0c061e458428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7e96ce-6b76-4b37-a03d-b9087f5b0bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "740230d7-af63-41d5-8776-331b3e3e02e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393464ba-2ec8-4db0-9a68-9b45e9f009b2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f8ed78-29e4-4011-ae38-4389f110de42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f708e25-7ef7-443b-9fbb-e2f8c782c8a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bcc803-655e-4ae2-9baa-4b44a3c0d1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d38906a-24b8-45e7-8bdf-b25abe56cecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ce7535-a78b-43c1-b656-a4422ee9736f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb015f0-f75b-4d92-a99c-f89ec0c9ba37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38ef398-6877-465d-912a-d48e269cb06e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853b4ed9-d433-425e-9850-93c3d6aa3f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5622f34-671d-4267-9b5f-be7b2969203f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b980397-e63f-493e-8e18-a9d344b67c26",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9754b6e-c0e7-4de7-a8c8-67d7bd6bf058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06f9c33-5ccf-4d55-959a-66fae1dff914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e614e3c7-6c5c-4590-a2df-5e0edb74515d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1af96ef-7d9f-49b1-85ff-a24d6fd16370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a4c0f1-1958-4187-8b70-bf53018a9377",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e710121-b146-4540-888d-ec5c52adb49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e911095a-347c-402e-b3c7-452570a94e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d11a942-dccc-4ac6-b1c7-10b88f4cd9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "043d6d6a-d626-4455-93de-87bc0640ae50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c293ec1-fa51-4d00-8c02-1e87499d969d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69295e1b-c9f9-4b35-b7bb-ceab384b7eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5aafb34-265f-4d61-8801-3d6c9384f88a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e921afa4-2410-47c0-a49e-9658cce1b411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4c343a-d4e5-4b4b-967b-65a6fcbe500c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da8c06e-c6ff-4972-b843-70b75a5c6656",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410e0074-8f4e-478b-ba9a-63d3f7eadfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a722b3d-1918-4a8f-9946-5c6794c3faa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e79417a-f269-475f-be55-0cfdc860b361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e904803-110b-415b-b224-5a518687a21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f243c267-d6f1-41aa-a8d1-169b4d399b81",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e0f9aa-19a8-40f6-bce1-24ddb8422f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2636c1c-c130-416e-b585-a2a60409b630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8645d52b-2ee9-47af-899c-2ddda368275c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f540af5e-9ba1-41ad-a3db-1c39712716e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa6db43-aafa-4ed1-aa47-daf3e55523f6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7a4927-4753-48ec-abe1-3c5bb3f129b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4878a14c-b813-4340-922f-7dc9ce31636b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdebdbe-cfd8-47cc-beed-21ac380e4bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8b301e32-7f59-4bdb-a3dd-c6fdd5f5a616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c039f4f8-c033-47d6-872f-87f235d67862",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c99984d-26ed-4ce6-b59b-b0fbae838fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0df64fa0-6215-42a9-8029-a398266fd3b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c22ef33-1bcd-4af1-a53e-30c7d2fdf18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "753d27ae-848e-483b-a5da-6c4cad3cc67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535e4b95-d6ed-43d6-8ca2-879289d21d13",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1213a1-d9e3-47f6-a43a-022bdcb0cdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972e579c-e71c-4d71-822b-e00e5d41c0ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dbabe1-af3c-440f-9e69-769857bf3c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4a8887-89d8-41b8-a87c-52c4a49d778d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deeff891-ec9f-4dac-920e-13602c449d57",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1322fbe-ebdd-4f80-b0a8-1a904a1a7815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53aac473-7056-4e13-af69-685dd164630e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7214c4-2239-48c5-a82e-3f794d1efc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9cf2ada-42e2-4696-b098-ae34bf2329a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6a74da-5080-48eb-82dc-990f7bf64611",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2deb0a7f-ef36-4a25-8a15-481fb09193e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4360fb8-ce4f-4005-bc71-61e07b64d411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e78b65-f2d8-40e1-8319-c930db658b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "01cb22c5-88fa-4cd2-9214-28dfdd4ae20e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d757df5a-b35a-4351-88fa-42b2ba449935",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28030e80-a33d-44e0-ac4f-1f310676c23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454fcb2a-ed70-4af9-aca1-a0157c981e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7c413d-92e1-4c0e-82c4-78b3a63e8825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "39d5a72e-a6fd-4e4b-a4a6-ddffdb83f266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68793062-f443-443b-97ec-7d760c96485b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4b29f1-10d5-4028-ac07-34139fc0fe43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b41184-7540-4432-be44-b9cee58a6625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a47393-7b76-40c2-964b-3726183c716a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f78d5ce-dee0-40a5-8517-791fb44dfc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882f5f35-7b09-482a-894e-9f64d563d1e0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f878230-a8f4-4d0c-8f41-c53e586af935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c16efe6-8691-4e9d-b83d-de7461f9feed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8a875f-a4b4-4238-b3fe-ee8be9806243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e05b3b05-e3a6-4ba4-a147-f991670a541e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7e2a34-c4b9-4c2a-bd14-127442d78948",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619847df-837d-4455-a017-0e808bda6f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48e79dd2-894d-4403-80fe-16bfa31c3cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a94956f-53d0-4f16-97b6-e2c64ddfcfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9533897-7da2-4f63-a20a-3ea58058c516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016f4cfd-53c4-4141-aa50-df25af77680c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a29d7d0-2f6b-43b4-8e10-24587bc78168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a312fd3-0c2f-443b-834f-49f6cd3a022c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32a2052-fa85-4455-8d3f-e8224f506eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f530bc9-87e0-4b95-95da-8266fbf6a2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac19267-ac45-4261-bed9-e4009acd85b1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4404dc2-523f-41f5-b476-c9c6ac757277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a90d6b5-1dbf-4102-8990-a33bc2c4373a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac36923-db93-41f0-b0f9-8382516ee085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b663548e-796d-4b18-a161-79d5e6ff9ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89b24ed-5a62-4a05-aae0-45ca5012f1f2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f068760-1d56-42c0-8afb-cf0e1f9aafe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9e8535-aaef-4ff3-b6fa-46efd8a6a8ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb092b99-8f2b-4b5d-9d51-4384d54bf9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29cd6f6b-48a1-4f76-bc27-0ca3a1818496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b808172-5153-47be-b9dc-5a4565cf4ce8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28bcee72-2ed2-4a31-ab20-06b7ccb4a9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57226959-1a34-4e26-ab17-7773946be8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d8581a-6d72-4cee-aa0a-aa794c549e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f02ebb7b-33e8-456b-aa37-50824de48f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce708f9-a07c-437d-97db-080b6deb742b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ddeb15-e099-4517-b512-4f3c33fb31b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99857037-38ce-4308-93c8-94e8ce860195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ae90b2-ad96-40d3-99ba-6ce2d98398d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98157abe-a79b-4bde-a56b-cac00b6cc576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375b582c-5a97-4c30-9dbb-98b97ef89ed6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b813ce21-b519-479a-abb4-e323b4d6512b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac85cba-e2b1-4998-855f-e2fa30c3b023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0351d35d-891b-4a40-bf76-11630f24946e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4424c903-0551-4357-ac41-975a26adb5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e28f6bb-a9d8-444e-9627-14e7360e3ed8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87bfe4c-5e37-4ce0-93e5-77c9065a290d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7138189d-0e9a-4dca-ab5c-119c248ec123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a681d8cf-e62d-4515-be32-136daa35dcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96c79e08-c13a-49e9-a4c4-6126f543c24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f37583-f2f1-4020-b23e-9ce1cfb24157",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c689194a-74d4-4539-821f-ce4c8220fc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cfb34a8-da11-4da8-9ccd-5d4f21ece260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7822f293-4648-49d5-b955-afcd8b0ea287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "81772723-8a5f-4bf9-bad9-39a7d4d959b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da058ea6-6221-4c6c-b542-69b062b49c7e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b282b893-f508-478a-bb01-27a39071a15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370b7908-a035-477f-918e-cfa1fefe9afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1481a0b-ab67-40d0-8a02-94787abd3577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a27272f-614d-4d64-afcd-b76b592bfb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023f4568-d47c-4657-a42c-d485663076ff",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3737b06e-1c6e-4386-860c-14a1d9b7a5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40555a39-cfbb-441a-ac44-2c832f2e4b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b3c98b-6f15-40ed-965c-7eec9caad82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd0dae1-1700-41d3-9909-218348be0578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75ffbf6-3544-43c5-8bef-070a53d52e80",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05073c16-da9c-45cd-8363-ac22418a1e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e8cfd1-452a-44a8-a0ce-5b49c8949ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bb2dd8-89a9-4412-8122-5dca527d52f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b70277aa-fd86-4b5f-b9e9-4500280a81c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5523a44-cd10-41e4-9e96-8055683c486d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a396a1-ca83-4e00-a96f-d72ab9a8d56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf30442-8c8d-4636-80b0-83e820647626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdba7e8f-3e37-4866-ae00-cf7d7d3b1163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb2a840-643e-40ae-9fdf-aa96bd08301f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe90ab3-cbfc-45eb-9b4e-d58f7b1c6940",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166a0396-cab1-4623-b896-d304a46e56f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66218afd-8add-4181-89e7-c66fbf3a1362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50af3396-8253-4c31-b762-c4b85ec6fa9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "df975e21-80d2-44d5-bf22-d0d5ea47a5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200d6a6f-72e4-4730-ad99-2fd40fbe3255",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8273cc-7ad3-4774-bcc5-c434f713edc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d578a67-413e-4d68-8e7e-270e0917f39c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7199da-5008-4f9b-bf36-e36300ceafd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9792920b-ee02-4e4d-b809-f030cf94dc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab9d994-5375-4c82-b31c-3c9920fec3d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee95ffa2-73e2-4cd0-9073-0483e48d68bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0966a80-2c80-4eaa-bd02-34777cfb06d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d3ab7c-3c59-49ca-bfed-69d70c92dfd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dcd280b-ea67-4711-aa2c-88736f6edecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdb9c06-9712-47fb-947f-0e420794356d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c1c9f0-2f99-492a-85d7-5f925c229650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4deb1801-4d0c-4e82-b940-7514a99cbb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6db6d4c-1409-47d5-9643-7a1e81186aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8db4be02-ea86-47e0-a9d4-844542b597a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f22151-ac84-4932-b1ca-8799e9c20e52",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afb4785-3523-47ac-b024-7b43e5060c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4ca550-c93e-45ce-b9de-3a7a3dbd7bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476b8535-0045-4dc4-93db-44b7cba7b85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a458e80-5d23-4c76-b4f7-5528ce05d150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0541893b-1dc4-47fb-afd4-91d3dc6a29ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b64ff5-e03d-470b-bdc9-3b0d123c671a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34c4060-65b7-4944-8d59-2b1dca300671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e70e3e-d2ee-4585-81c0-ede3e9c7efe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac23680-cb92-47e5-bec4-a4284d7d97f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07bf684-b4dd-4397-a338-d5017e28e0c9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa39bb6-2ab1-4a17-a2af-6a80d67987c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b19783-20f9-4c85-bf5b-1332e38bb612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c29cf0-67d9-4520-894b-082f24160325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e5feb7-de22-4ca5-accb-1d74f42b7c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc2bd94-2f3c-43f2-ab81-8384a7a3fa15",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b6be64-98bb-439e-ae87-d1ae56dffbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ebc6559-5005-4688-b572-aa5f10f2f39b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0643e67b-8970-43ff-a802-d4519ed11e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "20ea557d-577e-4f4f-9dbb-1709463fefdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d8b800-da09-4e26-b68b-9eea76117455",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc56751-750a-4a59-ab32-05e21cbe79b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437353c6-fc84-4133-bc37-a868209f0776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745c026f-8d9a-46c0-b445-b8354824521d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2385d8-1ebb-476e-9f91-ca82378b84ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ca5e45-1733-4e63-853f-d16f997a9dab",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecfabff-b7d1-4b14-8d2a-b82e6d82d58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f65fd35-2b14-4ed3-90ca-cfd22046cf94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dae23c2-b63b-4edd-89e0-46514d6de083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90343239-8b22-43d9-9416-ef1d95048bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3269c47c-5c78-4fbc-96fd-25ac0d939062",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50a2f40-ef59-43f6-a3ea-696954d3271d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e214bff6-cfb3-4649-8388-d0c0577dc4fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47a6bbb-daf7-46cd-b904-bf4b2e9b8993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca16bd75-335b-4318-95bf-d4fcfce4273c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a00544-e973-439f-89cc-6a98ace24d88",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19488ac6-026b-474c-85b5-b74c680e24d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58bff08-5843-4cd5-9a4b-1aa449ac1fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99562ff-d3ec-4bf5-b668-a5dd23f104b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3cdfb178-933d-4332-84c9-59ee0ae105fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644eba7e-64c1-41ef-b152-cfaddc4c1814",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd551083-50ae-40a5-865b-c1bca6c1164a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52345fa-46a2-4f80-8e07-e1af5beab370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a266597-049b-4e9a-ba93-56306740ebd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "59955a6e-628d-4358-8505-6cb13ac5fb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9fd7dc-3de4-430f-b0cf-abbb2fc2a3f4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29428d88-cde9-4126-9c9f-7e6adbc17fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc24c6e1-fd6b-42e8-b0e0-d7aefb9deb32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1a51f7-3936-4d98-b1ed-77b903c9b02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1009e163-b459-4989-81f1-0869d84ea08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b6049f-b12a-4361-8da7-55bb85d6f3d9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc62497-e7b7-404b-812a-629b7dc41510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1fe9b0c-525a-4e8f-9bb0-12945e951427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1799e68-c609-4f36-8b5a-92d318da451f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ccc748b-f238-4f9d-9695-64ebe0f6ce59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d983e0b-c6de-4bb8-80c2-cb2a0f285884",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac340cc-8f71-44c4-977b-df1fcaa8aa6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc05a9bb-bba3-4185-b29d-0dff662c3e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc83502-9b33-41b2-8c22-fb4e03235ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0a57fe-296c-4284-901e-84dea3b1f6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2cf9726-a0f2-454f-bb03-b94504f56570",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489b5fce-d39e-4088-9430-fba977a8756c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb261192-c345-4212-97b4-90cec87e2ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6af7259-5d6f-402d-96b3-cef120b13f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "318b49e7-007e-47ab-b14f-7927ac395d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999eb8e1-2b58-48b1-bdf6-472791250d49",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753f0bfa-35b5-49e0-8916-6d297380d319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12fd3bcf-6fe6-49b0-b1f7-925ccf94e02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05613ef-2c76-4f53-97b1-a3c5a99611a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8caa40f-1792-445d-9e38-2676fe4a55ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ff8cd1-bfb5-4e0e-bff6-e1e89d825a5b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b848355d-7ba1-482c-a616-baf4e2e37fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41806bf-56da-4414-93ba-d5fd4dc3541e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681198f0-ad30-42db-a032-c44dd76ea30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b448b611-eb71-4f8a-8b06-b57b079753e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c067c176-52c7-492c-bfc7-636f008758b2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1570a96a-33d4-4e8a-bcf5-3db2dc5fd9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126d1ada-cac1-4ebf-94d8-5a86c4a08dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96f28e5-a853-46eb-be34-f5ab11d7f3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79351546-8149-498f-98aa-87db0354a39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1b7c11-9392-4152-b1b4-4d76ec9b0227",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b85bf70-282b-400d-855d-3ee1c5986065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c062a397-a890-4a5f-97df-c691bc4dfac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac47563-cf81-4940-a678-fcc6b4890c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43d81c11-e92c-40b7-82f4-ed93d6d7bf42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a804c89a-ede3-4b43-809b-1af03945b088",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3621800b-c05b-4ab2-b02c-8fd34f386790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5138781-b833-481c-9298-d223d4cf7ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac71050-7bf7-453d-bd34-01c118466e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f300e3-ff0b-4f3a-9e70-2d39a6eeee61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9477f80d-4c1d-4741-9206-343ada7d657f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef512ad9-da80-4998-8b9b-75e552875c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5671851f-d9c9-470f-9bae-52763302ab8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250b4408-533f-4707-a608-563324486452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d615bd2d-b68c-4560-bc3a-48edd377f691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15294f0-7eb6-4bf8-952b-11ef16dd200a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb08234f-386b-4129-b81d-6b055ef31dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22da212c-84e8-402d-839a-24795c587407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0603e471-a554-47f0-b602-08ee3def5b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ccdebc-be5c-44cc-ae8a-580070e097b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1967c3-abcd-4312-b0ba-39e4a05712b8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3e5460-51f5-4815-8b41-b841a6fbc82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d2e67e-553c-4eff-ac3d-851378304d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa807d1-6e41-4c82-b644-940536bc90cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cdec324f-c0da-4829-9b60-010f509d3dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d41191-d3cc-4b51-ae18-a2f0e4164b53",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c6fd59-466c-44db-b0f4-a3febcdea8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc019fe1-8a47-44fe-b208-05a6bba78166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9a0599-143d-4353-9c33-6b0c5a8f1e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "04832fd2-49c6-4c34-829d-0b7d8ca64855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bcb952-a160-4236-8eb9-0be82243f6c9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25559bdf-e03c-4248-a8c9-1391df59ac75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aceae268-eaeb-4ba9-aafe-66b71997113c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bd34f8-e5c5-4bf5-b27e-92f2eb3ac055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d57dd8c-50e7-460b-8878-7b75de17a4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7504e3-2ee5-49c3-b1bf-66ba2d2b955b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379d60eb-3dc7-48ad-9557-99e1c9b38406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0866c9d-80df-4ff1-a3c9-dfb0d07c8c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fc294d-907e-4c0f-a303-f9892724b208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7de533b-14ed-499f-93c5-61699c55cbbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926e26b2-d0fa-476d-bdbb-1b6fbd1ed4f8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0dd158-3da1-4684-bcd6-e705a600c40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f2c8d8-c65a-49d3-86fd-a1627851e87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee2779e-0d66-43fe-8edb-400be3fa07fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e78c0cb-fd21-481f-88e2-f913ae101e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc756b0c-a8dd-4b65-9f0d-e845a907b43b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae62b4c-a9f2-410c-8cce-d08166bf9303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4090c076-ba8d-407d-9a27-b79e435c6a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bcc72c-371d-43d3-a7d3-f73b01f91c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c3f4e9-8b2e-4e7e-bdfc-15cec0b105e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f48b56-e588-4e62-b064-812f22bbee44",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd37e1e-9799-41f4-ada2-f572c77554ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58f4a60-7ae6-426b-912f-3a93abf0e1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656b3b85-b3b3-413b-943d-131d75da58b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "53976c3c-0556-4def-8ece-5c72796ff110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d769e9e1-6d17-4169-93d9-b14819801fcc",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85360934-147c-4b98-84f1-0f1618017744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4399a4-e301-4c1f-9645-632dc4c1fe92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6376bcd9-82cd-47e6-8c17-fccadbc37999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "25609297-5967-4765-aefe-bb0d566f96bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d0b936-1628-4c8c-b31c-bcff78b4b114",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c1ffed-9bf2-4f3f-a418-748d573d9916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3740079e-7044-4624-a3b8-d8036a598279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a16779d-47bd-4351-b21e-c758b8ae3e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9c5039-18a8-4fa7-bdfb-9be340e447f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37570170-2d13-421f-8299-dde0fd287e67",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1660b8-fb81-459c-9440-1561de44820d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7865e430-b20f-4706-ba91-0b935c8815d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3c4b4d-5f69-481d-ad50-df6e18fcb669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "96052410-5f15-4e4e-ac90-c119cf966c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b67239-84b1-4213-92c1-ef25de91b36a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6426616a-3a7d-49df-8cc4-1c2b4c492fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84cd711-5cce-4355-927c-f17f1cc7dcd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de83a64-914d-4d72-9de6-a586b4696027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba7d8ac-7812-4e07-9bdb-7e004550cecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcb5b59-988e-4acc-931b-d191f37cf20f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba56669-bf30-41cb-974d-e0d88e006b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126d3426-5970-449c-9418-f12416358ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183b1abe-70bb-4407-a424-716daaee68b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd69d53d-329a-4221-9cc0-417f12feec72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6771a76f-8d5c-4e16-a0d7-0fe3895dd3e4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15331b9f-2a29-4075-a53a-0dd6103d63f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fea2bdfd-b29e-4d53-a365-4eccb074b853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30b42cd-c77b-4169-8b1c-7433e2f39d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd9ecad-4b0a-49f5-b8e0-a44231481df1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c741bc0-0a74-45ad-8f6d-069b41a8cd78",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e4e25e6-577b-458c-8a75-9b15ada9d1d0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb79c00-4a46-47d1-94b6-358c8517b553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ffff8fd-eef5-4590-8fbd-1a875dfccfdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec7c5c5-42fa-4ae2-a35e-67328d69d60b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e20e75a1-51c1-4577-96db-e04642baeb54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ae7ccc-1dc4-4752-88c0-15fa409be851",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0dbb6a-1c12-44c2-a8af-d5134ceb72b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60b76a38-198e-46f0-aa20-4cc480f287b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b0dcc7-4869-4947-a0be-155fe9cb2724",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6192249b-f688-4daa-8663-4e80ce835d2a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bc117c0-62bf-4416-8526-88589ee1ede7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50cbf7a5-b28f-4ccb-8cba-164ce40952d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bc161a6-37da-464f-b5b0-8cf730546d20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8edf4e64-23c2-4c89-b743-613d72c917f5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ebd21f10-658e-44ab-b6c5-2299b834f4f0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9a241aee-6caa-4d27-a609-c5b997005caf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b0681342-f39c-451e-886b-ee73b76a8a66",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f054514-f287-462e-b1ac-584aa0305ab0"
                }
              }
            ]
          },
          {
            "id": "2c616531-2109-4f9f-8b5f-30841edaaa95",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cbb1c069-4820-4ba3-b8a5-19a3bf3271aa",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef87c19c-9482-422f-b771-3f680723eedc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b0ecafb-8357-4451-8c53-6d723419950a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14c01742-58a7-4069-b742-648994dfc7f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1c7efaec-4889-47cf-9daf-28bfc81fa78c"
                    }
                  }
                ]
              },
              {
                "id": "ae2da8ee-1e02-46ea-91cd-42dc6d932d2d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ebf556f-0e44-4c75-a68a-967d77a72e74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b45e84a-745c-4199-9c0c-87b1b685b27b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "115176c6-ac35-49d2-9f6b-f0353b36d146",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "39d354d3-2da0-4859-a31d-2c0bb69b7668"
                    }
                  }
                ]
              },
              {
                "id": "07fefb97-eb4e-4aa1-98e0-cdda658c7971",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3768c1f1-0485-4725-bc69-0f85d336a0a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1255c1a-854e-4c47-b528-801399ccc093"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74ccb7ce-f58e-45e7-8f28-83f1e55d7cc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "86512ebf-ba39-4f05-8dce-59b3341ab884"
                    }
                  }
                ]
              },
              {
                "id": "6cf457a2-5f08-488d-8315-4fadfdb7cd86",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a46d966d-7cae-4cc3-8208-015d3981aea6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d139d46c-4112-4098-8932-c53efe66ee3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc1ce8a1-4aa4-49de-9d1c-1a99e4e63646",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8140a22a-c9cb-4aaa-83f4-321b8b494f79"
                    }
                  }
                ]
              },
              {
                "id": "6f052477-3912-4769-8e6b-faff97759b41",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66e0daa4-efc4-43d4-8afc-70b23b5d70d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5edb96bb-2362-4668-bbcd-b756cb07a500"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3a8695c-e5b3-4aa3-b1ed-0be222d539c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "27d96247-543e-4793-ac68-e459f69f8ed7"
                    }
                  }
                ]
              },
              {
                "id": "16ebdaf2-ed08-4eb3-9598-d99c253c51b7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68039339-23d7-41fc-a89b-2729211bb892",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48b9ea07-3a0f-4a3c-9a63-f7d789bca57c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ce2647f-315d-4e11-ae0d-8a7b58e9eb58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8bcc354b-4fa5-4200-b9c2-b5af196f2846"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ba402b28-a495-44de-af8f-20d812b09a30",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f854e5d-3be5-4659-9f42-06776fb7cadb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "315e99b5-e9a6-4567-9fc3-2d0c8e99047f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53621fde-485d-4d47-92d2-75d7dab75d64"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1626488a-f129-4cdf-a34a-eb20db3cf61c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ac63f9ad-6e77-43df-b0a4-669117db8e5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "afa9d493-7751-456c-918b-e7039fbe6559",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f6c44b9-5052-4b30-9023-18103647a9d9"
            }
          }
        ]
      },
      {
        "id": "f1aec3c9-2f93-4308-a51c-31ff4dab0304",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "31d8d6a8-0fe9-4826-a602-47442ea42db3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5666da3-a148-43b4-bf4d-f7061a9ace73",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "479e15d2-a88c-46a2-896f-e291c09a997d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf41be8-7f61-4ec3-b56c-bf6453967c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488c12ed-74b1-4486-b59a-91067d5ae9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3b5b53-ae1d-4153-847b-9a23c0a02e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "25da50da-0735-4492-9fe8-4d81c7123d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae491170-acc0-4bbd-88da-cb47f893b6ff",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962c63f7-4558-43e5-9af6-5c677df4cc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350bc9cd-1037-4d03-84c9-467f12aa15c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5067a188-5545-4208-9ef1-4463acb788ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd4f73f9-8944-40d0-86d6-9ee958443b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532b37f8-9323-4f5b-acbf-d50f3f172744",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f454da-6539-49a9-a7ae-80781aba5ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34897c2-81be-41de-b07c-708d2d74a4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879be27a-dfcc-4829-a42e-630ea26f2274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6bff7c-29cf-477c-bc79-3576ae2b3a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12252c0e-4717-455b-b427-b64cf1bfd281",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c75b70-8f3c-4baa-955d-9993e656c719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad1a76b6-fb63-4315-b0eb-0b6c2ab7144a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cedc98-8f9d-4d4a-a215-d6fdc8e801f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "554e1512-14d6-43af-a817-a5afd282ed83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c6ccf7-11bb-4597-a009-1cbb1599c648",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5391a99f-74f7-4caa-a86d-583979c34fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2c4280-4ee0-4dfd-8728-3a74c05eefef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c16eba-0db0-4b94-8202-466da35c0f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5097d52f-ab34-4f5b-96d0-8b911ef6330a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec68d976-0e0e-472c-822d-82b4cac5e477",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444f9ee4-4865-4c40-b5f9-c930a1923794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1c9c82-7d67-4e89-8876-44260a8e4e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8573494-8366-4709-81ab-558126d6e388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3da1323e-4f3b-40bd-ba6d-fb4604a16941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a56c511-b2f4-4c9e-bab0-bc734f0d0663",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a103eb-a668-43b3-b4c9-6dc89f1df397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc6ae42a-fa83-437a-ab0e-789dae94e13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0e5ba8-b80a-44c6-895d-7466a241198c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f40b9983-2276-4e4d-896c-acf5d05247df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3ed4cd-9cd3-45e3-94ad-4bf85ac83d27",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3fa58fb-1064-4920-be63-b72819cd5471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf7f6413-c9b2-4240-8a5c-1401edeed97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf980de-5b61-4f9e-ac27-341ec6c5cafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a50960cd-45b6-481e-ae36-06a4b02c5501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480abb39-0ce5-49bc-b095-871ff580066b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed734c2-423f-484c-b950-9e2cd33e93c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d8903f-853e-4390-bf12-f882bdea7517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fedd77-778a-4348-97ed-804ad25c2792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf907d94-f19a-4107-b906-de163a9a3fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2799e0-2528-4d6d-86ef-37ad0c97c369",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1097bb4-4f9e-4a21-aa9a-d3dfb32d596c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffecc49-e204-4650-b3a2-368119d85605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415d0ee0-aadf-4a50-87f7-dd0f96a84ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f658c918-9815-468c-a3d1-f45c684aca88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0526c01e-5fa0-40ff-8fee-d84e170bb534",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07c4fee-5710-42ee-9fd8-c23eaba4bb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c2c324-42ba-4ba3-913f-803a647da8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4afbfd7-cb32-49fa-9113-48157a0c51c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "38580afa-8706-4fcc-be21-cc0f3cd8fe17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553d7bb1-1304-4581-b8c9-6eae2f414986",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c081eccf-e1f8-4445-b9d3-2f31ea0b1b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bfdcb48-177a-4f29-b0d0-11301fc61b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c300d0e5-d41d-48ff-bb0f-e9f940f7e25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "684e936a-63dc-4ae9-916f-d98aaa727fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796b27ba-aa17-4b6f-93a6-c9bc290a2023",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f732c44-a019-4a21-86b1-a7c7f8a08f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef554c0-96bf-451f-b52b-14bb077b4b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28657aa3-c334-4eca-8f14-30a43ad354b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f95b249-a0b4-4416-be4d-4596e3c7ae5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6788993-ca1e-470c-8438-390a54378ef6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96105b1-3bd8-47d7-8d0e-382a61f8ca70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52924153-c037-4e07-b399-5183c142bc68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f1ae89-11d0-4279-b40c-2a7d06dc1566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3567cb36-36c7-4458-b9ac-996aa5b56c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3771a0c0-6890-41a0-ac7c-d5763f7fbeb7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1400937d-5652-4d83-9155-8482ca256f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042d9256-b3d4-4a50-9767-1fb76b5d8504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c1b985-2118-448a-98aa-548b4352c3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "27c611a6-4281-4818-ba74-08803d98ad6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b918d5-3e0d-4c71-9820-41ac9d996b88",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a75481-7375-46a7-a8b1-9c0bc289e71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5c4ab0-d1d0-41c0-a3e4-21aa7c34f96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388c16f1-9060-4bbc-b22d-30e0d73dc5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7332483d-e8a7-4747-b7e1-ff44691c3f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3783811-cb6f-4b42-81b7-09a7ab239f45",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d79107a-59e6-43f8-a0c0-f178adebc3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abab20f8-e452-4877-b603-f643f904f478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f57b49c-1fed-4f18-bcd5-a154fb734f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c067b969-dabb-4f35-a0af-1f36dddf088f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff599634-17d0-4358-982b-73cd4e05ef4a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ae135a-c3f1-4b21-9062-f6c34392cdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbdd0672-8179-458b-970e-2e0a0518d4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b25606-2ceb-40e3-bd34-9c9076301984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "383def68-b100-4baa-99f9-09b64fe70931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ed44a4-7e1e-4c0e-b968-88c686ab99e2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caddb78a-547b-4f4e-9f25-a29b91e1957e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52441dab-a04a-4a52-965e-5e600c257cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fe689d-f01a-4183-9691-53fdc245b9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebbe8091-769a-4f53-8497-1faf9306c4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6319c7f-cba1-4f25-9d89-5d753ca62f95",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df89932-70d7-4cd6-9953-5c7b9b44e14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940f2e80-0205-437f-8a4e-e4c6f6af3e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39f6873-dca6-4542-a2d1-377918a1e92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "418f52b3-b85c-4138-bad5-c27128c8a73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8988cdd-348d-4cc6-9b04-7c7a23cf5efc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094abcd4-1a65-4403-99fd-152c2ab63773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b4c65c-93ed-4d1a-b7e3-97e2e1c93a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e1a3df-f02c-435c-bf07-df0dda28ffd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa1ae63-647c-41e8-bbab-aa8295634bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829e0d5f-5d45-43bf-b332-6948d284fcab",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00860e5a-4c3f-4acb-91b0-77e93ff635f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700a6bd3-9c5b-4e0e-97fd-24365e329370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b335f980-d92b-4427-947a-af2220ef9dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5429f6c-621f-405e-86b6-ab9ac56ebe39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c51b36-216f-4f24-bae7-830b0843c142",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7983f598-98c9-4114-8ca8-3ca280571f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b4a1c3-25eb-4e40-bde5-28e003bdb3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1059df34-a368-402a-a696-adea21b9a8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c43c3f9c-19e3-4c1f-816e-f6523788ef10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62ce76f-5740-43bb-b60d-501929e5e26c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a134b2f1-d692-40f7-995e-bb299b37a56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5103c8f-67e7-4240-82d1-2150e6d43550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d326b7dd-b716-4ecc-aad3-5929b3c07dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abe35d23-841b-4e11-8657-c510fc32f1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9667b13e-312a-4230-baa0-14621e242c2b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bee137-6e34-499e-ba00-d2d1a0f7da42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d4032c-21f3-4cbb-a528-0734d6391e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2d2fc2-e733-4713-a4b2-677ea08f80de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf61175-da30-4b14-a811-002fdef77b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36737157-156c-4b37-a317-c8d27e13dbc7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8427b59a-1fdd-4d24-b517-43468bc2c488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fe03a5-f911-42ef-bdc2-35bda32eb956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b9aa18-f97f-402a-aabe-c19374535b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "114e22b4-8b66-4dde-ac39-eb91fba2d2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33ae3b0-037b-4e59-889a-760ae8eec58d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97330414-cff9-4ed0-991f-37e595a08ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a75310-1e8f-4ee5-9045-4151f8608668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43984f4f-bf39-4fe7-a4b9-3cb4ae28a34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6481efd7-c1b0-43df-8d46-b9d14f4984ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a31603-6c5f-4da8-9e0e-eef786eed037",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd82c5e-44f1-4eb9-bbf1-13c717360db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12213ba2-7c17-41d5-9480-873d90330162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac83b08a-e3fe-4d8f-9522-cc799b428c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4def26-0d85-440b-9030-52fdc7e88d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33a5f35-d4e0-4d97-a913-b328bb2f6c10",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa64cf6b-9217-4e0a-8782-138893002926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c5dd3a-a95e-4ab4-bb68-836d909e7c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4a9e61-9bab-4e1a-a1b6-8ec70311e077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9312d923-88f0-4f46-9603-cb8c81a8edd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd7db34-2950-48a8-ae26-e03ba6982178",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66750ba1-c43d-4be0-975b-934f9892ce62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b1f000-6d9e-472b-99ce-cc5e1460f63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab23503-7a3b-4f3f-8457-69072bac1f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d25c8855-19e6-4bda-bd05-bbe3462b5b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fad504c-63ee-4994-9b13-bc2c9d0b0454",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437669a8-cf10-4b76-9791-c9adfe8b02fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61c345b-202d-4f37-96ef-f394a0bd25c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e891353a-885e-493c-8c66-a364f6d79ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b2335d6-57c2-400b-b0f3-14e60523bb9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fa4ce0-bad3-4542-8a2b-71897fa44c4b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3957d399-a99c-4d5c-812f-f1def56760d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a3b86a-a8f6-452c-91c5-b6f044d34426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dab619-932d-40f2-8d80-b94b8906af43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaff2603-90b4-4327-91ce-ef1e9bf58bf0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fe00b540-0cd0-46af-9908-a1b4ba0ca83d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60559b51-1979-4276-b56f-d183b7d15626",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04e2106-96b2-4905-9131-eae2b1f6794a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1654ab99-ce98-4df6-9a5a-f5c1413e1364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3bcc93d-4347-4940-87fc-a6de7dad3956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "026054ff-32c7-4694-afdc-025dfcf994a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cc5bb4-ab47-4402-9407-1ab28a67b659",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c97d58-c216-421a-ae96-a45dcef07329",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "55ebc0cd-8376-4c5a-b3be-030f3fe1af8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfa6c33-596d-4757-8f2e-646a8b48b181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de2012a6-58ec-4899-8f24-e4f258f69813"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1181707-d211-4128-8e71-c9458006e671",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8e52966-bef1-4846-b25a-0dc6bda8d03f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfc565d3-fe08-4be0-a197-69b45cca7588",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef94ab79-47ca-430f-a391-503bb2b7d49e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb51454e-a959-40a0-b86a-93963b3b131d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c230fb8e-8edb-4a3b-b066-7451fcb43054"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "425e1145-4f5b-49e8-84bc-1d6c3dcd7854",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7accc87b-1f19-42b7-a796-537d07963990"
            }
          }
        ]
      },
      {
        "id": "07b6a01d-c638-4ff2-ab61-2f4555b01d95",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "691563aa-6de4-4c95-afb3-6d43e6e4f03c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b68cf68c-3a95-46ef-ae06-e22298fc740f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e97be91d-6115-47e6-af66-7de16c6582da",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478eca44-2750-41e5-af0b-f7dd383d036c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f76519b9-d36d-42a5-a4b1-b6dd08b83e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7bb560-27eb-4ab5-b12c-e85f7fe88382",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524e6d1f-cb60-4da7-842e-399199e4c52c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb218fd4-1832-43c6-a7eb-db253e76f2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3be7702-dae9-4315-96e0-eacb94ca2285",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c235d2-6645-4b7a-859d-a239a1c67103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f631ae4-8e75-4d49-8e97-dc8d414a1058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee83b83-8bf2-45db-a875-1c0b750e1390",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d897a6b3-00ed-4997-a910-4b5ee9958bed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8548b29f-f8e6-45bd-92ad-90716b560b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac13014-2d66-4f85-b41c-3ee71de4f0b3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a08084-5693-4e04-b901-7c262f9aabf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197b8929-8dc1-480a-9efe-ccaba846fc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafe6b66-6ad1-48a0-95f7-6b8cf6a0619c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d07ec96-b9b4-4d9d-b9df-a5e39f787dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f554e83a-d303-4ef9-8ff5-89a41c63fa2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4312e3db-4103-4870-8fcc-8f9c1c704591",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f507049f-d9eb-4d54-959a-fd6337c62b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "808d7f44-f150-42bd-bd4a-f0c7ee74f8f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cff328b-927d-4250-9509-fc550b6658e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6587ef02-f6a0-4916-b493-37ead46e11d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6a8969-ac1b-487a-a485-2453ef69860f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2e25f8-c57d-4360-adff-b17b777762e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c508c15-1045-4ea5-8c26-5608dd99c953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe0ba6c-af93-4d70-ad4d-11b8c745d763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d68bcc-2575-4273-a0a4-f92730a656ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ffaee2-96be-4c29-be62-341c77bb1e4e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf241ca-16f2-4f62-b18a-9c941c48de25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7a018d-aa43-46ce-9ac4-e63265974abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccab6b3e-548f-4f44-ae38-f7fd76883e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d120ef6e-7807-43f0-a23a-ca325053ab76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fef5a01-9d27-42c6-878a-f650c3700fff",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fceed9-f689-46ce-ad80-e522aae0f7b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a45b70ae-cc89-4c62-a8ca-ba3ea126b5c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bed7e66-8468-4b63-bc9a-1c2541cddebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44cd8537-afe3-4ad5-98ee-bb5949aa68a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e8f630-6fd0-4b18-86bf-b199dcc6801b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b00eec3-dfb3-4b1b-9ca6-6540f8b5e4aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69bb1044-3870-42c4-a6b4-59b246e75ffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c4151e-b48d-4cbb-b25e-6451180c0c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a259cb-1a64-404e-a90d-ad36906f8c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65511ee5-c463-4543-b0dd-6e682700d82e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f3431d-26b3-43db-a8ea-f52c88d402fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabad62c-8562-4087-9f32-076e38460846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d135ab51-a312-40cc-9e71-6c08d028bb7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc616e07-5d82-4594-91c6-dcd1ee4b01e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0c5c45-9973-4548-bdd9-cedd1770e6ec",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2ea10f-7372-4b74-a865-25a6f4e1ab5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4efc2ed0-af2c-4e84-a62d-fa3fa21709d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8d3bce-6bf6-4f8c-a009-309c314bed62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55b41a6-7441-4a44-93ab-e2da84c8affb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdf06ae-419c-4ec7-8ed6-258f5c8c2fba",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c3d7c1-e1f7-4a3a-befb-95dab7d9b8d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d5a585c-7f4f-4a51-8fd8-1624808372d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00fe06e-8afe-4ec7-8bb4-5d8c0dd08b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2fc78f-0d61-49dc-af61-7b26523bb208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bf3ab8-22d7-4923-b4e5-67551a02a2cb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0448ed6-953a-441d-a4f4-da044d62f0ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "315726fb-c0ad-416e-84ac-00191dbac0b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1311d2cc-2228-4e84-b6c1-5d0897a8ae83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b08e586-317c-4081-9e32-7763bd7d1566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e483be-a460-4dd0-91e2-3918bf6e15fc",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b80179f-e551-4aa9-81c7-95c40f6845ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5091e14-d17d-445d-a714-e6b1ac603c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08ae624-da7e-4d99-bb2f-fa8ebc8c2619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569df50c-ee0c-4e7f-a593-7533989f5dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7105fd15-400b-41ec-bbed-86072d8feaec",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b103be3-daa1-43a6-a33d-a5367ff9ee9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de291af-7cff-40d7-82fe-a6f9ee7da81f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edde436-51eb-4540-a424-7aead5de1026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869e8430-9543-43ff-b9d1-b61c09b6e001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059f9970-cfb3-4d2a-9804-c015d02b23fd",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c862a106-a446-4900-9ea2-560daf4cd153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875c392d-b3aa-41f3-b8d2-a7d3f94d6b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd134935-8f56-40b4-8c65-2c9defe95938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc508e59-294b-4b06-95fb-7b4af6d8fc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18057a5e-b6e0-4091-9ae1-185704b3737b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910a870f-ef4b-4ce8-b974-0285c7eab0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6074d64f-8753-4a5b-bafb-4d4830557d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d5ee20-805a-45cb-9f0f-8ab6013b8cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd2aa68-3e45-4930-94ed-691b7e1b8808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0872a7-d069-4eea-9585-3f642c76fac3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1714a13b-ac31-46d8-ba6a-d6ef4570a3bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25cfb81-5ca1-45b4-a788-f9b3d27495f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7367309-af13-4c2d-9487-54e58f109b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04aa80d7-c249-4852-8852-73fcbabfd4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c7ceea-7c73-48b2-b786-c311fecd6e05",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1999a6aa-9774-4d20-b0b6-cf72ab39e59d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b37049e-627f-4584-8be9-7b64d5dcd658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bcfbb4-ca03-41c9-be8c-b0edd9289d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c28ef47e-79db-43f7-83f0-9acc1cd9016b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6309cbe0-27e7-4521-a58d-ba34b7ea3b42",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe77a58b-7dd5-4ecc-9ac6-b844b4a2e64c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482c2fe0-0593-4198-8e69-427b24caba8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20338d4d-4c55-4700-a1b7-74100c09680c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f509fc6-0c93-44e9-aba8-1bca5ca95c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f158f6d7-8df8-4eba-95a8-60dbbc6bb47f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3388ff72-1777-433c-85ad-30bece2009a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1077ab-cf07-411d-b323-a02822435851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc9bd27-4290-44f5-9898-64316f5403fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d96552-f777-40d9-8252-5bbde14a27fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb243c09-851e-4964-9e5d-055170b7539d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4519f514-a316-4f74-b906-4cd4dd36e92b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d5dbe2d-bb38-4842-827d-0489fe560487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83893b74-487d-4db6-b712-cd1ad85e8a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394e7d29-5f6e-447a-8f3e-18ef48af30a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223f176f-c1d4-4df5-8d42-d86767dd0dd6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adb95c1-9af6-40e8-8c41-ea45e8152537",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3fcb664-4453-48e2-aab8-7670583e62ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4ac76e-c398-4dd8-a648-64110f9d1de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd7f4ec-f518-4c1f-8e37-63f9fa0fd43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9b786d-9133-44ca-b6f7-7bd6c64c4e27",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d79efb-304f-4710-8fd0-d4ba3ae0554b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bc5097a-d647-4dbd-9ae5-0a9ffa7c0a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8280a3-14a2-461c-b5d1-34e65ef91d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87ec2f6-9632-4987-97d9-df35a9391586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b87f1aa-d72f-4cb9-bb19-8f38fa0d4866",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcead6cc-f34c-4d6e-93ff-b86ade804517",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a2a1b59-9d82-45fe-ad78-2cbcd416f795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f71e948-7179-4991-89e3-ff2df7842b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af672ab-559a-484a-bc89-27e7c080066b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29525607-2029-4a94-9a95-870078834acc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acd2d4e-5f96-4348-b209-31af9023d2c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346d1f78-b3eb-44a9-a619-2a18d2e522a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b2a0a5-cbf9-479e-bc8c-eff2643fb9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a8ca4e-aa63-43c9-96ff-ee50cdffcf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3b7bff-30a8-48dc-84e5-aec7577911a1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0940f98a-2416-4df0-9882-71cc011aa49c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "665389a5-9536-4cd7-b5f4-453f0be13a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c35ae1a-ecb7-42a2-a6a0-905d20ec8a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329d9a24-e4f2-42f0-8468-014b179c5ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60442543-1a21-4adf-b74e-cf3b2ca06d64",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1976c5a9-1e97-4d35-994b-265b4df47adb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f7a66d7-e2b8-4d63-bb96-1eb2dfc19f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff4cc26-8608-4eab-a96c-b288161d169f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec418303-29c8-4f56-993c-9e95862fd127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1828fd-115a-4f1b-9313-a1730b9f8f8a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b374dc8f-d5a0-4fe7-a61f-c5a54c8085bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58151806-dd1e-4899-8ecb-e992ffd039f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a5da54-fa73-4dc4-8c75-aa02b4128872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c08278-2f88-489a-a5a0-b3ececccd3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5774adaf-c4b9-459d-98ee-627f99307435",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e533903-4a0c-4c6b-865e-8aa289624a21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef9b8c90-3cbc-47b1-98b5-b7ade6e89c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbaf3440-4e99-4af6-b08f-2ae9247dc99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3b6b0d-0967-45b4-8ac1-9d9edb183395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3295583-bf0a-4960-8a83-21b3942fbaae",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70538340-d8c5-4e94-95ea-16c2ee2f3d73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27b42977-c0c0-4f0f-ab1e-a5f9f85e733e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd09b17b-05c7-4289-97d3-107d4fce21a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932fbc66-d1f6-4d9a-b7df-7f308fce33f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4286cfb-aeb1-4a93-8dc7-2e8612b1e250",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50fb42d-e4ea-4ea1-ad40-b4ee7e6206a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13e56697-bb56-4150-9350-ce02f0f031c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87779845-bd7e-468b-ac7c-ed3f8dd78a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c3ec4c-b91e-4d41-9022-43fa238874e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb36a61-5f59-493c-9295-736df7bcb65b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd780814-062a-4df6-b1b2-5ddae3447798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa862f2-c559-4e3e-a1ce-835a4d0a1d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a2a986-cdea-4b6e-88d0-7bb284741d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92539152-9f2b-4b60-a793-f07294194019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d23a475-17c2-44a7-af65-b1e061236c56",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715dcbf7-21ff-4798-a0df-0605fdd1825a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b1c83a9-5ef8-4006-ba1c-484f34d9b502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "602609cb-6c91-4065-833f-3438f2577de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a56c6ce8-6b32-4e69-b494-a8073bf631c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ec1962-8945-4794-855f-a7bed6be3473",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b42c8a4-2002-4d1b-ba2e-ea4f7a643251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d8615a1-8f2a-4fa0-bf4f-ca963aba5dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f246a0cd-fdd3-4eb1-9b07-179fe899a3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f4c4d7-99de-4878-b4b4-0d37331bca2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ff6260-dcba-404a-b0ee-d82724097242",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0a78f3-24e2-4981-bdb8-4599453048ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd203536-ea49-4296-9433-3361b851f627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1485107f-88be-452c-ab51-5bcf9f1d2518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18ecf3e-d577-4589-b2ea-e30d9f093c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc7f299-3810-4a97-b32d-04370acf5cd5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75107f91-ad57-4890-94da-3b8a4144098b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd67ea08-df2a-4134-a149-e781e1a983a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a99477-8194-498c-9ab2-7353bd5544cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e74c099-aa21-4d05-8a15-db797e239c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042f7ae0-2a78-40a7-aaf0-d71a6189cdb1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a3b031-d225-46fa-8b23-694e605830f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ec9479-cfb0-4c51-b4b3-86b742705e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2691bbcd-af0e-4b63-b743-bf8634753fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823ce82e-930d-433a-b1d6-a42c962c6ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82486a0-1eb9-43e0-8bdd-78953f3bf144",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a6c740-ac8a-46f5-9953-7b7eae5dcf06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d4d3dd-be35-4195-99eb-237779ef2758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "945b1a66-6801-478e-9873-54447c4216b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65906eb-d5a8-4266-914c-21a3d02b32e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4c901d-7eec-476d-af4f-8ae539c6cc0e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb68a194-0c52-4bf1-9346-9d3289159e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0acb94-fa67-4e07-a96d-71aaa8813b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "947aeabd-b97f-41a4-bf7f-91dce152b463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3755a1-ec8e-4d8a-9ca1-74c2e67e6e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7878aaf-0f88-42bd-8176-4b84ee1b9868",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43458242-0849-4511-99a1-84e21508c712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cade6e15-aecb-467a-8a85-8181ee8cab0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e62e4c-353b-49ff-a1ce-1c44753e8798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c93acbb7-cde8-44dc-9ae1-cb3512b5af27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1387d27b-ac97-4857-a969-75a7b9f611a2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd2573c-e841-4e21-8145-fb63306d9104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5eba3d-3f8e-4d9c-b11e-0e9806032670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed78bd74-56f7-48b3-ae15-2d3b0b4eb7b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db0e23c-8de4-446b-82e6-042ac307d1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705e919e-7ab2-499a-82db-265d9112d867",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5243e4cc-4b76-41e8-80a7-7b11282c1da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8179f8dc-beb4-47dc-95ff-b42ca43d0ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0d1f9f-bf28-40a5-8454-77f44935b9ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95186237-dd8f-4d33-ab2a-88780acb5e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abed923-7887-41fa-99af-a1fa0c4a70f7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5c058b-f761-4731-a3d1-a513c5f056a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7792e337-3c7e-4940-b517-65faf9f53cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ce6848-030c-4c1f-a93e-c1cb0ecf7306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ae0bec-41ad-453a-b477-bfd5eec4950f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afc5aac-1e15-4763-88d2-30c01eeb5106",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a2cfcf-94e4-4eb8-85c7-9687809ef0c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ea9021-4617-49eb-b760-9ae611466865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edcb4db-19b2-45a3-abdb-15681b7b946f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd8cabd-42dd-44e4-b602-279bf687d7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d169179d-93e5-46e7-b527-ec36b1cb16e9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93b10d2-3d03-4d8a-a32b-6ae289578094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9c2003-21aa-4d61-8ab6-abfe31ceca7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d585999-ddd5-4214-9151-cb4b0079ff39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a52f302-6945-4e5f-92af-2d0315fadf3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d337c246-407e-462e-81cf-56f423ac851b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66083ec2-a6e4-4371-855d-795cc143cab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2a6b24-4737-4074-a9a6-182efbdefeea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "963b54b6-7b6a-4f5c-b77a-812c5d516eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb49ba2-271b-408d-84cc-dc6c1d467eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058045f4-499b-4c3a-9068-ec22ca56f0dd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6fc80d-4a74-4601-8440-311547d10038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679afd82-4ed4-4f0b-a9c0-045e89e2f285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e28420b-b40b-4fbf-bda1-157f8d16ad92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4fa4c9-eed4-4ed0-b743-c62ea3e0b266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a775b36e-0847-4a16-9bf2-1ab3ec0ffa40",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5a5183-20fe-47e6-9a16-9206ef693632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dcd6dff-fbe3-4089-b28c-163588859d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8890eeb8-83a3-4da2-bace-9fcc5eb38245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff12cec-ee0b-4643-9f29-638246527276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33cf190-a4ad-4558-bb47-2bbde2ae8904",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6668f2b8-c0ae-47b9-82e8-90b36b5609d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72653eea-07c5-4f04-b56b-8648726689e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b899aad-2b3b-4f05-a082-f415e733bb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5ebd84-ba18-4ff6-a1b3-33a5aa3b3fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6aace66-cf0c-4656-a272-b71f9591fdd2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e091b99-af7e-4bdf-aac6-9816c218d310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "570c8ed7-5448-40ad-a8f9-80f0c55f904a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb25b4a5-2f8d-40f5-baa1-32f5a8c5ec85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cdd99cd-f838-4c70-8b0b-805365043304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46eba63-430e-407f-b5ad-81d51081ca12",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4206fd-8358-41ba-a90e-24ee6600646d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5a97ae-0ffd-461f-a12f-47cf03448284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05dbe92-550d-4d0a-8d66-30d55bd52d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a0e174-2fea-4997-8a41-67c614e6aa38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd168ec-41a5-48de-835a-b32677593bcb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad5885a-d6f3-4343-817e-26b027a7d600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fad17f9-d432-4df5-8673-9dd417dab586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d2456c-c37f-4ff5-b8a7-27b7b6ff899f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb950d59-35d9-4815-9ed8-0eb1ac01133a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bbb43a-4805-47ee-9d0e-7f01a255c9d7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fa63f0-a48f-4c71-85da-325b3b1d1c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "866cb63e-a7b6-400c-bad3-11e6a66c193e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65b53cc-16b6-416d-bdc9-ab8bb4b07afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc24e5b-a4a7-407f-8b1f-a9884c90f891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8fd4fb4-a235-40c1-8e3b-5194042c13d6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8e1f4d-d02f-4ef2-afa9-23e255e94eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1993990-3133-41de-addb-aafd3601362c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3e9cb7-7fd7-42a3-86a2-850347b721c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82dce56-ee74-457f-9f66-5e0fb457e5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1b19c2-4720-4811-bdd4-4fd732044596",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb582009-16b8-410e-a641-ef3f204d083d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e846f99-f2db-442c-aeb3-07f744ab6c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f626934-5513-45a6-841a-14b5cdb8418d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdcc23a0-8552-462d-a270-eee2cfaf5da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e75a8b-a29b-4da4-a960-71c7cfeed312",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e221e04b-ad24-4670-afe6-a3ad9fa372f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b8a680-1a29-45ce-aae0-94715d45d118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0011d1-8a24-45d8-8be0-dfa66daab251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a37537-8c55-4f05-9fdf-4c36120b4c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c292e6b-f403-4621-ae0c-c35d069cef14",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b100c9-4821-4bd8-b031-33ae27b057c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253ca1db-01bc-4de1-a9b6-690594b942e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8004a51-54a1-4369-9875-f32bca5f5337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c0680d8-186c-4ca0-9ba2-8a4e8e51ede5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc552c69-e37b-4d72-9376-22f0f37ce88f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96c1640-53a6-446e-b6d7-51141f700dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bb1a49-9807-46c1-924e-e027d6b6d0f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1450639c-5b1e-46dc-8f34-f93ae2a98d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71eb4b1e-56fc-40ce-9e68-9ff15f266e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b6d821-7ec9-42e4-ac00-dcfea08d293d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a09fb4-2703-40ea-ac9f-309eff11be61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcd65db-ad93-46e6-b6e7-0b4c3b826d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631b50fe-9bea-4c03-8b09-1e21d3865a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d68d61-0940-46e3-82e0-272d7c303a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb936cf8-69a9-4380-8da6-6b38e7903ce6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f447f3-4a3a-47c6-b8f0-6e348d061b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8452f577-6bc1-45fe-95a9-cbcb13082c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2090c1e0-78ec-4a76-bf01-139be314cc12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fec1ab5-f7e4-4f80-bdbd-0bb39ec2060a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07595598-9585-4dfe-9342-b8472ceaec12",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4902025a-c489-47ec-b147-6bde44ad51fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f2c7855-2d52-44a3-a589-4ef8cdad7cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "607b0062-b0a5-43e8-914c-e4c48b654000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ba3ee1-4e7b-4402-a75c-1e55f85e4753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d6de8f-f51a-4945-ae81-a4f792f18114",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9254a7d0-9b2c-4224-8940-c4442856fcd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe9b28f1-7a6d-4fff-8d6d-b948cd0b6145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b796a51-9188-4043-9fb0-fdee4c79fb2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e775ee2c-886f-4b79-abaf-05fb4b47d21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbd2411-186e-4bd6-a38d-4223c6f9cf2d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc674699-b9f0-4412-816f-874cf97c311c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5091dcf3-31fa-46c1-9fb4-880bd5ac3f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "267c622a-57c6-4564-8319-2391d77ef83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a30b81e1-f711-471d-a3be-77b73861205b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6306b447-76d3-4431-9beb-f39e34df42f4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f7f526-c0cd-4b90-abb8-ab6d40fa3a5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d178dac-4386-4d7e-b97b-134d6a6dc2d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f147001c-6a24-4158-acee-256d7ea0ee5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391d4c29-ea98-402f-acd3-fb05a83ee1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f022ef86-8a1e-4f89-b010-1d70cf267fba",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647c5c7b-7627-4c4b-bfbb-16b335a93df2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe511fb7-45af-4371-9a6c-10daf567e938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46e6a1d-0e8b-44bb-b78b-3391c1d11e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bde56fe-c334-4b67-b5a5-0674bb84fad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9716fc75-f9be-4e82-8f1a-2b4cbbd15e30",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2915995e-35e8-4279-b054-d7ef2b900c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34e50896-7d55-4d67-91eb-6b89350efd8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4b5de9-0d49-4412-b7a1-929705a7ca94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156cb914-357e-44af-91a9-411fdd0c36a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af372956-25b3-4368-9760-630edfcb706f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb5016c-5d5c-44b4-b43e-7677da38f38d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f25244d-c830-4218-a148-6c10590925c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6b8f23-3c23-4112-9918-6f5c04fb0fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915dfda6-4ec8-4b72-86f3-59a4d3bc9044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd94906-78a6-4888-b402-575c6fd11936",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71616025-fb3f-4f38-8ee3-c191246f96c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96c4cac7-3fec-40a5-9d0d-c22a96167a4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "502186fd-fd22-44ad-9549-5303c4345199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3708ed2-be93-4a10-bb9c-df3e24933c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4d026e-db39-45fd-9986-d759cca01e07",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f8d270-bd51-425e-aa58-69b1eccf84b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "635315fc-36e9-4f42-a8ae-65632bd846aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff296a56-bee2-4ec6-833b-305fb6facae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f8d3026-ee13-429c-9143-34732cff98a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b578f7-12c4-4c53-baca-bb6f1bdb9c8e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d210bae5-79fa-423f-a92a-dacc9625a42a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d2d65aa-5fec-4fd7-b4af-7c9fb6cb5c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc75065f-0ddd-4de8-b4dc-21f43ba591b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063d70c0-850c-43de-978c-a45ef407b6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd206e2b-2568-42ae-ad22-6db08f6b2481",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c8d1ba-c75f-4320-8805-1f674757b573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d820fe0-0e1f-4068-9dcf-b7a334b83ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "917922f1-9390-425d-9ca4-560d26a609eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284f9df5-ac7a-4c69-948a-550ba1aae301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deda522e-338f-4a16-93d3-2c60b72f6c3e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2e362d-969c-43b1-9ec0-8784895ab78f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72ecb343-8240-4023-880f-df94ac9ce9e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57674692-c07e-4250-b802-c41c6a224855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1833411e-32d1-4ae8-bc8d-17838030245b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88eb6ca7-af36-4b5a-93e5-cfbb93996334",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30b883e-1be8-4428-872b-685f056f0428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b3a9cc4-16d0-4dc6-aee7-6f370630147a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22e58cd-2808-4e36-ad1c-f98b6db2f305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "464a3824-bbdb-49c4-b491-61981e3b6aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c480eea4-90a4-4263-9c7f-8e9f4401e6b5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc57046a-e3a6-4152-9293-b6865941ade3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba293610-630c-4b77-b555-5ed08f5d1a4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3307028-b8c9-4208-967a-d642c5514656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c695fe8-b8b7-4a65-8f25-f06df5ae9af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e72b8b-31e8-4aad-85b1-891663b898d7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0923e8-0c77-46ad-87d3-9cad31a8f23e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35201c1e-f5ce-4838-ae5f-c28d64136d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099c8026-80ef-4e83-8747-5c1ca0ef34e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9080c57b-653e-46d8-b3b9-27160d1ef085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ab8835-c9ce-4405-8086-3a5dbb6968d8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ef9a8b-12c0-48bc-9561-8c1d85c9413b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6dc0070-8661-4beb-8477-f9e624cd3484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e89991e-aa0b-4326-a5da-ddcc5f9ff68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5572d2d1-e715-4bfb-916b-4841bdaed0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da57d5f-49dd-45db-ae22-709f17a13171",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f16241b-7c8c-4734-9238-bad0141ac980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "168aff3d-a27b-4af4-b0ad-2b2d00a7776b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75970814-3a8d-4496-a07d-b307e47df8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a4b465-ddec-4314-94c6-91a975ff78b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d289e7a5-f62f-4eb5-987b-6018d49389a6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62d1932-ce80-4e65-b414-012b9d624e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10edd552-a6b6-4a5c-a552-3feb50b6265f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d43246-a803-4f00-875d-98133e493496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c26b2e4-db67-4f4e-8d77-31ac5e8c9abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3f68bf-2b7c-4b8b-96d9-98f7198f9005",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb0b282-6ce1-4b1b-ad53-e6203cd0b2c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15199d14-c6a5-4757-9b95-140177ad5660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e8c0b4-1426-4bd5-a28d-c3fc3598faa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc38f48a-9d00-498a-80fd-11751b1a963a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82e8ae7-fe15-4663-9c28-b072a183c5b9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d497fc4e-532e-476d-ba95-96647bdb0b8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "944976eb-9bc3-4cb0-bd9d-d091458c1bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "948c2963-d43d-4c7f-8f61-7f3b2a75edca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e737f7db-41ab-4eb9-a424-770f328d1f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbad550-a3bc-48a8-bc85-108df8b49b55",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424a7ff4-678a-4e54-8a11-19ae300561a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8817b80a-0687-46a3-90b7-8ced2ed00355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4636103-a022-4ec5-92dd-472a6efab383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd808e0f-45b3-4a00-8300-e680638bed4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a0f260-6a9d-4655-b6c2-06ffb3d82a97",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe602d41-29ff-4a75-9e8a-ca071053580c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92442b01-1716-4148-bd26-f29d7d40977b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9902bd5-256e-42ce-9ef7-db3a33f77940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145d0ea2-d43d-41ac-9439-43955901cebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f7b9d5-0146-45d2-af47-fe11631cf8a3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8db524c-1b9e-423b-8ad0-dc81f772459c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eea602c-a5f6-47ca-a2ac-df4c5532514a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03269a74-d545-41cd-a4d5-731a7e0e7e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3289daa-93e7-4387-9e2f-00fec5eeb150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164ed75d-4dec-4edf-8e10-73e08f822cce",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0a032a-e66a-46c0-b2e0-957208b30b14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e1d0f14-109b-48b3-a77b-5a3a13b734d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afef564-c693-448b-8e8d-8735254452f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7d4d45-c193-4dff-bac3-88af9b23c148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84256eed-e476-45ad-8409-86fa744f1e26",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f60907-e3a4-4bfd-85d0-2c3e50445110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "223e4998-4821-4180-9516-94a81c72ab4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "051ff205-f97e-4e27-b3b8-4b317c5aded6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24e0bc9b-3e46-437b-ae3f-3974f107dccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c347093f-8a48-44ed-9d41-8e074dc77c87",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca7fabb-d52d-447e-94b8-7592e20a03fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0271d5cc-054b-4ae3-b0c8-58391675efe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6512e6-b469-441f-b0a0-225ff783a2d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d9ac57-0ca4-44c3-8ce7-48b35ca2779f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b9dc45-c6f1-462e-bc45-0614d8652c0a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c06b921-7eff-4247-8cd5-7ade7e088cae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a0829e2-b29b-4e88-b919-389e7bd7855d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479fd2cd-6801-47ec-8c78-24deec89629e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c6f29b-6c58-4a19-b03b-0d8e5ceb812d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96728b8-ecd5-4809-960d-c39ccb4ebd7c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1720a73c-c177-4348-a4b0-2da5e771b6a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3727052c-8ec4-4fe5-ac44-fc002087c85c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7dc1d8-0964-4e13-b836-4c7f533a13d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27344cab-7b8e-41fb-973b-e8898512ce7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf40201-e614-4cdc-9ecc-ab1b4b9ef4f7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c747d8e-8492-41ba-a54f-5d513a257ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aee6a9d7-e0cb-4cc3-9118-e750443c76a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0ef581-8722-4cc1-8f5d-31c619ce0da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3f223b-419b-4bce-ae49-ec06ca66ef28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fd0133-5ef2-4413-8d54-73189ec7c6ca",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b35992-6d8e-43f5-be93-bac38c71a6b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "197b39ff-9fec-47da-b11b-e3d66566c65a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28be5829-e7aa-4d1d-9113-8967567664f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46fc692-7cc1-40da-8826-88a0d0f6e181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcdb77a-cbfd-43e3-b7dd-e594b860e106",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef39f42a-802d-4d14-b2d2-ba5e3c126e34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04960e7a-6984-47a7-868b-491a12e05f8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2546871-1e8e-4afb-bafa-77e081a9e72b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddb4dba-e804-45fe-b3c7-a56c6fa056ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e108fa1-3769-46e9-9555-bed321a643a4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722a4b5d-3b1b-4726-8384-48b00627ec7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6278d48-1adf-49c8-9d00-22d7309b978f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d914769a-43c1-4df7-935e-85ca114a9c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c84c404-ccfa-408e-82f4-013cbdd022db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27115841-5cc9-4250-9531-3417f21c08e0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bcd694-2e3b-44cd-aebf-fa523cebc522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be28dc1f-2124-439f-bb44-69dbb90e92c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf0b4e7-3a30-4d9d-aa9f-89a52ad3081e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb243098-449b-4896-b31d-e8526c66e612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ece703-b995-4922-b2c1-074758637f4d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3642eb72-4c16-4962-9677-2a44e399c8f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50eab2bb-364b-4d21-808a-d2d553d6de97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7113862-caef-442c-8bb2-5d0339b9b756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a10f73a-8205-4d8f-a871-51c756077a5a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2cb53d8-b4ef-4a73-9744-24c99347fee1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f59854b0-fef5-476d-ae73-c04fb5a39405"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8885ee0f-ab94-47fd-aa7d-b7274a1ad776",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4995e42b-cf4f-4d81-b90a-fff8d64d4238"
                    }
                  }
                ]
              },
              {
                "id": "3694812b-8954-458b-b43a-d00e064b68a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7829c82c-bab3-4147-bf04-f77f38921eaf",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7acc10d-e86e-4aac-bd7f-9a64935039af",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2b5d3370-19d6-4755-99ac-90db250f7ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d00be02-5d33-4068-a7b1-d1d0f2052111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "137dc9ff-3d88-488e-b961-f19986823bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310e3e94-bece-4e4e-9f8a-6fb677201ad4",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48533998-5f82-41ab-9ded-bedd85a2b1b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "baf003a9-e86b-4e1d-9bf3-c8b7eddbcc57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84ba93a-27fd-4ca6-b7cf-249f747febe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "944da951-ea9e-46c7-af40-3b0f6d3e0778"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb0f9e6e-80d7-45e3-bf01-b46c6cdfe148",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12c77ccd-af0f-4873-9407-e38203af898a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f891c3e5-48c9-41c3-9b57-fa62032f1805",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f90a1cbb-dbee-49e4-b075-1c8ea9ae868a"
                    }
                  }
                ]
              },
              {
                "id": "1ae2d662-7377-4c46-b4aa-348880bef162",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8f870b0b-a60b-463b-9b6d-7ea5013fa0b1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f57084-4876-4e2f-bf85-969935d7e81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "16cf485e-bd74-4e0e-a87d-0497ea3c9b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f16968-cb1c-48eb-a1d9-b80b79865be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8cbaa8-3efd-42e0-907d-8aa42874b0c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6b9be75e-9b15-4a25-bf2d-1a1ff61ae74a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "75be3dbe-0402-41e2-bb63-41b610dcebda",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d88bce3f-8c73-4c7f-9e36-27481fd5c5e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0fac892f-9d2d-4e75-b11d-708694cb672d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a81ee39-8b18-497c-a65c-2bf1a732a695",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "866c61c2-7b76-4908-a4ba-af0f72b453cf"
                    }
                  }
                ]
              },
              {
                "id": "5bfdba55-6947-4f6a-bb9d-6c1e49d3a48f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9ed15a9-17b5-4c97-8e2d-326478e58aea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8193ca67-d922-4f7f-8183-1235c6ca9080"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9946018-aeb7-421f-b215-0cd48766cd58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2baddc02-bd13-477b-8998-1a1e08d5707e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c823acc1-308a-424d-958a-317023c42c34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4529ea53-5f26-4e08-bc72-b6adef242e59"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71330561-b1a8-4763-a6f4-47b7c02feede",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47a17d73-f042-4959-ac0a-b50588b5e082"
            }
          }
        ]
      },
      {
        "id": "0fa74efd-97b3-4645-8c6d-2ece40acaf05",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9fbd11d0-6478-45db-b722-014ba49e1702",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e57e5943-f288-4d2c-b0c2-0bce73b92c1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "abbb042f-8a03-4e76-922a-065bc1458777",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae037bd-b143-40da-8d2f-02ea1834fef5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7fb1c301-dec7-437d-b413-c3ef51748de7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe788de-dd65-4c1c-9597-fef39b50d1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dbf38d22-c713-4645-a66f-e748ad6a4aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732e5d6d-6f6c-4150-92d0-18b9a4340649",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586560c8-2916-4cb1-aadb-184bd47ba6f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7c0b3caa-2b0d-4e26-9f1d-5bf2f0a4cdb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a863a38a-a32c-489a-be23-24c8a7709a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcaaff75-0c2e-426e-8071-31e4a36b7b25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d891d82-c798-4d1f-ac1e-0ac8bb4cb264",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50d6ac43-44cc-4d1d-8fae-989976b5612d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e418550-97e7-4d1d-b99c-5e295b531d1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "628820b0-fe5e-40a1-8891-8de09cdbcef1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57723743-8c1f-47bf-8672-12e7fab04c33",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "afac1704-b1a7-4cce-ab32-f5dbedc68682"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d5dcc12-1131-4eb1-b34a-a73dd8dae079",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19775649-b867-4cb0-8181-0567b5140d52"
            }
          }
        ]
      },
      {
        "id": "db14f5f1-c428-407b-8e70-b755eae5cfd7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cd570e29-4895-4299-b296-a8924b414209",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f9b9737-9238-4c1d-9975-03020fb38381",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "03c152a2-d5e1-49b9-b732-6c80c8bfe06d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbdc88d-d964-4a87-9c46-6916334b5587",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3358fa7-d74b-47ea-bcb2-e3701cb5d7eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94d0d2c-0413-4a09-8db2-af008b418da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "672e5542-e70d-4d44-aa48-27eec6fccaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c01313c-388b-4d7e-8009-e356dbb93800",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6f879a-6682-4a85-b111-047226b498b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "64dce622-199c-4571-b878-8ddd670472e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd1b9e2-1115-48e0-a005-9b6ca3a46638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e1d4ccc-4001-44e3-b562-d69b40585d26"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bab2db6c-e681-475e-be2f-60fbc53a88d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60383764-d96f-4b51-8bd2-0b70338d070e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "50c749c3-edbd-40d6-b2a4-3b2f74c6ff94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b9cb755-ce91-461c-9567-5e10a23d5530"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5aa516ab-049f-4237-ba0b-0b3be91efc78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "df29fca0-ae77-476b-b3a3-bed81c79f68c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d472fa7-5384-4674-a962-93113d405891",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "299b256a-eb22-4d6b-a1d5-e3121eaca1e8"
            }
          }
        ]
      },
      {
        "id": "7bc7496e-71b7-4e0e-8d95-58cae35be3d9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e677ed2d-76d1-4264-9099-305c0868afb3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21c54b59-35b4-4077-bd9f-9c7b73add6ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a64b859-a7fd-45cf-a9da-4395c82996b9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a13f46-4da6-4e14-b2f5-899109eb9c3d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8e95687-4794-4587-8313-5571747bd6b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "447a8839-e7bf-4db1-a175-86552b738e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f18e5a8c-283a-43ab-8fd6-1cea3d62813a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e914d303-50b2-47f7-abc3-dde0a9ea063f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a6aee2-2dc9-4f37-9cc7-3427c2562e6a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "189a070a-5426-4da2-8f53-0b79ef950353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4578b9b6-1624-42ca-9d2b-cec5777cb478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d4efc70-8206-470d-a63d-182b6f40bc38"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04a64989-51e9-4508-a613-b4532b528b5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd437d2a-18b8-4571-951b-d049b8fee6e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2aaa68fa-579d-4801-8852-e05bc3b563be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae163a8b-7761-4449-ad7b-49802ca93e21"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f18d7b0-1f42-4078-b4bd-d7f8fb63f929",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8dda9023-33a5-425e-ab0d-53429a6b80d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e69c34c9-f746-4540-b03f-072b57d1add0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ccce59a5-7ac3-46ee-9388-73a5ac638dd8"
            }
          }
        ]
      },
      {
        "id": "1f1581da-1c98-4fcc-9507-8ea4cb1cd297",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f1dedeb-f154-4914-b339-d36e24f88e64",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abff5f21-91cc-42ca-9932-7ec6dd94298a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "21b7097e-f0d4-4385-b337-da031e26374c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c63f707-40b5-4e28-b441-7dc28fbe53ac",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f13f7763-201a-44c6-bf71-fec594ea912d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 285.5230769230768,
      "responseMin": 26,
      "responseMax": 6850,
      "responseSd": 795.1303590789337,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684456642538,
      "completed": 1684456731214
    },
    "executions": [
      {
        "id": "1d214264-730c-4b35-ae80-1efb34278b4b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cd9ffe92-172c-4399-976d-2032e99d68f3",
          "httpRequestId": "4fdac2cf-fb34-4e11-b4b8-36e1ee11942d"
        },
        "item": {
          "id": "1d214264-730c-4b35-ae80-1efb34278b4b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3792e04f-e0e7-4895-b64f-886afbabc231",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 0
        }
      },
      {
        "id": "2c33cbbe-096c-4f6b-8754-b1ad6f13996a",
        "cursor": {
          "ref": "7cbb4fd3-9dee-4791-b821-a8dec9070857",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "60b86078-3b5f-4fef-8fe0-b9e410f5cd4c"
        },
        "item": {
          "id": "2c33cbbe-096c-4f6b-8754-b1ad6f13996a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8fb4b506-ba86-4f00-badc-408a37bad039",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 0
        }
      },
      {
        "id": "884d316e-53bf-4d17-aa49-f5fb5be6ad3f",
        "cursor": {
          "ref": "19c910e4-f625-4aa6-bde3-f785b7f6571a",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d3880e00-bd62-46e9-b0ab-fd3c239e7ded"
        },
        "item": {
          "id": "884d316e-53bf-4d17-aa49-f5fb5be6ad3f",
          "name": "did_json"
        },
        "response": {
          "id": "1e649d64-1074-4663-9669-49f22fbc5f6a",
          "status": "OK",
          "code": 200,
          "responseTime": 890,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32925a74-5f6c-41a2-9059-2b9502fd0875",
        "cursor": {
          "ref": "338e0a12-0f01-4105-b56e-b1f2ae54ff92",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f4d7aa01-ca5b-4229-9edc-31258cb98d9d"
        },
        "item": {
          "id": "32925a74-5f6c-41a2-9059-2b9502fd0875",
          "name": "did:invalid"
        },
        "response": {
          "id": "50df7e2d-6a46-4d12-9821-0665a3692e0b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1470,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "32925a74-5f6c-41a2-9059-2b9502fd0875",
        "cursor": {
          "ref": "338e0a12-0f01-4105-b56e-b1f2ae54ff92",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f4d7aa01-ca5b-4229-9edc-31258cb98d9d"
        },
        "item": {
          "id": "32925a74-5f6c-41a2-9059-2b9502fd0875",
          "name": "did:invalid"
        },
        "response": {
          "id": "50df7e2d-6a46-4d12-9821-0665a3692e0b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1470,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d59b22f7-f2f6-4887-a408-29e02af94c18",
        "cursor": {
          "ref": "590a2f66-9d91-473d-b9b4-591722a04119",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "91164b2e-6015-4448-ad73-2e5ebce43e93"
        },
        "item": {
          "id": "d59b22f7-f2f6-4887-a408-29e02af94c18",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c3342d60-6a67-4301-b91b-5d2d207d398f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 58,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a53c75-a0e3-4757-8de0-a550a5464eac",
        "cursor": {
          "ref": "1819f6fd-a3fe-43b1-925a-87db4699a830",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "728e1f59-faec-45b4-8d1e-3fde0305262f"
        },
        "item": {
          "id": "a1a53c75-a0e3-4757-8de0-a550a5464eac",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "26f65e7a-b75f-4081-a598-7abac3f76fe4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45695c55-0652-4fa4-83fc-6f8a259d0f10",
        "cursor": {
          "ref": "4b75793b-1fe3-4d93-a6f1-14ef112a1ea8",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c078dd2f-b8e5-429f-ab87-3bf8be6fd497"
        },
        "item": {
          "id": "45695c55-0652-4fa4-83fc-6f8a259d0f10",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "74735552-5fc2-4bd2-b435-62126ee15f42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 220,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "0a47cc38-9822-4498-9634-929a5026fdea",
        "cursor": {
          "ref": "5a9b49f9-a1de-4b26-b7eb-1484e4f6e299",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a56a58f8-345d-415a-83f9-0894814b11bb"
        },
        "item": {
          "id": "0a47cc38-9822-4498-9634-929a5026fdea",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "88e1aaf9-fde5-4cce-a29f-c916bb3b6ab8",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0a47cc38-9822-4498-9634-929a5026fdea",
        "cursor": {
          "ref": "5a9b49f9-a1de-4b26-b7eb-1484e4f6e299",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a56a58f8-345d-415a-83f9-0894814b11bb"
        },
        "item": {
          "id": "0a47cc38-9822-4498-9634-929a5026fdea",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "88e1aaf9-fde5-4cce-a29f-c916bb3b6ab8",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7bef6e24-934b-4408-8f3c-f2ef03c8e1fd",
        "cursor": {
          "ref": "87598c9f-7340-4e8f-b765-9017ed0a3804",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dd8c408c-587b-4c66-a77b-f448235d113f"
        },
        "item": {
          "id": "7bef6e24-934b-4408-8f3c-f2ef03c8e1fd",
          "name": "identifiers"
        },
        "response": {
          "id": "ce2488b1-7222-4786-9a68-7846a59a43d5",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f3cbe3-b560-46b0-b978-18934c349ef0",
        "cursor": {
          "ref": "b75f0d29-2a25-4d41-9410-c72f7fdbc1a3",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f18e8e57-ec9c-44a8-99ee-1aab33c2c62a"
        },
        "item": {
          "id": "73f3cbe3-b560-46b0-b978-18934c349ef0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e09685ed-de5e-4bf0-840b-f625b0b7e8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f3cbe3-b560-46b0-b978-18934c349ef0",
        "cursor": {
          "ref": "b75f0d29-2a25-4d41-9410-c72f7fdbc1a3",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f18e8e57-ec9c-44a8-99ee-1aab33c2c62a"
        },
        "item": {
          "id": "73f3cbe3-b560-46b0-b978-18934c349ef0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e09685ed-de5e-4bf0-840b-f625b0b7e8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87dbe3f-4356-4810-b108-6f14eaa5d933",
        "cursor": {
          "ref": "b7db6ff0-21ab-460e-bc97-1c6b41ff859f",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5c433a70-e67c-4e8a-9233-6a83e447ff21"
        },
        "item": {
          "id": "a87dbe3f-4356-4810-b108-6f14eaa5d933",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7132f37c-3a83-4129-91f2-f673df0e4839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5c8702-b828-4870-bbe9-94aa2e012fda",
        "cursor": {
          "ref": "26a80871-13fe-4d38-94ff-f1e9d5573684",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5ebe8d2c-4333-4045-b0db-5bb2fd215b31"
        },
        "item": {
          "id": "0e5c8702-b828-4870-bbe9-94aa2e012fda",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "49a6a416-f9fb-434e-a80d-31fe08b2d806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7756fa46-bbfc-4b23-bd6f-c840c39d9f23",
        "cursor": {
          "ref": "682094e9-da9d-42f6-8f94-f20d8edded58",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a91c2e34-f942-4a0f-820a-895e30c291bb"
        },
        "item": {
          "id": "7756fa46-bbfc-4b23-bd6f-c840c39d9f23",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "444ad9d4-a9ce-41ee-93af-4402593e5540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185d2348-5f99-4cb9-99c0-22dca1e695dd",
        "cursor": {
          "ref": "291f3877-a0f0-49fa-aa03-825e8bce9590",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "045e20de-d456-4413-a568-13f67911700c"
        },
        "item": {
          "id": "185d2348-5f99-4cb9-99c0-22dca1e695dd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3b0a8666-52a8-4116-85a9-5e4a6f2ac786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a7d908-d477-450d-85a2-417ad2fc3110",
        "cursor": {
          "ref": "734877a5-b069-4a91-8072-592801201e6d",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f1d9a5a0-35c1-4717-900e-b541f5e56ed5"
        },
        "item": {
          "id": "40a7d908-d477-450d-85a2-417ad2fc3110",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f35b05b9-01c3-476e-84cd-42be142baa19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54295546-ad28-4488-b97d-f0f8724ad484",
        "cursor": {
          "ref": "4212ab78-4931-4dcb-8b4b-cb67d719c063",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8830d36d-e231-46c5-836e-6c2d62ce4a4c"
        },
        "item": {
          "id": "54295546-ad28-4488-b97d-f0f8724ad484",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "afa2b601-1946-40e6-9264-b9e5063a3e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678aff29-ea22-4323-b296-e4bf4f3c9c0e",
        "cursor": {
          "ref": "5fd720a9-1100-4752-b759-aaea293ca694",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cc68b986-b2f9-4bcb-89d5-4b325efdc52c"
        },
        "item": {
          "id": "678aff29-ea22-4323-b296-e4bf4f3c9c0e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "96e88577-4f97-4d22-a0c3-18d48ee71475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0a90cc-9f1a-46ae-9ff2-63bd9013af2a",
        "cursor": {
          "ref": "d73a5f64-57c3-4ec0-805b-7116bfafd95f",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "137b675d-6c46-440e-b4ce-efd5e5f381a2"
        },
        "item": {
          "id": "1c0a90cc-9f1a-46ae-9ff2-63bd9013af2a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "91fe8aeb-d358-489b-8b4b-22678cd87e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20bca93-a8b7-446b-964f-e4fda6c1507b",
        "cursor": {
          "ref": "0f6b37c8-f898-421e-adf0-9cdebf0ffd74",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b8e84874-a08d-4553-8e98-f251ea640450"
        },
        "item": {
          "id": "d20bca93-a8b7-446b-964f-e4fda6c1507b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "09910009-ce5b-41f1-9197-cae59774e5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de53a72-45d4-493f-a981-11e9fe344920",
        "cursor": {
          "ref": "7e8a4d8a-95ea-4ea1-b2c3-c9b8aae6dcb7",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c44be62b-87f3-4210-97b5-afd0a1c3724f"
        },
        "item": {
          "id": "0de53a72-45d4-493f-a981-11e9fe344920",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e069db5a-eb2e-44ca-b0e1-ab0df53bc19b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda7e39d-1196-46b5-9be5-84781738edd8",
        "cursor": {
          "ref": "ad037ace-70ca-4944-b9dd-5c4748de5575",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "69aa8014-7237-4955-8001-327e0b38a509"
        },
        "item": {
          "id": "fda7e39d-1196-46b5-9be5-84781738edd8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a5a16c69-738a-4d12-ab06-dadd4f59d055",
          "status": "Created",
          "code": 201,
          "responseTime": 1467,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "28b35bbe-849b-45a6-af35-2cf6c283af0b",
        "cursor": {
          "ref": "ed425180-ef05-4d04-a849-2f66f6879e96",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8e6aecb1-fa16-40fe-8127-35dc9020bfea"
        },
        "item": {
          "id": "28b35bbe-849b-45a6-af35-2cf6c283af0b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "352b905b-b62d-4da2-b963-df5cdc1e33d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d26d0ef-3616-4935-842c-d5ceeb5ebc3a",
        "cursor": {
          "ref": "f23debe5-f687-4bb7-b347-24b73deca287",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "566e7b10-fe16-49a1-8f91-30c1f054e980"
        },
        "item": {
          "id": "0d26d0ef-3616-4935-842c-d5ceeb5ebc3a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "13c96aa3-ec9d-4d14-9a93-1eb0e7461e0c",
          "status": "Created",
          "code": 201,
          "responseTime": 6850,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "29faf2a2-3478-4b2c-86de-14aa32c8c302",
        "cursor": {
          "ref": "c4e7ef6e-43ff-4ac9-965a-08e4d44af10d",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "92550a14-2b3a-4956-a76a-9375c3649f77"
        },
        "item": {
          "id": "29faf2a2-3478-4b2c-86de-14aa32c8c302",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1f7a944b-b536-4ab8-9b53-57edf34d2b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36935c74-1e42-422d-84b2-4dd9b4ca9ced",
        "cursor": {
          "ref": "d33722f7-042a-4656-a64e-779d79143d2f",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "821591df-8542-4694-8bbb-b6e2829010c9"
        },
        "item": {
          "id": "36935c74-1e42-422d-84b2-4dd9b4ca9ced",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d2617476-4908-4136-8136-5d371e89a036",
          "status": "Created",
          "code": 201,
          "responseTime": 3881,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "aa889c10-f292-4f5e-8a38-90825b66cdbf",
        "cursor": {
          "ref": "8580a55c-368e-406c-835c-ffa83fb3ab58",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6fe07640-c97b-4e43-ab0b-91e516cb29d6"
        },
        "item": {
          "id": "aa889c10-f292-4f5e-8a38-90825b66cdbf",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1a79a399-3af6-4ed8-bf29-0d9cbd04ca49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccbf2854-35d1-4558-9429-14b7fc4ca347",
        "cursor": {
          "ref": "10507c7a-5e03-415d-8ea5-f8df36627b57",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bd83210a-65d6-4894-81ee-9fdbeea05af6"
        },
        "item": {
          "id": "ccbf2854-35d1-4558-9429-14b7fc4ca347",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2adebe36-1eaf-4f77-97ea-e946ece4e98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367b1049-7ee8-47e2-8edc-3b1f20aca7d3",
        "cursor": {
          "ref": "d4563991-cd6f-4a20-acdf-61e0ebcb555f",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "71114319-4278-41a2-bb49-b30aee94a818"
        },
        "item": {
          "id": "367b1049-7ee8-47e2-8edc-3b1f20aca7d3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "20ba5b21-8b94-422d-ae47-73f69a950f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf7931e-cf8d-4fb5-8bea-62e03d0eeabb",
        "cursor": {
          "ref": "c186a033-def9-4695-b890-77bcff858453",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c5d4d4de-0384-4755-a931-613caaa0a6da"
        },
        "item": {
          "id": "5bf7931e-cf8d-4fb5-8bea-62e03d0eeabb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "30ae50a3-f950-40d7-b9a3-de4ff1e751c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0801a4d7-5efe-4281-bc5c-9ae969069e73",
        "cursor": {
          "ref": "b3435174-d22f-4903-b692-8ae1252bfb90",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "66cc7498-6b51-49c7-8bc2-8bd59ae8a63f"
        },
        "item": {
          "id": "0801a4d7-5efe-4281-bc5c-9ae969069e73",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "02567c08-d86a-4687-a519-3b71d42b593c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33ab776-2546-4e3d-a9dc-466949cbe2ad",
        "cursor": {
          "ref": "29c84cb0-0d03-4f27-bb67-9599e9e5bce6",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ee949df3-b005-4bcc-9bd0-b629058aaf81"
        },
        "item": {
          "id": "e33ab776-2546-4e3d-a9dc-466949cbe2ad",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "12d1330c-ae9e-444d-a05a-ef35411a3629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acaae372-d74b-45f2-80fd-12b3fdddcea7",
        "cursor": {
          "ref": "150fd959-0cdc-47f3-9978-8170d6f24464",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f3b8f04a-d095-4b9f-bff0-1fc0b621cb2c"
        },
        "item": {
          "id": "acaae372-d74b-45f2-80fd-12b3fdddcea7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "184f5dbe-2d29-4fcd-af71-01b3f6af5d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8516be4-2a14-4120-99a8-ded06e18f440",
        "cursor": {
          "ref": "9f545ad7-537a-42fb-947b-ba51210aae9a",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fb9cdf56-4db1-4d7b-b1c9-8dba94fc4825"
        },
        "item": {
          "id": "d8516be4-2a14-4120-99a8-ded06e18f440",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2ef41281-c8ea-4fdb-b8ef-023a8a6696c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ca8faf-ffd7-411b-92a0-838f1fa52e28",
        "cursor": {
          "ref": "b5269964-0bcf-4beb-9830-c88854c651ab",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6b7baaf1-e603-45f5-bdde-bf88cb83b931"
        },
        "item": {
          "id": "25ca8faf-ffd7-411b-92a0-838f1fa52e28",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3fbc4123-235e-42b0-90bf-818d681d3612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a952f0c6-2183-44cd-bf47-0098f4f9a160",
        "cursor": {
          "ref": "1bab39d7-0184-4103-87ad-451e1fe19385",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c33c8083-4684-4191-87ab-0ef095161a8d"
        },
        "item": {
          "id": "a952f0c6-2183-44cd-bf47-0098f4f9a160",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3618c821-f150-4882-82b8-54d02c2fafec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de5fd3d-1ff7-4e31-98ac-845b7c84a46d",
        "cursor": {
          "ref": "3a21bfd0-54ec-4ee2-bac4-ba95787f499a",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d84b6d35-d1b0-4cf1-8e70-feaf2f9c9aad"
        },
        "item": {
          "id": "9de5fd3d-1ff7-4e31-98ac-845b7c84a46d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f8d75dc8-4573-4a3e-ba24-fb93f514c5c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393464ba-2ec8-4db0-9a68-9b45e9f009b2",
        "cursor": {
          "ref": "a524d3e4-b85f-418c-8c68-ea95a94aedeb",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "67595ba5-bf5a-4641-b3fb-9230a1e0b730"
        },
        "item": {
          "id": "393464ba-2ec8-4db0-9a68-9b45e9f009b2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e30008bd-6e0f-4072-92e9-a7877233c204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ce7535-a78b-43c1-b656-a4422ee9736f",
        "cursor": {
          "ref": "42ab3ab5-c79a-4d36-b976-309c0ff1a0e3",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e5df638d-344f-4350-a69c-28e9dd9920c8"
        },
        "item": {
          "id": "95ce7535-a78b-43c1-b656-a4422ee9736f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "52ec4e38-2b68-4a7e-a6d3-c3c41912c6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b980397-e63f-493e-8e18-a9d344b67c26",
        "cursor": {
          "ref": "1963fcbb-6415-4c0a-9648-7721f939132a",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "57985c9f-0ac3-4cee-9a1e-2119238dccaa"
        },
        "item": {
          "id": "4b980397-e63f-493e-8e18-a9d344b67c26",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7a987199-5ceb-4fb5-8ef0-0497b74f4137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a4c0f1-1958-4187-8b70-bf53018a9377",
        "cursor": {
          "ref": "5f6fb420-3e5b-41a3-881e-e2933d4ceb75",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6224bb55-55cf-4145-b1d3-56f5314ea42a"
        },
        "item": {
          "id": "42a4c0f1-1958-4187-8b70-bf53018a9377",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "90b3bcd3-56cc-441c-9b3d-8540e0021d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c293ec1-fa51-4d00-8c02-1e87499d969d",
        "cursor": {
          "ref": "bc90829c-7baa-4736-b29c-1fca0ac6cf63",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4ebacef2-36c3-41f8-b94c-3b4642d3dc43"
        },
        "item": {
          "id": "6c293ec1-fa51-4d00-8c02-1e87499d969d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b70c922b-b51c-463f-81c2-911d3bb6cac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da8c06e-c6ff-4972-b843-70b75a5c6656",
        "cursor": {
          "ref": "fef3d787-f72f-40f2-b62e-71e1f41fdfd3",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "44ccb8ab-9162-467a-8336-e51ce82a5ab7"
        },
        "item": {
          "id": "9da8c06e-c6ff-4972-b843-70b75a5c6656",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "663a7028-a543-4cbf-960c-0adc00c5bbfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f243c267-d6f1-41aa-a8d1-169b4d399b81",
        "cursor": {
          "ref": "92940477-b105-481d-bc5b-175ef79bdd97",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6a7e8b2e-6434-484c-b730-295ab1a28d78"
        },
        "item": {
          "id": "f243c267-d6f1-41aa-a8d1-169b4d399b81",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5353e25f-8e04-40ac-ad5e-8cf7f62603fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa6db43-aafa-4ed1-aa47-daf3e55523f6",
        "cursor": {
          "ref": "c708b544-ea4f-49e0-8056-923f0409a053",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cbe9b3cb-d7fd-4e29-a828-5a5e8cc92e00"
        },
        "item": {
          "id": "3fa6db43-aafa-4ed1-aa47-daf3e55523f6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d0ed6157-8c94-464c-9e8e-d802a6c144d1",
          "status": "Created",
          "code": 201,
          "responseTime": 2595,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c039f4f8-c033-47d6-872f-87f235d67862",
        "cursor": {
          "ref": "e098a153-24fa-4907-8dda-5b02bf8b77a9",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0ce84c06-bdc5-4be8-b105-542471fa5bf4"
        },
        "item": {
          "id": "c039f4f8-c033-47d6-872f-87f235d67862",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "76b37685-54e4-4ada-a9ee-362e412c4d5a",
          "status": "Created",
          "code": 201,
          "responseTime": 2592,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "535e4b95-d6ed-43d6-8ca2-879289d21d13",
        "cursor": {
          "ref": "c73b6795-a17b-4382-b563-5ead49f414c4",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "596dfdf2-f6b9-4107-8f79-afe43eded1ee"
        },
        "item": {
          "id": "535e4b95-d6ed-43d6-8ca2-879289d21d13",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "16b7abb2-167d-477f-9d96-d3d4594eb748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deeff891-ec9f-4dac-920e-13602c449d57",
        "cursor": {
          "ref": "61b20500-4952-4b36-a7a8-152fe326b58d",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "921b9ce4-3198-4f78-9d05-f3b5dbacedcd"
        },
        "item": {
          "id": "deeff891-ec9f-4dac-920e-13602c449d57",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c9134b19-a58e-40ea-bea3-ad61731a0315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6a74da-5080-48eb-82dc-990f7bf64611",
        "cursor": {
          "ref": "69640a17-f9b5-4bec-b7e7-7af1c9d68c0e",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2a272fc1-8b97-4c57-9496-2745f7c49961"
        },
        "item": {
          "id": "0f6a74da-5080-48eb-82dc-990f7bf64611",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "585d5ccc-5023-44b9-9210-cbb5f95beebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d757df5a-b35a-4351-88fa-42b2ba449935",
        "cursor": {
          "ref": "de995b19-3b4d-4c69-9efa-e216aea7c4ce",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e0b25ce3-b176-4449-80c8-95303d5ecb49"
        },
        "item": {
          "id": "d757df5a-b35a-4351-88fa-42b2ba449935",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d043ac30-083c-4378-a8b7-f1506522ac2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68793062-f443-443b-97ec-7d760c96485b",
        "cursor": {
          "ref": "a350328d-a3a0-47f7-bc5a-af691bc50042",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "18b93966-e3b3-4678-b820-430af723dc3e"
        },
        "item": {
          "id": "68793062-f443-443b-97ec-7d760c96485b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8e22f43d-643c-4268-9006-72db9985a033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882f5f35-7b09-482a-894e-9f64d563d1e0",
        "cursor": {
          "ref": "fc83a15c-07b0-471e-9a34-7476080bbbfb",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a5949b5e-6a89-4186-b4c8-7a892480bcfd"
        },
        "item": {
          "id": "882f5f35-7b09-482a-894e-9f64d563d1e0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "86fad429-db30-4c18-a025-540c87a1bedb",
          "status": "Created",
          "code": 201,
          "responseTime": 4912,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0f7e2a34-c4b9-4c2a-bd14-127442d78948",
        "cursor": {
          "ref": "78c86315-45fe-4138-af2e-3346c83a801c",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4f0958ce-548b-4a42-a91b-7e9a8b864bd7"
        },
        "item": {
          "id": "0f7e2a34-c4b9-4c2a-bd14-127442d78948",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "92d75675-1d1c-4ce3-a457-c6545ac76e05",
          "status": "Created",
          "code": 201,
          "responseTime": 2858,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "016f4cfd-53c4-4141-aa50-df25af77680c",
        "cursor": {
          "ref": "800ab2a0-edc8-4713-a1e9-a2e1d5869a8a",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a579205e-f128-4895-b48c-1a1a781b0eef"
        },
        "item": {
          "id": "016f4cfd-53c4-4141-aa50-df25af77680c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8c95729e-2abc-4def-8f25-cc764a5a20b7",
          "status": "Created",
          "code": 201,
          "responseTime": 2305,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "2ac19267-ac45-4261-bed9-e4009acd85b1",
        "cursor": {
          "ref": "0e5e2f52-49b9-4c89-8856-34c65d132b87",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f7efca21-8fd5-42be-a7c2-84aa31eae860"
        },
        "item": {
          "id": "2ac19267-ac45-4261-bed9-e4009acd85b1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1a76986b-fca5-45f8-8f8f-99b0ef59e6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89b24ed-5a62-4a05-aae0-45ca5012f1f2",
        "cursor": {
          "ref": "6c04ca37-56b7-43ab-92a2-357f37cfcd2b",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fbfecfbe-b357-40fa-b989-65437d7f9833"
        },
        "item": {
          "id": "b89b24ed-5a62-4a05-aae0-45ca5012f1f2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6838d55f-b634-4171-b4c0-b3ab10ff805b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b808172-5153-47be-b9dc-5a4565cf4ce8",
        "cursor": {
          "ref": "3ba656ab-e453-4280-9f17-4265c034fdc9",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d6a49331-b7f3-409b-910e-929a7cd10ea3"
        },
        "item": {
          "id": "1b808172-5153-47be-b9dc-5a4565cf4ce8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bc8394d6-6b42-4b1c-9403-445f213e965d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce708f9-a07c-437d-97db-080b6deb742b",
        "cursor": {
          "ref": "c1205455-69d6-4b35-afdc-5651a5ada9b0",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4d201d66-8b84-4367-86f2-8e988553160c"
        },
        "item": {
          "id": "3ce708f9-a07c-437d-97db-080b6deb742b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "08722b25-974f-47b0-8f35-a4fca1a81f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375b582c-5a97-4c30-9dbb-98b97ef89ed6",
        "cursor": {
          "ref": "56f0e5be-7ac3-4009-b58d-67b34d9290a9",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2908484e-ec16-4779-b261-571be8de0986"
        },
        "item": {
          "id": "375b582c-5a97-4c30-9dbb-98b97ef89ed6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4e561828-9a16-4cf7-8b1c-3b3ec7979b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e28f6bb-a9d8-444e-9627-14e7360e3ed8",
        "cursor": {
          "ref": "64a4a166-e3d5-4728-ae36-8286afd04b36",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d10c4fba-943e-478b-86db-4c2458201738"
        },
        "item": {
          "id": "8e28f6bb-a9d8-444e-9627-14e7360e3ed8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6c81dbfc-72e8-45bf-bea5-ac0b8c0e57bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f37583-f2f1-4020-b23e-9ce1cfb24157",
        "cursor": {
          "ref": "bbe61a7e-3d0f-4b6f-aaed-f1b7c6bd7d80",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a3262eb4-da0a-421b-a249-adcb5175df41"
        },
        "item": {
          "id": "35f37583-f2f1-4020-b23e-9ce1cfb24157",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1080214f-9542-4ef8-89d8-6e4cbf121da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da058ea6-6221-4c6c-b542-69b062b49c7e",
        "cursor": {
          "ref": "9f4c147a-09a8-4a65-afb3-8f79e2182d37",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4381b2a3-18ad-4793-9853-6f979a825d38"
        },
        "item": {
          "id": "da058ea6-6221-4c6c-b542-69b062b49c7e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "573a9053-4448-41d1-b784-eb70d1bae0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023f4568-d47c-4657-a42c-d485663076ff",
        "cursor": {
          "ref": "5efdeb72-3295-4f2b-9e1e-ad82d9b0d8c5",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0465e313-ff3b-49ec-9fb8-9fde79b2c600"
        },
        "item": {
          "id": "023f4568-d47c-4657-a42c-d485663076ff",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "82ca2efb-92cc-46db-86c2-b9a5cd6a7b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75ffbf6-3544-43c5-8bef-070a53d52e80",
        "cursor": {
          "ref": "727b37c0-98f1-4006-a209-177c52ac1f70",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "af75304b-e337-4c6a-9921-c75fedcf0d94"
        },
        "item": {
          "id": "b75ffbf6-3544-43c5-8bef-070a53d52e80",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a223ce11-e187-4f31-8c86-ff16de2267f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5523a44-cd10-41e4-9e96-8055683c486d",
        "cursor": {
          "ref": "13a89266-c795-4724-bba9-eb60be943ed6",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "dc2e3a33-ac62-40f3-afc6-65bed4562e70"
        },
        "item": {
          "id": "a5523a44-cd10-41e4-9e96-8055683c486d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6e1fe797-ec8f-43aa-a617-b25c9fbc06c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe90ab3-cbfc-45eb-9b4e-d58f7b1c6940",
        "cursor": {
          "ref": "cffabc4f-acdb-4026-a0e2-27ea7b53cc4c",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ddc416a7-8bb7-4494-9659-19232f5f623b"
        },
        "item": {
          "id": "0fe90ab3-cbfc-45eb-9b4e-d58f7b1c6940",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d50ba633-b75e-4580-bee7-ef3af6bc067a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200d6a6f-72e4-4730-ad99-2fd40fbe3255",
        "cursor": {
          "ref": "fe4d8922-8dd8-4b94-95ec-88136428a1d2",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "59fa2ca8-0ab5-44d3-bf4b-0853ebce9d0d"
        },
        "item": {
          "id": "200d6a6f-72e4-4730-ad99-2fd40fbe3255",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "993fe0bf-8de5-49f6-9ebc-4205292f3361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab9d994-5375-4c82-b31c-3c9920fec3d3",
        "cursor": {
          "ref": "7f8d940d-eba1-4487-819a-85895e2cbe22",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2f71b511-1976-4359-8114-e6f465aafc59"
        },
        "item": {
          "id": "6ab9d994-5375-4c82-b31c-3c9920fec3d3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "aaaa539c-1571-45b0-a95e-c65b3d640f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdb9c06-9712-47fb-947f-0e420794356d",
        "cursor": {
          "ref": "6ba47144-82ef-4801-b583-cf739b09df63",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "12572c40-0211-42a6-a590-02cb8919b760"
        },
        "item": {
          "id": "8cdb9c06-9712-47fb-947f-0e420794356d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c117990e-d2c1-4b4b-843e-0ec0158bd804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f22151-ac84-4932-b1ca-8799e9c20e52",
        "cursor": {
          "ref": "715345dc-605a-49a2-8d9c-a59cb712078b",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d3139054-2cd9-48e2-92ff-3c0e74eb9f51"
        },
        "item": {
          "id": "75f22151-ac84-4932-b1ca-8799e9c20e52",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "06b4f9a7-6b3b-48c7-874b-934e3dd9b9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0541893b-1dc4-47fb-afd4-91d3dc6a29ba",
        "cursor": {
          "ref": "7bf9c9f1-54c1-4b42-b280-3b8abccb41c0",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0e13e5de-c7ee-4bfd-a083-7df681889ee2"
        },
        "item": {
          "id": "0541893b-1dc4-47fb-afd4-91d3dc6a29ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7a496d16-8a3e-4d7d-8dff-ddf7204f5f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07bf684-b4dd-4397-a338-d5017e28e0c9",
        "cursor": {
          "ref": "c40f1caf-41c7-4e98-969f-b84af7296707",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d65f8ccd-ae8c-4ba7-a490-dfa3219a6a76"
        },
        "item": {
          "id": "a07bf684-b4dd-4397-a338-d5017e28e0c9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8e2e1c85-0e93-42c7-9ce1-58bd2cd390fd",
          "status": "Created",
          "code": 201,
          "responseTime": 2967,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "3dc2bd94-2f3c-43f2-ab81-8384a7a3fa15",
        "cursor": {
          "ref": "715ebb8a-8ecb-4a3f-b478-98c6a38ff6bf",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c145bc64-3eef-45d6-9cbd-6f53ee4a7bbb"
        },
        "item": {
          "id": "3dc2bd94-2f3c-43f2-ab81-8384a7a3fa15",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6141ce2d-425b-4575-9c37-fbc6c207a2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d8b800-da09-4e26-b68b-9eea76117455",
        "cursor": {
          "ref": "ce50c78b-cb18-49f3-bc06-e6550d51c775",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "962c30b3-a252-4870-83bc-001eccc9ea24"
        },
        "item": {
          "id": "f7d8b800-da09-4e26-b68b-9eea76117455",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ccfab6c4-0c1f-4783-b685-e32874adefea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ca5e45-1733-4e63-853f-d16f997a9dab",
        "cursor": {
          "ref": "144ab61b-57e9-4645-a6ab-5ed39b1e2f74",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "63cf0d18-157c-41e2-8178-aa371951490f"
        },
        "item": {
          "id": "c1ca5e45-1733-4e63-853f-d16f997a9dab",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "386fdc4f-6f0d-4941-a2f5-bd0d79f33f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3269c47c-5c78-4fbc-96fd-25ac0d939062",
        "cursor": {
          "ref": "5890efd5-1231-4601-a415-82602c60052b",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "31cfbc7a-0a68-4988-bb01-678bc43cb701"
        },
        "item": {
          "id": "3269c47c-5c78-4fbc-96fd-25ac0d939062",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4d78398a-d6c8-447d-ad58-9ae8e47b9e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a00544-e973-439f-89cc-6a98ace24d88",
        "cursor": {
          "ref": "9e72c706-23c6-44e3-bb42-6a1503fc2191",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f2f7cc8b-db7c-48b4-be9c-79cb5cc491ad"
        },
        "item": {
          "id": "f0a00544-e973-439f-89cc-6a98ace24d88",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ed3bba9f-045a-4ab4-994b-a2bce126ec29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644eba7e-64c1-41ef-b152-cfaddc4c1814",
        "cursor": {
          "ref": "78622d8e-bae4-470b-af09-0d41898f1ad8",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "95cf25f5-245e-4a65-bf87-5b102e39af12"
        },
        "item": {
          "id": "644eba7e-64c1-41ef-b152-cfaddc4c1814",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "29081381-2885-4b39-ac6a-bd7f798026b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9fd7dc-3de4-430f-b0cf-abbb2fc2a3f4",
        "cursor": {
          "ref": "97a3819f-61d1-4c8a-89a5-830b733fddbd",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4d2beaf7-9675-4671-b3a7-87ed96c29ea4"
        },
        "item": {
          "id": "4d9fd7dc-3de4-430f-b0cf-abbb2fc2a3f4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9d8a4f67-30b3-44f2-8c2c-b5bbeea006f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b6049f-b12a-4361-8da7-55bb85d6f3d9",
        "cursor": {
          "ref": "bd8ac538-9c8f-42d1-bf53-1f7d24c2ed09",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a3f95fe1-8dd9-47fc-8fbf-15e501e2464b"
        },
        "item": {
          "id": "e7b6049f-b12a-4361-8da7-55bb85d6f3d9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "051755c0-a99d-43f1-86b0-792cae06513c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d983e0b-c6de-4bb8-80c2-cb2a0f285884",
        "cursor": {
          "ref": "bb962c75-2541-4fd5-830d-46f935241441",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d7c0e92d-13b6-426f-adae-0fe2e6aeddcd"
        },
        "item": {
          "id": "8d983e0b-c6de-4bb8-80c2-cb2a0f285884",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "dbb9560c-9139-41cc-99f0-7beac568ff4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2cf9726-a0f2-454f-bb03-b94504f56570",
        "cursor": {
          "ref": "5c99b461-9e89-4b40-83ef-d8eb3db3321e",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "48cd7ae9-ef5a-4cbf-a7ba-336cb222f444"
        },
        "item": {
          "id": "a2cf9726-a0f2-454f-bb03-b94504f56570",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8ddcb784-769d-4bd1-bc99-554cadf4195e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999eb8e1-2b58-48b1-bdf6-472791250d49",
        "cursor": {
          "ref": "c1aca3ce-5ea6-4e1f-b962-d456ea7af54e",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "29e01801-70e1-43a5-ab55-ebdb3ec26e87"
        },
        "item": {
          "id": "999eb8e1-2b58-48b1-bdf6-472791250d49",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f87e924c-25f7-472e-aa74-52eafe8af1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ff8cd1-bfb5-4e0e-bff6-e1e89d825a5b",
        "cursor": {
          "ref": "d6a5c0bb-d23a-438d-abfd-08b3a962ab39",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dc7c4afb-8af3-4a8d-8f56-d3bff39ff60b"
        },
        "item": {
          "id": "10ff8cd1-bfb5-4e0e-bff6-e1e89d825a5b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ac751d8a-e7ab-47db-ba6e-98d1c65cf8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c067c176-52c7-492c-bfc7-636f008758b2",
        "cursor": {
          "ref": "51c31621-d204-446f-bf9a-b5315008871f",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a640ef75-662f-45b0-aeca-3e597fee603a"
        },
        "item": {
          "id": "c067c176-52c7-492c-bfc7-636f008758b2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "fef0389f-0d34-405a-a77d-282bd643e509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1b7c11-9392-4152-b1b4-4d76ec9b0227",
        "cursor": {
          "ref": "1c501496-53de-47bb-97b5-d1ebd15136d4",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a8757759-0fe1-4031-a402-8315d8e03abb"
        },
        "item": {
          "id": "bf1b7c11-9392-4152-b1b4-4d76ec9b0227",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b085f917-334b-4e71-8a1a-069e5cfc3d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a804c89a-ede3-4b43-809b-1af03945b088",
        "cursor": {
          "ref": "0e620238-4a0f-431b-ac44-acd7102dd2af",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "dae809b3-dc39-4bba-8798-9596ba5abee3"
        },
        "item": {
          "id": "a804c89a-ede3-4b43-809b-1af03945b088",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cc6339e7-19b2-4af5-a62b-80a4949cc082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9477f80d-4c1d-4741-9206-343ada7d657f",
        "cursor": {
          "ref": "94eb6780-0050-4483-a221-9ebf5446a02b",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e4726ec7-637a-44e4-a757-931f26928913"
        },
        "item": {
          "id": "9477f80d-4c1d-4741-9206-343ada7d657f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9fca51d2-1a58-4850-93ef-20695c237801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15294f0-7eb6-4bf8-952b-11ef16dd200a",
        "cursor": {
          "ref": "ced0110d-3a63-4a08-a4d6-8f2c8214bd5d",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2e818a05-c538-4978-9e9f-f760291ed22f"
        },
        "item": {
          "id": "c15294f0-7eb6-4bf8-952b-11ef16dd200a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d22f3927-f1d8-48a9-843e-4c33b31fe092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1967c3-abcd-4312-b0ba-39e4a05712b8",
        "cursor": {
          "ref": "1d07029c-2acc-4234-bafb-52e5b268c8f0",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8ccb1c12-ca75-40c4-8352-2a58e1781492"
        },
        "item": {
          "id": "5d1967c3-abcd-4312-b0ba-39e4a05712b8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "568de899-6d97-470d-ac2a-da96892f0824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d41191-d3cc-4b51-ae18-a2f0e4164b53",
        "cursor": {
          "ref": "fe63a92b-784c-480d-8471-1a9f86a97cb6",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2f8b78da-49b5-4dd5-9fe9-54a5e034938f"
        },
        "item": {
          "id": "d8d41191-d3cc-4b51-ae18-a2f0e4164b53",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c4f4aae2-4ba7-426f-8245-1724dfdfdea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bcb952-a160-4236-8eb9-0be82243f6c9",
        "cursor": {
          "ref": "60c3bf7c-c1a4-4b66-8209-b21ee210d585",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "44065fcc-3616-4e5a-8af6-ebfe14666f61"
        },
        "item": {
          "id": "e9bcb952-a160-4236-8eb9-0be82243f6c9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "71ffc14f-4981-44e8-9220-8f48de469cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7504e3-2ee5-49c3-b1bf-66ba2d2b955b",
        "cursor": {
          "ref": "9be4e2ef-f6ba-4d09-a57b-a80a2626a4f5",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d134d1f8-0b4f-4577-9e23-27308bbf36ef"
        },
        "item": {
          "id": "1a7504e3-2ee5-49c3-b1bf-66ba2d2b955b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "130715e4-c323-4b0c-9f8a-7fc67a2cfb71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926e26b2-d0fa-476d-bdbb-1b6fbd1ed4f8",
        "cursor": {
          "ref": "82395644-ed93-4955-9798-92eaca9db469",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "68bb91df-571a-4084-a58c-2525c42fa1af"
        },
        "item": {
          "id": "926e26b2-d0fa-476d-bdbb-1b6fbd1ed4f8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ada8e8e0-e968-4a8e-b7b1-4ebd2e5f372a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc756b0c-a8dd-4b65-9f0d-e845a907b43b",
        "cursor": {
          "ref": "df785fc9-1610-478f-ad4c-ff5619c79173",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fcf8327a-ba8e-4c69-b51b-07065f6f858d"
        },
        "item": {
          "id": "dc756b0c-a8dd-4b65-9f0d-e845a907b43b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bbdc24c6-125e-4690-a0fc-9ee250a1dfb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f48b56-e588-4e62-b064-812f22bbee44",
        "cursor": {
          "ref": "e2c36a0e-8c19-4fc5-98e8-e72caf65c049",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d0870c8d-339a-4037-aecb-7dee1ed86978"
        },
        "item": {
          "id": "78f48b56-e588-4e62-b064-812f22bbee44",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f6fb5a87-d89b-435b-a6bf-407a4ac0945f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d769e9e1-6d17-4169-93d9-b14819801fcc",
        "cursor": {
          "ref": "7724fa4b-bbc7-46dc-ad8a-cf653671ba13",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "346b961f-80d8-4c58-82c3-1f5bfe4233ea"
        },
        "item": {
          "id": "d769e9e1-6d17-4169-93d9-b14819801fcc",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "32e0e10c-071d-4ba2-bade-fda4dbb0b01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d0b936-1628-4c8c-b31c-bcff78b4b114",
        "cursor": {
          "ref": "7b6be0bb-13e5-4af8-8ec5-7944f30e15af",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "95ddc0b0-f7a8-46d8-9456-f32facca6839"
        },
        "item": {
          "id": "e0d0b936-1628-4c8c-b31c-bcff78b4b114",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "01328997-f8f7-48e1-b600-ea3247741db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37570170-2d13-421f-8299-dde0fd287e67",
        "cursor": {
          "ref": "901f34d1-e663-47a8-ba66-b2abd8981a5f",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5b8ceceb-a52d-4e2a-ae60-0a5b25778618"
        },
        "item": {
          "id": "37570170-2d13-421f-8299-dde0fd287e67",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "91a72bf5-616e-4f24-ae4a-fec499eedc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b67239-84b1-4213-92c1-ef25de91b36a",
        "cursor": {
          "ref": "dc780d77-5665-4d72-9482-cd44e80760d1",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a1668ca6-b7e9-4d25-a05b-fee4a41d602d"
        },
        "item": {
          "id": "67b67239-84b1-4213-92c1-ef25de91b36a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9cfad6fc-4b5a-4621-ba88-52515846b79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dcb5b59-988e-4acc-931b-d191f37cf20f",
        "cursor": {
          "ref": "34459c82-df7a-44bf-92ba-f690f2ce51cf",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6e976ac0-2a70-4f5c-8b33-a025d1f9680f"
        },
        "item": {
          "id": "8dcb5b59-988e-4acc-931b-d191f37cf20f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8e25bacb-6d04-44fe-9a25-ac0d11315739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6771a76f-8d5c-4e16-a0d7-0fe3895dd3e4",
        "cursor": {
          "ref": "be3a0675-face-4a19-8773-0ec60afd69e4",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "afab3637-1c89-4bed-b4eb-a0b89a9872ba"
        },
        "item": {
          "id": "6771a76f-8d5c-4e16-a0d7-0fe3895dd3e4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9b62dc5e-b284-4279-ae7a-284cf01a82b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4e25e6-577b-458c-8a75-9b15ada9d1d0",
        "cursor": {
          "ref": "323f3177-7db0-4fad-9bd7-f61ccec90515",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b76810a3-743b-41b9-8bad-1ac8bda2ef14"
        },
        "item": {
          "id": "4e4e25e6-577b-458c-8a75-9b15ada9d1d0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a1a590ff-693d-4992-b18f-55f151329b78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "72ae7ccc-1dc4-4752-88c0-15fa409be851",
        "cursor": {
          "ref": "94bb8985-a113-4ba7-ac9b-c87ab15c2a15",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "36d616f3-e7a5-4d94-9bff-68f513d01fd6"
        },
        "item": {
          "id": "72ae7ccc-1dc4-4752-88c0-15fa409be851",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "96befdba-3d53-404a-a5bf-a5f9a1bd4085",
          "status": "Created",
          "code": 201,
          "responseTime": 2030,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "cbb1c069-4820-4ba3-b8a5-19a3bf3271aa",
        "cursor": {
          "ref": "78157ed8-1851-44ea-a8a8-f4bd6876e4a8",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a42e20f1-cd14-4e0f-98a0-91429aa37277"
        },
        "item": {
          "id": "cbb1c069-4820-4ba3-b8a5-19a3bf3271aa",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d90fbd82-5ee6-4075-b4b6-0953d461dcfc",
          "status": "Created",
          "code": 201,
          "responseTime": 2391,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2da8ee-1e02-46ea-91cd-42dc6d932d2d",
        "cursor": {
          "ref": "47ac750c-5a8e-4479-bdb1-d255482eb323",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4c29bf6e-3f04-4177-9b18-2a93b1dd85f1"
        },
        "item": {
          "id": "ae2da8ee-1e02-46ea-91cd-42dc6d932d2d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d6c39344-82fa-4100-a020-b20c1b8d56b2",
          "status": "Created",
          "code": 201,
          "responseTime": 2618,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fefb97-eb4e-4aa1-98e0-cdda658c7971",
        "cursor": {
          "ref": "7057aa43-585d-4ba7-8cca-abf9f2f3ccbe",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2a22363f-902d-45c7-b87a-145038400ce9"
        },
        "item": {
          "id": "07fefb97-eb4e-4aa1-98e0-cdda658c7971",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "20ddfeb0-d903-4c76-a0ef-2046d9158d9c",
          "status": "Created",
          "code": 201,
          "responseTime": 2259,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf457a2-5f08-488d-8315-4fadfdb7cd86",
        "cursor": {
          "ref": "b17b92ae-1221-40f8-8027-b79eb2e9b34e",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "97685d83-8166-45cd-822b-e7c19c516280"
        },
        "item": {
          "id": "6cf457a2-5f08-488d-8315-4fadfdb7cd86",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d3f8ba87-4f6d-44da-843c-2a6a856d8d48",
          "status": "Created",
          "code": 201,
          "responseTime": 2463,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f052477-3912-4769-8e6b-faff97759b41",
        "cursor": {
          "ref": "e02d6c0c-5e9f-4052-b5dd-334931dc66e9",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "314a08c7-8650-41f5-8334-323144d7d87a"
        },
        "item": {
          "id": "6f052477-3912-4769-8e6b-faff97759b41",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d5adcb08-2eed-4d15-a53a-4df8bfbdffc4",
          "status": "Created",
          "code": 201,
          "responseTime": 2595,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-19T00:38:23Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-19T00:38:23Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "16ebdaf2-ed08-4eb3-9598-d99c253c51b7",
        "cursor": {
          "ref": "a96d0983-8bc1-4358-b73b-933faff781a0",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "27a854c8-232c-4c21-8858-029d423ede28"
        },
        "item": {
          "id": "16ebdaf2-ed08-4eb3-9598-d99c253c51b7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6ebae771-1dd6-4173-8710-746f5647a147",
          "status": "Created",
          "code": 201,
          "responseTime": 2424,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479e15d2-a88c-46a2-896f-e291c09a997d",
        "cursor": {
          "ref": "3c2744d3-6eec-4841-85e2-d11c570098cb",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6c79f626-7fc3-48bc-a84c-6ba7289d57cf"
        },
        "item": {
          "id": "479e15d2-a88c-46a2-896f-e291c09a997d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "faed239a-cdff-4ce4-a993-2e0b6466f22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479e15d2-a88c-46a2-896f-e291c09a997d",
        "cursor": {
          "ref": "3c2744d3-6eec-4841-85e2-d11c570098cb",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6c79f626-7fc3-48bc-a84c-6ba7289d57cf"
        },
        "item": {
          "id": "479e15d2-a88c-46a2-896f-e291c09a997d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "faed239a-cdff-4ce4-a993-2e0b6466f22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae491170-acc0-4bbd-88da-cb47f893b6ff",
        "cursor": {
          "ref": "3898bd95-96d0-4c82-b96f-a46971c11e5e",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6a1250dc-64ed-43f4-a10a-4a4b7964e3b6"
        },
        "item": {
          "id": "ae491170-acc0-4bbd-88da-cb47f893b6ff",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d15fe8d7-cef0-4527-955e-fafd0f717096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532b37f8-9323-4f5b-acbf-d50f3f172744",
        "cursor": {
          "ref": "80ed3b7e-7ee7-4828-82bc-fbc67dfc5cdc",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "673a4c20-a10e-4803-8dd2-4cf61bbb4b92"
        },
        "item": {
          "id": "532b37f8-9323-4f5b-acbf-d50f3f172744",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "71f5b55e-a123-4ac6-8d1a-2dbf744918c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12252c0e-4717-455b-b427-b64cf1bfd281",
        "cursor": {
          "ref": "eedb6a97-b9f9-4194-b4c1-85f567c2dc3e",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a345c58c-8e9b-45da-9b90-f92c674773e3"
        },
        "item": {
          "id": "12252c0e-4717-455b-b427-b64cf1bfd281",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "84e29b6c-45ee-44f7-9ca4-a97e7bd0f39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c6ccf7-11bb-4597-a009-1cbb1599c648",
        "cursor": {
          "ref": "ec8b3f1e-c22d-4f0f-9a06-fcd66e68cc8b",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e7359b50-c29a-4829-a06f-a50842a28f34"
        },
        "item": {
          "id": "60c6ccf7-11bb-4597-a009-1cbb1599c648",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "19a028b2-9e8e-41ac-8cf9-1c88b0380afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec68d976-0e0e-472c-822d-82b4cac5e477",
        "cursor": {
          "ref": "afbf0f40-2c61-45c1-87c7-ec1b34f5620d",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f168d0b5-4575-4a2f-975a-9850c9540e5a"
        },
        "item": {
          "id": "ec68d976-0e0e-472c-822d-82b4cac5e477",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1160c773-3b4d-4076-9ecb-a2f1610cf28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a56c511-b2f4-4c9e-bab0-bc734f0d0663",
        "cursor": {
          "ref": "17ce535f-d5a6-4c01-a9da-31696ab1eec7",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "283d9228-0096-4a84-9b91-c0da5e142fb9"
        },
        "item": {
          "id": "8a56c511-b2f4-4c9e-bab0-bc734f0d0663",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7bf11ae3-1ffe-4e91-9b43-98bbdc1b8e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3ed4cd-9cd3-45e3-94ad-4bf85ac83d27",
        "cursor": {
          "ref": "641ed57e-9a25-44ea-ad51-971f0ab05be6",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "68e82ac2-36fd-4122-bf03-8eca55b2f934"
        },
        "item": {
          "id": "2d3ed4cd-9cd3-45e3-94ad-4bf85ac83d27",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5f6a37f1-4935-4c7a-8ef8-7dda4b5828eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480abb39-0ce5-49bc-b095-871ff580066b",
        "cursor": {
          "ref": "ff47e258-5e1f-48ca-8262-e404072ccb80",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f0138db8-aa80-44de-9fd4-add232294fc9"
        },
        "item": {
          "id": "480abb39-0ce5-49bc-b095-871ff580066b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1de4df26-6f47-4312-acd6-24a762489cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2799e0-2528-4d6d-86ef-37ad0c97c369",
        "cursor": {
          "ref": "dca091d9-9232-4e1b-8001-9eded390ffb0",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e84176a7-f257-4631-8453-b8b5793e281c"
        },
        "item": {
          "id": "cb2799e0-2528-4d6d-86ef-37ad0c97c369",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b3cf1512-6915-4d48-922a-3c338a803ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0526c01e-5fa0-40ff-8fee-d84e170bb534",
        "cursor": {
          "ref": "d0aee760-4c95-490f-abf4-822b4df28192",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e146aa11-d970-4928-9d66-d1cf8dc9c650"
        },
        "item": {
          "id": "0526c01e-5fa0-40ff-8fee-d84e170bb534",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6675d602-4797-47a7-819f-20f34d37773a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553d7bb1-1304-4581-b8c9-6eae2f414986",
        "cursor": {
          "ref": "28065497-65a7-46c4-bdff-58270ac63d92",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "faa55000-41f6-4e76-914c-d6d33c5621b4"
        },
        "item": {
          "id": "553d7bb1-1304-4581-b8c9-6eae2f414986",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "123ece24-12dc-41cc-b8b8-6b96e5fcbd70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796b27ba-aa17-4b6f-93a6-c9bc290a2023",
        "cursor": {
          "ref": "62ea1ff7-008a-4598-af4a-17c6d59a6d6a",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "49e63170-c8a0-466b-9f5e-81feede1744b"
        },
        "item": {
          "id": "796b27ba-aa17-4b6f-93a6-c9bc290a2023",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2f9f543d-46ee-4a59-91a8-7717fc4060fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6788993-ca1e-470c-8438-390a54378ef6",
        "cursor": {
          "ref": "d3b124a9-2768-449d-9361-57e7ef3793a9",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dbd758ff-8cb2-4d92-92a4-d231cf0062f1"
        },
        "item": {
          "id": "d6788993-ca1e-470c-8438-390a54378ef6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d15dba3a-3c23-43c2-b872-9d48ea013821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3771a0c0-6890-41a0-ac7c-d5763f7fbeb7",
        "cursor": {
          "ref": "d6189696-61be-4ba2-a09d-677404effd2a",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e8e8182b-e0ab-4d47-966c-6d635972887d"
        },
        "item": {
          "id": "3771a0c0-6890-41a0-ac7c-d5763f7fbeb7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b2cabeb5-b608-4ab8-a2db-50fe889637c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b918d5-3e0d-4c71-9820-41ac9d996b88",
        "cursor": {
          "ref": "1364f6e6-d804-4e0f-af6e-be295333aada",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8fa303fd-69e5-4161-85ca-4e06bdf61de7"
        },
        "item": {
          "id": "91b918d5-3e0d-4c71-9820-41ac9d996b88",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "662a25ee-4286-4254-a720-2345ef4a3475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3783811-cb6f-4b42-81b7-09a7ab239f45",
        "cursor": {
          "ref": "902db523-0190-4793-8a7d-7998cd56bf8e",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3c9aded1-2e57-429c-b616-1517f005152c"
        },
        "item": {
          "id": "d3783811-cb6f-4b42-81b7-09a7ab239f45",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bfdb788a-bc01-47a4-a6b9-809b0d123c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff599634-17d0-4358-982b-73cd4e05ef4a",
        "cursor": {
          "ref": "3747d6dc-169a-4f78-b077-de1e5e8cea62",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1eb0633d-41a9-4060-ab7b-6bda56c0b474"
        },
        "item": {
          "id": "ff599634-17d0-4358-982b-73cd4e05ef4a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "362b597b-02be-427f-8d09-b34073981b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ed44a4-7e1e-4c0e-b968-88c686ab99e2",
        "cursor": {
          "ref": "c7aadda7-5260-4df9-9dd5-2960f6c21273",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1a50c5ac-15f0-4ec0-9258-6e5f119f2cbb"
        },
        "item": {
          "id": "55ed44a4-7e1e-4c0e-b968-88c686ab99e2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "db9bc8af-ec9f-49a1-8953-499590de65f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6319c7f-cba1-4f25-9d89-5d753ca62f95",
        "cursor": {
          "ref": "3dd89183-83a9-41bb-8340-bdcceb56bc87",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2ae13777-adea-44b5-a022-c1365afac040"
        },
        "item": {
          "id": "e6319c7f-cba1-4f25-9d89-5d753ca62f95",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ec226d88-3119-4d2c-88c8-09ee3aea16bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8988cdd-348d-4cc6-9b04-7c7a23cf5efc",
        "cursor": {
          "ref": "5a39af93-6b3b-4dc5-8ac6-bdb21e8c620d",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ce36cf5e-cd1e-41ac-b05c-631562bf852c"
        },
        "item": {
          "id": "f8988cdd-348d-4cc6-9b04-7c7a23cf5efc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5b139ef2-5bb0-4ad2-a889-7e44ad0fe630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829e0d5f-5d45-43bf-b332-6948d284fcab",
        "cursor": {
          "ref": "e91e3e1d-e938-4dfb-aec1-92e81479c05f",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "48f0ddf7-6664-4b38-b82c-e525d65d1042"
        },
        "item": {
          "id": "829e0d5f-5d45-43bf-b332-6948d284fcab",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dc4560df-69f6-46f3-b427-cce684fad650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c51b36-216f-4f24-bae7-830b0843c142",
        "cursor": {
          "ref": "9d4ba91a-fdc8-4fc3-84f6-a45a3ed7aa2a",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6e940921-6647-4f78-9873-cf77ff4aa78b"
        },
        "item": {
          "id": "40c51b36-216f-4f24-bae7-830b0843c142",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "36a1eaf8-4270-49e9-a1d1-84a9a7556e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62ce76f-5740-43bb-b60d-501929e5e26c",
        "cursor": {
          "ref": "c672ece3-7245-4519-a210-798202605686",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a6d40512-54d0-406b-b374-f4f8e2fbd176"
        },
        "item": {
          "id": "c62ce76f-5740-43bb-b60d-501929e5e26c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8eea87f2-7583-40ab-bed3-8d0292f9656f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9667b13e-312a-4230-baa0-14621e242c2b",
        "cursor": {
          "ref": "3e2c47fe-91ca-46d7-bf0e-e821e8f11709",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "297f5996-2cbd-408a-baa0-d913edc0e2e3"
        },
        "item": {
          "id": "9667b13e-312a-4230-baa0-14621e242c2b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fad21037-a6f6-4a9b-b828-54240dfc6702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36737157-156c-4b37-a317-c8d27e13dbc7",
        "cursor": {
          "ref": "73625ab7-fc8b-4a12-8633-1492ec838228",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c6012fef-4e8b-46a6-a0d8-6c16344de46d"
        },
        "item": {
          "id": "36737157-156c-4b37-a317-c8d27e13dbc7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8b22c51e-26c1-4552-a26c-982b40f416e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33ae3b0-037b-4e59-889a-760ae8eec58d",
        "cursor": {
          "ref": "f294e8ed-2654-43fc-9482-1654e81ba019",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2ee398ee-c3cc-4a61-8ba9-b268396effcd"
        },
        "item": {
          "id": "a33ae3b0-037b-4e59-889a-760ae8eec58d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d78eea95-e1c4-4d8e-97fb-6918b4915954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a31603-6c5f-4da8-9e0e-eef786eed037",
        "cursor": {
          "ref": "d13115ed-7c42-4891-8f63-3691aa8c6af2",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b1b0c061-690a-4257-934f-aa2c5837c92f"
        },
        "item": {
          "id": "e1a31603-6c5f-4da8-9e0e-eef786eed037",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ce55d2a6-1cd6-433e-afab-2a3d777aafb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33a5f35-d4e0-4d97-a913-b328bb2f6c10",
        "cursor": {
          "ref": "e2c5a9e4-795b-447a-9a63-18c75101e595",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ab19697c-4834-4439-9ac0-c605c819efd6"
        },
        "item": {
          "id": "c33a5f35-d4e0-4d97-a913-b328bb2f6c10",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f339a069-822c-4272-bdff-3ba92e476832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd7db34-2950-48a8-ae26-e03ba6982178",
        "cursor": {
          "ref": "096ee4c4-bf41-4496-a053-2c62722c1a46",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d406cb58-8e78-4c0b-91e3-615bc236b399"
        },
        "item": {
          "id": "bdd7db34-2950-48a8-ae26-e03ba6982178",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bc6ea816-46ea-484e-bf89-7bab2e719773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fad504c-63ee-4994-9b13-bc2c9d0b0454",
        "cursor": {
          "ref": "e836f13b-f2f9-4b36-9b13-06b020b0c2db",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9c8e0552-dd8f-44d3-9998-9f05dc1280c8"
        },
        "item": {
          "id": "1fad504c-63ee-4994-9b13-bc2c9d0b0454",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dda9b641-c741-4361-9234-d96e50934479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fa4ce0-bad3-4542-8a2b-71897fa44c4b",
        "cursor": {
          "ref": "6e614226-6745-4c5c-95b3-0478c1966323",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0971f247-5807-471f-a6b8-2eeaf4a3a794"
        },
        "item": {
          "id": "13fa4ce0-bad3-4542-8a2b-71897fa44c4b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6cc2bea3-3072-497a-b669-fe8db29e9287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60559b51-1979-4276-b56f-d183b7d15626",
        "cursor": {
          "ref": "ef717ecd-2d76-44ac-9881-e149454c727d",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "717b2b93-4515-42dc-9bb1-2ceb151dde4f"
        },
        "item": {
          "id": "60559b51-1979-4276-b56f-d183b7d15626",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4b1d5139-b8e7-4258-8114-8c80236ea06e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "59cc5bb4-ab47-4402-9407-1ab28a67b659",
        "cursor": {
          "ref": "c7bd10bf-01ef-497c-b231-cd9d360fe7a6",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "86238f58-8347-4c28-bd36-4a4095ec3f57"
        },
        "item": {
          "id": "59cc5bb4-ab47-4402-9407-1ab28a67b659",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "59dc216b-efea-42e3-91be-88c8928f7e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "e97be91d-6115-47e6-af66-7de16c6582da",
        "cursor": {
          "ref": "8d2b7c5f-d3b0-40bc-b4b4-06aeead2bc54",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3499719a-5701-4f60-bd80-0df780895d90"
        },
        "item": {
          "id": "e97be91d-6115-47e6-af66-7de16c6582da",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2e3e1f1d-ef10-4850-8402-36fc755354c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97be91d-6115-47e6-af66-7de16c6582da",
        "cursor": {
          "ref": "8d2b7c5f-d3b0-40bc-b4b4-06aeead2bc54",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3499719a-5701-4f60-bd80-0df780895d90"
        },
        "item": {
          "id": "e97be91d-6115-47e6-af66-7de16c6582da",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2e3e1f1d-ef10-4850-8402-36fc755354c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7bb560-27eb-4ab5-b12c-e85f7fe88382",
        "cursor": {
          "ref": "8fefb9a1-8d1a-4ac5-bb29-7f0d23dcedaf",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3a2e7056-25ec-40f1-9373-c6459a3fb040"
        },
        "item": {
          "id": "fe7bb560-27eb-4ab5-b12c-e85f7fe88382",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f9cea4d6-6f5e-4cfc-88ef-43e347243026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3be7702-dae9-4315-96e0-eacb94ca2285",
        "cursor": {
          "ref": "62063f18-0de0-4f9c-a0fd-2a2ea7246335",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "244ec713-d756-4e33-8715-e36d0043d279"
        },
        "item": {
          "id": "f3be7702-dae9-4315-96e0-eacb94ca2285",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2b3ee35e-cb51-4514-a6be-1180d34222f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee83b83-8bf2-45db-a875-1c0b750e1390",
        "cursor": {
          "ref": "b8c70d6c-6fd8-4488-840a-6500608f40d8",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "03cc9051-6f48-490e-aa37-daec89891d30"
        },
        "item": {
          "id": "eee83b83-8bf2-45db-a875-1c0b750e1390",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "23b8ec79-6e5a-40da-b787-4c0e27a70aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac13014-2d66-4f85-b41c-3ee71de4f0b3",
        "cursor": {
          "ref": "cc1f853b-9340-47be-9f5b-b03a76b30df0",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "53b8ebf8-55a4-4746-8716-8ac2dc1e90b9"
        },
        "item": {
          "id": "4ac13014-2d66-4f85-b41c-3ee71de4f0b3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c8e9a9b5-b76d-41a1-803b-6c26c39826ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafe6b66-6ad1-48a0-95f7-6b8cf6a0619c",
        "cursor": {
          "ref": "66357f6a-55cf-4113-8042-5665aa67df1e",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9519a146-b07f-4f6c-afab-8b394b0da6e7"
        },
        "item": {
          "id": "eafe6b66-6ad1-48a0-95f7-6b8cf6a0619c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1b4b415c-4ceb-4361-9893-15915f5e7a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4312e3db-4103-4870-8fcc-8f9c1c704591",
        "cursor": {
          "ref": "eded8462-fb5c-4569-9343-7abd74037035",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "da1a2c24-120d-473f-9723-d99567c8bec4"
        },
        "item": {
          "id": "4312e3db-4103-4870-8fcc-8f9c1c704591",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1643a633-ea9b-487d-8c8e-3256a2c03d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6a8969-ac1b-487a-a485-2453ef69860f",
        "cursor": {
          "ref": "2363be57-8005-40d7-80de-35478b0b32e9",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "06a0832c-c10b-49e5-8f4b-ab78aebf973c"
        },
        "item": {
          "id": "da6a8969-ac1b-487a-a485-2453ef69860f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "74817a7c-a80b-468c-91c8-35172e6c074d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ffaee2-96be-4c29-be62-341c77bb1e4e",
        "cursor": {
          "ref": "fab7f8b0-77f8-4a04-b3b4-4f62da67a1b7",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7edabf89-a781-4db0-a63e-5e260bb35381"
        },
        "item": {
          "id": "42ffaee2-96be-4c29-be62-341c77bb1e4e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b191a465-1450-4dea-9bc7-60410c71e298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fef5a01-9d27-42c6-878a-f650c3700fff",
        "cursor": {
          "ref": "4dbb41b7-4601-4ff8-a893-518516c8e842",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d5ca4ff6-ede6-4eb0-80da-d4cdb66b1926"
        },
        "item": {
          "id": "7fef5a01-9d27-42c6-878a-f650c3700fff",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "998e037d-7777-4d07-b5ea-1cea01b6ab04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e8f630-6fd0-4b18-86bf-b199dcc6801b",
        "cursor": {
          "ref": "a52e96ee-10ba-4f74-8019-041738e64a9f",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cde0298c-ada5-4991-9a57-27094aa0f805"
        },
        "item": {
          "id": "76e8f630-6fd0-4b18-86bf-b199dcc6801b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0e166036-684c-473d-a1e2-eae451833144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65511ee5-c463-4543-b0dd-6e682700d82e",
        "cursor": {
          "ref": "24f31056-f89e-46ce-b714-bac731e86c31",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2973e23e-3503-4506-84ab-92046aac205a"
        },
        "item": {
          "id": "65511ee5-c463-4543-b0dd-6e682700d82e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "460e1ead-37f4-4671-bac6-ee5311dc268b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0c5c45-9973-4548-bdd9-cedd1770e6ec",
        "cursor": {
          "ref": "0d3894dc-b9a3-4bc8-9a05-ae6e1b17d0cf",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a4bafdd3-426a-43ac-b4c0-1f66316176a3"
        },
        "item": {
          "id": "bb0c5c45-9973-4548-bdd9-cedd1770e6ec",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "43fea33a-8439-4d42-b18c-090878ddd9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdf06ae-419c-4ec7-8ed6-258f5c8c2fba",
        "cursor": {
          "ref": "8f7dbc31-0997-44ac-a08d-bbbe21d39bad",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "88a0bff3-f447-4da4-8f12-96afc31d97ad"
        },
        "item": {
          "id": "ecdf06ae-419c-4ec7-8ed6-258f5c8c2fba",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9f98159d-324c-4cab-82d2-acee0fcff772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bf3ab8-22d7-4923-b4e5-67551a02a2cb",
        "cursor": {
          "ref": "d1ea1e17-1cee-4bce-85fe-971c7fdad6e8",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "44e1525b-6a45-40fd-91be-e946fbaa5de7"
        },
        "item": {
          "id": "b1bf3ab8-22d7-4923-b4e5-67551a02a2cb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8b05759d-6204-4342-b4b0-617850e4d6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e483be-a460-4dd0-91e2-3918bf6e15fc",
        "cursor": {
          "ref": "e5bf8c21-1812-48b7-8a5c-ee0508bfd1d8",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c4c4d105-4cdd-4128-92d1-2c56437e54d4"
        },
        "item": {
          "id": "b7e483be-a460-4dd0-91e2-3918bf6e15fc",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "28a0a0cc-b819-40cd-833a-bf3a5c73cbcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7105fd15-400b-41ec-bbed-86072d8feaec",
        "cursor": {
          "ref": "f65d9af4-49d4-4f04-a8c3-1d8d796e3e5e",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9c233db0-c5df-4883-a13c-1425e6e5e482"
        },
        "item": {
          "id": "7105fd15-400b-41ec-bbed-86072d8feaec",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4dcfa5a2-260b-4ed3-a5c6-063211f620cb",
          "status": "OK",
          "code": 200,
          "responseTime": 501,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "059f9970-cfb3-4d2a-9804-c015d02b23fd",
        "cursor": {
          "ref": "35e15fed-9975-41f4-a500-c991e476c394",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "01ac16df-3195-4556-ab33-7175dad8274b"
        },
        "item": {
          "id": "059f9970-cfb3-4d2a-9804-c015d02b23fd",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "749ed9dc-118e-405f-8d38-5b27d87f9eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18057a5e-b6e0-4091-9ae1-185704b3737b",
        "cursor": {
          "ref": "66638aa4-edec-481a-a467-9da136f9dc68",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fa32329b-4a5a-47d9-bf9d-00bd1732029d"
        },
        "item": {
          "id": "18057a5e-b6e0-4091-9ae1-185704b3737b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "423c47e6-8a7b-4bd5-8230-f5d16f7b83ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0872a7-d069-4eea-9585-3f642c76fac3",
        "cursor": {
          "ref": "0792788b-ca5e-43ff-bada-981340a03db3",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1dc42e54-26c3-4e78-ad94-ec78bdb2a570"
        },
        "item": {
          "id": "8a0872a7-d069-4eea-9585-3f642c76fac3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "91a4a78c-9418-466d-9105-f01399bff61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c7ceea-7c73-48b2-b786-c311fecd6e05",
        "cursor": {
          "ref": "6daa9214-2c87-471d-8cbc-0bb5de569122",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8dd6fc2c-a6fe-4ef7-963a-38d73b37c4c0"
        },
        "item": {
          "id": "e7c7ceea-7c73-48b2-b786-c311fecd6e05",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "65b81e18-3545-4b51-a93f-8e852117dfb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6309cbe0-27e7-4521-a58d-ba34b7ea3b42",
        "cursor": {
          "ref": "2f9acfb7-a684-4fb4-9ac4-f40d846d7a06",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1647dca8-8706-4fdf-b69b-ce7dc21874b1"
        },
        "item": {
          "id": "6309cbe0-27e7-4521-a58d-ba34b7ea3b42",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a0e3be15-2e1a-44a3-b756-5aa07aa70423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f158f6d7-8df8-4eba-95a8-60dbbc6bb47f",
        "cursor": {
          "ref": "d4bfbcd5-1385-43dc-af04-8cf5082901d5",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1aff0f2c-6d22-424c-8d1c-bdef73ceede0"
        },
        "item": {
          "id": "f158f6d7-8df8-4eba-95a8-60dbbc6bb47f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "93ee7391-5a80-4fed-a3b0-3ff496320265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb243c09-851e-4964-9e5d-055170b7539d",
        "cursor": {
          "ref": "cbfd33cb-4b24-42d4-bbc5-15ebc3b55d1c",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "11eafacc-fc6e-4ae3-b57a-72d609966a98"
        },
        "item": {
          "id": "eb243c09-851e-4964-9e5d-055170b7539d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "68f5a8bf-9a87-4696-ae3f-a19c8eb81ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "223f176f-c1d4-4df5-8d42-d86767dd0dd6",
        "cursor": {
          "ref": "9f451cb3-dbdc-4c9b-a357-566ab44ec2d7",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "00f654bb-6ac1-41a3-9a2c-474fe9126c96"
        },
        "item": {
          "id": "223f176f-c1d4-4df5-8d42-d86767dd0dd6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "934e5f10-9ea5-4fc0-b0bb-8dcbcb77b35c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9b786d-9133-44ca-b6f7-7bd6c64c4e27",
        "cursor": {
          "ref": "57878a38-a236-4194-8c9c-3117c563efc3",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "62bda657-cbc8-45aa-b6c1-3b0cba23164a"
        },
        "item": {
          "id": "fb9b786d-9133-44ca-b6f7-7bd6c64c4e27",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3012f040-0647-43c2-8705-c71afc10dc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b87f1aa-d72f-4cb9-bb19-8f38fa0d4866",
        "cursor": {
          "ref": "8e72ab76-bff5-40d8-be32-5f17d4d81b0d",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "231894d2-1320-4e11-a08c-7ea80acff02e"
        },
        "item": {
          "id": "0b87f1aa-d72f-4cb9-bb19-8f38fa0d4866",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c14a1afc-8d71-451c-8459-be563ac6bdad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29525607-2029-4a94-9a95-870078834acc",
        "cursor": {
          "ref": "63ab1c19-88ca-4d4c-99f6-3abefad2aa05",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7a5f0739-f1cc-47e9-ac94-3c610607df58"
        },
        "item": {
          "id": "29525607-2029-4a94-9a95-870078834acc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e5059be3-7d2a-4c70-b13a-ec667f252e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3b7bff-30a8-48dc-84e5-aec7577911a1",
        "cursor": {
          "ref": "fc81b608-e60f-495e-95f1-3c1eef566593",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3d9f5c34-d51c-4a0c-88e6-8e88b83780f3"
        },
        "item": {
          "id": "cd3b7bff-30a8-48dc-84e5-aec7577911a1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b3afd5df-8493-420d-ba5b-effc6cc1f48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60442543-1a21-4adf-b74e-cf3b2ca06d64",
        "cursor": {
          "ref": "c931e611-2e4e-487a-bead-b13e980814ba",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8f6766d0-3a72-466a-a50d-8b757faaa2a3"
        },
        "item": {
          "id": "60442543-1a21-4adf-b74e-cf3b2ca06d64",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9512e0f7-6162-46d0-8d7d-b811a2d1ce23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1828fd-115a-4f1b-9313-a1730b9f8f8a",
        "cursor": {
          "ref": "5fef5e4a-90ef-40c4-9785-7de14dd351f6",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d0f1116e-5947-43a0-ae80-0571942f8882"
        },
        "item": {
          "id": "0b1828fd-115a-4f1b-9313-a1730b9f8f8a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e2fa901d-04f0-4578-ba4b-cd27a5bc7bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5774adaf-c4b9-459d-98ee-627f99307435",
        "cursor": {
          "ref": "5fde1bc4-402d-401b-8005-34b1900751f2",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b917dc00-93d3-4617-965a-a27ce2d86a36"
        },
        "item": {
          "id": "5774adaf-c4b9-459d-98ee-627f99307435",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "08275483-764d-435b-b8ea-116dfe778680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3295583-bf0a-4960-8a83-21b3942fbaae",
        "cursor": {
          "ref": "280b498b-92d8-458a-acbd-74158a7aae07",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a64ce8d1-3dc6-4ef6-8698-2a8c16bff358"
        },
        "item": {
          "id": "e3295583-bf0a-4960-8a83-21b3942fbaae",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0f7ae9ee-6b15-4e08-bfa1-acb15272ec2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4286cfb-aeb1-4a93-8dc7-2e8612b1e250",
        "cursor": {
          "ref": "998b3fb2-2426-4b98-b9e4-fc556166e10b",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e11d0bfd-99d2-4163-affb-fbd908e6f7eb"
        },
        "item": {
          "id": "a4286cfb-aeb1-4a93-8dc7-2e8612b1e250",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "721ad626-f6d1-4916-ac01-e8081895d13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb36a61-5f59-493c-9295-736df7bcb65b",
        "cursor": {
          "ref": "ff901d5d-2232-4ae3-bfb5-66f2eab3571c",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cbee8bc5-54df-4841-a760-df92bdd9eb5e"
        },
        "item": {
          "id": "afb36a61-5f59-493c-9295-736df7bcb65b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b74ad07a-e458-4f34-8816-8d97ce8bd8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d23a475-17c2-44a7-af65-b1e061236c56",
        "cursor": {
          "ref": "e7fa1c1e-c2be-4ac4-a8b2-57ca4aa7597d",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "409f59e2-67fb-4a89-afd8-7f827ee52ab9"
        },
        "item": {
          "id": "4d23a475-17c2-44a7-af65-b1e061236c56",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ca80a3c0-029f-41a2-a862-640fda56d4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ec1962-8945-4794-855f-a7bed6be3473",
        "cursor": {
          "ref": "09f10c85-1b04-48ed-884a-71c084c6ac72",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2cfe3a96-0d8a-463e-920d-4f466913df14"
        },
        "item": {
          "id": "28ec1962-8945-4794-855f-a7bed6be3473",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3a21bd66-3dc4-48ea-b2f7-d50237e7b926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ff6260-dcba-404a-b0ee-d82724097242",
        "cursor": {
          "ref": "bc229294-e8aa-45bd-8d80-5b3557a54a1e",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "08cb9927-d419-4270-8937-81e2921e70f3"
        },
        "item": {
          "id": "85ff6260-dcba-404a-b0ee-d82724097242",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "300f93d9-171d-4815-bfae-c650e658a992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc7f299-3810-4a97-b32d-04370acf5cd5",
        "cursor": {
          "ref": "fb5e6e3a-03f3-4908-8f72-f428e87a0af3",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9592cfc8-69f6-4226-bc9e-556d851954de"
        },
        "item": {
          "id": "7fc7f299-3810-4a97-b32d-04370acf5cd5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "06850f62-eb21-44f7-9473-3e7e75f11a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042f7ae0-2a78-40a7-aaf0-d71a6189cdb1",
        "cursor": {
          "ref": "6cd3e2b6-cfdf-4d08-9080-242389b7eab1",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b2e9915a-011b-4195-94d8-4c66688e3ff4"
        },
        "item": {
          "id": "042f7ae0-2a78-40a7-aaf0-d71a6189cdb1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "53d345e8-576c-4c92-b9af-795944deab9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82486a0-1eb9-43e0-8bdd-78953f3bf144",
        "cursor": {
          "ref": "d7f138e9-cf6c-40a1-a133-3249569de71c",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "15105015-03dc-43d2-95fd-eacc8f813cf1"
        },
        "item": {
          "id": "d82486a0-1eb9-43e0-8bdd-78953f3bf144",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e34b7b86-6c0d-49e9-a2e9-4b6a383889e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4c901d-7eec-476d-af4f-8ae539c6cc0e",
        "cursor": {
          "ref": "ffda0557-35c3-4dbd-baae-b6f05b25bbc2",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b392a60b-dc0d-4c83-af0c-866912254766"
        },
        "item": {
          "id": "6f4c901d-7eec-476d-af4f-8ae539c6cc0e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2743fda3-39a5-4075-ad5f-a189950e3203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7878aaf-0f88-42bd-8176-4b84ee1b9868",
        "cursor": {
          "ref": "f4d700e4-e155-4954-bfe2-c3e4257d95b8",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "47f06d3e-61e5-44c1-8837-6bfa6f983857"
        },
        "item": {
          "id": "d7878aaf-0f88-42bd-8176-4b84ee1b9868",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1eb7b063-6db9-437a-b5b4-1264397b1a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1387d27b-ac97-4857-a969-75a7b9f611a2",
        "cursor": {
          "ref": "e18ac2eb-18b1-47fb-b229-0597f92ecd4c",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a1d139c8-9916-4af0-9a30-83f72181c5fd"
        },
        "item": {
          "id": "1387d27b-ac97-4857-a969-75a7b9f611a2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b3eb5ae1-422a-414a-849b-5bda1705a7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705e919e-7ab2-499a-82db-265d9112d867",
        "cursor": {
          "ref": "e7035f5d-0671-461a-9f94-8e33633f136c",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "039887bb-4ca0-460f-bcc8-d7649fffdca2"
        },
        "item": {
          "id": "705e919e-7ab2-499a-82db-265d9112d867",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0933a647-37f8-494e-bcf7-ef64309d778a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abed923-7887-41fa-99af-a1fa0c4a70f7",
        "cursor": {
          "ref": "35101fc2-ecab-4155-ab84-611279ddaf9e",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8f2d466c-1e56-4c44-b6f3-3739f4fc2f87"
        },
        "item": {
          "id": "8abed923-7887-41fa-99af-a1fa0c4a70f7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "24622733-9894-41d9-b3be-436e072441f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afc5aac-1e15-4763-88d2-30c01eeb5106",
        "cursor": {
          "ref": "4ee501d5-ca64-44ac-9b93-aa5642257dd5",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "00920b68-c769-4f6e-9a0c-d4662be65239"
        },
        "item": {
          "id": "2afc5aac-1e15-4763-88d2-30c01eeb5106",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "651a0220-8ff4-441e-9075-c50f7907dd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d169179d-93e5-46e7-b527-ec36b1cb16e9",
        "cursor": {
          "ref": "32c4401e-41d9-4e4f-8506-1460aa620238",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3fd5e85b-3b45-41ee-8047-6818a0c346b1"
        },
        "item": {
          "id": "d169179d-93e5-46e7-b527-ec36b1cb16e9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "808e7589-b4fd-48d3-8f82-400f2368f556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d337c246-407e-462e-81cf-56f423ac851b",
        "cursor": {
          "ref": "fa3b9d64-ca6f-4632-9b11-0eee3fafe16d",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e2930627-0dce-463c-b072-254c591a253c"
        },
        "item": {
          "id": "d337c246-407e-462e-81cf-56f423ac851b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ed80730b-7e44-4ab7-8209-f5823976c3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058045f4-499b-4c3a-9068-ec22ca56f0dd",
        "cursor": {
          "ref": "de83a249-d11a-47bf-bb8f-0ae433828fbc",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8c911a81-2bf7-4474-8483-49e4d87a19f5"
        },
        "item": {
          "id": "058045f4-499b-4c3a-9068-ec22ca56f0dd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ab8383af-f292-4600-991a-4c706b7d9953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a775b36e-0847-4a16-9bf2-1ab3ec0ffa40",
        "cursor": {
          "ref": "4660658e-690e-41e9-9d53-674681a870ce",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f3d6cdd8-edde-4236-badb-644ff9712f71"
        },
        "item": {
          "id": "a775b36e-0847-4a16-9bf2-1ab3ec0ffa40",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9f075094-88f2-4cdb-a753-4a43cedb1b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33cf190-a4ad-4558-bb47-2bbde2ae8904",
        "cursor": {
          "ref": "991ffe65-0341-47ac-a64f-9ba63ba4118a",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "39dfc890-4f95-4c75-a232-bb7cc959bfdc"
        },
        "item": {
          "id": "d33cf190-a4ad-4558-bb47-2bbde2ae8904",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7a67ae70-7fdb-4bbd-8805-0bdcdcfbacc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6aace66-cf0c-4656-a272-b71f9591fdd2",
        "cursor": {
          "ref": "ebadd832-3bb0-459c-9a0d-c25a9d332f2b",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ec58090d-ce53-4e95-968d-c4e773dfdba0"
        },
        "item": {
          "id": "b6aace66-cf0c-4656-a272-b71f9591fdd2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "07468211-43c3-4daf-9a2c-de30b9e90349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46eba63-430e-407f-b5ad-81d51081ca12",
        "cursor": {
          "ref": "724ec1d5-8c47-4ba5-99f2-0492a1133610",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2ee041ab-2714-4d21-9d86-433d0004bd85"
        },
        "item": {
          "id": "e46eba63-430e-407f-b5ad-81d51081ca12",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "536402eb-0798-4eb1-a89a-e086cdc1a8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd168ec-41a5-48de-835a-b32677593bcb",
        "cursor": {
          "ref": "dd1f9b00-7891-43c0-a3da-b89b0592df28",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e657d064-9a1d-4240-838d-71958c91ec84"
        },
        "item": {
          "id": "9dd168ec-41a5-48de-835a-b32677593bcb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6206a3e2-8ffc-4803-aea9-4e1927c97929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bbb43a-4805-47ee-9d0e-7f01a255c9d7",
        "cursor": {
          "ref": "50d1570f-73a7-424b-b28c-270fdc8af6e6",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "39215d33-467e-41fa-bbbc-aaaf9c976859"
        },
        "item": {
          "id": "e5bbb43a-4805-47ee-9d0e-7f01a255c9d7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1aa5f026-72c9-4474-a015-6b65ee6a2a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fd4fb4-a235-40c1-8e3b-5194042c13d6",
        "cursor": {
          "ref": "171b5bf0-5775-40eb-82fc-f7764bab8bde",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8059f53c-36e4-48a8-8fad-473ebfc541a0"
        },
        "item": {
          "id": "f8fd4fb4-a235-40c1-8e3b-5194042c13d6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a38fa89d-6b01-49b8-9dc2-60ae1100f233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1b19c2-4720-4811-bdd4-4fd732044596",
        "cursor": {
          "ref": "d432ff65-5391-4c08-b4ba-fb98cf94f11b",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "707ad36d-494b-415a-b91c-4c581dece90e"
        },
        "item": {
          "id": "7f1b19c2-4720-4811-bdd4-4fd732044596",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bd058c9f-41b4-45c1-906a-23532509a909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e75a8b-a29b-4da4-a960-71c7cfeed312",
        "cursor": {
          "ref": "7f3d9f46-b72c-4550-9be0-c30a5065c74c",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f060e60e-1c00-465e-b59f-1f2dcf802df7"
        },
        "item": {
          "id": "a7e75a8b-a29b-4da4-a960-71c7cfeed312",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2dc341e4-dd9d-41c7-ac1e-8482f27dd1fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c292e6b-f403-4621-ae0c-c35d069cef14",
        "cursor": {
          "ref": "d2f9cce1-cf1e-42ae-8923-b86da3070f65",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2773ac03-9afa-434f-8c3b-f0971f92d9ae"
        },
        "item": {
          "id": "0c292e6b-f403-4621-ae0c-c35d069cef14",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f19da0ff-e2bd-4df3-a119-d5ab927249e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc552c69-e37b-4d72-9376-22f0f37ce88f",
        "cursor": {
          "ref": "5a0f2d68-743a-432b-a4cd-21914f2c4afe",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "23b3f4ca-8fa8-44e6-a92f-7c99755a9498"
        },
        "item": {
          "id": "cc552c69-e37b-4d72-9376-22f0f37ce88f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "13622d02-f0c3-4102-909e-8c602f786e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b6d821-7ec9-42e4-ac00-dcfea08d293d",
        "cursor": {
          "ref": "db88abcd-634d-45f6-978e-ab5103894093",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d898dd87-b02f-4e09-94bd-72cc4d6c813e"
        },
        "item": {
          "id": "10b6d821-7ec9-42e4-ac00-dcfea08d293d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c4b3057e-0902-4bdb-a7a7-67e6d51c3598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb936cf8-69a9-4380-8da6-6b38e7903ce6",
        "cursor": {
          "ref": "9ca43679-a313-47ed-8724-c15448658e41",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "93ec5a0f-ce31-4217-b826-1c0ed7e58ca2"
        },
        "item": {
          "id": "eb936cf8-69a9-4380-8da6-6b38e7903ce6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "73b299c8-5cd4-4d19-9d8a-325e5f773806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07595598-9585-4dfe-9342-b8472ceaec12",
        "cursor": {
          "ref": "87c6a435-2202-4a60-94e0-4a46cca1d32c",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c627435c-b95e-4f30-a9e3-c876f499a337"
        },
        "item": {
          "id": "07595598-9585-4dfe-9342-b8472ceaec12",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2f6e24b9-5c96-4249-9053-bd94afbcc9e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d6de8f-f51a-4945-ae81-a4f792f18114",
        "cursor": {
          "ref": "be5563fa-1491-455e-9d15-3e202fca1f8c",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8e0ebd9b-1270-4e49-9fd8-0a174f4afa0c"
        },
        "item": {
          "id": "81d6de8f-f51a-4945-ae81-a4f792f18114",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a7015f5a-a3bc-4a94-aad1-2d75807edce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbd2411-186e-4bd6-a38d-4223c6f9cf2d",
        "cursor": {
          "ref": "79f6fdc0-1cd2-4f11-bc58-6bcaf23c513f",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fa7db161-74b9-4bb7-8bdc-73d19f83ecd0"
        },
        "item": {
          "id": "dbbd2411-186e-4bd6-a38d-4223c6f9cf2d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1def200d-554f-48be-ac4e-5be98b8a89e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6306b447-76d3-4431-9beb-f39e34df42f4",
        "cursor": {
          "ref": "bf275b84-0818-4f5d-bbec-ce1d2790939b",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7b837987-f50c-4392-bf15-ac6f2b076fd2"
        },
        "item": {
          "id": "6306b447-76d3-4431-9beb-f39e34df42f4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "50d4ce48-61d6-45c2-8401-4b9f99c15534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f022ef86-8a1e-4f89-b010-1d70cf267fba",
        "cursor": {
          "ref": "608feddc-edaf-412d-a7a4-535e70acfd6c",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "677052c2-4178-46ad-a853-6afebe392dce"
        },
        "item": {
          "id": "f022ef86-8a1e-4f89-b010-1d70cf267fba",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7d8051e9-4977-49ad-8aa5-fbf0f40fcdf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9716fc75-f9be-4e82-8f1a-2b4cbbd15e30",
        "cursor": {
          "ref": "303a224b-39a2-4408-a416-ce1e673ebd4b",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a57c3325-a4ae-425b-a034-bc8c13b7e2f8"
        },
        "item": {
          "id": "9716fc75-f9be-4e82-8f1a-2b4cbbd15e30",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5e32fb5f-6d9e-4be1-b071-00935a0594dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af372956-25b3-4368-9760-630edfcb706f",
        "cursor": {
          "ref": "0f0589f1-7ca6-4fad-9667-8eb28f597ad4",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c2667020-71e8-4088-b0d8-16a13a8b789e"
        },
        "item": {
          "id": "af372956-25b3-4368-9760-630edfcb706f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "75981996-e276-4931-a38b-859778977312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd94906-78a6-4888-b402-575c6fd11936",
        "cursor": {
          "ref": "03525206-1c54-47eb-948f-4434cc0151dc",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8a3b1df7-92fb-4664-886d-6ec5ec0a7de4"
        },
        "item": {
          "id": "acd94906-78a6-4888-b402-575c6fd11936",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2f86e895-019d-4a51-98b7-0076850ae920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4d026e-db39-45fd-9986-d759cca01e07",
        "cursor": {
          "ref": "fb8ce239-497d-4f09-b16e-9df45596d316",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "995b5648-af1d-463c-b30e-2b21200b151d"
        },
        "item": {
          "id": "cf4d026e-db39-45fd-9986-d759cca01e07",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5e1a8d9c-57b1-408d-8bf4-8bb74130a3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b578f7-12c4-4c53-baca-bb6f1bdb9c8e",
        "cursor": {
          "ref": "a387ec07-da78-4a83-a370-de7baec6127c",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "cb074d5c-78df-4982-9f29-1369ba0a4b3f"
        },
        "item": {
          "id": "e4b578f7-12c4-4c53-baca-bb6f1bdb9c8e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b583fd36-971e-4dd4-b151-9f68b91cb9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd206e2b-2568-42ae-ad22-6db08f6b2481",
        "cursor": {
          "ref": "d6ab0256-0505-4d18-bf2d-333be96a5001",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f270c8ee-18b5-467a-adc2-de0b5709f479"
        },
        "item": {
          "id": "cd206e2b-2568-42ae-ad22-6db08f6b2481",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d8dc84dc-9123-4cbd-9a76-eadd63a618b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deda522e-338f-4a16-93d3-2c60b72f6c3e",
        "cursor": {
          "ref": "3dc1a712-6462-434f-b6f2-bcefa5c46e03",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4ddfbb7b-1b94-4121-9160-2cb70880a22c"
        },
        "item": {
          "id": "deda522e-338f-4a16-93d3-2c60b72f6c3e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "63b8cd87-8480-43c2-860e-a9b97e2c5962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88eb6ca7-af36-4b5a-93e5-cfbb93996334",
        "cursor": {
          "ref": "35705073-222e-4524-8c42-f4ee2976813c",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ba49ff3e-4a30-4d01-8fdf-e25a7a4c79d3"
        },
        "item": {
          "id": "88eb6ca7-af36-4b5a-93e5-cfbb93996334",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d3b7401c-16d7-4bec-91c7-81a1795e0a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c480eea4-90a4-4263-9c7f-8e9f4401e6b5",
        "cursor": {
          "ref": "2ff6d812-00b9-44cb-a67b-8d8e039c23d4",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7e141973-4e0d-4e76-af77-1452f1289c23"
        },
        "item": {
          "id": "c480eea4-90a4-4263-9c7f-8e9f4401e6b5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "54da8a46-dc96-4aa9-ac29-727d761515af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e72b8b-31e8-4aad-85b1-891663b898d7",
        "cursor": {
          "ref": "b24f8f83-e5a6-4f32-b797-0ba1b4f2bd30",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "804ae9fc-e711-4cfa-bd88-d56baac5a38e"
        },
        "item": {
          "id": "85e72b8b-31e8-4aad-85b1-891663b898d7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "184da787-d315-4e73-a8f5-3c0ee8a0394d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ab8835-c9ce-4405-8086-3a5dbb6968d8",
        "cursor": {
          "ref": "1a84aa73-2008-4635-bcbb-dd451d78aa4f",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "127b2f16-65a8-4d80-ac52-a4c7bda72d6e"
        },
        "item": {
          "id": "11ab8835-c9ce-4405-8086-3a5dbb6968d8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c81cad38-e30c-4760-abe0-a2fd908a563c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da57d5f-49dd-45db-ae22-709f17a13171",
        "cursor": {
          "ref": "3fe898f8-4c7b-4463-b631-5488e4c2ca14",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "850ca5f2-7d07-4753-afbe-1b591a4d4cb8"
        },
        "item": {
          "id": "7da57d5f-49dd-45db-ae22-709f17a13171",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "eb419f1a-8f08-4a5d-a2f5-213d6764fb42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d289e7a5-f62f-4eb5-987b-6018d49389a6",
        "cursor": {
          "ref": "fa1c058e-99a1-4ffb-98d8-d3048917c8fd",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8146b50b-b254-4279-9884-be5d4570a4c1"
        },
        "item": {
          "id": "d289e7a5-f62f-4eb5-987b-6018d49389a6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "27972044-feb5-486a-8ad4-b92d4c1d6d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3f68bf-2b7c-4b8b-96d9-98f7198f9005",
        "cursor": {
          "ref": "bfe3a2ef-9761-432d-8eea-b7bd3fa69e9b",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5dbcbc95-6272-4490-979a-87eb01602848"
        },
        "item": {
          "id": "9d3f68bf-2b7c-4b8b-96d9-98f7198f9005",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4af671e2-a595-4368-8309-8d0d56098f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82e8ae7-fe15-4663-9c28-b072a183c5b9",
        "cursor": {
          "ref": "3bce6f7c-2190-4a70-83f2-ab577e8b1636",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3dc5bf02-791b-4b5b-a70c-bddca2c20bad"
        },
        "item": {
          "id": "e82e8ae7-fe15-4663-9c28-b072a183c5b9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0979d12e-1c79-49ac-b909-d0450e085df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbad550-a3bc-48a8-bc85-108df8b49b55",
        "cursor": {
          "ref": "4d65a5e5-f56d-449a-b562-fea88f6e5eba",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ddbf11c4-1a2e-47ed-b862-85bd0ebda476"
        },
        "item": {
          "id": "fdbad550-a3bc-48a8-bc85-108df8b49b55",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1f7d385c-94a7-4d80-83ed-b4524e160458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a0f260-6a9d-4655-b6c2-06ffb3d82a97",
        "cursor": {
          "ref": "086e559f-237b-4a69-b215-155c89c4239c",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ab05b0c5-6e53-4fcc-a288-45e771f82954"
        },
        "item": {
          "id": "e3a0f260-6a9d-4655-b6c2-06ffb3d82a97",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "04ceb6a5-72c0-4bb8-9424-9734fc1fdcae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f7b9d5-0146-45d2-af47-fe11631cf8a3",
        "cursor": {
          "ref": "c215cb5d-f651-4df8-87fb-40b7a5e34372",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "db96902b-ea92-4395-b750-668fa1fff975"
        },
        "item": {
          "id": "41f7b9d5-0146-45d2-af47-fe11631cf8a3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5e08b506-f353-4c51-952c-89fe38101f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164ed75d-4dec-4edf-8e10-73e08f822cce",
        "cursor": {
          "ref": "0ee05eb1-ea31-49b4-ba8d-b27c11ae1abe",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "912c088b-9fcd-495d-8442-83bcb233a82b"
        },
        "item": {
          "id": "164ed75d-4dec-4edf-8e10-73e08f822cce",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4ea6eb64-58e4-4425-a6ad-b0db6ec4db0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84256eed-e476-45ad-8409-86fa744f1e26",
        "cursor": {
          "ref": "b8dbedb8-4aeb-4a49-99b7-5e7522a4514e",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bc7ea4ee-83b5-47ea-b688-2b43c62d45f5"
        },
        "item": {
          "id": "84256eed-e476-45ad-8409-86fa744f1e26",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3b90603f-7467-46c4-9c00-962daf8eec07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c347093f-8a48-44ed-9d41-8e074dc77c87",
        "cursor": {
          "ref": "0ebbafd1-1b73-4040-a19f-bea2dfbe7201",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "302c1c97-fd40-46c7-a71a-52d1ac36cbb2"
        },
        "item": {
          "id": "c347093f-8a48-44ed-9d41-8e074dc77c87",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5dd6b025-59fa-4207-bd46-fb0ecc51d6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b9dc45-c6f1-462e-bc45-0614d8652c0a",
        "cursor": {
          "ref": "54c14b95-7579-4089-92e1-e527492a6fd2",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f722b91a-38c4-4c02-a2a5-b270df8a6060"
        },
        "item": {
          "id": "35b9dc45-c6f1-462e-bc45-0614d8652c0a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "035b4b71-299b-4a46-abbc-cd9f59ca0e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96728b8-ecd5-4809-960d-c39ccb4ebd7c",
        "cursor": {
          "ref": "cd69a9e1-945e-44bb-9828-55cb15e715b3",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "44c18d2e-676c-4ddc-8a8f-e15df42f7298"
        },
        "item": {
          "id": "d96728b8-ecd5-4809-960d-c39ccb4ebd7c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ab5e7c7f-aaa7-4dc6-9519-d2231e23b208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf40201-e614-4cdc-9ecc-ab1b4b9ef4f7",
        "cursor": {
          "ref": "6d345d69-b5a6-45eb-9512-3dd404bfdee0",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b5d7e110-a46f-4741-911f-169e9275bd4f"
        },
        "item": {
          "id": "4bf40201-e614-4cdc-9ecc-ab1b4b9ef4f7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cd033693-770c-46fc-9d27-9b27fe6d3e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fd0133-5ef2-4413-8d54-73189ec7c6ca",
        "cursor": {
          "ref": "ab02dfcf-d8a9-426d-9f67-64925321c16e",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fe331682-825e-448e-a372-61508381507d"
        },
        "item": {
          "id": "b3fd0133-5ef2-4413-8d54-73189ec7c6ca",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "979f70aa-4f7e-4261-8f6c-b7f8f40e34c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcdb77a-cbfd-43e3-b7dd-e594b860e106",
        "cursor": {
          "ref": "e0e36acc-1de7-496d-bdf8-59b81cccbd30",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "fe4de5eb-9a54-4cf9-ac29-d7aa851cf539"
        },
        "item": {
          "id": "0fcdb77a-cbfd-43e3-b7dd-e594b860e106",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "707caa9e-9f36-4f8c-b176-ab061a059409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e108fa1-3769-46e9-9555-bed321a643a4",
        "cursor": {
          "ref": "343708c3-5d2b-4c7f-92e2-d74051cd9594",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0e513dca-6ece-4c56-a082-bcf2b4c6fa56"
        },
        "item": {
          "id": "4e108fa1-3769-46e9-9555-bed321a643a4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "be8f3cf5-5552-473c-875d-0887ed3eac4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27115841-5cc9-4250-9531-3417f21c08e0",
        "cursor": {
          "ref": "377d7f1d-3536-423a-afaf-5278670c14b5",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a3cdda10-0cdc-4fd0-affe-2be2e87b31ee"
        },
        "item": {
          "id": "27115841-5cc9-4250-9531-3417f21c08e0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "41268974-0200-4983-be34-32d0234c1239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ece703-b995-4922-b2c1-074758637f4d",
        "cursor": {
          "ref": "05d7f09b-d9de-4a86-b0c1-dd5f1bfbef4f",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "85aab28c-e5b4-49ef-9d3f-cfd4fb5152a4"
        },
        "item": {
          "id": "f7ece703-b995-4922-b2c1-074758637f4d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "67ce976c-8b45-4f3f-ad20-e70561c64cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7829c82c-bab3-4147-bf04-f77f38921eaf",
        "cursor": {
          "ref": "741c8cfc-8ae6-4242-9acd-70eaf3cfa3ef",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b9bcf2ba-957b-4770-9ed3-cb9cde6e2b84"
        },
        "item": {
          "id": "7829c82c-bab3-4147-bf04-f77f38921eaf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ca30e0bb-5462-4986-b7ad-a99013848480",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "310e3e94-bece-4e4e-9f8a-6fb677201ad4",
        "cursor": {
          "ref": "f5b58b4c-b851-41ad-9b1a-a0a018eb7b45",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9af16ebd-4c2e-4f75-b48d-43e28857ef33"
        },
        "item": {
          "id": "310e3e94-bece-4e4e-9f8a-6fb677201ad4",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ac423e31-c69a-4a0e-ae55-c5549458f25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8f870b0b-a60b-463b-9b6d-7ea5013fa0b1",
        "cursor": {
          "ref": "2b97e38d-806d-483e-bec1-9107d876f564",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "076fd1d6-ccd7-438e-85c3-3f2885199e22"
        },
        "item": {
          "id": "8f870b0b-a60b-463b-9b6d-7ea5013fa0b1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "77bb9665-4d7c-43d6-ba3a-75e71d547aa3",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "75be3dbe-0402-41e2-bb63-41b610dcebda",
        "cursor": {
          "ref": "8da942c1-800f-4445-9439-9c4f6c4b51f0",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "455cd325-1c73-4ebd-a8fd-ee07980d4aab"
        },
        "item": {
          "id": "75be3dbe-0402-41e2-bb63-41b610dcebda",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ccc22f5b-7241-458e-acaf-98dedc3e3bee",
          "status": "OK",
          "code": 200,
          "responseTime": 2385,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bfdba55-6947-4f6a-bb9d-6c1e49d3a48f",
        "cursor": {
          "ref": "93c4357b-fd91-41ff-bf0f-931515bed9cc",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "32437da7-2cac-4e44-8917-fb7431a509a4"
        },
        "item": {
          "id": "5bfdba55-6947-4f6a-bb9d-6c1e49d3a48f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c8c5fcf4-8171-46bf-b458-71a4eea64c13",
          "status": "OK",
          "code": 200,
          "responseTime": 2536,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbb042f-8a03-4e76-922a-065bc1458777",
        "cursor": {
          "ref": "7bfafcea-59e7-47b5-ba70-3f4573683a5d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e77fd6e0-caea-4fca-9615-09673c4c091a"
        },
        "item": {
          "id": "abbb042f-8a03-4e76-922a-065bc1458777",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a562496a-4874-4d2c-b233-57e732974e0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "abbb042f-8a03-4e76-922a-065bc1458777",
        "cursor": {
          "ref": "7bfafcea-59e7-47b5-ba70-3f4573683a5d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e77fd6e0-caea-4fca-9615-09673c4c091a"
        },
        "item": {
          "id": "abbb042f-8a03-4e76-922a-065bc1458777",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a562496a-4874-4d2c-b233-57e732974e0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "abbb042f-8a03-4e76-922a-065bc1458777",
        "cursor": {
          "ref": "7bfafcea-59e7-47b5-ba70-3f4573683a5d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e77fd6e0-caea-4fca-9615-09673c4c091a"
        },
        "item": {
          "id": "abbb042f-8a03-4e76-922a-065bc1458777",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a562496a-4874-4d2c-b233-57e732974e0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "732e5d6d-6f6c-4150-92d0-18b9a4340649",
        "cursor": {
          "ref": "75b0d81a-f07b-4a38-9c43-f6585857e6e1",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ca38fb54-ece7-4111-8792-556a53f77319"
        },
        "item": {
          "id": "732e5d6d-6f6c-4150-92d0-18b9a4340649",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8085bb95-0cb2-469a-8546-f92ab1e95959",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "03c152a2-d5e1-49b9-b732-6c80c8bfe06d",
        "cursor": {
          "ref": "5641ee32-39a4-4263-8932-d32204708c83",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "274b1848-e7d0-4d52-a194-fc22532ff3da"
        },
        "item": {
          "id": "03c152a2-d5e1-49b9-b732-6c80c8bfe06d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "78ba5048-8978-43ce-826e-61ed8fd65031",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "03c152a2-d5e1-49b9-b732-6c80c8bfe06d",
        "cursor": {
          "ref": "5641ee32-39a4-4263-8932-d32204708c83",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "274b1848-e7d0-4d52-a194-fc22532ff3da"
        },
        "item": {
          "id": "03c152a2-d5e1-49b9-b732-6c80c8bfe06d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "78ba5048-8978-43ce-826e-61ed8fd65031",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7c01313c-388b-4d7e-8009-e356dbb93800",
        "cursor": {
          "ref": "24cd4486-01d6-401e-b237-3d8dc41d91e3",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fa398488-daff-43e0-8b7a-166afba2fce8"
        },
        "item": {
          "id": "7c01313c-388b-4d7e-8009-e356dbb93800",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cfee5de7-c5dd-4765-922a-22056e17bda0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 265,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1a64b859-a7fd-45cf-a9da-4395c82996b9",
        "cursor": {
          "ref": "efb2b181-c8b4-47d0-b4be-2c4e955ac251",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c2223252-4368-4550-9f08-0de14a08bd27"
        },
        "item": {
          "id": "1a64b859-a7fd-45cf-a9da-4395c82996b9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b7130ee6-1da8-4793-9a2c-1191abc27379",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1a64b859-a7fd-45cf-a9da-4395c82996b9",
        "cursor": {
          "ref": "efb2b181-c8b4-47d0-b4be-2c4e955ac251",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c2223252-4368-4550-9f08-0de14a08bd27"
        },
        "item": {
          "id": "1a64b859-a7fd-45cf-a9da-4395c82996b9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b7130ee6-1da8-4793-9a2c-1191abc27379",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e914d303-50b2-47f7-abc3-dde0a9ea063f",
        "cursor": {
          "ref": "0a14ff28-9ae9-42fb-9d68-7029f1625f40",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5a321bfe-7496-42e8-a1f2-f321b3c11b29"
        },
        "item": {
          "id": "e914d303-50b2-47f7-abc3-dde0a9ea063f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "8fe55e74-2a00-42a9-b01b-4e9c039eafc5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 316,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}