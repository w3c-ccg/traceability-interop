{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d0c046e9-6307-434c-a70c-a922cd3a5c74",
        "name": "Clear Cache",
        "item": [
          {
            "id": "37936531-f2cc-49a6-8986-429ee559b4f3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1fa20a12-4d4c-46b8-b43a-dcfbb17816fe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5d77e388-48d9-4c49-ac2e-2b65cd479a0f"
                }
              }
            ]
          },
          {
            "id": "74ead89a-9551-4956-a6f4-27b369dc2e64",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "61c1db5a-f9ab-4f50-8115-75721bfcfe4a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ef5a6b90-a3ef-4ae9-9ee7-f5ba37a2c107"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "20a9e1cf-cca6-4c53-aa56-fdcf18b7975c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3c561bef-e444-42e7-96c6-f2de60473849",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5ba03a46-768f-4e82-8176-c7f5c02fbfcf",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f9fdaf9-225a-4a57-bf2d-718b2815e4a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af67758a-4dc4-46b9-b47d-a7b1fb337039"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "63d66432-dc3d-4e6f-bf8a-fb881fc27304",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2a286f0-f718-4403-9487-c66559a3790e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6db688da-39cd-4f23-9265-5f70d6a9b446",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56c21a5d-1079-4013-83e6-cf2070959282"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb8c29db-e770-44c7-b581-72737bcf96c9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a73fc5cf-599f-464e-a6f4-c6eeaac19d1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1a6fb61-2a41-4cf0-a65e-32c9c7240d2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d035b96c-5540-4a73-b1dd-c24f51f07072"
            }
          }
        ]
      },
      {
        "id": "0752ad13-afc7-411b-ad7c-797fed852eb2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "de4a27a2-3d6b-4e1a-83f2-5822dea6251b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4e31ee5-470e-4657-91e1-42f3f9cb037e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "76dfd526-32b3-4296-90e8-ad838cc9f61d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3400caa8-e421-4111-b4ef-7e27a9d429c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14ef5915-44e7-49ca-ac41-2fe453d8b6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfc5847-333f-4732-a865-3a103fcf054c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d2d94d-9b38-41cf-a7f4-c237c71eade9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7185630-2a77-4959-9676-b192af6e3376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d09649c-36f2-447a-b90b-5303f8e199c4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db92b8a0-cb87-4d60-88ee-bdb170f1e4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7757f505-a484-4eac-baf9-f87864240ac4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "63920559-1a81-4d27-82dc-10d2aa7ca0d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9e76bd9-33df-42e2-929d-1f656b385ea6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0c8093-197c-4853-a889-90cfb3d9b668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e7a2329-8ac4-4477-862b-960b33a64abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608b9f23-cb14-4e00-bcf6-a4c962e291e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9cb4710-5ecb-4eec-b19e-3237df125d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83518306-e3a1-4a49-994c-70017944136f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7f203d-f905-4156-bbe7-9d40ee74f4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "520838bb-2465-4f4e-97b6-a3a94200d6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf432af-0d00-474e-8f7b-2e1952daca96",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f0c94ec7-5bae-43bc-a94d-b19c95790877"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cd32876e-877a-4055-82ca-2a4251000aa1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eaf6bdf9-8eb0-4b3f-8b51-e16b9e5e7da2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2614f3d5-c34e-49d8-896f-eaec54c5e686",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "72c7e533-a718-4e40-b8a6-af9980bbad8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02f40b24-4900-4ce2-bd5e-7c67908e578e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e4fecbf7-855c-43a3-8377-d1f0114f406f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d2a0039-75a6-4e94-8442-ff8d4e154def",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ceb9a5a-0139-4dd6-9c91-d8772cba26ce"
            }
          }
        ]
      },
      {
        "id": "512a1e69-de8e-4979-ac24-f950f4d893f0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2a904835-2d50-452e-984a-803d31a88f66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d7e317d-9a6a-4af1-9b3c-b3a24c2ce490",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dae5b8df-4870-4d86-bec5-aec812e07cc7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49ccd3a-db69-46d3-8b0a-4945e9d597f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b3cac5-e296-4c0c-a09b-03769780311c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbfffcd-d359-4002-af72-da1e5c5f5a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9319c1ab-1e59-4835-9195-db5e6afff41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d9ef3a-9316-4e22-8c43-d05a64a5c788",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6408fc-09f9-4e8d-8747-17487330cd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a03a0f-7600-4fbe-b198-bab5c53c60e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fdee68-b4ed-435b-8762-b5a1fde1b918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e53a978-2d6a-4487-8aa0-1c773bbf4632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d143791e-1f4d-49dd-98c1-b77c5cbc49f1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc3df43-e70e-440e-b01d-1f7361c5b2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e07edf-536e-4625-b215-db3708a2780e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59330822-6daf-4b04-8703-ac70c350a657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de901a5e-1af8-47b9-a097-c12395ab897c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f666cc-0ee4-45b8-a596-9de140f64885",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f321d91f-250d-4673-8bb3-18b4c35550d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c1f5a3-fd10-497e-b6f0-b793c3a1ded3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8290ac57-24c1-4e42-89ac-23de0b13be80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e46b242-c59d-4859-8133-4d622559534b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc1b9bd-7f2e-4531-834f-1c074e693a5b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d565ee-cc9c-415a-8ef6-54dff5db02ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05900032-1f12-43c6-bdc5-df2fbab15617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d3758a-1e6e-4273-9d59-f747fb4ffde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff427ae5-fbe4-409f-9300-45f40ded14a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9a809d-3fdf-4276-8067-d6163460a11a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ab84bc-5580-4171-9236-8030e67aa6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691ce521-737b-498b-9209-a40ff956538e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9040179-f9da-4954-80e4-8bfe1a2ae636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2ca8005-1c18-4d85-a284-8962b70d6348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b814843b-4867-4d15-9122-b0c198fd2675",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb773337-5995-4eb5-8ab1-60e139d4401e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e5f631-aa06-4c35-8dd8-ec45363920a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0580877b-2a78-4176-9a75-fc932498ccfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08194504-057b-45d6-af98-73554f1ea508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40bd590-d4ff-4678-becb-bc2682b9ba96",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1ce124-574f-4391-ac98-1bb6bb5f7a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e31544b-55e0-4724-aa6a-5a8dba696da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d16e27c-4501-4b72-89d1-e4ca34c4cd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63133cf4-de53-4aed-acdb-983acb2213c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc6020f-7894-47a2-8dd3-a03429c23b6f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "effbb7e0-cd94-4fd7-9d6f-570feb0a435a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e862e9-41f5-413b-81e8-6407b34cea61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c27c756-2959-491b-a8e9-395cdce35412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dea142c-aab2-4927-bdc2-6dc2576537aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a6f1a2-f9b2-4d3a-b957-bfcd3daec825",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9cf0c3d-f3c0-46e8-adae-3ff076ca92b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10cb0805-7e1b-49d4-99e8-e94acb5eaaab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4e1465-8d5c-49f6-834f-13e569e792f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d01474b6-ac8a-443a-a132-ddae13bc1746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94754465-7cb2-4eb5-b0f5-69a66773912b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf5692c-e96a-4554-b2a7-abf115334792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3462b2cc-e692-458b-8c0a-5fe996b59641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3434bd34-3b5b-4bda-9222-252727736ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e76c7aa-1fb1-4efe-93fa-4ca8b325d8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb47018-d488-407f-a367-f7fb19e24935",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febf1a08-6f23-41a6-8cdb-d4efc25aeefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edc4006-4ec9-4881-a017-82235ad7fe31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a6124e-41be-43d3-a443-67fe3e4181a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee54f206-eeaa-4e77-93c5-dd79a88f926f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c91d171-7a3a-4acc-a8ea-892d7abeffc0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100479c5-ad44-4b7a-8122-a33c70ee55ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431564f7-4c10-499e-b24e-3f88daf11a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f8c069-b5ee-4910-b36f-50e00413044f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9472853d-c00d-4174-9b9f-ff6cc5c30e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48f184b-22b9-4ba5-9751-818cd6fff179",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9aafbb-110e-428b-aec3-09ae1cfee9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8502f8-38aa-41da-b288-9e5bd3269aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d96260-a360-42df-9a4e-02c0e2bb1bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0f76109-0045-444d-8dc3-45d7dbac47da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5cd7fa-6708-4d0c-8638-b62a3c6737b0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937340ff-3b88-4ae9-9302-e90b1e22d932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc4ba21-da2d-460f-803c-b06539901111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48cd857-fab3-4134-b840-394a9adcbbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5aa91bf2-1276-4a4b-8962-611e9a8c0b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c76765-cf9a-4167-9184-331f72ad19c3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2850bc8a-8214-4422-883c-6e0f23bdc45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7abe230f-65d1-4b65-800a-8cd5fc02972f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bee223-527f-4b0e-a431-8048520942e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98c363df-cd11-4904-8f24-46c0d72f4530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b806d542-283a-4f4b-8988-2907da288794",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70e1f69-50d5-402b-a60e-bdc8dbef396a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ab7d4f-fbac-44c6-8681-22391a042280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89f997f-ca16-4bad-a483-994dce4b22d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3a8196f-9967-4fb6-bda9-2eb7f0de43f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8cafa4-6189-479b-885b-9d78a8fa7c8e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1350da7f-2bc5-4bf7-950e-b8438f8a1f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cb2bed7-c13d-4aaa-b508-807018eaff7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9fd851-1a85-4193-82f0-40e5cbc200a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c02f8212-f190-4a6f-92a8-25de5c1afa81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15e1449-ed9d-4675-931a-ab38becee7bf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2d5cfd-faed-43ae-8560-9ecb8525bf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79399444-eac7-4915-95d9-4ed5da09c091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f364a431-6cab-4555-93f0-8a701dd9524d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b07777e-c38a-4ac3-9168-098f964d6771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc7b306-b6f0-4779-84d4-3b44b90baf91",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17664b0d-e6e4-423f-bd89-6df238c58c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482eb964-c700-4d71-b65c-1032e3e59392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea69706-2cf8-4220-9a11-2c5d683ef95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b0eb62c-567e-483b-a3af-132120d8ebad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31a85fe-7805-459e-968f-ad452daf8d7d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968674b9-b6b4-49e8-bb9b-4a049056c69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b4dc7c-aa08-4762-82ca-02bd69152158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af69271-e1c7-4e65-ae9f-82c9de12bb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2716858c-7dba-45aa-8bb4-47a5a41a4818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8478e195-56b7-42b5-9ec6-52be090d36cb",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2ab8fb-439b-4fbb-8fa2-68204795f088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9caf75-b67d-4976-86d1-be151b5a5897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3663c8c-20a2-4fae-927a-0ed5fb0d861c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32988b44-180a-4db2-b9b2-6cb9885beb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1616baa9-49b7-4657-85cf-76a520501dea",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b95c13-c794-4f11-8b03-bbfc89d764f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8903ac-0c7e-44a7-9091-662c43af531d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abb1082-56ff-46b5-b46c-b903fb9ed31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80b8f8f7-a310-4879-876d-65f5beafacfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0450f849-3e78-425a-a8ff-72560dc53234",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca7cff7-1f2d-4bcf-9f03-7e792e531e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498c9003-09d6-4c3d-9d81-4aa5a60fe2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1099b7f5-f98e-4e4e-87a6-db922d3a9f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ca400f-4a77-4248-8e2d-daae74e7dcc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1f3d18-dced-4246-95bf-e4ef0f7467e4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b93d33-6afa-4275-86a1-f69263913d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31caceac-4a2a-4010-b49b-fc70ddd2ed6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74898e6f-07d7-4c8a-a5c1-9c18bd99df70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c22d601-c5dc-4555-91df-0476942f08aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f57dbe4-9654-47b2-b573-4c8896353ac8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b903c48a-620c-425f-829b-3589291f0e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e234831-3f6f-489e-852d-6aced366f403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc4b691-a15d-4fc8-b83d-19a147b17204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2119d3aa-7f13-4053-868d-5e55c22a5308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e73614d-4eab-4f51-9fe9-008f7dac7d41",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6615865-fc85-4b94-bd95-555f703c5f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "795649c7-6770-416c-b30e-1d9e7aaa0d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd840c40-640c-4a8d-a39c-eb61c0e4204a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "978371fc-9e8e-463e-a24f-c96a7e559bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9288b281-00a0-4e7c-b4dc-824bdc22073d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315aa3ad-eb10-40b6-a83e-bce44f3532e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfcca976-0cbe-4e19-879e-69287b2f3cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756c12a6-2c6a-49da-8abe-39e32412703a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6df0b8d1-cde7-4afe-b8eb-0d21ba001f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67d5b51-2cfe-405a-956c-3ac14a8ae47c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b58d45-e49f-4f0b-b04b-20cdf4993944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e00e1cd-7d7b-4285-87b3-de79ab5c2a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a02681-9787-48ac-a864-344d2ea04379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63aeaea9-810d-463d-a7cf-ab9d696d59c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041c8c11-5ccd-4c3f-9e5b-e21863792f5b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fe4ec8-1894-4b9f-80b8-6aeaa954a70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b17c89e-11ba-4f8c-afd6-9dcffeea87ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66cf4967-0a47-4923-ae0f-2a3b2509ac5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3e19f1-8230-4f47-a2e5-46c851ef003d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710c2496-73cb-4c5d-bc05-be0dfffcee10",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f30af3-2734-42aa-942a-35053298bad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14befa51-b46f-45f5-b385-9e158566c2dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1f7719-f554-4fb6-bb22-515da966ac19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9fd0367-48af-4231-bdf9-dad75a6f819b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0521faae-2ad3-403f-88a7-9074a95c012a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf42adb-61cb-4525-bda5-7dfae92036b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f68f48-1aa5-4485-94bb-11a01d150f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7896a0-1d77-4355-9e4d-5955aedeeffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b484ba-2715-40fa-8eff-add0a93fdd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22c7d09-0e8c-41a0-aad0-a23ec942a410",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b808f48-129e-4232-8f7e-e6c57eb434da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f5c682-4cc5-49c7-a610-b13dfd3afa54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4710785a-f333-43ef-a978-ef94f6f512a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f18f93-501f-41e4-971d-ea508bb05eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b7926c-d94b-48c9-8356-c14f40db91f3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1b3bde-3f99-411d-a4cc-1d2481cf9d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dfc0dad-352f-4ae2-991a-daf1072ee2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f433e19-22fb-46b9-8e28-a1c25ec7d34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7774b4c-6749-4971-b981-d26f5b28b235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bbc044-df25-4ba6-a1ac-a8d98d1fc00a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d655baa-8d70-491d-bad3-a254714c6a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d669729-9b70-4820-a6ac-db229dcb3ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d429428-59d7-431b-9198-78e4b68a8545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "dd83f877-3376-4884-949b-f22334b80d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a25361b-fc3a-4d57-8dea-fb66543fd051",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f423f047-886e-46cf-abbb-e111806b6d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e946dd99-cdb5-4af7-a05f-95b51cf0e905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914dfc90-1e54-49fe-99dc-129fb06323bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d78677d9-9f1c-4d42-b099-689343af2bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e90f60-5676-4daa-895a-3c419dbe0376",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f92c5ce-b87f-4a8a-ae4c-dccf22749a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ecaeb7-20b3-4fa2-b4f2-9383936cd13a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423cdd9f-32f7-47de-b2e5-6ad6bc8b5259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fac752e2-a427-440a-84c3-f213e0cfe4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba34a925-1724-443d-9f2a-fb2fcf12bbb7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e318b89f-155d-471a-a582-cfa91ca90cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e14ae330-edae-474f-b9e8-ecda135df11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f829f1-c249-466d-bb4c-e659ef304594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "55597aa6-e463-401c-8c26-34accdee899d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e7308d-33c0-406b-bb48-2ffe9e845245",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dad9c13-3ee3-4d4c-b23b-caf64883b3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f1213c-593b-4fff-ae99-1741bc86b278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf5f683-eb74-4770-b85e-a84f836f5d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7861760a-9149-4dac-9e8f-973936379c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468ff61a-b6d8-426a-84c3-7dd0607f9a27",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b366036e-a320-42d8-a8e4-46d06da6e184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4824944-7335-40a2-ba01-36b1c5659672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4dbdd5-42c8-488a-90cf-e5d5c147a3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "658221bc-450d-44e5-a529-4862b25d2eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807bd88c-bddd-4b2f-9183-d94d937a6f19",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb6c796-52f1-41aa-bbce-3c99455fa327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b244d05-90cf-4e46-869c-bfbea54f4850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290a6ffa-c8e0-4507-952e-35ea4a8e3b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8aa8523-5daa-4a50-818b-aac5d43a397e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912fa823-0ac5-41ae-a570-62c5578db84f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69088058-3cd1-4240-864b-286f9c34366f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216d9e57-d87f-49b1-bd78-e742cd63f0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1bcbbd-14e0-4b17-ab46-92ed43b203e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b02976eb-de96-4ceb-a9d1-2bd7d0dcb2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418f769b-bc32-4660-a5d3-ee39421131b6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c865213d-7aa1-456e-86f5-89c83a532210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e30038-324c-4119-909e-59bbc2af0882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8cb7c5-8a60-4ff9-a51a-0f1f83c4360d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "205333dd-1fc5-432e-a9b0-cfc3d11a1763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb85c5d-196d-48c9-89cc-252852b2121e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed5b372-2575-4079-adfa-cf9639cb1055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7e444e-d2ac-4ee2-96ee-6671a9fe6e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790171d5-652d-4bbc-a7a5-c550852bccb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e651018b-f7ec-4d94-931e-7081b2236f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c5901a-a36a-4a79-9a73-b0dc67f2198d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88351db3-a1bc-4e00-8e15-202a03c7458d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fdea924-8933-468c-ba2f-05c8ae79b4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82748c93-9dd8-4a10-8cd9-5882873436d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "301e262a-ee57-4f30-9287-8408795e18af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160ca105-668a-45b4-ab2f-27cb88233e3e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a5d549-8680-4ee9-9ce1-2c80559376a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9588da-6e2d-49f5-8c30-aae9df89dd5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881cd925-c67b-4920-8658-776237feec26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23887c85-9cd2-452a-add8-3ea6046369e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebb68c0-656e-485f-98ec-34fd9b5846e8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe665aa-2dd3-4b69-84b7-9732c3b6958b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34bb16ee-6065-4e8f-aebb-5518fc21fe7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3f17a3-f3b5-45c3-aabc-cbe1ebeba449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33038d53-db56-466a-9f39-f81615a5ef43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f185f6d-f051-434b-ae75-21c911ee5318",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e7654c-8ba6-4169-82fb-c50da0e9d813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6169c1-a4bd-4f3a-9626-20e2418066aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff58ae60-bd77-480d-a739-a119d8d6479e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97a2ea85-6648-4e66-a542-be2f43a18a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ef6ef9-3cee-4d50-b401-1385ce3eeb4f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0b213a-575a-4b1a-b10e-c90f2a2cf078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76bc9d7e-e7c7-4f61-8217-cfd2949fcef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1488c288-8969-4aed-8969-9e67a057af1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f8fe280-803e-4d4e-be88-d1fe737cbd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ea6a00-60d6-40dc-b7e2-dafc6c915390",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbbb6dc-3abc-4a3b-a014-428b458f419c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6b69fa-ff3b-4740-9de5-260ceee14489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acd1798-6907-4540-885b-5a4bba0d68b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e71f3cb5-7379-4987-8165-181e9ecf1b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a10219-9781-409a-8354-b64fac8940f3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acb8e8a-95b2-471d-91a7-14f85c7d77e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6517095d-228d-4346-b6c4-54a28de29357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ded9197-f968-401e-a8c4-90585d834376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f496cd3f-0d1b-4068-baa5-99ccc0de224f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385bd11d-f5c1-4ee1-889f-e8374e3fed94",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e292f33-c2c7-4b62-8bd3-f37bda7eca4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7c7825-d53b-4dd6-8e62-b8e84f0329c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ac126d-3606-445d-bca7-1ce763a15155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7650362-b972-4573-ba2d-d33bfecd327d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e7b51e-6801-49d9-8f3d-9001acc705a3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdd82e0-84f7-4a5f-a638-6486d8202597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7d3d65-17ec-41fc-8ecd-85767ab2d422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e452ac2-f53e-4277-8733-864e6ce2e449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d08a3e08-8e11-4e92-938f-4dbf3a22005c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10db1ef-b1f1-459e-b09e-9f5feec58345",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef524b94-102d-48b1-8929-1d2da9db878d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4cbe917-0b8e-4303-9441-0ce5e2c9df6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94df9ecc-4ca5-4bb1-b0a8-3d522c393ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a125c895-8240-41d7-8da0-22da6efd5959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e296e6af-3c57-4cc6-a63c-fc8472b3d1f2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ce7c23-5c49-445e-a479-72a53dab4b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4a927a-eacf-4c8d-a5ed-806150b7fc20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fb64c2-cd83-4b0a-a591-5c868729d0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "145af952-0eb3-4c2d-8a0a-5faa267001af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2d5ab9-8017-4c7c-8991-a12cd8ac5797",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12092499-2f79-4c93-bfc4-c02a0de769b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc9df3d-5b54-4037-9a71-15e59d08f40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c34f17-7f74-4d7b-8fbf-f4d5b7f9e64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "031df512-4834-4823-bab9-a5c7d1da75a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6e5d9f-e6dc-44c4-b488-1a04ba9ce1ef",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2055a5-feb3-4f62-b436-e3e121265ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e457ba85-6e63-4209-b07d-c85050723a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29827c7c-55fe-41f4-8dbb-645605e18659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0c67b0-ea98-4658-9e10-bd37ec6d0bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40371cf-aea8-40b7-ab9b-63d9e08a0a9c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7aec2fa-a876-4b26-ae81-f49d57c9c5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ea7b0f-d1ec-419d-aef1-2a2758730a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2aac8eb-2e1f-4c68-8a82-6d3a23a183ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "823f18f4-534e-4e6a-8856-c8ff030e5878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68cc3f55-dc72-4ca4-b91c-9e0b91b02ad3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd00060-b153-41a8-a82d-bf98c4670d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6e160a-d183-43d1-9068-3e753115112f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545cda15-8359-4c2a-93e7-d0cbf52cafe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9839db26-eada-4c21-ba58-af8b66227adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d81b5f0-3ae2-49f4-b3d4-a465b926c121",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3daf1a1b-7590-4349-8e12-20f3b5af2a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e78b7c6-7882-4d62-ba5e-cea6805c1639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cef2228-b37c-470c-b369-62f571624613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "43b31abe-4b92-4fd2-8642-ee87cb342864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1375b61-fc78-4d2d-af21-b8430f6fc9d5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b600d5b-5a80-47f3-bb5d-8608522adb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975fe9f9-edcb-46f3-9894-488dc3eb7de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5abf39e-cb2e-420c-8d93-71fc04c4bdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "034994d7-ddea-4bef-90d7-ce9d20db68b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98fe311-77f3-48e9-8737-bb5f9296ad56",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a403939-bca3-4d14-beba-82c7abeb74e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d4049e-8269-4518-9649-d15423ba350e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ca2d5c-ba04-42c7-9e23-ac1512ea2a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "14856759-37a2-45ad-886d-bbdd857b625d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495f12f6-5118-48ca-804d-2a66b3c1c8e8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819616a4-5ce6-4e9c-ba92-5f7718e16d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ec2cc7-c10e-47e3-a1a3-a8e89a0f915f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22437257-4931-4600-9aea-3cf569c092d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "24ea647b-c51f-4778-a059-6a13987085f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b752fa-34f1-4d1f-a910-ff6e12ceb5fc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8777a195-7d2e-4fbd-9679-7801f7938648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f909a99-5f9a-4954-839a-f42914dade08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0cf373-e838-45b2-8091-cf4c6a037ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b726dfa-7791-4001-ba7a-3dcb2b2515ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4351fd4-c0cb-4f98-93b0-58d4e47026c4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11e0bf4-f7e6-45bc-881e-368577a9d9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47227fda-042a-46f2-98bd-35540f6ae474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548a84bd-c8bf-4b29-b828-65a9852f0cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac94ccdb-bd30-4ffd-b40f-e719c003cd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94e09f9-7c56-43f3-ad2a-6c30043fdf39",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b8363a-a42a-48e9-a8ca-664385ff999f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2eb14a-6780-43c7-acd5-39c20e6b224f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b9c432-9233-4595-8b3a-50b246e5a4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8baf395-6dc8-40fd-b564-72173ed68bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6b8404-8463-407f-b570-c5f83beb1373",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c984bbb2-3174-4333-b9b9-af9d8363d049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b77e14c-3d7c-4569-9b08-7ef1da66ec5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc55468-9dd4-4d78-8cc0-9c3634947ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7339f378-5309-401f-9d8d-bd4788067cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9df3bd4-7e5f-4dbe-a4b3-190cfe8bc5c0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e848ac09-c477-4c9b-8d4b-fa086177e6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0f7c0f-56e7-43f7-9df1-cec16ce518de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1955ccd5-e6a0-479f-ba44-bf1b5651233a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "152c0798-463f-414a-9cc4-d32638d55c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7258eb8-6967-4ffa-9ff0-f439a9503c83",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fd4311-7ef0-4504-a4f9-c316066a6925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0986d1ca-8d1c-4300-8e8e-5001faa42aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45bbfc2-7e79-4c48-8ac2-b64bffc75169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bc0ae35-7f59-4375-8bb6-94c15f4b96b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a207b65-13f5-4b03-809c-fb59308d5d98",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6f3d17-c1c0-4afc-9704-0b7104a07f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80311e7c-20a6-4d7f-a6ce-3ba978c89ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867b7807-6a49-46a3-954b-581e50594ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eac86b53-84ce-4b23-9502-9ae99ab3d6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8a559e-5cff-47f0-b114-5ebffbb9182c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed052bf-c326-4022-af11-8989385e8240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a15b4de-64f6-406b-acde-d463d2d82313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551ac4a7-887a-4c87-a548-af28938bbf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2a6c7c-c9a6-4009-9c0a-47e46b26a605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66324bb0-b987-4d79-ac64-e7804580a227",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6133ef1b-1ba7-46de-9285-e181215854d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97b5307-4dc2-45fd-9a45-ddce3b32391b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7980580e-add8-489d-919b-23e7a73c1803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "376a166c-0a89-4375-bb2d-bbd5a880221e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f48d95d-cd12-41c8-8c31-2201765f4606",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b131ab21-a3ed-4b8d-a4ef-d589dfc762a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993bfd0a-c9ef-49a4-9b4b-ec5d950f3cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6a2bb1-1dbd-488b-a411-bb7f4c1909bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9a5faa-6eb1-496a-84a2-4b93b8c3d65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a3fa08-834c-47ea-969f-dee170f74587",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d715cfd-fe99-49da-909b-c5b2aed5d8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "343955f1-8e87-4c2b-8b3f-fa762841dc36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b98ee4b-26b4-45c2-812b-b41205ca1bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4525e50b-2a85-4972-b02b-74bba348e800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ef7028-e616-4150-bb95-0944866dc95c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82986594-4610-483c-9152-cecb4b1a5637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b0ec87-9f9d-4af8-af56-15013bba2a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aaba027-1fa0-4cf0-97dc-da001d273717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d471e353-cc7c-4f72-9b98-eb71c5083ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef67f97c-8c71-47e6-9683-76de9712aea6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1746c458-2dc9-4a54-bc4f-29a764740565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5fc8a0-552f-4937-a847-bf64420b4582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa547a7-a32d-4a17-be21-06183dc116ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf9815b-aa30-42d4-a52b-b870d10d794c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7207c572-654b-45d1-b1cc-d7039216dd26",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a530ca-972e-4ff0-956c-00a6e1f3ca38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f1bb2e-4e94-4bb0-9fb0-1be30d789854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7431edcf-15e0-41ff-b0da-0e27bc705312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6586ce44-48ab-4243-bc25-984ce253a416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac93ab2-2675-4c6c-8297-ef5bd640fe91",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f90554-74d4-4768-88c2-697910b78ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c33e482-e18e-4239-afd3-c139e92cd07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14bc7e3-0397-47f1-8760-da5f46294dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f780140f-9835-4fcb-bc22-9c107953d9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6496e8-ef90-487b-8406-28c041e53add",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dd26b2-8e21-4c00-a677-9ed0de5b25a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cbce632-4c0c-449e-b789-d3d8026f37c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085f9f38-37f0-4158-b26f-103239d840f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "46cbb42c-750c-4757-8585-a4d1db8c8fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e105102e-2b91-4c76-9e93-34c5fa27193b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38cec29-2ced-4f9f-b55d-8e1ecfffacb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5408ad-742c-456f-b826-495a81624d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d458f298-e329-4715-a810-fb155838b9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc5eec6-0880-4b7c-8606-2f81301c10d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c6830a-9146-4196-8218-d51264a20b4a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad710be2-d21c-41b1-862f-fdcf9e7d3a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69142202-b123-4d8d-82c1-25e9d412fa67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5087ec5e-aeec-4f51-a305-980c6f1e69be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "657f988b-5d01-48d3-8d8b-bceea115e6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1a5a1b-b8c7-4128-bf43-e3087def7aa9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f93b3f7-546d-4d47-87ed-63460c920b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e31f8da-253c-4ddd-853d-1f2f5254a04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eed90ac-adff-42f5-9492-281bf291d6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ba8ec59-fafb-443d-aaf5-7d237ca60d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144367a5-7bf9-4b2a-a56d-fe279eebe7fe",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c98e52c-4c64-4ab8-b998-47608f35e29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e29b12f-440c-4f4c-9828-4df5232e4de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb87d43-1c72-4d3d-a791-ba78bf344784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b324ca-8770-44f1-8a8d-fe2027c74e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36eafc3b-377f-44dd-9124-38dc580c68e1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf5cbb0-dec8-4943-be16-510246e4ea4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0abd8f-1f63-4d68-b94b-3afffbaf8577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af228bf9-986d-4410-85bb-1841f1700e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2ade9e-5d88-4376-bd73-d1aa18b1a152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70c9b7c-1d5b-4f3b-aa39-b27213d41b46",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9d333e-20ce-4a31-9941-9ec9f895727d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27802789-6ccf-4be0-8a23-289971ac7039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf9c9b3-cf52-4377-bcf1-1e604834a360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc627e1-41a1-4555-a4af-c115dc19fc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760122dc-5053-4cb6-a1f8-4df8720a7ded",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca2147f-b454-4b92-aec5-69895275cc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f490ff94-7384-456e-a3f3-2099f6c97b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eabc870-195f-4379-b4a0-7a56514f74ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "562df709-23da-4d8c-971d-a3703d049ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b763b50d-feed-480c-b82d-8e8b63b7b099",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae42d4b4-fab1-4b80-bea5-9f8420bf1132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edf8f67-5bea-46c1-a835-4773e045837f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9c4d4e-55eb-4c32-ae7d-914e3372c5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "17ccc5c3-628c-46e8-aec5-f1d209688c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5d5180-b07b-4a1e-84a8-176152ed3e27",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0933f683-b977-47b7-b3a3-1152057465ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69fed650-7ac8-4fe8-bfc0-fd885af22680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51abd97-10c7-4358-83c3-767a9d2bc3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "09bc2b3e-3381-4449-911e-e3da76ef4aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aede8982-017f-401a-bf52-301a545e7480",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e58348-f24f-4be3-990e-d1d0bb7bac28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7184ea05-d5cc-4e6f-9b75-03a02fe21f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35e31d5-bdbf-4866-956b-28eed54e3483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "75f6c8ff-bf10-4e6e-a4f6-d73b9e627560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488265de-bb84-4877-96f3-ad0c62efa9b0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b176e1b3-ccc0-44ed-9efa-ece1e46f4909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013365b6-ab43-4d89-9236-bfe61b3ca4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fbc784-d044-453d-a6ee-dc490352483c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a59c7eb8-0e0c-4692-96d8-04080860a4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4470ce2b-2b61-4151-a9ba-c9ea76b8e22d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f769f6d6-6240-416d-98a3-f0e96f2fb197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9ec0d1-bb43-4287-b750-3b39c6f9d47e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ae7cf6-f360-4104-9ec2-5f5601e1a77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ae040ad-b643-4382-b382-7224dbe667d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772b35b6-5801-47d4-b993-24cccfa628b9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57874ba3-a511-4eb5-b76c-6d150618331d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "964054d6-ce56-48ba-b989-5880a858a9bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c09cc6-c98b-480e-aa28-fb82aebdf296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6126fee-f2b6-44d0-8559-55dd6cdc3a25"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "944f3942-59b4-4f6b-a96e-4b51842db58b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f974810-092f-4e14-aa83-9454b5e55199",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22cb891f-1610-4ef9-bb1d-5d82ef57754a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f802cb99-0aca-450b-9131-984e50d370b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a48a86-8e98-40ef-9976-75ba41619dfd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f2911c7-61e6-4178-a866-54018da8e209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296716bb-15e8-4902-8440-ec78cea92643",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25bfca7-a1ac-4bce-88cf-9f700c6a1246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99b7e9bd-0ff5-4905-88f4-04e77816b7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda9d635-4d49-4aaf-8868-d9640d384073",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9927d78d-dd68-49e9-aa09-84409fb294e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e3a7237-0a6e-4426-b49d-fd9538eca026",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1abc7b3e-810c-4f26-9fc9-b4c440bd61bb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c22930f-c7e8-4431-bc71-5ef57815c642",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "935f9c1b-e8d3-42fb-8647-086927ad50fa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ecf1d784-7520-4fc3-9d9d-916846df6540",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "450730dd-88f8-40ee-a8de-5067c9699bc2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "18133616-3b34-4824-b88b-ba55ac1fd8a9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8c16d5a-cac1-4068-8d8c-449ce6a93257"
                }
              }
            ]
          },
          {
            "id": "5ef5da2e-79d5-4fdc-8435-7155d1b1b3ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a03bf267-4037-4f90-8703-3bf2c5ef16f3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90793940-544d-4293-8f02-ea74ec510efb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45223762-7b74-4852-9368-7a19bab1c558"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77cd8a3c-f08e-404a-b368-bb4de99623b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9614a500-811f-4ecf-b7f6-1e65b6190cf4"
                    }
                  }
                ]
              },
              {
                "id": "2f782662-2908-4af7-b573-d719dd0857ee",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "181e0e94-9892-442c-9246-1b61827e9e02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f0f497d-eb2c-4b4e-89f8-cc63f80204fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79340fca-a722-4eaa-98a7-28cfdfe76a17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ec7c4905-4dd1-4977-b4bf-cfc014c85e76"
                    }
                  }
                ]
              },
              {
                "id": "a3ba7e3d-faf6-4297-be75-3baff0e3195b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "319f493d-9444-4b0d-abfd-5f20ae3c3927",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "923cace9-c078-4c53-aa26-c913d3e21403"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff3ad2bb-8d92-46b8-a417-8c6cd84082e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8a12f3b0-b321-4232-b0c9-16e240cd0a6d"
                    }
                  }
                ]
              },
              {
                "id": "72665d79-63c2-46a5-8cf0-90a2d8d44fc9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d2c4de3-b1fc-4d3b-8a5d-42512c3e124c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6dda8db0-35f9-4e7a-b17b-ee2da9202af2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd1949a0-5cf3-4398-86e0-2ebc62f7194a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5651af6f-6d99-4cee-8ccb-20c7d5f3580d"
                    }
                  }
                ]
              },
              {
                "id": "09e38659-e9be-416e-b106-080615679a16",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58ea5637-5b90-4039-abff-c9bb75eb2fdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b0b0980-f6f4-4ca3-8a63-0b4dcd3db9d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97583818-1db9-4adf-b70f-091de3f6780c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2850eff5-3ed5-4d52-9a0a-961ce5c251d7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "471f0e4f-92d7-434d-b388-b5d83f94b8d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c96aedae-7e97-49f6-9d97-3005372e7efd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f7c2c507-5390-486c-819d-31ddd0c6a68f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02ba9831-3f26-4df7-afc7-210f658ec817"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c955cd58-5fa8-44a6-b103-6533b54c8420",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "306f409b-3244-4691-b3b8-acb322a4bf1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f93fa44d-79aa-4867-b1fa-f2a23e3575c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef955caa-0359-4a7b-99b5-214edd6460ff"
            }
          }
        ]
      },
      {
        "id": "015e6d8f-9df3-48e7-9f4d-44e4bca04b16",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "964da3b2-066b-440d-9a1b-b1785f446aec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25c11210-0738-448a-b6b3-a9169c347941",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3202e57e-805f-4a3a-8e9e-b44a20f7e4c8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ff2e4c-f762-4cbb-993d-5d79e321e3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3231ca15-f529-4c94-bd1d-2212d3e9d426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f00eae-8e6d-491e-aeb8-a3826db6f451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2890d8e5-642e-4d54-9929-fa929ff966b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68085215-3a1d-45d0-8fc2-7cc89b626cda",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064fa783-f633-43ec-9bba-93d6c8b560b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25721bb1-88df-47cf-b570-dd6552f3614e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e88857-e9a2-46cb-8623-15156945f86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "655ca449-4681-4e62-9198-343c308c5461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abf186d-2847-46b8-9bdb-bbf6521e2602",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4ae07f-093e-46ca-a321-10c3ff0c8623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506d1f44-1d8e-4a5a-b5fd-8fccb8d1b43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92bc8f2-59dc-4887-b5d5-137f6e44cf09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5315539-9d57-4858-9e88-33d077070a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9eaaecb-a831-41b4-b01a-d65d96538336",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae0a87f-d356-4131-8458-12cbd41a26af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008a9d42-d567-4331-85db-b82326728982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425a6b34-9657-4e96-96b8-d6595b2779b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d525239-eba2-4046-8f12-2f855c980fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298177ed-4c53-4230-b8d1-bf79464318fb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4861cc-57a8-4a1f-9b83-84022e271012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc58c4f0-ad7c-4093-9b80-c3f9b1d3d8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4d630f-e764-4b72-a245-b174abdc937c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f8e8e3-79ce-4426-8e1a-ff34ec4635e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c075ba8-48c0-49cd-88dc-7d12910c3420",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5928647-e477-436e-8190-189b841ae6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68761086-1458-4a3f-8e32-bc19cf351371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb44c15-ac35-419a-8c29-1667ff8bd997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82e5d33c-9b07-4765-8a49-8535490cb014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb388a3-f108-4da2-a716-1a3cb8d7638f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662002a2-9464-4ff3-8e76-ad8caa3b4029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73095daa-820c-429c-a8ec-8fbdbaaa1ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c724dfc1-80a3-43bf-adce-d0080b34f82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "55b1b98b-1a8d-4894-a03f-3e1f2a2a8f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0582e5dd-2aa2-4db1-92e7-d865078783ff",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86aa245-bd5f-4691-9f62-a9e7fcb73f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ef0b48-e386-4935-ae98-6c3155125d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46000595-d1b5-4559-90fa-359799c9d130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1f1680-e384-49f6-a3c3-eadf46a53cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f30ae0-3a16-4e0b-b5a0-801df1ef2079",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbfc8ac-6265-4277-bf0f-eaaef312d82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ab0b87-476c-440b-9a15-c0e5243eac58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af923473-0365-477f-b522-8516d9d5de9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a964305-c188-40b5-bf69-bcf1bd302feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8380885-3228-437d-ae54-58118b697492",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db885b64-f365-4a1c-8c06-65cc1e8af9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf14342-04b9-43aa-b914-89bf123616dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87538ff2-b866-4062-8915-767d1271a041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef10bf77-94b1-45d8-b3f9-ba69c7c25700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c1f8b6-7916-4c01-a3c3-1f3c9e6cd178",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548cb0b6-5027-41d8-aac8-7cb956848b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816cc4f3-e553-4a79-acdf-5df65c4b51a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2dcc40-e622-4330-b056-2fac5b6fa4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9570a2f5-0be5-4eaf-91b7-f444824f6234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa1ff36-d7ac-4d25-bbc7-313f15b4ad28",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947e0c69-6cf3-4710-b029-0f2b8cb57eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fee6d9d-eb9f-4ad4-bae3-9eae145416fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e797b27-7ef9-4375-ab3a-207ce90bd65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "192b3139-b49a-43ac-b18c-1db8d9216c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbff74ca-6300-44ae-a8fe-b11f679d0e03",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7f9589-87c2-4f56-aaeb-2c81d2395717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13087a9-4318-4b25-8682-ce8037584508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e64096-5d7e-4ef1-b411-cd1b70d301ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6980761-687b-4401-b51c-17013fc6a979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1f0b05-a94d-42e0-b828-6f965a53dd60",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57f577e-02ad-4a20-a3b1-53539809881f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668b570b-c5c8-4e56-9ffb-6bd382c65db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf1f97a-2474-4150-a14e-6255a4118df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "59ea1825-36ae-4f3c-96dc-5b48f3574a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c80a4d-14ff-47ef-a2cf-4a7e12466651",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44b177d-3db9-44a7-b501-1c016ad6b109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63d64c3-3bcb-48eb-b038-1f00dd45a6cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6feda263-f041-40ef-96dc-79a35e771488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "441f65b5-e9bf-46b9-bc78-c93935cefb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a66cf5e-debb-4959-85d8-48bdf0f89149",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bc8617-c9b4-48fb-b325-e387e60b8e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42fa2e5-aa85-412a-996b-d7c4e9416bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce804cb6-90dd-471b-818d-ed79dc19cbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc523df-55ae-431b-9b78-2a44ed9cb7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38882bfa-6189-4968-8574-24d6551762f8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1102827c-1f75-40e1-b32f-a15ff99f117f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbac418e-ec63-4142-94a9-09e8ff383dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1446c25c-8763-4927-a9d7-9052cb4eab81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4fc8c2-7aeb-4a5d-86ff-32a688fa5026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e35e74-8381-46a1-8314-1b7709d09d8b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e49783-37ab-421b-83d3-d2b5894f42c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70685879-568e-4e15-a692-0b3f5cc5b608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38bd41f-53b4-46f2-a7e4-52d7a33174ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "606db314-0377-495c-8db8-e144fbc7ab6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567f65a7-0169-427b-b2f9-996e10b5ecd9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263b827d-b765-486b-8fd4-f43ff8aac970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25108bb6-67f0-451d-953b-8d5d05ff3deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62610b22-6f1d-4d28-a7d8-a3d433933ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d19ad45-9e41-40dc-8302-7654c4a37637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2646cf02-f7e0-465a-ab3b-257704ffc0d9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8f4f65-acf9-4c9b-a4ed-fa70e0939bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8547dbb-1a78-4395-a7b3-4c2344138e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ac0cde-ebb1-455f-8885-f1e9b8105280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbe06ba-93f7-4f14-9892-14aeec39746d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bab5aa1-11f3-4e89-bc65-142db2068f71",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611d0737-8445-4401-b122-494d26ba2fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f1768dd-8b4a-4c4b-9372-43af1bf5a0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8187dea0-7466-454b-8554-54f878937c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f2493c-c754-4168-af3c-ba6d37208ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43ca055-696e-47fc-8341-e7f250fecce4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc26258f-aa9c-4f56-88fc-9dbea1a54fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "decc5860-d222-433a-a159-1bfd2c76eea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d64c1d9-0c78-43f8-aeda-2224b4177176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85ac3655-c27d-4cb8-a125-110bbffc04e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23960bf-920c-459d-a864-2398d3d9432e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50c1d3b-90ae-4dcb-a70e-bba0cdb49c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d20f43a-4885-46cc-94bd-7678e47df89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f75f8c2-19b5-4d15-a517-9fe0d56de510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f04d7321-ff2c-4ce5-ad3b-df7e737f10e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6613f8-65e1-4610-a001-532b6fcb3de6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2120585-0536-47bd-8f36-0f64098e3c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ded39c-1ceb-4794-b4b6-9c73fd6ccab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53b31c6-29cb-462d-9369-685817f21e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "024ea823-c477-42d8-89b0-0636248b3d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8d396e-ca5d-471b-9b57-33da1c58dc92",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76574772-9986-46a4-9a57-ff0113ee5c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bad325a-0b17-4188-806a-b54a79d01253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befae766-b641-499e-acdd-afb277c95b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49a42a03-8306-4962-82d4-80722e723d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9e7dc9-262c-46d3-bb3c-7dd1207328ba",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e04ee4-f532-49b3-a60f-74a53063bb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8843dd-9ae2-4fcf-b037-dfa59cd24d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb48221b-f04d-4419-a514-f8c9e5e90f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff372b2-500a-4573-b387-cd76eb12c2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e7dd11-18c7-483d-9479-3dc74c34086c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f89141-1ab7-43ea-98d9-7934398d6969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed773a8-115a-4180-b8da-683a3d3ed00c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43766dcf-402e-4bfe-b109-5a672d88a5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "601d545f-b440-4e9e-af98-19127fa8fb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b01891-c882-429b-be5d-b556ec4ae24e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5151e9-17a4-4834-a77b-0cec5184e887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488a0d91-046f-4465-bb08-ff45af9c2da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75232fc9-dc7d-4d4e-b8f2-547a87f6d0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e17dd04e-83ec-44fc-a924-2a06cc709342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4583a244-979a-45a2-b029-99266b52d29b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc86515f-512b-48eb-a145-4594d17d2cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef38892-4fd1-4a0a-ab70-0f41f471686d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fbf9cb-a8f5-462e-b056-e06bcf963776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4242dd9-1848-4c9e-9266-24428e7631f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0135a9-3963-495e-8b33-cbc22225063f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6d96f4-2105-4315-8147-727b9f2e9aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b6fc8f-d3f5-4572-a52b-d457c75554ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13fec405-ebc9-430c-bea4-fc0a2d1c1c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b94aa14f-e39f-4e09-a23e-bd43d5d6461d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7834b1-ea21-4d89-bb44-3c457e8c37c3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0305341-1e55-43e7-92a3-51aa631f35ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351a704e-fa88-43da-9aa9-cf626390de90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff3368b-2421-4308-a303-851f6e90e9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77dc875e-de31-486d-963f-0836eba07397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebd2d8c-85a5-4cd5-9631-c3707fb88e7e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b265db-1e98-4f81-aa0d-84956c496b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59dea0fe-9fb9-43fd-837b-a5227abeb9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f7dd47-1758-4b01-9ec9-f45c296c40b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2692b7ea-fb6b-4e7e-9c63-c1d80e020ddb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c90eb0e5-541c-4e71-b65b-8082c2f18664",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "37322528-39e2-4895-9e71-7fd3ab29ea5a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df117c2b-181e-4c44-8bb0-7becca51b09e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "feaeda7c-9ccc-4246-9adf-06f309e62b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16db311a-75a8-4d39-8bfa-af1c15b46226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7870514a-b335-4990-9b73-e9f76f8c9ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc3f62b-7980-4166-a934-439f5b30cc7d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c052c196-d0dc-4f33-a3e9-5c8ca63fc81d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d9bded9c-e249-4008-b729-95241036e073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9123e27e-637b-4080-b986-f627a5f3ec8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d171ecb-723c-4a17-8260-c5c4f8613551"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc06ba3c-41ab-40b4-afc3-8798fe490cf1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b6fcb57-0780-41aa-b32f-f3167b83189f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8afa3aad-08ba-4bdf-b779-e8a00c258ea4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1cac099-20bb-4fc9-802f-bcd5fb451cdf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3021edd7-45d9-42e0-8859-d06382885929",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "778619fe-b250-4a2c-8064-03af9ddb09e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "130bdbd4-490b-4182-ba0f-38d32b45d92c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7e1e7e0-8e3d-4d4e-a383-570e6c2d1243"
            }
          }
        ]
      },
      {
        "id": "49cbe0cd-f051-43e3-88e5-9f2b48287f22",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e30d7572-b2e7-463e-8779-fa43c9dcdf9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "895c09c2-f7d5-4051-9f02-959af335db56",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f4e9e058-f088-45fb-b2c7-564ac3a357cb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0c54ce-62ec-4240-95a1-ad7739dc3ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea29a00a-7ca3-4add-9ead-1886541d2cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613bcd67-eaf7-4dad-8938-c3c58f52ecb3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d96ebe-456b-4015-931e-24050c90b5c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a8a842-a35f-4d9c-a0cf-cbfadd113c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bc8d10-29c4-408d-b675-ef1e6ea4c812",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a879c89-2d32-47e8-aec6-6b11810df861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8068a2-6547-4ca5-9523-6504228513bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c96ab70-2802-4e5f-9aa2-a911f77a0a6f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecd0503-1db9-4026-b2a2-bae52ab1fb36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d941ff8-01e4-4213-bdb5-d79ef9082dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e6e462-95d0-4ef4-a86a-5ea88366927c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b7cf7f-a39f-48ce-809e-ae06ffbc6b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c66a3b0-a0d9-49a4-82ae-298e64a92ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d650b96-b1dd-4768-8bb8-786a4fd75027",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aebf5d2-5218-4384-a659-eef78e26f7ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae543b72-7e55-401a-b44d-1b03a3f0fd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46671748-fdbd-46ec-8cce-3bb2826a9f2c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d667692-62cd-4cf8-9a5f-2c3113c2b7dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e230853-2fbd-4a22-bd47-4a6b140c488c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0c1f21-a611-4d7e-bf2d-1643f9b25938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2dd3ad-ad99-4b02-bad0-beb836ecd749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d75590b-0906-4a69-ae60-7f23040aaa0f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8919546f-991e-4a0d-a35f-dc5efe4a8ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ae8545e-4541-4dc9-88ca-be8f35dea15e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4ede1d-6cdc-4aea-b5af-1df8bdb68229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7474f353-81d3-49fe-8310-0ae923067c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d5be0b-ac05-4110-a291-461aba0431ae",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6128247-bb8b-4978-8036-2d2646c1fa0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "756bf847-d4ee-4576-8681-91396d7755b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84a6111-0597-4828-8ea8-efaf64e18c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad68a4c-aefd-4f52-8e66-4266ab4ecce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1d5020-2ea5-409b-a7ba-381ae0694463",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7abcb16a-aafc-438a-bf12-0cecd6507025",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "557258aa-76a0-4a2a-ad4e-1f435a782b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f72fde-150d-4584-8eb3-4f4a5da6bb55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd98c2f-edf7-403f-82f6-543bec662592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b39cb4-3069-4375-b350-116842896649",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae70a828-a24c-4e86-aea9-12d51c28867d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a290185e-59de-4902-93c6-c45339e4120e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ace31cd-459d-4fea-89d9-c667b552bcb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7b3799-9bda-491a-9c8b-fd7b4bd47338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c151238-da5c-40bc-a275-acda9a8bbcdb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d370e6fe-0ed6-4e52-9696-4e6ef47d2bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecdcc1d-4552-4d1b-9571-ef9c560415c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34956753-9d9c-436f-b558-505951f6341f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc6bd6d-73eb-45fa-b2dd-aeeb0430c94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d6c025-99b2-4a5d-bbaf-e5e5fd8dd0f3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3329b6e6-e5cf-4653-a0f2-67710a03f83a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15372f8d-ccdf-4a0a-88d4-ee4a5148df75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb10a24-2568-402a-b676-0842bc1fe6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a328f8-8d0f-4049-a30b-2c9900702fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00012970-97eb-4dbc-b24d-5e539db3a950",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8039cddb-fbb1-44e5-be5b-aeea17114317",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "266ce8fd-383f-4d2f-a1d6-d4d945fdce26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "601febb2-4db2-4a55-b72f-4b3b72913240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f21cbba-be82-4bc3-b13a-136974467a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5554ed-f59a-4982-814e-6d82a36c3028",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8ae916-5fef-499b-bb78-007f8913b0d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d87c9a6e-af62-4cea-abb9-0ad2ed958b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9e849e-933c-4fb2-9624-1d968bc748c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece664d3-7af2-44b7-8c93-279ae6b2644f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f45845-92e8-48c9-a13a-e1ebe415d688",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1b5cf5-af3f-47a7-b007-b115d8f4ffd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abb24d65-adb2-4b1b-a5f5-5d6076134f98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b21713a-5bd1-456b-8afb-0367e8c866e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3f2274-6dec-4bed-968e-aaa02de295f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11751c5-09ad-4217-b4da-66ade190b043",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc12e2c-7333-43f0-b6ee-298840758b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bf45e6-c713-43be-b81a-1b467756b9a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ec099e-b1b6-446a-a41e-0ef82569d3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2e15ed-938f-4a06-97f6-0da9616eb404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a28fa0-c240-4ecb-8b0a-d8b1caa4f35e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8896b823-3cea-4864-ac57-ce18e4365e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93723b0f-75b2-4828-a12c-8fa377aabf3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e55ea3-ed72-4509-914c-cb8d17e2df11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bdc064b-b04b-4695-85b2-cffa397abde5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a917f1-06a3-4ce3-b9fb-c2119a1ad228",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bbfc53-f112-4657-b3e5-62df020ce0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5a5e3b-2e19-45ab-a2c0-c269fa363e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55335a69-6c21-47f4-866c-eb42d4950dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52954a8d-a756-4048-b869-c55d8e43298d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c1903a-5ee8-4a3b-b22d-03663d05318f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a8a57b-f2d7-422c-9aa5-d420efae3389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9fcc069-b819-482e-b120-50a098823bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffae15d-519e-4573-bda4-6b672ff27589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "471ea1e2-be16-4a01-ad31-8e3f61235f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcca16c1-ca72-4c50-b501-a7fc240dda57",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db5d113-fa7d-42cf-b9ad-8a7d900ee0cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de04525b-ad8a-45d8-a27d-5dd75bb25161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea809181-cd4f-4de7-a5ef-55d949c3eae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a242432-f8d5-4c57-964f-24a123a89d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13315904-533b-415f-ad6a-54deaa00a4ba",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c75281-78ac-4e35-82d9-7d1fac568ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6a1543-a100-4af1-9dd7-c303aad2e3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63770c14-ed64-4520-9e3e-4ace86f09558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168bd73a-8821-441a-9cba-7a79eab55fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6826938-305d-4fa6-b0be-9e6b3ca07d6b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414c7baa-e728-4068-9b43-00563b51cedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3deea3a1-f14d-45c2-884f-ae535d463afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64e4527-5807-4b54-b2a0-4c88e79ba1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b856b3-292d-4345-8907-1739e0c500fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99b5c09-815a-417e-8931-4359f5ef3edd",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b639f1bc-b06e-40b5-a45a-ad360ea8f5e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad829e9e-df51-419d-827e-3f14394df19d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0fe4ac-c86e-4a27-90f5-cdfd4ac81531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15e2002-0c8a-4da4-9533-a3b47882f9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7c33e1-c734-4039-a2f1-7517f0eb38dd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4ba3a5-d429-4db1-ac5c-d3e9e1fc127e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9307764-b33c-436c-8844-006a91596f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cde102-0c8a-48b3-8ff3-b07a93efccb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5084fb6-9304-4745-84b0-93e4c46fc247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc53f6ff-c098-43aa-893a-a8c7db6b38b6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfd9161-a864-43e8-bd40-15decb71e186",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b50bfca3-2757-448e-a507-7755fab46ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e5a4dc-2483-4adf-aab9-86e5fc0252a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb22dee-3329-4e5c-ac70-61bf71d8dd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4f0414-dcb3-4103-a2b8-3b072a03eeca",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ac30e5-9d40-4aaf-be50-a48c56153369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30d6ea6d-d319-42c9-a7a8-6baf4349abef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2595253-52b4-43fe-98ee-9b9e37bea8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb0aa1b7-19d8-4c74-9a0e-8be24f41d8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375337cf-ad51-476e-a7e2-f7537cbe9674",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f87c7c-06ea-4581-92f3-e6b2ceab059c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada8bcfc-7522-4490-aad5-3eb8710d8588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ec03b7-c7e8-4919-8f7c-6ac49da9217e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de1b31f-6353-4aac-9430-fb19eee77650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a430b877-9d05-4cf3-9588-1e1012690943",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7052cab9-0e33-44b4-8b7f-9ae2fb6769a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5898adb4-6c33-453c-a229-e6e7e26ad8b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72197566-f87f-47f9-80f9-b2898cf55dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "232a3c80-3b77-4746-9030-124b20bb9bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a6d942-222e-4f45-9c4e-56cb48c66a57",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe346057-a543-493f-98ce-dd7e0f01e6a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20c2d2a1-a867-4322-b2a0-a13e3c96be88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00895fb6-866e-4061-9742-4650023d9ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a652e7a6-32ef-4f90-9ea4-f68ed5b56542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd28dff2-c25b-4b7e-9395-ceb76f635757",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7003cab4-992b-4e80-9f38-7408aa4b4bc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff000e25-1715-408d-96db-4416439d2d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c116f5-d4a1-4ed6-ab62-6b47f8d2100d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9fe496-7d4d-4175-ad57-c047e3a0ea6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88afaf10-e06c-4249-938c-c89af1097c7d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa82f85-a3f5-42a8-b002-36ea41740988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "011bc2ba-a3ac-411c-8df7-b7ccf8e2038e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4732a22-5924-4274-93cc-1f909b5a8316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6aa7a0f-87b7-4bd3-ab66-8647b52dae41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d198a5c-5802-4201-84ae-baec839fb6cb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620c1806-5c97-4d53-bb1b-f3945e5f3a72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd7b8feb-7f6e-4e1a-b816-ba737b1e62ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e510883-5794-471f-a355-ff4199794ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fbac726-a6b9-40fd-ac5d-fe78f6f80dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b0d983-79a0-4dc7-a60e-a403691e6b66",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eacbbf3-09e4-4287-8f3c-ef197df045f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f005e016-045a-491b-9b48-a0d4734ace36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8416bd3-0742-4724-afd4-95fc957d5d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9451e50-91d6-44cd-8953-92dc95a0c452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc28611-a7e8-4eaf-bbe7-b61dba1c182c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d335ea18-6c17-4fd2-9fc8-acdec4f206b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c89194a-86ba-4ed8-a0b3-48a33c00e496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5cb8181-9821-4e93-8d74-160dc60610e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1c6e2d-787f-4d08-ac07-7375e265f6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6d95c0-52a8-4c4a-bc00-736e2577c062",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6a67d1-6028-4f81-a19f-5e3b22b61ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a09ad2-6f7d-47e8-a178-8106d549dc66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1aec703-883b-48c3-9ff7-1b77424b4101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24843ec1-db30-4795-8efc-1c2e0ce42764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012ba01a-c2c2-4925-85f1-36b1c2cd5f85",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eaba33a-85fb-43d5-a28c-2e14fb610879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f19281e-5995-4f27-824a-7d0eb81016ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80115ac6-22d6-43a3-bf9a-699a2d4ba32d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd73419a-b3d7-4961-8b00-3e763d57b2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa43b153-7060-4afa-a9f9-4b821837ae8b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fbad24-3b89-4a16-8ca3-f74c29ab36db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42daa829-0dcb-4fe2-a67e-61b4b6285954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6390f556-3abf-48bb-97c1-83a7b410fd8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b74118-bd5f-4968-8390-0c24ba55bac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1232dac5-5788-4baa-8e8c-0aca1b25edca",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea550a1-163a-4b95-b876-1db081e7637a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa52ec2-30c8-42a2-a59c-68fa2c0a8e59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0239d9-16b8-40b5-ab9d-a15b3015027a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cacb0cc-3b9c-4c19-964f-5bffacbfc66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdeb22f6-3075-45bd-bd87-c907cd57246d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f851d3ff-783e-4121-973f-ed0131b9375f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0d9142-7051-4148-bf61-b547b9c6ff98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7435d670-d952-44e4-9be4-caad36a36a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb37f23-65d1-455e-9c96-512ef38f0fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fb960b-8c20-4dc9-b066-5fce1edddc75",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cda50f-b118-4e5b-864a-f8fd64733096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c3ef56-3c54-422e-8ca6-d8a7df662af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b67d6d-c867-4b9a-86b5-b8c74a52e0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71bcd64b-0275-4498-8d49-7ab412fa8495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1096f2-095b-4244-ac81-3ac2170365d8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4678fc-4cac-4db3-862d-3b817cb67ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d8b72d-d462-4417-95f3-2bf77f75a62a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd1619c-fcc2-4e8a-8c85-3b26fc2c1085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14fed9ed-09b4-49ae-8fcf-a6513121aa32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c623586f-ea82-4835-ad0f-eb11fee399d0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81eafeca-a907-4dd1-ba78-d254c28178c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e38710b-c62e-42e3-a105-3343d9e4c257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c186b6-656f-4158-97c0-e552248b0913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737fad9a-459b-4f5b-89a3-1ff4d6133d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cd4f39-12b8-4489-96d5-996b1d0b7c14",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea1dee1-ad5b-42be-8678-7da5159661cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e66f5ad-593a-486c-ba4c-b4909400a56d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a64df0-21e5-49ac-af5e-be1d0b6cb8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e5de6c-2504-465f-ba90-1fd2882de6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4ba10f-96d3-4e91-ae85-481ebf7c0361",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2deedb48-9963-46a5-a0ee-ededb10723d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50be9fb-5210-4c7e-8efc-0bf6b199f025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6330e4-e61f-4db5-aff3-9a694aca70fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded7a565-71ef-4519-9534-405cf69f6418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f00f792-45bb-48f5-b6dd-df0f7a19c2f6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6024c6-f40c-4c87-b690-c0b06fda506b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba16568-5435-43a1-b418-c8cf18199f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a634565b-3258-49ce-be5d-4dd26ce1af99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84139323-a928-40c5-bc01-5ca78ac2e96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab5797b-82bc-45d8-b69b-fa0b085a4548",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc11670-bb3a-4eec-b7bc-1c5bd67a38d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e152db6-1f58-4469-9339-3f6d4fff48be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa1e40a-6ab7-42e9-a0ac-bfdb192efd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27be0835-7f33-46b2-862f-63c646cbd523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599d1002-221c-4d22-b958-b7a6f9412638",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d9ba07-08b9-47ec-9bc9-707e0a9b5382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62f7b88-9c47-4b82-ad95-8770835042b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9b8c74-c01e-484e-b32f-cb1e5e17278e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3476d946-d7e7-4437-959b-5265b29c902d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af510ca-2e17-43d5-aa80-31d7669d16b3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5550a7-f027-4507-ad7a-f2b206d1d307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2809e223-b56b-4445-851e-4ac23c51d6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41784db8-e120-415d-ab3e-a254c86f2391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e89bf0-89c3-443f-a2a6-a1ea0ad014ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae02b3d1-0252-4c69-b7fc-23066cc8da09",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e201201d-17ce-4cc3-9f12-b2b43206c467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a834b02c-41a0-46c6-82ac-1089ca3c88e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09d0cca-ac92-40a8-b782-a5d7d8184944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8259858e-5772-49e7-967c-ddce6d7d7c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38a9aee-a2af-45e7-bfd8-d2f3f4f7b4f4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e575ac-e609-41ab-afd0-61008b192bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6773161f-f2fc-414d-8d82-ff2bdb6889ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1feadc1c-7ab9-4d7d-befb-641a52d09719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a8bc40-7e1b-402f-81bc-68219a5b093b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54a72fd-5876-497a-b58c-fced6739ce28",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbbce8f-35e0-46ea-95bb-9fa55cdca63f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba181487-f1d2-40f0-a72f-17b5277126cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083cf392-3e95-4fba-b2ac-1eb2c9c63a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79f38ca-f50a-438c-b235-2035931f7fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0984904-aab4-4153-b8ab-9ef869048987",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5333b783-a809-4c16-a141-c16ce2f465fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d1b372-b263-420b-9079-ece056f24fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af090e86-9392-4f9e-ac06-d4ddb0378302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fac3750-69ba-43ff-969a-1e4e08232a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ea51b5-fe24-4998-8b49-4118c7fdae39",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb33631f-c298-49ef-9811-abe74e5290e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2881813b-d09e-4a2b-8514-f88ac2ddfd04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5a2eca-73a8-4e7f-95b9-c230e8ea4d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ab1469-5723-42ee-9184-0a2b235ae9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf14bd0-2523-4d49-8cdd-be6ad0aa6ae4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368575ec-9c0f-432a-9cce-462f2ab9fef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da988c3-861d-4541-8680-25e8d812dc34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dcd8a6-eea9-4b77-97ac-5a1263ec6c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fefe713-673c-4f81-a69f-9ad0bfaf9ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c60d04-2092-450e-aa6a-a5d2da1c3e09",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d7e19c-2e98-4224-adfc-f3fe4804de89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce96db67-6e9a-4d7b-a8c8-bfdc0bc1ef01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02acca3-096d-42d1-837a-bcabee9ebd0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349f49b3-3c46-4740-b8aa-7845f7ee44bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd36d49-c59e-4e64-9f94-2e9d9a6f277c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93472ecc-5eb8-410d-9dfe-c74feb5c989d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08f2a9f-eb85-4b98-aa78-00fe549b8562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918bfc0a-9cfa-4a51-be67-3567feef7c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2698ed4-310e-4430-bec0-34f3553fad9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183fe5e9-1355-4c28-b2df-1cf14895b240",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9504dcee-4093-4366-95b3-ae937483fa78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3da8c9-74f5-4f68-9377-99c20487e83a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad01b50-bdc2-42d1-b2c4-9861328f4333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65258891-918f-4d81-8a0a-46ed70e57983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35509e82-ea62-4811-b348-a592ad7971fa",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb581f10-e49e-408d-b25f-8e1f7bfff4cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0147ab9-4986-49cf-ae89-70e8f996eb91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8da6cd7-55df-44f4-ad0c-4ec14b0b675c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ba0350-b5d4-4714-b80e-17e304dc5f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6c6fb7-2a44-422b-a4c4-81d694d9c968",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536500a7-1a55-42e8-8bce-1ccdaf885248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6a47c2-b754-4bfe-88c8-cbfc37849c47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3ce51c-fce4-48f8-a2e2-cfdbfe33144d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bd3bef7-93a3-45c5-b0f6-709a38f5421a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0665cd-a1dc-4e60-8fbd-b2726fca2bab",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26a3054-9996-41c2-b3c9-175f38a7f394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f694e4-4ef6-4a5b-9509-40942a4ebf19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc34c517-2545-43c5-b9bc-4efae641a0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "850f2846-71b9-41a7-b45a-0bed5642738c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9954a5a6-7079-4684-9957-7dba1d686730",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc40230-6bce-4865-86ca-20484a5147e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0929aac3-8caf-48e6-a8e5-e05150a3bbe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258d992e-9cfc-4817-8e37-fc07f2b69de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8299035c-9589-4b54-86f7-640942ef1762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38677be-d08d-452e-a0b3-d1c0f3fe6211",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50834c34-094f-4ebd-a806-974d9e91a3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c85a82f-486b-4c7c-839b-ba441bb97edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "736382a9-bc15-4153-9de1-7daf6eb66a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57db9591-15e5-4005-abbb-40de09ff7525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17ad01b-67f2-45a5-a03a-5b541db3bcba",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ff5476-779c-46a6-b648-ec81a1565f89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c37b02-5569-4a26-a0b8-3888d8f36857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9271e9-cf5d-4ebc-93fa-8d9d6db61cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5f9a1c-7f9f-47e5-8fcb-c00ff6bc3988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e34a8e5-fc97-4aa1-abee-4e5867f23519",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4575da-3b58-456b-b234-db02fd576526",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e1f8adb-e97e-4a68-8ad1-2f265961848b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4b0338-ae01-4ea7-86f8-680fb8dd367d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b17247-0c8b-46b5-b5d0-af38d599bab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d88edde-ab66-4985-abcb-54d75743a522",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce87cd8a-7d1c-4c7b-ac04-2b9305377985",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40e33230-3164-4d20-88ca-24c49c2d6968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc862e72-c391-408d-a374-064f35cfd3d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b92083-1bcb-4819-8193-be5222e61eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df48442d-0dcf-487c-9bae-379be7ceeb9a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76559b6b-3420-4609-867a-c18bf42e9af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c84614c-9d6b-4978-822d-8ab6c51973e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5456d08e-fc84-4649-92d3-f413342a6fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69f1b7a-a6d2-428f-9005-6d829a0f9254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4f05c7-012f-44b4-9c42-71419eb5e50d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e86dff1-db9d-46b8-871d-47178908ac49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b949f780-ccec-4a1f-aa80-ab82cf7ce4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "172fdd3a-dc1d-41f1-988e-10eb19370259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723f6d5c-29a8-4d5c-9b8c-f61034ca7898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf95f6d-3a4d-4b08-aa82-5099d6456fea",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15ad9ed-ccdb-46d5-9053-f565d6ab3ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e7ebaa0-0e63-4555-a594-816da18c2127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b78e5f1-502b-4a17-a9e6-b92d2f46352a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4dcb680-d80a-43d4-8e16-fd093fa41ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae6fc95-808a-48f1-9818-74e4bc3d2007",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be53f3f8-3dbe-494f-baa0-21890be1bdaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7de3995f-49dd-4e76-ab25-d964dc96b004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1af2cab-700f-4445-b9a4-f9a71bdcf7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d47d2b1-a630-416a-a43e-973acefbcbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad32725-2f8e-463d-b79b-1aefa9d4ae05",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a017a1d-3b3f-40dc-b433-74f78b6b3db0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccc764c4-ae75-4bc8-91a7-858af8434817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba715462-926e-4325-9fbb-40aded679019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bfbdd4c-6f9d-41f4-a67d-986c531d71a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8628ea-325c-4a2a-b641-b760cabfd279",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb89205-7232-48db-baf8-4dbc9aa4616e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8f44446-d706-43df-9fc6-192552ce891a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e86eae-0564-4615-b279-0f5f7235f644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d712de-4426-4124-ada5-01f658698aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f04384-26af-46f0-90a3-89228fd39a81",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30333f96-9c63-4b0d-8c38-69fb43deda2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfdce8f2-89d2-4523-a4e8-eb0c1e6e8ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6510dae-a7a8-41f9-889b-f5acd67b0803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b705593a-3c6f-4f56-803c-e80cba75d872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34638b0e-cef7-496a-b0f6-be6774ae9174",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d97ff5-9e19-4901-a924-629b043820a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6c1e7a7-6419-441f-8cf5-7fa412dcd63b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6ac599-90a7-4a04-89b0-927d0e3ca528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c53cfbc-06b8-4834-a0e0-81db6915ee33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e844fe0e-dffe-4276-a9fd-373e87dedd5c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0515efa4-38d5-48ca-a541-d1e11c3d43d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03506834-c205-4351-a806-889ea56e2c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f7709a-baca-4e29-9ca4-14473067fa55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ebc29f6-b6ac-4c96-8eeb-e93ca7cd006b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688bd520-088e-4599-919a-838d4fa7c1d0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98f2323-1ce4-4590-8bc4-7c6fc5e32898",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaecd2b9-5770-4370-8f38-2b7fde6cf68f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "792df798-8a70-45c0-810b-71b095a54c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7035bafd-119d-4cdb-beda-bdc9409713e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bb66ec-3e4c-46ba-b4b7-a6af9c8bc769",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0883a33d-3f77-44bf-b770-c64fc0706d19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e9cfe81-7fc8-416e-93ca-8adbdd3ce40a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caf51ee-4886-436a-ad83-ec2942807bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22d70c58-5258-47a3-bb16-f9fd2b5fc87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f1134e-6e12-464f-9f0d-47b5a347eb86",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ff07b6-0e71-4846-a29e-9adb5c4aba14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38addd13-03f2-4209-88ca-1a672cd806c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f11ce3-7fb7-49b3-9363-f5b9fb333651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517328c1-6615-4ca3-9c44-6e8ded686107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93db5f98-03d4-410e-8bba-ee982df57d10",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c93772-8ba1-4b09-a4d6-2f93e8710030",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0386374-2d26-4ed2-b62a-a1aa4b5d6769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ad3620-05e4-44af-8e30-86ad028fe380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187f43e9-8b02-4ad8-a1dc-7febdf82e213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d0c0a3-aa90-4713-bc0d-5e41bb9f721d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e940b3bb-8108-4bd4-ad59-fa1b7abf8907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76fe9517-aff3-4db1-a541-d01f0b37be35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b46c22-4a21-4b68-8732-55d9e551fa5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501cc2bf-eef4-4054-9a44-f88f78a200ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aaf263c-a00a-44c4-adb8-2b66dac68465",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134e2b82-1be8-4071-a55c-29d180b3dea6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6d0aea4-138c-4ae9-9cf7-c861d6c09e53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d0d9fb-902a-442b-b951-b8e47becaefd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672989cf-03b6-43b3-9e78-701cca572323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7de265f-9d94-488c-86de-75a1fa0382c3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b7d04c-c3bf-43ad-b1d4-51261edb85ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11c2c1a1-7068-4851-891e-889a6bf76d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77928fb-aa47-4b43-99cd-4862c79352de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebbf52e3-a1b2-4980-a7d7-c88ab65d7b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0972da9-84f2-4901-a837-ddcdceb6d592",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b2251e-39da-4bc3-80e8-f32f7470b39b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0642419c-41b7-4f14-b86d-a578be78b867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27856db1-b796-41ca-bca1-ffffb5d87ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1de470-9f9d-4cc4-8179-f2024a8f7344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e52cc10-1196-4899-936b-3188c3794aca",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769e4a88-40e4-41d7-a45c-1f91e9ba87c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aef6711-344d-4816-8769-f4d713ad34fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e244d25-7472-4a32-a61f-f8afc8b528a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cacfc2e-1432-443c-a391-63676e3b1652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b86911-258a-48e3-aacf-82944be45ed9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a4897e-04dc-458b-8890-a9eb7afd3cd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9805502b-bfcd-4257-bff0-1d170a8ea4a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df84bf0-e4aa-4157-ab22-3501398655f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eabf325-e7a0-4540-b807-13700f3ef367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fbaf256-2c4a-4d16-ad72-fe85e4dd31b9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54748f71-c3eb-4cbb-9f58-818c4a14234f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d69d3c17-9030-47ad-9c4b-6b544199eafd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4848496e-95d4-47f0-ace9-3701b9d0b80c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1203c04f-849c-4f18-ae5c-0431f301d3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85513384-27c2-4ca1-a838-3b93fb32e1c9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a12d3f2-53e2-4aa3-b2bb-e07e628ad725",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38005204-3c63-4579-9db0-b42103cbb295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2a2469-7137-471d-84ed-7fdbddf37f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472e25fd-53d6-4e5e-b842-68105520aa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda3a949-e2e1-46bc-974b-95c08e82d207",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cba7c67-c038-41c1-8848-14e8aab247e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f035dfc-6007-4ef0-864d-63ed738e8a8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edae545-93c8-4e8e-b1c8-28866a32fffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19f906b-1845-4f06-bf22-77b2e43fcddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a12d7b-f2ce-405f-9290-5f9c6c372e7e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb22570-e019-4323-92ef-eabe3a48e4b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88302ff4-89fe-481b-a04e-e5c9f2fa5edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dff2808-c54d-46f1-96da-806a38ed8c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385afa1b-86cb-4564-94d0-5f3364d11353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1e96e8-b726-4f1c-aa52-8d0ccc6ae629",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e503d635-42d6-4949-9c37-29475b2b9d57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcab2f75-8990-48a2-9744-6d386974ee6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1766bd5b-9135-4aa7-8f6e-75f6d9c3f669",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5d4195-aff7-463d-a228-76a0fa7e14cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5126ab-09a8-4813-9dae-1716fa99f42e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b8098c-9ddd-43a9-b16a-19a577083038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4afc21c4-e091-4097-a261-6a7b54336cff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b40e43-c3dc-49c1-a208-010e59a2e233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f296d44e-43fa-4082-9f96-616fd5d4bd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5173b7-278b-4a24-89c1-205752ff694f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de753fcf-894f-40a8-9954-b549638352ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e53993d-4ff7-4757-bac6-de932d671a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2e6897-7299-44b7-80f8-11057d216603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e864b4fd-4fca-45aa-8105-b124ac360f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55052fe-8481-4981-8daa-348c88a78443",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbafd1b7-4b28-4cde-be57-a9efd26a6556",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "401f417e-d0f7-430f-8c36-e8a6711c7032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9602eed0-6bec-4e18-b578-89724bf6015c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c0c61c-900c-43dc-8bad-7e8ca136c029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5512276-b8db-47e7-a39a-7426258e1c99",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf95b0a-9f83-446d-855c-27fe4028ba5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76471a24-6930-4909-9a63-fece34892fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59cca06-9bd3-4c07-815b-2e157665eb2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be74498-68cd-4697-95eb-9cf3f0a68697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb270981-6cdd-457e-b9b4-a410a9beb616",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d983ec1-2a07-4e17-89ee-c86a6b0a1413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c078048-7d80-41e6-a948-51a03bf08316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b3cd4d-36a8-4ff5-bb49-5594daf8614d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2907e6ae-4a0d-485b-a68e-fc87a2687a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a84380b-4915-45bb-9606-abce3f9d4ed1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae17035f-e73f-41ed-aa17-25cdd76d5e4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf4a8c4c-f382-42c0-a7da-cc82769d986f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8e0969-bd42-4a1a-877b-9252f02c6cc4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be97c4b4-ebac-4a16-9d4c-72683a774426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa18567-c43b-40a5-a060-95251ae5d605",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f7f723-b801-4270-8ee5-2c566070089c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8d5e210-963b-43eb-bbf3-e06a1bdbf76a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d4a8b9-f692-4e62-8293-d0ac90872e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3279a825-c066-4bfa-bfcf-fa4d4e037263"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bff5e4a6-393e-4d51-83a6-cd55e108dbfc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bae2386-0384-42b9-a3ca-61c49cb0a843"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56cd11f6-a2db-4a7d-a0f1-ed02e24a2ec8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05bb5332-0b4a-4d97-8635-20195f826c58"
                    }
                  }
                ]
              },
              {
                "id": "3e5d3c86-cf9a-4ad7-ba1e-8c0880423417",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dca7f3a3-5c88-41d2-bdcc-c8f369c38a5b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4534686b-a297-407f-af85-0ba5bd3c6398",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "276d7f17-51ee-4d63-b19b-683bed921e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9017aaec-4770-4358-8bb1-e1873a24a18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1912fd49-af37-4d60-a6e2-820abefccc95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf70f17c-2a79-4fbb-af83-43ffad8d543a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5f88fc-8034-4d4e-b718-af24c67dbae0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9ee780d7-0977-4566-a391-df50012f13d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08898a79-00ec-4c0a-961a-828ff29836f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "443bb45e-a099-43e5-9dea-4be014da5834"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6144d4a9-14af-47ff-9ec6-e9361b1737ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "003d4775-8899-4947-9e55-73b865eb7cde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7b88559-cf1e-4618-8d83-543b00c61657",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "140334bc-37ed-4c33-9c49-ac70372ae92a"
                    }
                  }
                ]
              },
              {
                "id": "5582c808-302b-478a-814c-de6380d1a2b7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b8a879ed-7f1b-435a-9761-025ac8d3abf4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d67ad28-d094-4d9f-96db-aafe050b24c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7a867978-a726-4221-929a-893f6911c67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9149d7d4-57e3-49bb-8904-03e40f7c21f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a813b4b-2ca8-4a0c-85b5-157a63eac2f7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1279e305-72d5-47d4-ae16-9f0ba7899a3d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ca96f07d-2658-4afb-a3d8-aa97bfe1c1e1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fefc01bd-3652-4946-a15e-9e15361f340b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4d05566d-af0d-4f8c-b80d-78a1aea41797"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4e10cbf-7a5b-4403-811c-be0c13156fa3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac62c7e2-420a-40a6-8d26-4a259d496dcf"
                    }
                  }
                ]
              },
              {
                "id": "d431b9b7-b168-4f9d-81b1-023cbb57d0f0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d35888dd-5de9-4863-8249-f898f243ea8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "94fc9149-ca9f-4300-9423-7b508391de01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "347e0a85-2baa-43cd-8018-aabde3d5e9c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d40ee68-83e0-435a-81f5-67f6cd67f90f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5113e871-3194-4d81-b27d-2a981a521b1e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c01954f1-ac95-497d-abe7-31baa1433a96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "548672c6-00a2-4880-a266-f381cbacb3c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e1163bd-e08f-4004-8548-ef93d2939bf5"
            }
          }
        ]
      },
      {
        "id": "d1bacceb-fc2c-4576-b7bf-2993007b226f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4efd6a75-b0e7-4486-ac76-5758233f3037",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f478827a-4dd3-49f1-a06c-7dd900d9ecc8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6a313b7-18e2-408a-a2fb-be8e4405a421",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f074a6c-1e22-463d-8ed6-724b6f89eeba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0f76b1e8-7948-451d-b99e-e0d03b10c1d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a983ecde-d523-4761-b0eb-23aae71bcbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19e3b818-b1cf-46a9-b141-49e959747b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5184d91b-6773-40a9-9d8d-32decdaf531b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abc6895-e877-4480-99e9-f70a663c8d4d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d23072de-65f7-4c17-b3d0-23c976699c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db1e31d-76aa-454f-a90d-696e63f2abcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2edda91-8236-4fd2-a0fa-a89ce77e229b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26a06c95-3bc3-42be-9279-3fa630faa593",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc6306a9-8a65-49f4-a3ac-346ffcd3a752"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21c307b5-3f41-4f1a-8a84-468114c0b47f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd7e80f7-1d39-4191-8213-df348577942f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb945186-8558-468e-9379-3d36d649b273",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cf115396-b60e-4240-a8c0-410964d0f80b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af33c26a-825e-4b21-b177-83a784b4981f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e9cb9f6-87f8-4a75-96d9-b584f994574b"
            }
          }
        ]
      },
      {
        "id": "e4d318a8-5ad0-414b-9ab6-b56c32cf86e8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2f725529-d745-48c4-af80-9c31acaf557e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "496f14d0-d4a5-4ef4-8307-4dfdf21f9e5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70b05590-bae9-40a2-8579-b07842a0ff5d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca9fa50-eb68-4787-a025-ded8dd6ea313",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe5e5a01-a145-4cf5-b218-8f03da75a4c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9bc2b1-13a4-4abc-a31e-bd9081cd35fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "669fa5fa-64c2-4507-95e1-ab487c249b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e77d2ed-c513-43da-8f40-eef9b0b2c823",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56201b25-6cf7-4e3e-af3f-fa47ec47c4d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "495abfcd-94f5-44aa-a1e9-5c252a4326ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f9b867-9b5e-4570-8afd-3995b5bd8f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7d3f706-bfb9-4011-8ba7-b738d4a9faaa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d62d539b-e7dd-4431-bc2b-b70aa551a280",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "788fb7ef-8799-4284-a2f1-4e676fb8577b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7362381b-74b2-4901-835c-8afcc4b1d896",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d82d1c76-0305-405b-9330-539ee24ebfe0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "085c9946-cc31-468f-a241-c16d98097779",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b7cce2db-a7e5-40c2-9d77-5010fb3d5517"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f95a32e-8de4-414f-8e13-3a0539625142",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d000cb45-0720-41c4-854c-ea73cef841f3"
            }
          }
        ]
      },
      {
        "id": "7ea598ce-9818-4f88-819a-b88692e22995",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "eea592b1-6d9b-4297-99f6-24cd70ff7379",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a0e72ff-1f1b-403e-9521-ed0f3f610fa6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "096b6fae-b915-4724-8ca1-c39d3856b599",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef371ee-18a3-4114-863d-5bcbdef3eaba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd4c4c5d-59fa-46c2-895d-ce20bfc6f8eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5c39e2-c8f9-4c6b-a072-16869665d5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "766379b8-a0b3-407e-aeef-c340996e1375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f4ad7d-dbcb-4df1-80eb-24f967d79dbd",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6a08e6-1537-49ba-b322-ff0ef7c657a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "46df5dbc-f07d-4306-ba56-e7d9710628fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2610e6-eb92-44a4-b866-e674458a5ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5a8d698-bd89-43c3-851b-b09a8eb3f328"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c21f384-4e94-41d5-954f-2da9526e7366",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4378d639-19e4-43d2-a6f7-f05a2de2950c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "44287754-dd36-49ce-89b6-2436f66aae40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fb6b7ec-9f2b-4864-8469-bf6c159c7484"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03d0a572-cecc-482a-9695-3882e45ce5e4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9d149605-412b-4b7e-84d3-c287752131b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c560b0f-e032-4bdb-b798-525e5b9a9729",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bfdc9029-a403-4c13-b978-f3c53c8895fa"
            }
          }
        ]
      },
      {
        "id": "4a1747a7-459f-4e76-9c56-9bd2e9afe796",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ac8b95a-3e44-4b58-95b6-3ff0f64f4229",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d776c2c6-ffdd-4a83-9ad4-2e28483db7b5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3c78dd99-62ed-47f4-840f-71d7add6fba1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c26226f-8341-4974-8b5e-8df8e35d503d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e27e9560-5763-4078-8b42-d53d6460da20",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 280.54440154440135,
      "responseMin": 8,
      "responseMax": 7691,
      "responseSd": 795.6188825874243,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678236194549,
      "completed": 1678236281859
    },
    "executions": [
      {
        "id": "37936531-f2cc-49a6-8986-429ee559b4f3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "741d9e09-6cd5-4428-a37c-d3b0511fbfa7",
          "httpRequestId": "d2e476fd-dd22-427d-87b0-5d60746ebeff"
        },
        "item": {
          "id": "37936531-f2cc-49a6-8986-429ee559b4f3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c9109831-f930-4a5c-a9d9-d924326005e4",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "74ead89a-9551-4956-a6f4-27b369dc2e64",
        "cursor": {
          "ref": "971e69fd-a759-4e6e-8903-94c467533b65",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4977cf3e-9f2e-4743-bce8-5597998ffa2e"
        },
        "item": {
          "id": "74ead89a-9551-4956-a6f4-27b369dc2e64",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e04e93d1-941f-4dde-9873-6d1b29dced99",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "5ba03a46-768f-4e82-8176-c7f5c02fbfcf",
        "cursor": {
          "ref": "aaa3fd4b-3086-414d-9e08-cbda10beeee8",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "01b7d352-19fd-435c-84ca-4b7ce44930cb"
        },
        "item": {
          "id": "5ba03a46-768f-4e82-8176-c7f5c02fbfcf",
          "name": "did_json"
        },
        "response": {
          "id": "26fac37a-1863-4bab-9367-200bdb5a3c62",
          "status": "OK",
          "code": 200,
          "responseTime": 474,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76dfd526-32b3-4296-90e8-ad838cc9f61d",
        "cursor": {
          "ref": "2c393939-e2f1-442e-91df-7f1f93c25214",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f60bd0f5-6525-4aff-846b-b413a0e58b93"
        },
        "item": {
          "id": "76dfd526-32b3-4296-90e8-ad838cc9f61d",
          "name": "did:invalid"
        },
        "response": {
          "id": "89dce757-b16d-4e3a-bde7-bf91ae216658",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1412,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "76dfd526-32b3-4296-90e8-ad838cc9f61d",
        "cursor": {
          "ref": "2c393939-e2f1-442e-91df-7f1f93c25214",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f60bd0f5-6525-4aff-846b-b413a0e58b93"
        },
        "item": {
          "id": "76dfd526-32b3-4296-90e8-ad838cc9f61d",
          "name": "did:invalid"
        },
        "response": {
          "id": "89dce757-b16d-4e3a-bde7-bf91ae216658",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1412,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1bfc5847-333f-4732-a865-3a103fcf054c",
        "cursor": {
          "ref": "fc2fbc97-bd50-4eac-a9eb-8cd1637d2ad8",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "738df81b-3014-4928-8b1c-64ab1778995a"
        },
        "item": {
          "id": "1bfc5847-333f-4732-a865-3a103fcf054c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b23400b9-dbc0-4449-af5a-f9d1cb241eb6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 75,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d09649c-36f2-447a-b90b-5303f8e199c4",
        "cursor": {
          "ref": "2cbd2e8d-2dd9-4da8-a15c-db28ebe45c9f",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2ce5fa21-5377-4ad2-8c62-1a24279b143e"
        },
        "item": {
          "id": "2d09649c-36f2-447a-b90b-5303f8e199c4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "96c2f0b3-1bf7-4b07-a08e-129be9ce02aa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e76bd9-33df-42e2-929d-1f656b385ea6",
        "cursor": {
          "ref": "499f1dad-64a1-4f91-9cf7-a07a9bfbbe5f",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b571ac8f-1fba-4148-8ae7-7906c5b4f756"
        },
        "item": {
          "id": "c9e76bd9-33df-42e2-929d-1f656b385ea6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "92de0cb7-23b5-42ae-9c8c-ecc37f8959cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "83518306-e3a1-4a49-994c-70017944136f",
        "cursor": {
          "ref": "640124db-67b6-4782-b453-cd263cba3ffd",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a7bad4b1-be2d-426f-9f1f-5187f078b247"
        },
        "item": {
          "id": "83518306-e3a1-4a49-994c-70017944136f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "56bb2701-322d-4eff-9548-f8aa85e60fcf",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "83518306-e3a1-4a49-994c-70017944136f",
        "cursor": {
          "ref": "640124db-67b6-4782-b453-cd263cba3ffd",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a7bad4b1-be2d-426f-9f1f-5187f078b247"
        },
        "item": {
          "id": "83518306-e3a1-4a49-994c-70017944136f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "56bb2701-322d-4eff-9548-f8aa85e60fcf",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "eaf6bdf9-8eb0-4b3f-8b51-e16b9e5e7da2",
        "cursor": {
          "ref": "455f8a16-2e68-4fa5-af04-9a862fc8ee9d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ec847248-04dc-4f07-a2ef-364919c94421"
        },
        "item": {
          "id": "eaf6bdf9-8eb0-4b3f-8b51-e16b9e5e7da2",
          "name": "identifiers"
        },
        "response": {
          "id": "31c4ba55-d1e8-46d7-9d86-149482387127",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae5b8df-4870-4d86-bec5-aec812e07cc7",
        "cursor": {
          "ref": "0bbdc765-a9a5-4d83-9615-6fa6c9fc84c2",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1ae50d76-e9ec-433f-8c15-6eabe2dba1fd"
        },
        "item": {
          "id": "dae5b8df-4870-4d86-bec5-aec812e07cc7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5dc4947c-219c-4bea-9442-e470f8eba918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae5b8df-4870-4d86-bec5-aec812e07cc7",
        "cursor": {
          "ref": "0bbdc765-a9a5-4d83-9615-6fa6c9fc84c2",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1ae50d76-e9ec-433f-8c15-6eabe2dba1fd"
        },
        "item": {
          "id": "dae5b8df-4870-4d86-bec5-aec812e07cc7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5dc4947c-219c-4bea-9442-e470f8eba918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d9ef3a-9316-4e22-8c43-d05a64a5c788",
        "cursor": {
          "ref": "92a6eb2b-b58a-4800-b8ba-49b53c5ed7db",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a30faa09-03f9-49b4-a1f9-5e2f0412c51d"
        },
        "item": {
          "id": "30d9ef3a-9316-4e22-8c43-d05a64a5c788",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dd4cf8d2-2818-4868-b5d5-3955b277dc02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d143791e-1f4d-49dd-98c1-b77c5cbc49f1",
        "cursor": {
          "ref": "2763ffa6-46a4-4236-8496-2c43b0f06d91",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "aea089d0-4f56-4081-a091-c20899eebe36"
        },
        "item": {
          "id": "d143791e-1f4d-49dd-98c1-b77c5cbc49f1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0467b93d-f13b-4795-ab06-e695e4578630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f666cc-0ee4-45b8-a596-9de140f64885",
        "cursor": {
          "ref": "748cb3ab-5d2f-4be8-8ada-132d929b5ae6",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "074a3f06-e382-4448-8641-16dc7fddb401"
        },
        "item": {
          "id": "f2f666cc-0ee4-45b8-a596-9de140f64885",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b824127d-61cc-4551-ab61-cd2818da5a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc1b9bd-7f2e-4531-834f-1c074e693a5b",
        "cursor": {
          "ref": "ad647bff-0c89-4b7b-855a-05e61e52d643",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5e2e0905-90fb-4202-980b-158b20cf01f8"
        },
        "item": {
          "id": "cfc1b9bd-7f2e-4531-834f-1c074e693a5b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d432762d-953d-41ea-9c78-e0f892fb6f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9a809d-3fdf-4276-8067-d6163460a11a",
        "cursor": {
          "ref": "a80c9d8b-d493-48d8-b117-77d5aff37109",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c175e665-e6ba-4cce-83b3-adc209e5582f"
        },
        "item": {
          "id": "1d9a809d-3fdf-4276-8067-d6163460a11a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "26635ba6-fb5c-4707-b565-0d44c5084845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b814843b-4867-4d15-9122-b0c198fd2675",
        "cursor": {
          "ref": "b7e1b18e-b747-4665-9228-a5dfb948f34a",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "13c2deb9-0952-41b8-b1b1-32b9b76361c6"
        },
        "item": {
          "id": "b814843b-4867-4d15-9122-b0c198fd2675",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3b250e1e-3598-4875-9dd1-34b4c5cd7e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40bd590-d4ff-4678-becb-bc2682b9ba96",
        "cursor": {
          "ref": "db8d0371-b143-41f7-921d-8942d8c8e63b",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7ce1fe31-ac0f-41b2-8ae4-e184cbb61f2d"
        },
        "item": {
          "id": "d40bd590-d4ff-4678-becb-bc2682b9ba96",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0f5259c2-feb1-4844-9978-a16c4e14023f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc6020f-7894-47a2-8dd3-a03429c23b6f",
        "cursor": {
          "ref": "176900de-fbde-440b-b27f-a07c74ff7a0d",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "318edb19-ae3e-420f-87c8-fbf1a0aaafa5"
        },
        "item": {
          "id": "1dc6020f-7894-47a2-8dd3-a03429c23b6f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "56f8384f-3464-4c86-ad7b-cca3964067ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a6f1a2-f9b2-4d3a-b957-bfcd3daec825",
        "cursor": {
          "ref": "d2842487-6763-4904-9e62-098c8495c69b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9cd07797-a60e-49aa-a4fe-a1821bab89c9"
        },
        "item": {
          "id": "74a6f1a2-f9b2-4d3a-b957-bfcd3daec825",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "253da249-03e3-465e-8e40-b758c89667eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94754465-7cb2-4eb5-b0f5-69a66773912b",
        "cursor": {
          "ref": "a2cf1de3-76c5-4572-98af-1806bd3f7eac",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "16ea45ce-d345-4410-9de4-a2fedae301a0"
        },
        "item": {
          "id": "94754465-7cb2-4eb5-b0f5-69a66773912b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b2dd469b-399b-489f-8a37-3c9b02270e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb47018-d488-407f-a367-f7fb19e24935",
        "cursor": {
          "ref": "60ca2fdc-8fa8-48c4-bfa5-79f8a65d603e",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "af1096c6-e3d6-4efe-923a-719ed93fcc98"
        },
        "item": {
          "id": "3bb47018-d488-407f-a367-f7fb19e24935",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cbd73a1a-ca83-42fe-81d8-6fb46eee5b6a",
          "status": "Created",
          "code": 201,
          "responseTime": 1815,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "2c91d171-7a3a-4acc-a8ea-892d7abeffc0",
        "cursor": {
          "ref": "e0484fbd-dc91-4113-8a58-1f93739ce7ae",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "361f7d5a-09a0-49e7-8646-af18ef8f2ea4"
        },
        "item": {
          "id": "2c91d171-7a3a-4acc-a8ea-892d7abeffc0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1f00ca91-4964-4702-a4b6-2aaa9c1989e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48f184b-22b9-4ba5-9751-818cd6fff179",
        "cursor": {
          "ref": "0c774e76-4345-4520-9e2e-c62e97ca59c5",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a4d96172-2eb1-4f57-84f1-aad41249528c"
        },
        "item": {
          "id": "c48f184b-22b9-4ba5-9751-818cd6fff179",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4508a430-138f-4f1e-9832-ff163602df88",
          "status": "Created",
          "code": 201,
          "responseTime": 4666,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "7f5cd7fa-6708-4d0c-8638-b62a3c6737b0",
        "cursor": {
          "ref": "c21a89f7-3f1f-46f1-82f8-6499eb6a3fa3",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "09dafda3-8a0d-4a81-a8d9-dfa44dbd90c9"
        },
        "item": {
          "id": "7f5cd7fa-6708-4d0c-8638-b62a3c6737b0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "09efb31a-e30c-4201-8a3e-d60371d37e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c76765-cf9a-4167-9184-331f72ad19c3",
        "cursor": {
          "ref": "fa156f5b-9b0d-439b-b9d5-6fc3368d9a15",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3e5714e1-9792-4dd4-ae6d-e2786bebaa73"
        },
        "item": {
          "id": "f1c76765-cf9a-4167-9184-331f72ad19c3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7eb31f3a-ccb8-4068-9e49-344ac9e6e5a8",
          "status": "Created",
          "code": 201,
          "responseTime": 7691,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b806d542-283a-4f4b-8988-2907da288794",
        "cursor": {
          "ref": "c44f6878-884a-48dd-bd15-67cdf1cb23ed",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "37270384-1a3c-49b3-8941-bbc9b0bd568a"
        },
        "item": {
          "id": "b806d542-283a-4f4b-8988-2907da288794",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a336fb38-7334-4d47-893c-bbd235afdfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8cafa4-6189-479b-885b-9d78a8fa7c8e",
        "cursor": {
          "ref": "0e192c8f-05d2-4a26-88c8-300496075306",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8ec002b6-d254-4e42-b384-f8204ab4370c"
        },
        "item": {
          "id": "bc8cafa4-6189-479b-885b-9d78a8fa7c8e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "60a96489-0aa6-4fe2-959f-e6b0e76cf9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15e1449-ed9d-4675-931a-ab38becee7bf",
        "cursor": {
          "ref": "96bb98ca-7c25-4c27-9fe6-9587154cefc3",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fefe1e4c-a2ac-46cb-992f-70a5a007fa1b"
        },
        "item": {
          "id": "a15e1449-ed9d-4675-931a-ab38becee7bf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9f87658b-0c9e-4d7a-a6d0-0b867141424f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc7b306-b6f0-4779-84d4-3b44b90baf91",
        "cursor": {
          "ref": "60e7e1ad-a5e7-4c28-81a4-796453e8c883",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "07e5c6c7-9c5e-4a04-bb34-a9ae383ac9d4"
        },
        "item": {
          "id": "2dc7b306-b6f0-4779-84d4-3b44b90baf91",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "191e96d2-9b45-4350-98c7-4b770ed49373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31a85fe-7805-459e-968f-ad452daf8d7d",
        "cursor": {
          "ref": "c194732c-7c4a-4e61-b6b9-2258efc4a493",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "54bfbbfb-3640-41b4-a2fd-15026b210f36"
        },
        "item": {
          "id": "f31a85fe-7805-459e-968f-ad452daf8d7d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1defff10-6641-49ff-af34-bb44ea4ce108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8478e195-56b7-42b5-9ec6-52be090d36cb",
        "cursor": {
          "ref": "1ff2f83f-9c60-4b60-87a7-d1345c539588",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ba22b2ee-63a7-487c-919b-5bf2ab036f5e"
        },
        "item": {
          "id": "8478e195-56b7-42b5-9ec6-52be090d36cb",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4efa5295-4374-4206-9408-fcb1cd2b8a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1616baa9-49b7-4657-85cf-76a520501dea",
        "cursor": {
          "ref": "88562f3f-41bc-4370-9d8c-82fb992ebcf7",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4afc0860-082c-474c-98f4-38b77c717c78"
        },
        "item": {
          "id": "1616baa9-49b7-4657-85cf-76a520501dea",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7d264fed-4190-4f1a-a332-fbe2d99ffaa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0450f849-3e78-425a-a8ff-72560dc53234",
        "cursor": {
          "ref": "9b70026d-dec5-47a9-9112-da5362c8f6d4",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a9a33e30-b4ff-43de-8d24-f61619f930d6"
        },
        "item": {
          "id": "0450f849-3e78-425a-a8ff-72560dc53234",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b0bb395b-5ca0-4c33-afac-819fc126801d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1f3d18-dced-4246-95bf-e4ef0f7467e4",
        "cursor": {
          "ref": "9673e15c-f3ce-4956-a91e-963c74de3b2c",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bc00eae4-2ead-4549-9a12-09593a08abd1"
        },
        "item": {
          "id": "5e1f3d18-dced-4246-95bf-e4ef0f7467e4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "cade9913-5cd2-4f1a-b741-6e2631a96ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f57dbe4-9654-47b2-b573-4c8896353ac8",
        "cursor": {
          "ref": "6c4c09dd-6872-4cc2-bf81-69e55c4ae541",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5d33be5e-3a32-4082-a897-f62f9b79672f"
        },
        "item": {
          "id": "0f57dbe4-9654-47b2-b573-4c8896353ac8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "88495b13-1944-4d42-adfb-20fbf02b7c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e73614d-4eab-4f51-9fe9-008f7dac7d41",
        "cursor": {
          "ref": "b77dace2-e5c7-49bf-b0c6-b87acd3f5965",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "240e0c83-c512-4eca-be9c-c377b0fb486e"
        },
        "item": {
          "id": "2e73614d-4eab-4f51-9fe9-008f7dac7d41",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "164fe7f7-d9fa-4a5c-b408-bdab3e6942a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9288b281-00a0-4e7c-b4dc-824bdc22073d",
        "cursor": {
          "ref": "7d35b53e-088a-4892-95cd-152086f297d5",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "311a69c4-e412-48f8-890a-940a97f5718d"
        },
        "item": {
          "id": "9288b281-00a0-4e7c-b4dc-824bdc22073d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4b08a2a0-c16d-4853-823a-71530c919dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67d5b51-2cfe-405a-956c-3ac14a8ae47c",
        "cursor": {
          "ref": "b5002fba-e3ee-4825-91cc-afa6a8f330ee",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "200b8c8f-1066-4169-9fd1-5c10b8f84002"
        },
        "item": {
          "id": "d67d5b51-2cfe-405a-956c-3ac14a8ae47c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c71e32a8-5ef6-47b0-8939-a2e8a53d1576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041c8c11-5ccd-4c3f-9e5b-e21863792f5b",
        "cursor": {
          "ref": "2345bf48-bb34-4686-bf03-94aee19e05ae",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f8a11dfa-39b2-48a4-a841-36bfc1e65197"
        },
        "item": {
          "id": "041c8c11-5ccd-4c3f-9e5b-e21863792f5b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c402f06d-9aa5-4f5a-8457-2bc47f62664e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710c2496-73cb-4c5d-bc05-be0dfffcee10",
        "cursor": {
          "ref": "a7b1a2e2-bd8c-4380-88b1-18be6def4fe0",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "826f15cc-2131-4f01-badd-c7048e3b3df1"
        },
        "item": {
          "id": "710c2496-73cb-4c5d-bc05-be0dfffcee10",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "91bdc5c2-8cba-416f-8432-06f1ff327188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0521faae-2ad3-403f-88a7-9074a95c012a",
        "cursor": {
          "ref": "c69c353a-b443-4b7c-bbe2-611099a66ca6",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "97397523-75f8-4fca-91c6-6b45fb0e3c87"
        },
        "item": {
          "id": "0521faae-2ad3-403f-88a7-9074a95c012a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bf97d80f-3b84-43da-9eae-8491b8f06d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22c7d09-0e8c-41a0-aad0-a23ec942a410",
        "cursor": {
          "ref": "01252af9-da20-488b-842f-57c3ba27ee29",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2154c9cd-dc7d-4d8a-8872-d235784f2dba"
        },
        "item": {
          "id": "d22c7d09-0e8c-41a0-aad0-a23ec942a410",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fea35a98-d31f-4470-84a4-48bd02e9410c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b7926c-d94b-48c9-8356-c14f40db91f3",
        "cursor": {
          "ref": "d7ccb3d3-bc8f-4333-86d5-18c3c46d70ea",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3effb597-4309-4e5f-8b40-4566ef5d5c89"
        },
        "item": {
          "id": "86b7926c-d94b-48c9-8356-c14f40db91f3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "54d36d66-e6df-4b9e-9888-6df1e70301a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2bbc044-df25-4ba6-a1ac-a8d98d1fc00a",
        "cursor": {
          "ref": "7d95dcc3-48b9-49ac-b4ce-7755e063c8ca",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9b965973-f918-4057-8e3f-16e29d32e1d3"
        },
        "item": {
          "id": "d2bbc044-df25-4ba6-a1ac-a8d98d1fc00a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "eb1f227c-2e41-4c56-b574-905d012062e5",
          "status": "Created",
          "code": 201,
          "responseTime": 2639,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6a25361b-fc3a-4d57-8dea-fb66543fd051",
        "cursor": {
          "ref": "07a4eb56-48b2-4925-ac2a-1f31f6b84ce8",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e723fd2f-7686-44b5-b08c-10f175874d1a"
        },
        "item": {
          "id": "6a25361b-fc3a-4d57-8dea-fb66543fd051",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "27571d92-727a-4aaf-8da2-0ef63df43efa",
          "status": "Created",
          "code": 201,
          "responseTime": 2398,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "79e90f60-5676-4daa-895a-3c419dbe0376",
        "cursor": {
          "ref": "26d1541f-db9c-4218-9836-2fc0b17552f3",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5ea98391-c3db-4063-be72-6d701ca3be8e"
        },
        "item": {
          "id": "79e90f60-5676-4daa-895a-3c419dbe0376",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "18b03c43-361f-48ea-9c22-0b03809b281d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba34a925-1724-443d-9f2a-fb2fcf12bbb7",
        "cursor": {
          "ref": "fce3d25e-1a6f-4bde-9b7e-63a4dcf14dcb",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "054148ff-f842-4344-972a-ff7eb2548bda"
        },
        "item": {
          "id": "ba34a925-1724-443d-9f2a-fb2fcf12bbb7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0922963d-31fe-42ec-bbd0-8163ac04dd7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e7308d-33c0-406b-bb48-2ffe9e845245",
        "cursor": {
          "ref": "05f11108-81de-4887-9605-6edd22d6d22b",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a1d2064a-d6eb-4992-8f95-4bbe91cb9d13"
        },
        "item": {
          "id": "00e7308d-33c0-406b-bb48-2ffe9e845245",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f8cac66a-e6d9-4f7c-a316-6630c608ac7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468ff61a-b6d8-426a-84c3-7dd0607f9a27",
        "cursor": {
          "ref": "60368301-1ddc-4158-83cb-967c582622e5",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c95c16e9-a401-4233-88ed-037c11116cf3"
        },
        "item": {
          "id": "468ff61a-b6d8-426a-84c3-7dd0607f9a27",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "633660e2-6fe6-4928-a68b-8cd821022135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807bd88c-bddd-4b2f-9183-d94d937a6f19",
        "cursor": {
          "ref": "a94f3d02-2b49-4596-af8e-b6348145450d",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "34fc611f-fb70-44ad-8efc-8c4a1d541897"
        },
        "item": {
          "id": "807bd88c-bddd-4b2f-9183-d94d937a6f19",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4e0de57b-d002-4388-a736-6a622898229f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912fa823-0ac5-41ae-a570-62c5578db84f",
        "cursor": {
          "ref": "3c85a7f6-5beb-4298-bc4d-eb32f75195fe",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f69af7b2-0e44-40c4-803d-f26e3f3fc244"
        },
        "item": {
          "id": "912fa823-0ac5-41ae-a570-62c5578db84f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5b53be23-b06b-4f47-9996-d7ae8535b465",
          "status": "Created",
          "code": 201,
          "responseTime": 2629,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "418f769b-bc32-4660-a5d3-ee39421131b6",
        "cursor": {
          "ref": "0a0f6339-7c81-4f24-87c9-249f420203f4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "99a60e6f-c0d6-4a89-a0cf-c93519f633ac"
        },
        "item": {
          "id": "418f769b-bc32-4660-a5d3-ee39421131b6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "97de4899-8299-4421-a645-f2b4f3b1fbad",
          "status": "Created",
          "code": 201,
          "responseTime": 2549,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "0eb85c5d-196d-48c9-89cc-252852b2121e",
        "cursor": {
          "ref": "6171f471-2670-4cea-b57c-acc6e3a766a7",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ade81cc7-1c2e-4b55-9358-f7e3ccf5f5a9"
        },
        "item": {
          "id": "0eb85c5d-196d-48c9-89cc-252852b2121e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bff7524e-626b-43f9-86fd-db07bd25c3d8",
          "status": "Created",
          "code": 201,
          "responseTime": 2581,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "21c5901a-a36a-4a79-9a73-b0dc67f2198d",
        "cursor": {
          "ref": "a369d3eb-4670-4deb-a922-ded4b7a1d5d6",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "463c2931-9953-4d74-8dd5-a421e408d4dc"
        },
        "item": {
          "id": "21c5901a-a36a-4a79-9a73-b0dc67f2198d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "89437d7b-46d4-453e-b266-d014f7b2e87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160ca105-668a-45b4-ab2f-27cb88233e3e",
        "cursor": {
          "ref": "5b496c34-028d-4bd3-a739-d192611ba416",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9e186f27-6218-4fcb-8407-700e79c5aab5"
        },
        "item": {
          "id": "160ca105-668a-45b4-ab2f-27cb88233e3e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "521f377b-cb8e-49bf-a0d5-7718e955c333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebb68c0-656e-485f-98ec-34fd9b5846e8",
        "cursor": {
          "ref": "541a655b-d669-4bb3-b95b-b1106dc3453d",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2c172ff3-5a14-46b7-921e-3822a8513dfa"
        },
        "item": {
          "id": "5ebb68c0-656e-485f-98ec-34fd9b5846e8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "474567a6-cbe3-4c82-8ca7-329e792b640c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f185f6d-f051-434b-ae75-21c911ee5318",
        "cursor": {
          "ref": "1fe52029-63e3-40bf-bbc4-ecf372cb7f3a",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7232a383-dcea-48ba-b4d4-2f50f73afb49"
        },
        "item": {
          "id": "7f185f6d-f051-434b-ae75-21c911ee5318",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5b96d43b-6bf1-496a-9710-bc8cfe42042e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ef6ef9-3cee-4d50-b401-1385ce3eeb4f",
        "cursor": {
          "ref": "17122517-b329-46d6-9b07-3a26b8174a27",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cbeb97ad-52f5-493c-9a73-92ffc548ca2a"
        },
        "item": {
          "id": "e4ef6ef9-3cee-4d50-b401-1385ce3eeb4f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cabf9fd9-9f9b-405b-8377-98a538427a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ea6a00-60d6-40dc-b7e2-dafc6c915390",
        "cursor": {
          "ref": "56130d27-7406-467d-96c0-f4d097effd31",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cbfc53e5-9dc5-4ca7-8c6a-01492a8339e8"
        },
        "item": {
          "id": "b9ea6a00-60d6-40dc-b7e2-dafc6c915390",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "800d4401-a821-4316-9ace-141f92637850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a10219-9781-409a-8354-b64fac8940f3",
        "cursor": {
          "ref": "270bdce6-2f33-4fb5-8c2e-e1b626f8a879",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "576fa7ff-8e95-4a78-bd30-ca531c99819a"
        },
        "item": {
          "id": "34a10219-9781-409a-8354-b64fac8940f3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2f17d486-0af6-4d2b-9150-9239442fb39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385bd11d-f5c1-4ee1-889f-e8374e3fed94",
        "cursor": {
          "ref": "8de65888-75ce-4b2f-9b7a-d2ed6a8546e7",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "26bccbc4-133a-47eb-8547-3e01553b62f7"
        },
        "item": {
          "id": "385bd11d-f5c1-4ee1-889f-e8374e3fed94",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "546f971b-0f23-407c-951f-a46a7929b2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e7b51e-6801-49d9-8f3d-9001acc705a3",
        "cursor": {
          "ref": "7ae9019c-5fb6-46f7-9a4f-48f31e4958b4",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9bb22b60-9be0-4f8b-a32c-cb208774dce4"
        },
        "item": {
          "id": "30e7b51e-6801-49d9-8f3d-9001acc705a3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "32f73bee-2af7-4a6e-8b75-d39c4b895575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10db1ef-b1f1-459e-b09e-9f5feec58345",
        "cursor": {
          "ref": "f83ee441-414c-4c12-a2e4-5502c4787592",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a012fcbb-8fd6-4d0f-836b-9e69cb7a9fa7"
        },
        "item": {
          "id": "f10db1ef-b1f1-459e-b09e-9f5feec58345",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7ad3cebd-ca65-47b8-aca5-75738eeb8154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e296e6af-3c57-4cc6-a63c-fc8472b3d1f2",
        "cursor": {
          "ref": "e3fb11e5-27ed-4d30-adf2-06680a7a5cac",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a1f243a5-d729-49d1-9e1b-e123c2f41a6f"
        },
        "item": {
          "id": "e296e6af-3c57-4cc6-a63c-fc8472b3d1f2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7c7d8a46-38a5-4489-9fbd-1b52b7c288a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2d5ab9-8017-4c7c-8991-a12cd8ac5797",
        "cursor": {
          "ref": "eea84a90-af5f-47cf-afa4-ee855e2bd7d5",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a362a6be-4ba8-40ec-b829-7613ac1063e3"
        },
        "item": {
          "id": "dc2d5ab9-8017-4c7c-8991-a12cd8ac5797",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2a710b8d-73bd-439b-86e6-93649f7ad5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6e5d9f-e6dc-44c4-b488-1a04ba9ce1ef",
        "cursor": {
          "ref": "e2d79e15-a1e8-45bb-9802-e868babd17a2",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6be8eece-8f3c-429d-89eb-93d0555df44e"
        },
        "item": {
          "id": "9c6e5d9f-e6dc-44c4-b488-1a04ba9ce1ef",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "05d1f42c-c95d-4fb3-8c10-e43422287fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 741,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40371cf-aea8-40b7-ab9b-63d9e08a0a9c",
        "cursor": {
          "ref": "8b13ec9c-ac8c-4dec-b2f2-95d2d2de19bd",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0888efd2-2962-4f9f-8f3a-2c80c5642d93"
        },
        "item": {
          "id": "c40371cf-aea8-40b7-ab9b-63d9e08a0a9c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2917079d-1e8b-49d9-bddb-912443866393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68cc3f55-dc72-4ca4-b91c-9e0b91b02ad3",
        "cursor": {
          "ref": "d94a6783-5fa6-4729-b8ed-a8a204b531a8",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7d3e355c-6806-48b1-89f8-e1d3ad46bba5"
        },
        "item": {
          "id": "68cc3f55-dc72-4ca4-b91c-9e0b91b02ad3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "48630ce0-1b0c-4ab4-8202-27ee85964314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d81b5f0-3ae2-49f4-b3d4-a465b926c121",
        "cursor": {
          "ref": "bc84bb97-d725-4b46-8a83-b2b9b09a94a3",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "aa77f1c5-e43f-408a-8a82-3268859fb8d7"
        },
        "item": {
          "id": "5d81b5f0-3ae2-49f4-b3d4-a465b926c121",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8fb978cd-d243-4e4f-8916-3e6465b5fc6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1375b61-fc78-4d2d-af21-b8430f6fc9d5",
        "cursor": {
          "ref": "fde0f0a3-c471-4fc5-b1f1-ee89b7ced962",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7594dda8-ed92-42fb-93fa-484b064a3d42"
        },
        "item": {
          "id": "e1375b61-fc78-4d2d-af21-b8430f6fc9d5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3beeaab4-d86e-4210-bd51-7fbb674b4de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98fe311-77f3-48e9-8737-bb5f9296ad56",
        "cursor": {
          "ref": "b2d5dc55-f921-4c76-99bc-d977cb451cde",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "84cce932-d0f4-48a1-84bb-6d781dbbaa11"
        },
        "item": {
          "id": "c98fe311-77f3-48e9-8737-bb5f9296ad56",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c2ff8f9a-398e-4648-9a88-c40edadd8253",
          "status": "Created",
          "code": 201,
          "responseTime": 1985,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "495f12f6-5118-48ca-804d-2a66b3c1c8e8",
        "cursor": {
          "ref": "df7cddb5-682c-4bf5-89c3-83c65699915f",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "be931aee-4ccf-4b08-820b-68b5982bf661"
        },
        "item": {
          "id": "495f12f6-5118-48ca-804d-2a66b3c1c8e8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e1d16e98-fcb2-4772-a7c1-a0b36d976845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b752fa-34f1-4d1f-a910-ff6e12ceb5fc",
        "cursor": {
          "ref": "26dd9120-4c8f-4c9a-b2f5-5eea9deff923",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fbef1bc4-d7dd-4b70-bcbd-2b2f1b839afc"
        },
        "item": {
          "id": "f2b752fa-34f1-4d1f-a910-ff6e12ceb5fc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bfd97a44-bf00-4a3b-a13a-ed9db5e87b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4351fd4-c0cb-4f98-93b0-58d4e47026c4",
        "cursor": {
          "ref": "228a476e-1d74-4aff-becc-443426fba870",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "18d25a5e-ddfb-411e-8707-d82f1b46d800"
        },
        "item": {
          "id": "b4351fd4-c0cb-4f98-93b0-58d4e47026c4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "83f937df-f922-4a65-9a1d-5f97c8d98643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94e09f9-7c56-43f3-ad2a-6c30043fdf39",
        "cursor": {
          "ref": "bd71804e-7fb1-4784-9e41-f6b9c398c28c",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5ee7c921-6052-41f0-8707-165cb0db3d94"
        },
        "item": {
          "id": "b94e09f9-7c56-43f3-ad2a-6c30043fdf39",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6ce2ddea-295c-4e45-aaf8-774da52c87d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6b8404-8463-407f-b570-c5f83beb1373",
        "cursor": {
          "ref": "487e7b00-e330-4559-81a1-f66c495019ac",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "53144c35-594b-4b1e-bcb9-b5a3555abd85"
        },
        "item": {
          "id": "5d6b8404-8463-407f-b570-c5f83beb1373",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "421bae51-20b2-485b-a905-24d2d331a6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9df3bd4-7e5f-4dbe-a4b3-190cfe8bc5c0",
        "cursor": {
          "ref": "8ce04855-1c26-4b72-816c-49f190778180",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7ffc506c-0e27-4814-9a2c-1ec255c61cd3"
        },
        "item": {
          "id": "f9df3bd4-7e5f-4dbe-a4b3-190cfe8bc5c0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9c6f0d7c-d54f-477c-971b-46da1b504817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7258eb8-6967-4ffa-9ff0-f439a9503c83",
        "cursor": {
          "ref": "b4e76649-472b-4c1c-bba4-7d5ee3061093",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9c2eca82-5e79-4ccb-91b0-18125232db88"
        },
        "item": {
          "id": "a7258eb8-6967-4ffa-9ff0-f439a9503c83",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "184b54f2-3679-4952-b39d-0b0329e88adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a207b65-13f5-4b03-809c-fb59308d5d98",
        "cursor": {
          "ref": "1d5ca51e-5684-4320-95d1-aa3f33fe356b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e41461ee-3062-45f1-9dba-29ee7da52da8"
        },
        "item": {
          "id": "2a207b65-13f5-4b03-809c-fb59308d5d98",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b684c36c-7c6d-45e4-93eb-56217fcec4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c8a559e-5cff-47f0-b114-5ebffbb9182c",
        "cursor": {
          "ref": "25ba973d-890a-4f22-a231-88d516af99b3",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "aac0ebc5-bfc8-49f2-88d6-232d7e78f4a7"
        },
        "item": {
          "id": "6c8a559e-5cff-47f0-b114-5ebffbb9182c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c360d1a9-8630-4bd2-859c-68138cf316c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66324bb0-b987-4d79-ac64-e7804580a227",
        "cursor": {
          "ref": "e3ada06c-6d5b-48a8-a783-a2377aac8b44",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5b165e0d-aabf-4424-8777-d2a0a9c0c8dc"
        },
        "item": {
          "id": "66324bb0-b987-4d79-ac64-e7804580a227",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6d1a98c2-4713-4c4d-9d37-84b98bd9c14d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f48d95d-cd12-41c8-8c31-2201765f4606",
        "cursor": {
          "ref": "c4f029f6-517a-4ea3-95c9-8da0bc86b679",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "78b378f9-5eb6-4a67-a99f-95920a21e8e9"
        },
        "item": {
          "id": "1f48d95d-cd12-41c8-8c31-2201765f4606",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "07564555-3366-43d6-b494-7e26eb2a2e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a3fa08-834c-47ea-969f-dee170f74587",
        "cursor": {
          "ref": "ceed37b9-f754-4ebd-bb53-01b306864a5e",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "10574a61-ad89-4de0-b5f3-455f5ea253e9"
        },
        "item": {
          "id": "41a3fa08-834c-47ea-969f-dee170f74587",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bfae80d4-f991-4912-926d-6492bdf5b026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ef7028-e616-4150-bb95-0944866dc95c",
        "cursor": {
          "ref": "1bbde3ce-2add-430c-bde8-0a3c5fbe0b89",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c6228ff5-5248-466a-9be7-4d43aac8f565"
        },
        "item": {
          "id": "b5ef7028-e616-4150-bb95-0944866dc95c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f2c23b3e-0227-4c7c-b8dc-6ec0fc3874f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef67f97c-8c71-47e6-9683-76de9712aea6",
        "cursor": {
          "ref": "b23efa96-a9b7-4d85-9907-c29c00011310",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "61eb929b-e55d-4f83-86c2-85463dcdf641"
        },
        "item": {
          "id": "ef67f97c-8c71-47e6-9683-76de9712aea6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e5c133b4-a508-48b1-958b-3c246fa5a426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7207c572-654b-45d1-b1cc-d7039216dd26",
        "cursor": {
          "ref": "96db3259-aa00-4445-86d9-f6d59c03342c",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "67375b2b-6f41-4328-bf78-8857d815577a"
        },
        "item": {
          "id": "7207c572-654b-45d1-b1cc-d7039216dd26",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c8e3c521-f590-4615-aab0-739bb568a0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac93ab2-2675-4c6c-8297-ef5bd640fe91",
        "cursor": {
          "ref": "d1703b85-280d-4b5b-bf84-7c6191211fd0",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e8f31b0d-100f-4dde-a0d3-5b12f553e573"
        },
        "item": {
          "id": "fac93ab2-2675-4c6c-8297-ef5bd640fe91",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2185b1de-ac25-4f99-8651-2ffba7486aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6496e8-ef90-487b-8406-28c041e53add",
        "cursor": {
          "ref": "f1b3754e-ae72-4ac9-9fb0-6bf01d9b0102",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "de8f264e-3e4b-47c5-b706-d1c1ae564a81"
        },
        "item": {
          "id": "fb6496e8-ef90-487b-8406-28c041e53add",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c35d1094-2cdc-485a-b5ae-6c382c0adce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e105102e-2b91-4c76-9e93-34c5fa27193b",
        "cursor": {
          "ref": "3dfc0bab-23e5-4f93-9e79-aa33d6ddf7c1",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a3c4294a-13e0-44d3-892d-9de42b45854b"
        },
        "item": {
          "id": "e105102e-2b91-4c76-9e93-34c5fa27193b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4f623d30-47e4-4e15-a947-503d9d8042d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c6830a-9146-4196-8218-d51264a20b4a",
        "cursor": {
          "ref": "fc34a5f6-eec6-45cf-af96-4ccbb2da00f2",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ebf59c45-e1ca-4486-a6bf-40ad5db1e230"
        },
        "item": {
          "id": "28c6830a-9146-4196-8218-d51264a20b4a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9c5cf9e9-7500-40ca-ab9c-e5e7c058f434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1a5a1b-b8c7-4128-bf43-e3087def7aa9",
        "cursor": {
          "ref": "16ac6666-4343-4f44-82d5-bddd2897c9fb",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2028389c-17c5-4ae8-8319-a587a0f302eb"
        },
        "item": {
          "id": "be1a5a1b-b8c7-4128-bf43-e3087def7aa9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a0239df3-138f-43ad-9f24-6b22f5f1fb67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144367a5-7bf9-4b2a-a56d-fe279eebe7fe",
        "cursor": {
          "ref": "b23d6316-f805-42fb-a2b7-35cdd7349aab",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "cf5f5a78-88b9-49dd-b317-78aa78a82ae9"
        },
        "item": {
          "id": "144367a5-7bf9-4b2a-a56d-fe279eebe7fe",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "849b08db-5f54-46cf-8972-926b4992ba0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36eafc3b-377f-44dd-9124-38dc580c68e1",
        "cursor": {
          "ref": "77273709-8c4b-412d-92da-4f62ee18515f",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1b38d8da-b08c-499f-9548-21486006b559"
        },
        "item": {
          "id": "36eafc3b-377f-44dd-9124-38dc580c68e1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "09e7d0a7-19ba-40cc-ad78-d79a72706829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70c9b7c-1d5b-4f3b-aa39-b27213d41b46",
        "cursor": {
          "ref": "b8c4d1b7-3a81-4365-baff-7598f2e92eff",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "160c7469-1bde-45be-aaf1-ce704ce9315d"
        },
        "item": {
          "id": "f70c9b7c-1d5b-4f3b-aa39-b27213d41b46",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "671ba423-5858-4689-b840-865005403495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760122dc-5053-4cb6-a1f8-4df8720a7ded",
        "cursor": {
          "ref": "dc0ea5f3-51fb-45b4-a56e-53813d5571cb",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "19dcf1a1-f446-416a-8ec4-412e257ae346"
        },
        "item": {
          "id": "760122dc-5053-4cb6-a1f8-4df8720a7ded",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "912bbbc0-693e-4954-a63f-9d7e10d4e714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b763b50d-feed-480c-b82d-8e8b63b7b099",
        "cursor": {
          "ref": "bbe9ef26-1691-402f-947e-b3c9562db65e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "290266ac-d373-4f68-9877-f2890a6b24cb"
        },
        "item": {
          "id": "b763b50d-feed-480c-b82d-8e8b63b7b099",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "21a5f703-aa8c-4308-8ae5-1a7b2e8b85ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5d5180-b07b-4a1e-84a8-176152ed3e27",
        "cursor": {
          "ref": "f90af5bc-2a37-4d61-8110-6308b3581218",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "705a96f8-9d0f-4e7e-b148-2e2826e8ccfa"
        },
        "item": {
          "id": "6f5d5180-b07b-4a1e-84a8-176152ed3e27",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "93f724ac-b7a3-403a-8b65-a73a1f2d0be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aede8982-017f-401a-bf52-301a545e7480",
        "cursor": {
          "ref": "31f08c98-c552-4918-86da-1b8bc67f36c5",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "76f0d97d-46bc-4d76-b729-0a5a83848fd9"
        },
        "item": {
          "id": "aede8982-017f-401a-bf52-301a545e7480",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ec473ff8-479c-4ed8-a919-7e66c38b80b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488265de-bb84-4877-96f3-ad0c62efa9b0",
        "cursor": {
          "ref": "054081be-2427-43d1-85a9-3b241c07e016",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "13264421-2e3b-4574-b5f4-e5946dc7a840"
        },
        "item": {
          "id": "488265de-bb84-4877-96f3-ad0c62efa9b0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ac17ba03-ae36-4927-8742-6a079ef22ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4470ce2b-2b61-4151-a9ba-c9ea76b8e22d",
        "cursor": {
          "ref": "9005675a-1f3e-4860-a379-99b74bbb5b53",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "42413524-d1d5-461a-a5f8-2dc4b49282a2"
        },
        "item": {
          "id": "4470ce2b-2b61-4151-a9ba-c9ea76b8e22d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c4d4f6b1-7a10-4732-a909-5ec6085da9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772b35b6-5801-47d4-b993-24cccfa628b9",
        "cursor": {
          "ref": "1ab9e688-2055-4297-a7a7-81a99c40c06e",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c6c570a8-0377-49ab-8bf1-d9405d11bff6"
        },
        "item": {
          "id": "772b35b6-5801-47d4-b993-24cccfa628b9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "280a87c7-4ca6-4900-962c-684a8dfd9b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f974810-092f-4e14-aa83-9454b5e55199",
        "cursor": {
          "ref": "1153793b-12ad-43b4-bb74-07d1859d3980",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0e2e8c56-4bdf-4e4a-a6ca-70273c678af8"
        },
        "item": {
          "id": "4f974810-092f-4e14-aa83-9454b5e55199",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "528f9298-7651-4583-a526-c1b4fe36750c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "296716bb-15e8-4902-8440-ec78cea92643",
        "cursor": {
          "ref": "04e79010-20bf-4227-99bd-4e3d7010f7ed",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5888da3c-ae74-42ad-a2aa-59f07e044901"
        },
        "item": {
          "id": "296716bb-15e8-4902-8440-ec78cea92643",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d41d5ce2-d067-4112-bc56-e02a78b67f99",
          "status": "Created",
          "code": 201,
          "responseTime": 1993,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "a03bf267-4037-4f90-8703-3bf2c5ef16f3",
        "cursor": {
          "ref": "207cfc22-327e-4010-8819-7418ec4c7458",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "aadd10cb-e2f1-4ff3-816c-44467febacc0"
        },
        "item": {
          "id": "a03bf267-4037-4f90-8703-3bf2c5ef16f3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9583fafc-7262-4761-b4ae-b5b9018b32c6",
          "status": "Created",
          "code": 201,
          "responseTime": 3350,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f782662-2908-4af7-b573-d719dd0857ee",
        "cursor": {
          "ref": "9a11be56-c2b5-4d2a-a2a2-9f154cbc90ed",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "03b5ab34-6ff5-433f-b9d9-309521f1f56b"
        },
        "item": {
          "id": "2f782662-2908-4af7-b573-d719dd0857ee",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "895badb1-2766-4dd7-b919-3286a8357389",
          "status": "Created",
          "code": 201,
          "responseTime": 2289,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ba7e3d-faf6-4297-be75-3baff0e3195b",
        "cursor": {
          "ref": "370ebadf-2b06-40e2-8d00-22138cff0d7a",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f8ca8f0e-7db9-4a93-9262-f5d6c07059af"
        },
        "item": {
          "id": "a3ba7e3d-faf6-4297-be75-3baff0e3195b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "97f49c79-767d-4391-969a-a7a8fbd1d164",
          "status": "Created",
          "code": 201,
          "responseTime": 2912,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "72665d79-63c2-46a5-8cf0-90a2d8d44fc9",
        "cursor": {
          "ref": "73ec2c3f-0d71-49b6-9051-348178bab5c2",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e448376e-0a80-4639-9bd3-dd9a92d915ff"
        },
        "item": {
          "id": "72665d79-63c2-46a5-8cf0-90a2d8d44fc9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "80f512f6-4be1-474e-a3e3-88acdd1d760d",
          "status": "Created",
          "code": 201,
          "responseTime": 2337,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-08T00:44:12Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-08T00:44:12Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "09e38659-e9be-416e-b106-080615679a16",
        "cursor": {
          "ref": "0a4b5aa7-2c23-485c-babc-7ecb5d7e9046",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "70da9ed1-e155-4270-b1d8-1ab87697b7ac"
        },
        "item": {
          "id": "09e38659-e9be-416e-b106-080615679a16",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ca96d233-ae68-487e-9b16-f93cc8b5e289",
          "status": "Created",
          "code": 201,
          "responseTime": 2622,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "3202e57e-805f-4a3a-8e9e-b44a20f7e4c8",
        "cursor": {
          "ref": "3c47a163-00f9-4fb6-874c-1b79377b8214",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "613a728a-8434-4454-990b-c72adf426389"
        },
        "item": {
          "id": "3202e57e-805f-4a3a-8e9e-b44a20f7e4c8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6a58e3f0-9fb0-48c3-b8c1-f6ad9d0901d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3202e57e-805f-4a3a-8e9e-b44a20f7e4c8",
        "cursor": {
          "ref": "3c47a163-00f9-4fb6-874c-1b79377b8214",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "613a728a-8434-4454-990b-c72adf426389"
        },
        "item": {
          "id": "3202e57e-805f-4a3a-8e9e-b44a20f7e4c8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6a58e3f0-9fb0-48c3-b8c1-f6ad9d0901d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68085215-3a1d-45d0-8fc2-7cc89b626cda",
        "cursor": {
          "ref": "03c08079-45c8-45c5-82f7-573cbbee856c",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b8abac7d-2526-4745-868c-c2660241e983"
        },
        "item": {
          "id": "68085215-3a1d-45d0-8fc2-7cc89b626cda",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "569c8d4c-e2ba-4ef7-8f35-3d67b22dab77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abf186d-2847-46b8-9bdb-bbf6521e2602",
        "cursor": {
          "ref": "dbe38a65-d41b-43ca-9d52-d0bae2491a68",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "14b18dc9-704e-4368-9992-d529d8f6e1c6"
        },
        "item": {
          "id": "0abf186d-2847-46b8-9bdb-bbf6521e2602",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "99f4fc84-1ce0-4aa7-a382-e6c7d829410b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9eaaecb-a831-41b4-b01a-d65d96538336",
        "cursor": {
          "ref": "c528e1dd-1b8a-4ebb-906c-efa7fa97be23",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d956a8ba-7809-4057-b4b9-3a1e1e76dde8"
        },
        "item": {
          "id": "b9eaaecb-a831-41b4-b01a-d65d96538336",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "394ce697-82b0-42a3-a547-9328e1b04d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298177ed-4c53-4230-b8d1-bf79464318fb",
        "cursor": {
          "ref": "cc659f98-42ec-4ef7-bf30-036e34dc1214",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a5923677-f88b-4a84-96b4-772c9b62e47f"
        },
        "item": {
          "id": "298177ed-4c53-4230-b8d1-bf79464318fb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2553c84d-b631-4a5a-b340-39a9ab030e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c075ba8-48c0-49cd-88dc-7d12910c3420",
        "cursor": {
          "ref": "de7e4031-806d-48f5-9b04-7f04b0905985",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f3b606cb-a7e3-47ba-8780-663071b25db1"
        },
        "item": {
          "id": "2c075ba8-48c0-49cd-88dc-7d12910c3420",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3f8d5fbc-1440-47a5-9dc6-88a936ffac9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb388a3-f108-4da2-a716-1a3cb8d7638f",
        "cursor": {
          "ref": "df82f0c8-e291-4b61-bdbc-55050b5dc1b7",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ca0c2a89-74ef-4460-be3d-ab6f49982fe3"
        },
        "item": {
          "id": "2fb388a3-f108-4da2-a716-1a3cb8d7638f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7f216b38-fa40-4535-91a6-964fe07e3f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0582e5dd-2aa2-4db1-92e7-d865078783ff",
        "cursor": {
          "ref": "9a108bc7-fa3f-440b-8a47-8a89d937e51f",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "74317523-03fb-438d-b7f5-552f9b6db5f4"
        },
        "item": {
          "id": "0582e5dd-2aa2-4db1-92e7-d865078783ff",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "182d7ba9-9075-4e09-948c-239546ecd718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f30ae0-3a16-4e0b-b5a0-801df1ef2079",
        "cursor": {
          "ref": "6eb1b56e-b818-4a9b-b590-2c33e8a65ce0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2a76746a-4999-4ef0-98be-094539130a62"
        },
        "item": {
          "id": "09f30ae0-3a16-4e0b-b5a0-801df1ef2079",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e1b7038f-9754-4b37-9fa1-5403c733d98d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8380885-3228-437d-ae54-58118b697492",
        "cursor": {
          "ref": "9580cc31-31f2-4ac8-92f8-0c067841f9b4",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0e1fc0a7-8716-4ed6-bf10-facd4ed670e7"
        },
        "item": {
          "id": "c8380885-3228-437d-ae54-58118b697492",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "85eee10c-aed5-44c5-aa4b-d45c25438800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c1f8b6-7916-4c01-a3c3-1f3c9e6cd178",
        "cursor": {
          "ref": "3d5afdc9-bc69-484a-a616-cc08bda5aef4",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b8a7fb08-fdec-4605-899d-9cc988b87391"
        },
        "item": {
          "id": "e2c1f8b6-7916-4c01-a3c3-1f3c9e6cd178",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "29271c6c-be04-4d65-ab24-08b3e609d155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa1ff36-d7ac-4d25-bbc7-313f15b4ad28",
        "cursor": {
          "ref": "340b91d8-46bf-4c8c-a4a4-72480be6abf7",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3dc04c60-fad6-4b16-b4f8-fa669e089aae"
        },
        "item": {
          "id": "aaa1ff36-d7ac-4d25-bbc7-313f15b4ad28",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "30d901f7-5329-40c8-a912-2dc271a03c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbff74ca-6300-44ae-a8fe-b11f679d0e03",
        "cursor": {
          "ref": "e769f257-549e-4cbb-ae7a-399f88185bc2",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "eb851811-5e86-46e6-a181-d0f7d3c37055"
        },
        "item": {
          "id": "dbff74ca-6300-44ae-a8fe-b11f679d0e03",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6e8795e7-1f0a-4b93-8898-eda94a23169f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1f0b05-a94d-42e0-b828-6f965a53dd60",
        "cursor": {
          "ref": "9f21f955-c694-4467-9910-d4b44d0440fe",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "df928b04-8f76-41d2-9315-6b905ca731c5"
        },
        "item": {
          "id": "8f1f0b05-a94d-42e0-b828-6f965a53dd60",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3e449bd9-38e7-4d3a-94a2-45635f34f6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c80a4d-14ff-47ef-a2cf-4a7e12466651",
        "cursor": {
          "ref": "12575ba6-881c-4218-85c6-8e108043dc62",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7980c733-5650-44a6-938f-cc4f69b2a056"
        },
        "item": {
          "id": "d4c80a4d-14ff-47ef-a2cf-4a7e12466651",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4a61d77b-a9c8-4f9a-bed7-8844f9960dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a66cf5e-debb-4959-85d8-48bdf0f89149",
        "cursor": {
          "ref": "5f85adef-5265-491c-91c6-8d34c3a5e7b6",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fc38dfcd-f1c8-4839-8939-6ca9aa69a80a"
        },
        "item": {
          "id": "9a66cf5e-debb-4959-85d8-48bdf0f89149",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "301494ab-b2eb-4235-8364-02431fe15f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38882bfa-6189-4968-8574-24d6551762f8",
        "cursor": {
          "ref": "8c508652-7003-46e0-b42e-82157fdeab9a",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "017590f0-b5a1-4220-ae45-c522fbad2603"
        },
        "item": {
          "id": "38882bfa-6189-4968-8574-24d6551762f8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "18b5d659-e611-441a-813a-71e06422735b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e35e74-8381-46a1-8314-1b7709d09d8b",
        "cursor": {
          "ref": "c43cf13c-2ce4-4bf8-a238-2f3ab0a6a99d",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "274bdb57-77d5-4083-82cf-2e7b7ac0e566"
        },
        "item": {
          "id": "31e35e74-8381-46a1-8314-1b7709d09d8b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "468f7330-0780-4c1f-82d0-92c0ea9b2798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567f65a7-0169-427b-b2f9-996e10b5ecd9",
        "cursor": {
          "ref": "566f85eb-cf19-416f-85be-dcafc2ee4c1a",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0999dec1-15e2-46e6-acb1-787992dced49"
        },
        "item": {
          "id": "567f65a7-0169-427b-b2f9-996e10b5ecd9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9ab63611-eda7-4d1e-acfa-4d614d41178e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2646cf02-f7e0-465a-ab3b-257704ffc0d9",
        "cursor": {
          "ref": "ec4e4e1f-4c5a-413c-bcbb-8fb51444bf49",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "25ad621c-07db-432c-b2b4-607c33611226"
        },
        "item": {
          "id": "2646cf02-f7e0-465a-ab3b-257704ffc0d9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4125049f-3487-4b67-9faa-43c9b90fbcad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bab5aa1-11f3-4e89-bc65-142db2068f71",
        "cursor": {
          "ref": "7b73c4f3-c947-406f-a3fa-462bf306e57a",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8afc973b-2791-421d-8ba4-c36ca3287c90"
        },
        "item": {
          "id": "0bab5aa1-11f3-4e89-bc65-142db2068f71",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "849f1035-27fa-4d17-afd8-b43fc7d34c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43ca055-696e-47fc-8341-e7f250fecce4",
        "cursor": {
          "ref": "80b136ef-86c4-4dd2-9e2e-9be7f34ad232",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f419f0b1-2db3-4b15-af70-9c9582070463"
        },
        "item": {
          "id": "e43ca055-696e-47fc-8341-e7f250fecce4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "05475cb8-ba5a-4d7d-a91a-e45022ac1ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23960bf-920c-459d-a864-2398d3d9432e",
        "cursor": {
          "ref": "55851c50-2ba8-4d16-831e-13ec5d47e817",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "aeb71beb-bb6b-4f96-8b29-483ae6ae7e86"
        },
        "item": {
          "id": "d23960bf-920c-459d-a864-2398d3d9432e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b5f61ba9-da59-4adb-bb04-8df6159b2c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6613f8-65e1-4610-a001-532b6fcb3de6",
        "cursor": {
          "ref": "783bcebc-dd57-42ba-88c5-5c65549b3f59",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7f823028-856d-4183-9949-e2f84bdfac2a"
        },
        "item": {
          "id": "ba6613f8-65e1-4610-a001-532b6fcb3de6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bf01f9b6-627c-4813-a61d-b1e70f519bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8d396e-ca5d-471b-9b57-33da1c58dc92",
        "cursor": {
          "ref": "2c33350c-b7cb-46f9-bbcb-9c0921b99f28",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2e450f6d-85d1-4dde-87ea-938bf8b3ef72"
        },
        "item": {
          "id": "ba8d396e-ca5d-471b-9b57-33da1c58dc92",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5481a04f-da62-4ba2-9a4d-a5d29dfe4d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9e7dc9-262c-46d3-bb3c-7dd1207328ba",
        "cursor": {
          "ref": "b9f8e071-7b40-4973-bb6e-79bb2f6ddc61",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e268bf89-c6d0-48ac-bfd6-44b30f9b7c61"
        },
        "item": {
          "id": "9a9e7dc9-262c-46d3-bb3c-7dd1207328ba",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "06959531-a7fd-4da1-879b-643d2eddb41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e7dd11-18c7-483d-9479-3dc74c34086c",
        "cursor": {
          "ref": "8b5fa601-5888-4c3b-b524-3273df93b1a7",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3b05d417-3ae1-4daf-9342-917006bf93d1"
        },
        "item": {
          "id": "e0e7dd11-18c7-483d-9479-3dc74c34086c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2ae75223-4bd7-4cbb-a585-d8183e9ee5cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b01891-c882-429b-be5d-b556ec4ae24e",
        "cursor": {
          "ref": "6b718499-348d-40b8-8f84-6609b5960595",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "60814415-cd79-44a9-89cc-41c69af6b7cf"
        },
        "item": {
          "id": "87b01891-c882-429b-be5d-b556ec4ae24e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ada48654-1e33-424b-afe7-79d45322c23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4583a244-979a-45a2-b029-99266b52d29b",
        "cursor": {
          "ref": "f477624a-60f1-4df5-a83e-fcf11dd9cdb4",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "932e102e-07a3-45b1-812b-6f3f01d24f9c"
        },
        "item": {
          "id": "4583a244-979a-45a2-b029-99266b52d29b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0bf378bf-1e98-4ccd-8d8c-b16e2827cccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0135a9-3963-495e-8b33-cbc22225063f",
        "cursor": {
          "ref": "c73609fa-a95b-4dc2-96b1-8dd3186052e1",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6ae9e7c7-f329-4cee-9753-ffd5f51fed08"
        },
        "item": {
          "id": "9a0135a9-3963-495e-8b33-cbc22225063f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f2001b06-8d48-4a67-85e7-46c2712e9663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7834b1-ea21-4d89-bb44-3c457e8c37c3",
        "cursor": {
          "ref": "699da18d-af64-42d5-8cc3-78ed6c94b4e0",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a53d60bb-5fe4-41b2-9182-41b196fb2243"
        },
        "item": {
          "id": "8a7834b1-ea21-4d89-bb44-3c457e8c37c3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "08b54d83-2765-4374-8a51-bcc9376cc31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebd2d8c-85a5-4cd5-9631-c3707fb88e7e",
        "cursor": {
          "ref": "306383db-79f3-4e56-ab33-16ac39efcc58",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "570c2281-f89d-4db0-98fd-d09c6637a4c2"
        },
        "item": {
          "id": "aebd2d8c-85a5-4cd5-9631-c3707fb88e7e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e8ea45d2-f675-4c67-ad28-1385400496ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37322528-39e2-4895-9e71-7fd3ab29ea5a",
        "cursor": {
          "ref": "46f20178-136d-4d6b-83a2-7cc46d2365f8",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "57835ff2-6674-4c7e-9c8a-eb5067eb0512"
        },
        "item": {
          "id": "37322528-39e2-4895-9e71-7fd3ab29ea5a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f345c83b-2de5-4e3c-b5cf-5fc6276e2f6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1bc3f62b-7980-4166-a934-439f5b30cc7d",
        "cursor": {
          "ref": "085e9dc5-f0c0-4e32-bea2-b78100c7cd08",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e13d92bf-839f-4b04-81f5-3613829aae43"
        },
        "item": {
          "id": "1bc3f62b-7980-4166-a934-439f5b30cc7d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "eef5393b-d93a-4d83-805c-18aec94431b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f4e9e058-f088-45fb-b2c7-564ac3a357cb",
        "cursor": {
          "ref": "b52d13dc-2407-4eca-b366-13b9ebec0d81",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4a9393ff-87f5-4b3e-afcd-1fbd794e9260"
        },
        "item": {
          "id": "f4e9e058-f088-45fb-b2c7-564ac3a357cb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1077ef7d-128a-490e-9dbf-2307f3cf0e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e9e058-f088-45fb-b2c7-564ac3a357cb",
        "cursor": {
          "ref": "b52d13dc-2407-4eca-b366-13b9ebec0d81",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4a9393ff-87f5-4b3e-afcd-1fbd794e9260"
        },
        "item": {
          "id": "f4e9e058-f088-45fb-b2c7-564ac3a357cb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1077ef7d-128a-490e-9dbf-2307f3cf0e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613bcd67-eaf7-4dad-8938-c3c58f52ecb3",
        "cursor": {
          "ref": "f739832f-12c8-4a9a-9373-f1cb0bd6f8cc",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9e6527e8-f5c9-4c7d-9933-7908fad6b99e"
        },
        "item": {
          "id": "613bcd67-eaf7-4dad-8938-c3c58f52ecb3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9ffabd9d-c29c-4499-ad19-65e10785f4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26bc8d10-29c4-408d-b675-ef1e6ea4c812",
        "cursor": {
          "ref": "d3f554ac-39a7-4234-834f-6af9eb8b446b",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c6780192-bdcd-4248-b31e-a7e7c7035dd6"
        },
        "item": {
          "id": "26bc8d10-29c4-408d-b675-ef1e6ea4c812",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e5da949f-0a99-4fa4-a29c-493713c854dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c96ab70-2802-4e5f-9aa2-a911f77a0a6f",
        "cursor": {
          "ref": "c75bc51f-ad24-44f7-ae85-4e50052cb79e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1f002cb7-d8e9-4f5c-a476-e5e1c8fe746c"
        },
        "item": {
          "id": "4c96ab70-2802-4e5f-9aa2-a911f77a0a6f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "39b03255-581b-4fe6-b8e6-b01fcdfddf94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e6e462-95d0-4ef4-a86a-5ea88366927c",
        "cursor": {
          "ref": "c346ffd5-b5dd-4dab-a23c-8cdd6639f997",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "119c3b22-ae83-48a5-8f17-527ec6c6ffaa"
        },
        "item": {
          "id": "d9e6e462-95d0-4ef4-a86a-5ea88366927c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "436f540f-fcb9-49c8-a6a3-cb2eae87e28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d650b96-b1dd-4768-8bb8-786a4fd75027",
        "cursor": {
          "ref": "8a6152dc-b44e-4ee1-955b-0a61710a6b7f",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "67a2821f-c807-4747-bdfc-6a8f1f29812d"
        },
        "item": {
          "id": "9d650b96-b1dd-4768-8bb8-786a4fd75027",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fc6d04c2-0353-4469-b728-92a1d14a0d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46671748-fdbd-46ec-8cce-3bb2826a9f2c",
        "cursor": {
          "ref": "420fe402-7259-4a99-aef3-272ec562c0ff",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "62cde671-c1ab-42f5-ad94-d09db282c354"
        },
        "item": {
          "id": "46671748-fdbd-46ec-8cce-3bb2826a9f2c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d9bd9fdb-182a-4645-9097-bb52ccc709f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d75590b-0906-4a69-ae60-7f23040aaa0f",
        "cursor": {
          "ref": "acc8fcae-4725-43dd-badf-09048fe2f641",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "224501c9-c663-4698-aa92-db0ade026de1"
        },
        "item": {
          "id": "0d75590b-0906-4a69-ae60-7f23040aaa0f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "75deeaea-58c9-4244-be4f-26d696ed9968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d5be0b-ac05-4110-a291-461aba0431ae",
        "cursor": {
          "ref": "1de7ec92-ec28-4ffa-aee8-5807cee76a6d",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d68bcf31-2a64-4110-8a4a-a9e8065da802"
        },
        "item": {
          "id": "d0d5be0b-ac05-4110-a291-461aba0431ae",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "835d365a-fcab-4d90-92f0-687e870dd86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1d5020-2ea5-409b-a7ba-381ae0694463",
        "cursor": {
          "ref": "83be11f4-7baf-4128-a8d3-7c0eae1a8eb0",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "264923ba-1d8b-4cdf-b98f-7e9564bc7194"
        },
        "item": {
          "id": "ca1d5020-2ea5-409b-a7ba-381ae0694463",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b541dd8a-2ff7-4a8d-ad20-6854454d4c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b39cb4-3069-4375-b350-116842896649",
        "cursor": {
          "ref": "33d7819a-b91e-4cfb-b5fc-7c1d63a53de3",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3571474b-1304-47d5-b8c3-52495bfd3800"
        },
        "item": {
          "id": "80b39cb4-3069-4375-b350-116842896649",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ed97ff27-ec72-4310-9e7d-a0d01f7a7b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c151238-da5c-40bc-a275-acda9a8bbcdb",
        "cursor": {
          "ref": "fcd3329e-e9e7-4e30-b5ba-2f4b37250f3d",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8b5fad0e-5a86-44ad-aa31-9fec4848e173"
        },
        "item": {
          "id": "7c151238-da5c-40bc-a275-acda9a8bbcdb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ccd5656f-240e-4dd4-a061-b71f85b2aae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d6c025-99b2-4a5d-bbaf-e5e5fd8dd0f3",
        "cursor": {
          "ref": "8599a2ba-7b5b-4bfa-a8ac-4276f10706c7",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3ad076a3-a3df-47df-b7ba-2aacb08a8fc1"
        },
        "item": {
          "id": "54d6c025-99b2-4a5d-bbaf-e5e5fd8dd0f3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8cead961-e30c-40ee-a68a-bee77c1f531c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00012970-97eb-4dbc-b24d-5e539db3a950",
        "cursor": {
          "ref": "a68404e9-1b33-4ce3-8e79-6489d0de0e55",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a5c7652d-e396-490a-b861-e4821c6993e1"
        },
        "item": {
          "id": "00012970-97eb-4dbc-b24d-5e539db3a950",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0e9dfc6a-bf15-440b-85eb-af90464e599d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5554ed-f59a-4982-814e-6d82a36c3028",
        "cursor": {
          "ref": "7a748c70-21ce-4728-a095-354b38e2599b",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "149e55f9-269f-4fe3-ac16-4df306ca7d54"
        },
        "item": {
          "id": "4a5554ed-f59a-4982-814e-6d82a36c3028",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2be94d95-7bf0-4b72-beae-18c7faa88309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f45845-92e8-48c9-a13a-e1ebe415d688",
        "cursor": {
          "ref": "5e8f1651-1ebd-4728-b92a-851815242b17",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a2541b72-cef3-4392-9a38-c8e38757d8ce"
        },
        "item": {
          "id": "f7f45845-92e8-48c9-a13a-e1ebe415d688",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7d7a824c-6ace-4e13-a477-651402017f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11751c5-09ad-4217-b4da-66ade190b043",
        "cursor": {
          "ref": "f3531ce6-7ae3-42d6-86e7-a300abb9480e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "80f3c496-e025-4dc5-b058-0247eb58676c"
        },
        "item": {
          "id": "c11751c5-09ad-4217-b4da-66ade190b043",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "22fb6404-c118-48d6-9c46-e7dc131a26e1",
          "status": "OK",
          "code": 200,
          "responseTime": 261,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "37a28fa0-c240-4ecb-8b0a-d8b1caa4f35e",
        "cursor": {
          "ref": "d1d7aa6f-9f93-487d-856a-e94b4916ca12",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ff5718e6-2c07-45a8-8d39-467c71652ed5"
        },
        "item": {
          "id": "37a28fa0-c240-4ecb-8b0a-d8b1caa4f35e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a4e49d7a-9cd7-41d1-a824-63ba6135194c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a917f1-06a3-4ce3-b9fb-c2119a1ad228",
        "cursor": {
          "ref": "c6a56355-39ac-4fc4-a160-cb4a721fb91b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9aa7b982-b9db-4aeb-880d-77447f0f37db"
        },
        "item": {
          "id": "c7a917f1-06a3-4ce3-b9fb-c2119a1ad228",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "545ce1a4-f627-4bce-93cf-f8fb952ef59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c1903a-5ee8-4a3b-b22d-03663d05318f",
        "cursor": {
          "ref": "67477b6a-daf8-4574-bc65-d358d4ec1eda",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "53be93f2-e8b0-48c1-a8e5-c87fed805dc4"
        },
        "item": {
          "id": "a4c1903a-5ee8-4a3b-b22d-03663d05318f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "62deb36c-8ff0-4bdd-9248-06392b6215ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcca16c1-ca72-4c50-b501-a7fc240dda57",
        "cursor": {
          "ref": "2514b3f0-8cdd-4775-8746-f39ae6f50860",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "de94d424-2455-4c39-8b76-0a6dbf147a64"
        },
        "item": {
          "id": "bcca16c1-ca72-4c50-b501-a7fc240dda57",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "14813a4f-d66f-4a5f-bec1-c0d7b0f2242a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13315904-533b-415f-ad6a-54deaa00a4ba",
        "cursor": {
          "ref": "664e1351-e300-4b22-b09a-9f44643e91da",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d0235b83-d552-4116-88c8-be44c892e0be"
        },
        "item": {
          "id": "13315904-533b-415f-ad6a-54deaa00a4ba",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "90e8bc6d-d7e3-4865-b19b-ffd07c0d1213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6826938-305d-4fa6-b0be-9e6b3ca07d6b",
        "cursor": {
          "ref": "2898a8cc-22dc-4bae-81fe-8ff9daccd227",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a50cfd21-df1b-46c9-af01-1e15a87ed8cc"
        },
        "item": {
          "id": "c6826938-305d-4fa6-b0be-9e6b3ca07d6b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f4d24f0b-826c-47ec-9136-2e292067cadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99b5c09-815a-417e-8931-4359f5ef3edd",
        "cursor": {
          "ref": "431530f6-ca98-4ec5-8c49-2ee5e16a6e54",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7467cd4a-d8d2-427a-bcdc-07e24c857900"
        },
        "item": {
          "id": "a99b5c09-815a-417e-8931-4359f5ef3edd",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8d6f13b1-acde-4fa9-b9e6-83794b37c79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7c33e1-c734-4039-a2f1-7517f0eb38dd",
        "cursor": {
          "ref": "1468a107-b588-4d86-8ffe-81ed1b9d4754",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "672a6790-f0d4-4a61-b4e8-3ffeedfa5df4"
        },
        "item": {
          "id": "7c7c33e1-c734-4039-a2f1-7517f0eb38dd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d68422cb-9a90-44c8-a247-000f218c6e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc53f6ff-c098-43aa-893a-a8c7db6b38b6",
        "cursor": {
          "ref": "ce5160bf-5294-4171-a287-b994af340a58",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f5e9ce01-9922-4022-86ac-c547e5e40cf7"
        },
        "item": {
          "id": "fc53f6ff-c098-43aa-893a-a8c7db6b38b6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "aa152296-3884-4659-9c37-64caad88e418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4f0414-dcb3-4103-a2b8-3b072a03eeca",
        "cursor": {
          "ref": "b83613e9-09fd-4590-b2da-cf6263ede1b6",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "30d0d21f-9067-409f-a08f-3821ca21a925"
        },
        "item": {
          "id": "7a4f0414-dcb3-4103-a2b8-3b072a03eeca",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "731171ab-0679-4889-a2cd-5afe012c4c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375337cf-ad51-476e-a7e2-f7537cbe9674",
        "cursor": {
          "ref": "f3e9ae66-7f80-431e-b270-bded531eb26e",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d57b39f1-1c7d-4adf-ae8c-f077800538c2"
        },
        "item": {
          "id": "375337cf-ad51-476e-a7e2-f7537cbe9674",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "17a1dedb-9d95-4dc4-880e-00a4a7c578f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a430b877-9d05-4cf3-9588-1e1012690943",
        "cursor": {
          "ref": "a44bfc31-df73-4f2f-b251-6e210d86cdcc",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1c90cf1b-5992-4584-ad2a-de47818d96b0"
        },
        "item": {
          "id": "a430b877-9d05-4cf3-9588-1e1012690943",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "285240df-d3ec-4c7a-b2ae-cb8659a72aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a6d942-222e-4f45-9c4e-56cb48c66a57",
        "cursor": {
          "ref": "93b59c11-3b97-4471-8410-c5951ba19e29",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e7c3c775-c71a-4d19-84bc-f8a8474848ea"
        },
        "item": {
          "id": "b8a6d942-222e-4f45-9c4e-56cb48c66a57",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "33058734-c855-4000-b3c1-4e20d6b92ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd28dff2-c25b-4b7e-9395-ceb76f635757",
        "cursor": {
          "ref": "5055a372-c7cf-413e-907a-378543738381",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a4545aba-abcb-47df-b884-444cf7cfa6a5"
        },
        "item": {
          "id": "bd28dff2-c25b-4b7e-9395-ceb76f635757",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "020d3e92-3e89-41d0-b0e9-8d3eb87ffe97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88afaf10-e06c-4249-938c-c89af1097c7d",
        "cursor": {
          "ref": "1cd35ab4-b4bc-493e-86fc-96fb0ffa4a4d",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "812ae6b6-1c3c-466e-94c9-36ff237eba4a"
        },
        "item": {
          "id": "88afaf10-e06c-4249-938c-c89af1097c7d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d52600e7-5652-48fa-bc7f-19dba06e4bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d198a5c-5802-4201-84ae-baec839fb6cb",
        "cursor": {
          "ref": "35428a73-9ad1-439a-b4a0-9df190ae9952",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "400c162f-f10b-4400-a4b2-62425546c92b"
        },
        "item": {
          "id": "3d198a5c-5802-4201-84ae-baec839fb6cb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "de9914d7-e90a-470e-800e-ccb65b215fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b0d983-79a0-4dc7-a60e-a403691e6b66",
        "cursor": {
          "ref": "72437938-a3ad-4059-a593-e58d94befcba",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bf0c1a55-283a-4498-8619-b849ae2f7e61"
        },
        "item": {
          "id": "86b0d983-79a0-4dc7-a60e-a403691e6b66",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e55ab8e7-f1f5-409e-906f-b2ef0ba7d28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc28611-a7e8-4eaf-bbe7-b61dba1c182c",
        "cursor": {
          "ref": "d807eb71-1fd2-425a-971f-d384496a1674",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b982b81c-a837-491c-a1f2-4fdcc9cd5762"
        },
        "item": {
          "id": "6cc28611-a7e8-4eaf-bbe7-b61dba1c182c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "99e91f75-a4b2-4121-9fa5-d020f61249ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6d95c0-52a8-4c4a-bc00-736e2577c062",
        "cursor": {
          "ref": "b916d2ca-b0ac-442b-82d3-4000e5faf0d0",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "726e5d27-2c52-4816-8e53-4cd8ce760459"
        },
        "item": {
          "id": "2e6d95c0-52a8-4c4a-bc00-736e2577c062",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b508dd6c-eae2-477b-8653-c13eebd2dd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012ba01a-c2c2-4925-85f1-36b1c2cd5f85",
        "cursor": {
          "ref": "c78ec692-0b1a-4353-931a-be320992d397",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "08cad1ca-39b5-45ba-9a56-b62eed13964a"
        },
        "item": {
          "id": "012ba01a-c2c2-4925-85f1-36b1c2cd5f85",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "72007b44-465b-49d6-9bbd-246f6e23a3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa43b153-7060-4afa-a9f9-4b821837ae8b",
        "cursor": {
          "ref": "297267f0-50bd-4715-aaf7-d2cfad5e436a",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "00602afa-2466-46b2-8a46-989f686b995f"
        },
        "item": {
          "id": "fa43b153-7060-4afa-a9f9-4b821837ae8b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "448d9417-9851-4631-a47c-6d0ec8acbc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1232dac5-5788-4baa-8e8c-0aca1b25edca",
        "cursor": {
          "ref": "3c235214-aed4-41c2-8ad4-518a9877e760",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c4dcc514-902e-47b5-92d9-904de13f3027"
        },
        "item": {
          "id": "1232dac5-5788-4baa-8e8c-0aca1b25edca",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "70ca0d97-8b40-4509-8589-26d9a706dc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdeb22f6-3075-45bd-bd87-c907cd57246d",
        "cursor": {
          "ref": "37c6d23e-df69-494e-83de-e3ab4c446f91",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "76f6dd10-11d3-4be4-953f-c9190889c8f7"
        },
        "item": {
          "id": "bdeb22f6-3075-45bd-bd87-c907cd57246d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d71ebe0b-b440-480f-bea9-ae663ddff502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fb960b-8c20-4dc9-b066-5fce1edddc75",
        "cursor": {
          "ref": "220683a0-ccf0-4764-86b3-7f17e937eccf",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "85fea592-bc01-41bb-84d1-8b8a91582d90"
        },
        "item": {
          "id": "83fb960b-8c20-4dc9-b066-5fce1edddc75",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "61558d09-793c-437d-a1d7-92092e4d9aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1096f2-095b-4244-ac81-3ac2170365d8",
        "cursor": {
          "ref": "a5aea04c-c215-47ab-91c3-5e1ebaf60497",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f0f6ebda-ea5d-4f30-8f73-a54992eeefa0"
        },
        "item": {
          "id": "4c1096f2-095b-4244-ac81-3ac2170365d8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "83f3e9ac-07ec-4b40-98bb-4e9cbe815e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c623586f-ea82-4835-ad0f-eb11fee399d0",
        "cursor": {
          "ref": "d2201e95-67f0-4bf7-ae8d-b2f4dcfd0c36",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "926a24c3-e0bf-428c-acac-1ffe8e3040b6"
        },
        "item": {
          "id": "c623586f-ea82-4835-ad0f-eb11fee399d0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "439e9538-fa4b-43bc-b0da-feeb6f8d3f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cd4f39-12b8-4489-96d5-996b1d0b7c14",
        "cursor": {
          "ref": "31f97fe2-ce12-4535-b0e2-8e82cec3780f",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f4f6fc4b-09bd-4cd4-afd6-dcf2672952f4"
        },
        "item": {
          "id": "f0cd4f39-12b8-4489-96d5-996b1d0b7c14",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8297f405-2573-4f42-b347-2c9b3ee70df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4ba10f-96d3-4e91-ae85-481ebf7c0361",
        "cursor": {
          "ref": "2d093db3-3402-4309-8473-fbe7d64fdf27",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "61f6d7a8-6787-4712-8de4-31b92a414c7b"
        },
        "item": {
          "id": "8e4ba10f-96d3-4e91-ae85-481ebf7c0361",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fe2dbfe8-b6d3-413a-87e6-616b40a64cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f00f792-45bb-48f5-b6dd-df0f7a19c2f6",
        "cursor": {
          "ref": "981559aa-9601-4f8c-a35a-b6ab641e06f6",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0cd619fa-c1a3-4412-848f-829146497da8"
        },
        "item": {
          "id": "8f00f792-45bb-48f5-b6dd-df0f7a19c2f6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9693727d-ed12-4c9c-92a0-65d7b48cf748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab5797b-82bc-45d8-b69b-fa0b085a4548",
        "cursor": {
          "ref": "bd18ecc8-45a1-4483-8dd1-0553f04ebb74",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "06f47c85-fa6f-4c1d-b467-25a447e4eb8b"
        },
        "item": {
          "id": "4ab5797b-82bc-45d8-b69b-fa0b085a4548",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1ed8a3c2-b621-429e-a455-42ff8f847e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599d1002-221c-4d22-b958-b7a6f9412638",
        "cursor": {
          "ref": "3e1c23f8-1c28-4b01-a9be-c50ec3ade6a6",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a78b4150-6152-4796-bdeb-56cde2c7f3ea"
        },
        "item": {
          "id": "599d1002-221c-4d22-b958-b7a6f9412638",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "13e550b2-97d9-4f59-8d94-45aca3f2c9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af510ca-2e17-43d5-aa80-31d7669d16b3",
        "cursor": {
          "ref": "410cb298-1658-4343-9c3e-4d5d8b865848",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "84e398b7-afb2-4693-af0a-5028dfe931c9"
        },
        "item": {
          "id": "2af510ca-2e17-43d5-aa80-31d7669d16b3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "bfe34dbb-54de-4362-b629-bf0b8f8cd860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae02b3d1-0252-4c69-b7fc-23066cc8da09",
        "cursor": {
          "ref": "1cf22a1d-4fe8-425d-bfec-d2e349b47ab6",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9f93f53e-4766-42c0-ab46-fef783cc548e"
        },
        "item": {
          "id": "ae02b3d1-0252-4c69-b7fc-23066cc8da09",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2bf237b2-a5cc-4b38-a866-9c8fd53b4475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38a9aee-a2af-45e7-bfd8-d2f3f4f7b4f4",
        "cursor": {
          "ref": "8d27ffc7-f25c-4a74-b927-13d063bd0716",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d7fc4fd7-b86e-47cc-879d-6456af90e1e0"
        },
        "item": {
          "id": "a38a9aee-a2af-45e7-bfd8-d2f3f4f7b4f4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "18f127ee-19b9-46a8-b741-4757ada3f2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54a72fd-5876-497a-b58c-fced6739ce28",
        "cursor": {
          "ref": "e0f6e81e-c884-4de6-9ecd-d502d4d0216a",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b90de493-31c9-4f33-8a15-0e23dba8cd9b"
        },
        "item": {
          "id": "c54a72fd-5876-497a-b58c-fced6739ce28",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "08734839-871a-45c7-9aaa-39305a4a30e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0984904-aab4-4153-b8ab-9ef869048987",
        "cursor": {
          "ref": "23e617fa-6300-47f4-8369-3cf71242ac19",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "785c820d-e48f-4513-971d-ba3d67894b0b"
        },
        "item": {
          "id": "a0984904-aab4-4153-b8ab-9ef869048987",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1cfe76bc-5c7a-4fba-91f9-b17938ff0e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ea51b5-fe24-4998-8b49-4118c7fdae39",
        "cursor": {
          "ref": "6d0c986d-ea45-4e24-b621-4c1d3add833d",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1efa8086-be6b-4825-a95d-f5cc4ad68dd5"
        },
        "item": {
          "id": "55ea51b5-fe24-4998-8b49-4118c7fdae39",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b19f90e3-1b03-448e-8a67-93b9b9b603a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf14bd0-2523-4d49-8cdd-be6ad0aa6ae4",
        "cursor": {
          "ref": "0fd085c0-9960-4f3a-9730-0901b2d5d534",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9f9571da-3556-4ed3-b717-7953a3f8925f"
        },
        "item": {
          "id": "4cf14bd0-2523-4d49-8cdd-be6ad0aa6ae4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6a65a14e-7d9e-4f9e-9fa1-078222b65eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c60d04-2092-450e-aa6a-a5d2da1c3e09",
        "cursor": {
          "ref": "85670d54-d3d6-4465-8da3-71c5ebc78113",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8d2f73ae-6ad8-44e2-b689-24e7e68babf2"
        },
        "item": {
          "id": "73c60d04-2092-450e-aa6a-a5d2da1c3e09",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c9ae88c9-0041-429f-976a-adcd178d1471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd36d49-c59e-4e64-9f94-2e9d9a6f277c",
        "cursor": {
          "ref": "d46fb5c5-4259-40a0-989d-ec6244cc7192",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "de836bd4-f7bc-4a5e-9b5d-5d645602a7d2"
        },
        "item": {
          "id": "4bd36d49-c59e-4e64-9f94-2e9d9a6f277c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "df5b7bf6-3f4c-490b-b3d4-334e7a063012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183fe5e9-1355-4c28-b2df-1cf14895b240",
        "cursor": {
          "ref": "17fbf8e1-a6bc-4741-9892-e2aab8d7d3d4",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "63ee2fda-18f3-49a6-a563-970848c34674"
        },
        "item": {
          "id": "183fe5e9-1355-4c28-b2df-1cf14895b240",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b2389008-fc44-4639-a6f2-4168cb503606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35509e82-ea62-4811-b348-a592ad7971fa",
        "cursor": {
          "ref": "86fc7c6d-cb36-486d-83bc-4b205d855ab3",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "08cc78bd-f0d2-44a8-bf95-28b0cc76dfe9"
        },
        "item": {
          "id": "35509e82-ea62-4811-b348-a592ad7971fa",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ca4600a3-4012-456f-9b70-862cf8311235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6c6fb7-2a44-422b-a4c4-81d694d9c968",
        "cursor": {
          "ref": "e7959f95-ae6a-4f59-875a-0fe80e7fc81e",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "31898fbb-672f-4577-a0d4-e8f5db61cfb8"
        },
        "item": {
          "id": "2d6c6fb7-2a44-422b-a4c4-81d694d9c968",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "107e7818-009e-4593-83c0-4569941bea97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0665cd-a1dc-4e60-8fbd-b2726fca2bab",
        "cursor": {
          "ref": "0673cf54-a6df-4356-afd4-775ee777873e",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bc21abda-52b3-42c8-b426-144eaf3a6f6d"
        },
        "item": {
          "id": "ae0665cd-a1dc-4e60-8fbd-b2726fca2bab",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1dea6a88-ba9d-47c4-bbda-4e3c3cb2aaf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9954a5a6-7079-4684-9957-7dba1d686730",
        "cursor": {
          "ref": "6466c586-553c-441a-8ede-0afa8a4acee6",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "382c14f3-b265-4d95-b5af-2b070456cfd5"
        },
        "item": {
          "id": "9954a5a6-7079-4684-9957-7dba1d686730",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7472a3d1-9274-4292-aec5-874ced36be2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38677be-d08d-452e-a0b3-d1c0f3fe6211",
        "cursor": {
          "ref": "eca408d2-ba95-4489-9195-d0dc656097a0",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "37a3fdc7-a5fd-441d-8aad-bc4aebaa43cd"
        },
        "item": {
          "id": "a38677be-d08d-452e-a0b3-d1c0f3fe6211",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d29cf7bb-3346-45a2-82f6-aa135978aaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17ad01b-67f2-45a5-a03a-5b541db3bcba",
        "cursor": {
          "ref": "76eec707-9000-460f-9c4d-45d1ca91ac3c",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "09f09455-a134-46ce-8d03-b5712c7cf0c9"
        },
        "item": {
          "id": "a17ad01b-67f2-45a5-a03a-5b541db3bcba",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dcdbd73c-1eeb-4e65-b93b-af3f2495cac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e34a8e5-fc97-4aa1-abee-4e5867f23519",
        "cursor": {
          "ref": "92dd25da-05bf-4cfd-9b9d-74d4f9d83dee",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "422e90ec-9778-4425-8c4d-662b1d6b1d0f"
        },
        "item": {
          "id": "7e34a8e5-fc97-4aa1-abee-4e5867f23519",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a189e6a3-8a68-4073-8c62-079c5f465272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d88edde-ab66-4985-abcb-54d75743a522",
        "cursor": {
          "ref": "34fd0f3a-7b66-4528-b35d-4e89869eafe0",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "49512adf-be3b-4313-a47f-be4830ad06d8"
        },
        "item": {
          "id": "7d88edde-ab66-4985-abcb-54d75743a522",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7d254dc3-f0eb-437f-a9d1-db04632ac4cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df48442d-0dcf-487c-9bae-379be7ceeb9a",
        "cursor": {
          "ref": "bb453046-872a-4859-b23a-689a4f9deb73",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "52f9d6de-10db-4fc1-b01c-4f6b18b1b28b"
        },
        "item": {
          "id": "df48442d-0dcf-487c-9bae-379be7ceeb9a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ac55a5d2-acaf-4a50-9628-06f232e945af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4f05c7-012f-44b4-9c42-71419eb5e50d",
        "cursor": {
          "ref": "848e1b9e-c14e-4fa6-a2fa-0be6813b9c39",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0ee2a801-f74f-402f-afe3-e802456c99c5"
        },
        "item": {
          "id": "6b4f05c7-012f-44b4-9c42-71419eb5e50d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f27567db-fe2b-4182-9d86-d9fbd4b8c4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf95f6d-3a4d-4b08-aa82-5099d6456fea",
        "cursor": {
          "ref": "dd3ce694-ad57-46e6-bbfe-c4133ac9a064",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cd32e307-3ab4-4596-b6a3-fe4f0a789419"
        },
        "item": {
          "id": "2cf95f6d-3a4d-4b08-aa82-5099d6456fea",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cf00590a-9a71-49ed-86be-d894da21cf3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae6fc95-808a-48f1-9818-74e4bc3d2007",
        "cursor": {
          "ref": "e04aca92-1752-4648-aeb0-3d6d5c7d2ce8",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4d5c14b6-b64a-4392-a523-98c03e86e120"
        },
        "item": {
          "id": "cae6fc95-808a-48f1-9818-74e4bc3d2007",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f7292994-5beb-45c6-9a6e-e801a23b9175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad32725-2f8e-463d-b79b-1aefa9d4ae05",
        "cursor": {
          "ref": "4ba11b9a-b9c2-4788-afdd-dca49fd108e4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "280969ab-8315-4cd0-8693-fd505341fa98"
        },
        "item": {
          "id": "2ad32725-2f8e-463d-b79b-1aefa9d4ae05",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bd92399f-28aa-4520-b180-4a3eb73f57c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8628ea-325c-4a2a-b641-b760cabfd279",
        "cursor": {
          "ref": "cc3370ea-170e-48ac-9211-21ab2d43e637",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b4f8da3e-a2d4-4f9e-bf52-c206dd833a77"
        },
        "item": {
          "id": "3b8628ea-325c-4a2a-b641-b760cabfd279",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8edc199c-da85-42e5-98b0-6d34c68c393a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f04384-26af-46f0-90a3-89228fd39a81",
        "cursor": {
          "ref": "2a02bd26-01fa-4dd4-acf4-84249a58dd1f",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a3994229-f9e2-49d2-82dc-6075fdf80609"
        },
        "item": {
          "id": "b5f04384-26af-46f0-90a3-89228fd39a81",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1d020c06-3384-41c9-8eea-9de1eaa07813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34638b0e-cef7-496a-b0f6-be6774ae9174",
        "cursor": {
          "ref": "97f75cc0-bdc9-422e-91f1-bc9c93a21143",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c55998f8-dfea-44a8-a4d9-2c498e13cd45"
        },
        "item": {
          "id": "34638b0e-cef7-496a-b0f6-be6774ae9174",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "082542c3-3f31-400f-8231-d5e2b4bb4bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e844fe0e-dffe-4276-a9fd-373e87dedd5c",
        "cursor": {
          "ref": "955236a6-7b7a-412d-acac-515bd162a693",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "191e4974-7409-41e4-87f0-4d820649c985"
        },
        "item": {
          "id": "e844fe0e-dffe-4276-a9fd-373e87dedd5c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "023639c5-601f-4432-bec7-45a16200db03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688bd520-088e-4599-919a-838d4fa7c1d0",
        "cursor": {
          "ref": "38552340-f5bb-4396-b4c6-3b6449a73df6",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4b06b727-3f65-4b53-ab24-cc6b66bed702"
        },
        "item": {
          "id": "688bd520-088e-4599-919a-838d4fa7c1d0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "447a7c05-b264-4635-b7f9-a545223f9532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bb66ec-3e4c-46ba-b4b7-a6af9c8bc769",
        "cursor": {
          "ref": "3b9ef51f-a4f8-4e35-9f12-f3d46cc56930",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8ecb1b87-acb8-4057-8ff3-7a174712dc6a"
        },
        "item": {
          "id": "07bb66ec-3e4c-46ba-b4b7-a6af9c8bc769",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "af1d0c97-6eb5-429d-9295-f99dc914c39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f1134e-6e12-464f-9f0d-47b5a347eb86",
        "cursor": {
          "ref": "84d8fb1e-e005-452b-a6dd-9a1e1b2c5d01",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "35614067-18f9-41a6-8309-bb4040d8003c"
        },
        "item": {
          "id": "70f1134e-6e12-464f-9f0d-47b5a347eb86",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "762d97b9-45d3-409a-92fd-6e22df953af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93db5f98-03d4-410e-8bba-ee982df57d10",
        "cursor": {
          "ref": "89d0fecb-afc5-46a0-ae33-3ed4d4e748f9",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "74dcc060-968d-4ff1-bb51-063eb49ad072"
        },
        "item": {
          "id": "93db5f98-03d4-410e-8bba-ee982df57d10",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "20aabb97-eebb-4777-a958-b08999805b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d0c0a3-aa90-4713-bc0d-5e41bb9f721d",
        "cursor": {
          "ref": "c62853c1-499f-46bd-b22a-10f3b9152c5b",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "cc36f81b-f0a4-4879-9c50-e7a0b2a86210"
        },
        "item": {
          "id": "85d0c0a3-aa90-4713-bc0d-5e41bb9f721d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e92e6b2e-bdc5-4812-a06c-0f7680081458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aaf263c-a00a-44c4-adb8-2b66dac68465",
        "cursor": {
          "ref": "7d534c4e-9581-4fee-a708-122cdf66eb54",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "60338332-b9c9-40cc-93f5-9c3fdf5b984a"
        },
        "item": {
          "id": "7aaf263c-a00a-44c4-adb8-2b66dac68465",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a0d9c7bb-0896-41f2-b7ad-3c66c319199b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7de265f-9d94-488c-86de-75a1fa0382c3",
        "cursor": {
          "ref": "a0834c45-c28c-48d1-8a2b-b49d12c452fe",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "89da00e9-eaf0-4905-9cec-ea356a304ea4"
        },
        "item": {
          "id": "b7de265f-9d94-488c-86de-75a1fa0382c3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "34264111-ffa0-4db5-85d5-cccb13d3a16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0972da9-84f2-4901-a837-ddcdceb6d592",
        "cursor": {
          "ref": "d5a4e710-964d-435b-a505-aa83b5b72152",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "29831577-9de6-427b-ba20-bffdae887d18"
        },
        "item": {
          "id": "f0972da9-84f2-4901-a837-ddcdceb6d592",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "182d380d-0c26-429b-906f-def1528ae197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e52cc10-1196-4899-936b-3188c3794aca",
        "cursor": {
          "ref": "2212ddf6-7c30-4b44-ae79-382d2cf220a4",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "eda793ab-27b3-4f0e-80de-468d0e7bc1b7"
        },
        "item": {
          "id": "4e52cc10-1196-4899-936b-3188c3794aca",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cad2166e-5d53-43e3-bcc7-fae81a606e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b86911-258a-48e3-aacf-82944be45ed9",
        "cursor": {
          "ref": "35ce25b4-d657-49b1-a541-8126b527416c",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "aa68030a-e47e-4d0f-b750-c052ad4f30f1"
        },
        "item": {
          "id": "b0b86911-258a-48e3-aacf-82944be45ed9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f6ae20a4-eb93-4cc0-8aed-dee7582358fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fbaf256-2c4a-4d16-ad72-fe85e4dd31b9",
        "cursor": {
          "ref": "aaa8c640-fe6f-417d-9b70-8f60d025b91a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ad321191-a3d0-44ac-96b7-2120a65e433a"
        },
        "item": {
          "id": "8fbaf256-2c4a-4d16-ad72-fe85e4dd31b9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9dbf26dd-b0c7-4b97-a8ec-b37b6b1001b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85513384-27c2-4ca1-a838-3b93fb32e1c9",
        "cursor": {
          "ref": "64088307-4f64-416d-af7d-31762dd6cf54",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8505bd75-e844-4882-9157-2c42c4739b19"
        },
        "item": {
          "id": "85513384-27c2-4ca1-a838-3b93fb32e1c9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cc9c0cfa-a8ce-48fc-a10b-25e0c8dad82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda3a949-e2e1-46bc-974b-95c08e82d207",
        "cursor": {
          "ref": "667fb7ac-0e71-4dcd-aa0e-9824355995e4",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d016007c-90b0-4685-a7b9-d0955323db76"
        },
        "item": {
          "id": "cda3a949-e2e1-46bc-974b-95c08e82d207",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "dd408e80-a52a-40d6-b0ee-9f3071846da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a12d7b-f2ce-405f-9290-5f9c6c372e7e",
        "cursor": {
          "ref": "6ee6792f-1988-43fe-b6c9-32e77752ca1e",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fd2dc75d-38f6-4bc7-882a-6c2afd90f205"
        },
        "item": {
          "id": "b8a12d7b-f2ce-405f-9290-5f9c6c372e7e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8aedca07-90ca-462b-b900-97eb5cbea177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1e96e8-b726-4f1c-aa52-8d0ccc6ae629",
        "cursor": {
          "ref": "f0748ac6-5b59-492d-a10d-2e1fc4ce6b3d",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5a1d95d3-7c05-44bb-adfb-ab970e16a937"
        },
        "item": {
          "id": "8d1e96e8-b726-4f1c-aa52-8d0ccc6ae629",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b7c21681-d1c5-45c9-bd48-bd50b2f3b080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5126ab-09a8-4813-9dae-1716fa99f42e",
        "cursor": {
          "ref": "9bed7e22-cd73-45f0-b0f5-9ef0bfe71030",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0a148cf1-7bd6-47a7-8639-25e6abe45c71"
        },
        "item": {
          "id": "9a5126ab-09a8-4813-9dae-1716fa99f42e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0ed5cdc2-3077-4d75-a727-2644855acf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5173b7-278b-4a24-89c1-205752ff694f",
        "cursor": {
          "ref": "a3d2d6dc-ca2d-4357-8c6a-d80f01825de2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5e85d1cd-1353-408a-8b7d-ba486479c53a"
        },
        "item": {
          "id": "fb5173b7-278b-4a24-89c1-205752ff694f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8369a99a-a120-496f-ae34-b5cd13be13d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55052fe-8481-4981-8daa-348c88a78443",
        "cursor": {
          "ref": "8e62f032-c3ec-4337-acb0-18b309d36950",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "832a65a4-16b6-48fa-b606-29683bbfeac5"
        },
        "item": {
          "id": "e55052fe-8481-4981-8daa-348c88a78443",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "98bfdbaf-2f50-486d-ba33-a697d2bc5934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5512276-b8db-47e7-a39a-7426258e1c99",
        "cursor": {
          "ref": "6a63ac64-d625-49ea-b653-0ac71ec39097",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3c1997ff-10f6-4458-96a3-f159f06235de"
        },
        "item": {
          "id": "e5512276-b8db-47e7-a39a-7426258e1c99",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c50880f8-a88d-4f9f-8608-37ae5078e011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb270981-6cdd-457e-b9b4-a410a9beb616",
        "cursor": {
          "ref": "2e645b5a-0087-4484-85c4-7bddec7fb278",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "78d87d8e-c458-4007-aefa-d944504bf183"
        },
        "item": {
          "id": "eb270981-6cdd-457e-b9b4-a410a9beb616",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6c39c21e-e325-49d7-a9ed-2b2b74b515a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a84380b-4915-45bb-9606-abce3f9d4ed1",
        "cursor": {
          "ref": "fa9c0e41-7666-4e05-a728-d9d6e0cc3c69",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7aa8c74a-5bb5-48b8-86f3-18a72c6d0a06"
        },
        "item": {
          "id": "9a84380b-4915-45bb-9606-abce3f9d4ed1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e34023b3-d4e3-4a6c-9a3a-26fbcdcc6498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa18567-c43b-40a5-a060-95251ae5d605",
        "cursor": {
          "ref": "b48862b4-950f-4010-91f9-6cf1743969e4",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7008d121-67c7-4c19-81f7-5fb4b8cdff94"
        },
        "item": {
          "id": "9fa18567-c43b-40a5-a060-95251ae5d605",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "62d760bd-91ef-4d23-b45c-ecaf77cd4046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca7f3a3-5c88-41d2-bdcc-c8f369c38a5b",
        "cursor": {
          "ref": "a67e41bd-0f33-4893-8bff-e7271947c83d",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9d1a1f6d-6a1c-4227-9317-3f9bca6db076"
        },
        "item": {
          "id": "dca7f3a3-5c88-41d2-bdcc-c8f369c38a5b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "de0912ea-ec2f-43e6-bedd-5c697f4b986d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "bf70f17c-2a79-4fbb-af83-43ffad8d543a",
        "cursor": {
          "ref": "f407a4d7-0842-4479-afae-b36f6220a178",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c9df2bbc-dba2-4aa2-9326-ec3cbecf1c1b"
        },
        "item": {
          "id": "bf70f17c-2a79-4fbb-af83-43ffad8d543a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c224da8c-476a-477f-85e1-0b588e5125d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b8a879ed-7f1b-435a-9761-025ac8d3abf4",
        "cursor": {
          "ref": "d9eafc21-209d-4012-8e1d-34db4d196a0e",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2807fe97-c434-4066-8c8b-07f6d36c6349"
        },
        "item": {
          "id": "b8a879ed-7f1b-435a-9761-025ac8d3abf4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "23192336-7a25-4102-a47b-ba008b172569",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca96f07d-2658-4afb-a3d8-aa97bfe1c1e1",
        "cursor": {
          "ref": "7cb368b0-944a-4634-a276-f1e31f023cc1",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7b65eee4-89a6-400d-a5ec-25d46fca6f78"
        },
        "item": {
          "id": "ca96f07d-2658-4afb-a3d8-aa97bfe1c1e1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "65569e95-6e4c-4ab3-ad6f-11644b90e113",
          "status": "OK",
          "code": 200,
          "responseTime": 2331,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d431b9b7-b168-4f9d-81b1-023cbb57d0f0",
        "cursor": {
          "ref": "b835ab51-9d53-4b48-aeb4-e0cfb42bc500",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3709aaa2-4887-4001-9f49-3994ba29506c"
        },
        "item": {
          "id": "d431b9b7-b168-4f9d-81b1-023cbb57d0f0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "822ba9f0-80fa-4080-8a4a-16b53b9e19a9",
          "status": "OK",
          "code": 200,
          "responseTime": 3082,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a313b7-18e2-408a-a2fb-be8e4405a421",
        "cursor": {
          "ref": "05af6b8e-6a1b-4e43-b63f-a551b96a6873",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "853dab20-9d56-44a9-b342-a08300909e6d"
        },
        "item": {
          "id": "a6a313b7-18e2-408a-a2fb-be8e4405a421",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "986b317e-d83c-4c6b-ae77-b1b95027213d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "a6a313b7-18e2-408a-a2fb-be8e4405a421",
        "cursor": {
          "ref": "05af6b8e-6a1b-4e43-b63f-a551b96a6873",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "853dab20-9d56-44a9-b342-a08300909e6d"
        },
        "item": {
          "id": "a6a313b7-18e2-408a-a2fb-be8e4405a421",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "986b317e-d83c-4c6b-ae77-b1b95027213d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "a6a313b7-18e2-408a-a2fb-be8e4405a421",
        "cursor": {
          "ref": "05af6b8e-6a1b-4e43-b63f-a551b96a6873",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "853dab20-9d56-44a9-b342-a08300909e6d"
        },
        "item": {
          "id": "a6a313b7-18e2-408a-a2fb-be8e4405a421",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "986b317e-d83c-4c6b-ae77-b1b95027213d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "5184d91b-6773-40a9-9d8d-32decdaf531b",
        "cursor": {
          "ref": "412f69ae-c018-451d-ad49-b962815cd5f8",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "97f4b7c1-f6cd-4261-a2ae-7f4689c74601"
        },
        "item": {
          "id": "5184d91b-6773-40a9-9d8d-32decdaf531b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4f4dc24e-fce5-4a83-8c4b-b24de82b37cc",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "70b05590-bae9-40a2-8579-b07842a0ff5d",
        "cursor": {
          "ref": "d91808ca-ea32-4a5c-8c96-cea0e8486ee8",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b23f4401-69a5-4b72-a0c6-15aa700e6117"
        },
        "item": {
          "id": "70b05590-bae9-40a2-8579-b07842a0ff5d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "29f32059-b2cd-4126-8fd1-31602d27da44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "70b05590-bae9-40a2-8579-b07842a0ff5d",
        "cursor": {
          "ref": "d91808ca-ea32-4a5c-8c96-cea0e8486ee8",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b23f4401-69a5-4b72-a0c6-15aa700e6117"
        },
        "item": {
          "id": "70b05590-bae9-40a2-8579-b07842a0ff5d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "29f32059-b2cd-4126-8fd1-31602d27da44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7e77d2ed-c513-43da-8f40-eef9b0b2c823",
        "cursor": {
          "ref": "12e1ebe8-245f-4c2a-a3c9-a51888b54028",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a7c57786-9c4c-4622-b139-28dfda6af7f3"
        },
        "item": {
          "id": "7e77d2ed-c513-43da-8f40-eef9b0b2c823",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "36784ac5-8d80-4ddc-b4fc-3d78331ea1bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 220,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "096b6fae-b915-4724-8ca1-c39d3856b599",
        "cursor": {
          "ref": "80c021dc-2696-4a8d-8bc9-81aebd3d0d93",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8aff0c35-8808-447e-bbf3-b265a510697e"
        },
        "item": {
          "id": "096b6fae-b915-4724-8ca1-c39d3856b599",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "82428892-e4c9-4bf5-906a-5ab3429d9ff2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "096b6fae-b915-4724-8ca1-c39d3856b599",
        "cursor": {
          "ref": "80c021dc-2696-4a8d-8bc9-81aebd3d0d93",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8aff0c35-8808-447e-bbf3-b265a510697e"
        },
        "item": {
          "id": "096b6fae-b915-4724-8ca1-c39d3856b599",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "82428892-e4c9-4bf5-906a-5ab3429d9ff2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "85f4ad7d-dbcb-4df1-80eb-24f967d79dbd",
        "cursor": {
          "ref": "d29f0963-c3c5-41ad-94cf-cb961c94c9e1",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "92e34bfd-66c2-4d94-924c-172659d94d25"
        },
        "item": {
          "id": "85f4ad7d-dbcb-4df1-80eb-24f967d79dbd",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "4c49ca61-c21b-4eea-b423-cd6abc68c17d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}