{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "48e78fcf-49d9-4718-8427-0cd0941784b4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "77eda539-7abb-43c0-86fb-b56fcbe93848",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1763371b-352e-466a-820b-7d21262fa52d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7057f4ba-fbb1-467f-914c-86c3161cdb20"
                }
              }
            ]
          },
          {
            "id": "4168ac76-1892-4668-bdc4-f5e1bd6e647d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9754ebe5-a640-4304-aedb-d38e8b3e3798",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "98285493-ddc2-4d22-a7b0-e5b4e77cee1f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8102643d-66d0-4c74-adbe-562fbedc5683",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "08fd838f-4f04-4d02-9cb2-97aef12ee479",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f32787ca-0e4d-4b83-915a-3bf65b16564d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5c1c424-0a5f-445d-9cb4-ce689270adbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e64b1df-1fd1-4168-9417-993d7cd7d1a7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ad30bf14-00a9-471d-b13b-f0a6a78244e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65fcfbde-80c6-436c-9ea2-fd84c4aefc3b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c872779f-9a3e-475a-a131-c84f4ee04105",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "afa95aeb-78ae-4598-a203-e473282309b9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4154840d-4c8d-4dac-b43d-64e2b1bd0ac3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "768d59a6-558d-4ad4-bf78-022f60232b18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c50c935-93a0-4c17-b106-9b96186e477c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "253955b3-5529-43d6-a0a0-c64d62a72f18"
            }
          }
        ]
      },
      {
        "id": "5369093e-7524-4d8e-be76-fc90f73a35ac",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2ad4212e-8625-4f39-8ec4-4065e8572702",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51b0fcad-8be3-4664-a6c3-453f68b8d17a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3de42c14-6876-4243-8311-d5248f4cdf16",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d742b00-8137-4bd5-8f33-ee44b04e5fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f61aea5-b325-4bf1-af9f-eec925657986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558bbb6a-2fc5-4b9e-9b35-123b16426e99",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac14ec6-d46f-4436-a739-0ee322a2d7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56ff8b50-e17d-4150-8716-992562a5df60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3488991-e046-44e4-bc8a-7077fbd1fb55",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89fe376-789b-40ea-bc34-11d66e0c135c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "901b9705-f7be-4a61-8653-e5e50d9756d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ff109bfc-11df-478c-908a-daa04a5a4b19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8b164090-c465-4b1a-ace0-6fc02e2115e9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40003871-865e-488d-a282-15523477fe13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a805193-da27-4e53-957b-d99a9164fe5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65705d0-44cc-43a1-a913-0a5f7a7d9163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb82da4-db5e-4fe6-ae65-08aa91e4bba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d219946-670b-4850-b84b-9c2e25674a1d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614a59c0-86b9-4159-aeb5-aae30f692a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6bcfa75-194a-42d0-a73d-30596a02909a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd7f373-cf3a-48b4-ad5e-fa0c0c564d21",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ed8a9257-c589-4eaf-9b8a-076a8e674e43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f377abdf-9941-4093-806b-84361798a26f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c0450c0f-ede6-4415-bd4a-20e76ef1d9d4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f359c88d-f75f-4300-b3b9-3298a60dc35e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "df3478ec-4d0c-43ff-aafd-d7fa390d2fda"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "634ae4af-b7be-4bfb-8d8b-450697b1e768",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6bdff04a-f14a-4b93-8595-ff7b1ed7cbaa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6095de8d-c7b4-4d7a-8ee2-bb9d1ee32f5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7933f85-45b3-4010-8302-6dc1b3c7f22c"
            }
          }
        ]
      },
      {
        "id": "2bbc526d-9316-4194-b192-0de9bd92e994",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0bce0172-25d5-48ff-a8fe-09d28d9961d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62b2e280-eb4d-424e-86a4-545a7c92e9d7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "41888d46-918d-45c6-bbad-94657e559997",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd061e3-e0f6-4e56-9efd-68783c9726f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35d2ee3-b928-4406-a137-544c6627b73e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f6fbb8-77c2-4794-8c6d-d57f030ec6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "689e549b-40fa-4c39-b5d5-1549b80f8b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0924b1-35e0-4008-b49c-ea23083d872c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43eb1e67-50a2-4fe2-afa1-62e0ae30b1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffa914f-0da1-484c-9f41-6197ef68e044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1899d64d-7765-4aa2-ba81-0eeda04a9f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "760bfdc5-e7f4-4571-b654-96f5e48dc75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deae7022-d31c-4ea5-921b-fd79f639ceb7",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3be421-0ba1-4aed-ab14-e799a9f3ca22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b30885-59cf-45b0-b9fd-a86a9c03b906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf6179c-47f0-4714-97a6-be35099c5913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9204ddfb-ced3-42c9-a3ff-0e4c3a63e016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f68ae55-8104-4358-a819-863bf51c7e7c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46cd144-205f-4c1b-945b-ac982256604a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61596339-6bc9-45ad-a272-f12ec100beb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28adae2-0e26-4bd2-9c25-255a89c8bfac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71757b4a-f90b-4bda-83f4-2cdc4be3388d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecf2a5e-d697-42e3-9dcc-0bbc37a6629f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38b104c-c0d1-4582-991f-c15e8ba90f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f58ab1c-8800-47a2-aac6-bd1500e7f2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83385a3e-59ae-41cb-86e2-1201d19a068f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4861059-6016-4ec8-9661-17670974d173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c374e691-a5a0-42c8-a23f-3a1595bad984",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1fb0c2-cfd8-40b2-943d-0c86306c6035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abdcd403-24c5-4395-9005-da5f3fec174f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6167d4d0-8404-449a-a881-e4d58fa81cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28cc159a-e1af-4c40-8a08-b5e358ea6391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a445018-076e-4953-9e48-12f37f098715",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c30706c-e8d9-4f5e-8e88-9276da1c803a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4657d93b-d0a7-4d45-a21b-554e997212d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe82101-77c9-4f7c-8f11-6f0df97d1ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5baf8838-85e7-4afb-bbfa-797f2145c79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf76e710-5185-47ab-8b02-7abc127e6b78",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302c0273-6014-4c78-8514-f93f721310f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de756d3-6298-47f1-996a-1d5370c3febf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13951a6e-b79d-489d-a0b9-399fdba815ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79d38c58-5f85-4f24-b18a-494c289af25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bf2a72-931c-4d60-baeb-4842ac041258",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71869f31-4f97-404c-8654-a294de6c95bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359b5716-fd5b-443c-a94d-ea152dfa7798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e95d664-b2c9-44bc-9bc0-1d425bf0f660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5a2a8dd-8903-4c39-a5c6-58de5be63ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5882e47c-756f-437a-97dd-1dc0af8b1ed5",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b6605f-50f4-4944-a94c-062fa5e3be0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf084870-8e08-4dd6-89a6-eaddbd3c0b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444a93cd-3131-4464-a8a4-bd16f3046ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9d6f832-a122-4f94-b442-1daaa3f649b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0506627a-3c3a-4b93-a01d-109cd1bc82ed",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d454f500-8264-4dac-96f1-2ccfe23f77e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4e31ce-541b-4855-9ca1-ec3312fd1302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea65c01-7174-467e-9e3d-6df9e0ed4e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5095404b-c35f-43d1-8a16-31756c2a6f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e01a38-b626-4058-ac95-8fa2b0877444",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290f1d13-1f54-4176-bcc6-65734aa8ba4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb7d2048-d9e9-4f74-b449-52edc9eb3cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9433da1-097d-4aba-88fa-1e12000cebeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c773295-4938-4250-a48f-5f445b32e36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b3d2a8-0347-4be6-b7ea-4719c5dc4ded",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d8147b-0650-4f57-9945-34afc1db7ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a4c7d1-9302-4bba-b4aa-8f4e54e594ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c491a92c-e1db-42ee-8876-cb7676be680c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2152ba4b-9da8-44e2-8883-50f813b01328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d139fca-43b7-4d68-9647-23adcd5e1a8e",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb9c0bd-cbfc-466c-9f2f-23b1044ee0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a0fc9fe-cfef-4b79-9254-b8f88deabb9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09bdced-0625-4999-823c-75ba3c9b4391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf8d1cdc-26d2-46f5-887c-46f1795f59eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d35daf-2a53-482e-a484-9ecfc3bb60eb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ca006e-f31e-4bc3-9ece-d986c97082a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f222f29-bc41-466c-8e16-53d2766f560f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc7853a-86dc-4676-875a-38f7b13a2377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "934f6986-2a1a-419a-a9cb-b19ec19ca0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0eb8b1-2422-4253-bc2a-bef474cea6b2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f564049e-d705-4320-8675-fff0f3705537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "772da7e3-19af-49b5-bb8a-842d1320e455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1125546-ea37-40da-aa0d-7e5fd52a57eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e213e406-d052-4067-8b70-012d3bb7be06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdf69b9-0e1d-4c3f-806d-6bdb36574cfe",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d28bab9-a1b4-4105-aa84-7af15ae985b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0dad8b-5694-4de2-88c6-afe525a2dfc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ca15d6-9bd8-4996-beba-6977c81a1ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a8b6616-f55b-445f-9098-b6bf070a4e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82be33cf-3a55-445c-9407-e83cb65598b7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783f9109-5673-4451-ad29-312d00b28a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527a4db4-a7e6-411d-9d8d-84d038f50b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75349ad-3d98-4ae1-b275-9d5f276113b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67459ffb-99bd-4847-b44d-799d7c6084e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6648822-92d3-47ea-8499-62babe4cd56a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fe7d1e-df6c-4f25-a420-1c8b9a28e982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa923f24-8199-4ba5-8759-de6f83dae918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8f37eb-be6a-45ce-a451-53604b6d33b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bae71394-6104-474c-9554-e693e54e46ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1560e78-412b-459d-8a7b-6b9d1eb51b74",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3a581f-325d-481e-8996-277c54e69aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786b2c50-f2f0-498b-978c-13f67538d5c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639fdc2c-4c81-4a90-9900-78d5bf0f6b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "de212c0d-43cf-41d8-81af-d4475728f6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e652895f-e779-46a9-b8fd-21f067ffa421",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf36a24a-09d8-492d-b6c3-cc183389bdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc8f34d-731f-421d-bad0-164c56907d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a24b409-bde1-4500-8f39-8c91fdad2f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19a876a6-b8d0-4e87-8eca-757a6a5c7eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7b5f72-bb89-442f-9242-f720d66047f3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3f51de-40dd-49d4-b1fc-bec15f79f912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0fda26-f2df-4ab3-ae02-15115cb27ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03355d3-56f3-410e-8a39-2ba56f59a8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f132cb2b-3f1c-4253-bf0c-1e2f6951cbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d17e27c-c32c-4754-a7c3-1a3309b946d7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbbce986-24ca-4b41-8e91-72a51f8317cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7f362f-2c06-486b-a265-15e6f7ebc78d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e058abdd-bab1-4c72-8866-201ca592cff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e92f1422-3b2a-4e6b-9c30-d729d80c3af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c665b643-fbcc-46a4-9fa4-1922ec7cb9c8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c809e00e-f98f-47cd-aed7-d3dcafde671a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1eb2e22-87b3-473c-8ee2-4dba46d2a050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae4774a-d2b1-4d30-9132-0996656aa2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e7650c-00d3-4790-b765-10ee4c5b9113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3c42a7-a2cd-4784-9690-4ef659f7b3ac",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29af61b-a74c-4c18-b51b-65c16a10a3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f6ac0d-08bb-478a-8efa-41260c7bfeeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b4537f-ab2f-4070-8d14-18a55ff1836a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f76d79c-efe0-4d11-99d6-864d4ea7932f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6ef11a-ab17-4f50-a28f-fdb39068248b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c691ba9-8cb5-48a8-adfc-59689903fefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969f0068-58f7-412a-81bf-d026515b8062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761ea5ae-517b-4c0a-a9b1-09088bd8ef24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "28e89bd0-a0ee-42b0-bfd7-382dfca989c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55afcb9e-ae55-45dc-93dc-e584dbff0c3b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a01328b-d2dc-402d-a654-2414d390a5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1100197-8e16-40ce-a0f3-0fd0d1481f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d0718d-8671-4cf2-8899-1730ed83c89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61f5c050-afc4-40c0-b14f-1fea4dafdaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a18f6a-89ed-4264-a961-c906dabf37f2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ba0221-f976-4f8d-b281-4f0cb50c6fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc5a69d-bb2e-4b6b-b947-c466a2888c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3681b2-c8bf-4062-b9a8-82d4c29bccfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87178a99-4d41-434a-9a76-876e8eb834d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238b6557-c21e-4c04-aa81-b6bb4b1d37dd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efbd999-f674-48e9-a35a-cf243b33b674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f882d5-394b-4a33-96ea-b20318f8ccae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cae78d-c094-46a3-92e4-9bad8a40c568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "161eb1b2-865b-4c89-a857-b0b854768e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62e412a-1778-402d-a0d4-d4211207ec75",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3b4e7f-f072-41f5-a7dc-f50b32fc6c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d828c3-c835-424c-b326-17333a8daee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb154913-b723-4448-af9f-56b18fd4d820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb76334c-a1c1-447d-8a1d-2c4794128779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7754880c-0e70-4bfe-ba3d-9d199f828feb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc85e45-fa12-41b4-8a29-edc5c69561a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434abffe-227c-47f5-a8cc-38c1ff9c191a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d21ea51-ded1-4c94-bc43-e754cf518fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b67c7805-22f5-4499-a7df-a4644802b3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d41450-d84f-41d1-b0b1-cca544ee4216",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc7a447-7d09-4d83-8059-a5e85174b57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434f2bc1-6eb7-455e-8993-48671c4a896d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336ea84e-fa19-43ac-8f0a-f0f86c96b5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e796f6ed-ca30-41aa-876d-02cfc77ebe2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa1109f-ec98-48fc-b4ea-864e29e2db69",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b940b46-5eaf-4903-a962-b09a4b558c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59d516d-db00-446f-8180-94b539e4fe72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd69197c-060b-4a40-9175-512595b94786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcaf394d-632c-40d1-98b8-b985983f4988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f29304-21ca-4e87-b972-9d2fd0a7f489",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90871731-e831-49ce-ab3e-d3923c381b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3be3e67-3034-4b89-99d1-2d2218b181c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ba27ca-c37e-4799-9ee0-e41f91d3a24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a29e6b2-dc6a-461e-bd46-90f2f760f559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d22d00-7397-435e-a606-d274edb998c3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ace0991-3587-4baa-bc09-696d05ad52c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e9137c-0a7a-4207-aa32-f4da64b10673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b685294d-1898-49a0-9b84-c8c7fafd0c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da2c0653-6d55-444d-ae78-3700aa6f63f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50da4a3-95d8-4503-b321-6936ff7cd2e2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3052c149-55c0-4554-bd64-7b05a0f39f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e589d56-2208-419e-89ef-cac4d052e36f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e7609c-f4d8-401b-95cd-a01d36f3f43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18903abe-275d-492e-b546-92fedc591ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ccd428-a982-4406-9422-ffd4b0cc2031",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6246739f-22cf-481d-b8ee-ae0e5edb3e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c955edb1-dd6b-4e21-896c-efbbacd823e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c415db68-3cfc-45ab-ac94-8b73b716103f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "19467323-0539-4cf5-8bc0-5baf9a685eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8415614e-76d6-4128-944f-a7fa7013a5bb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3afcecf-9b41-472e-89d9-c4487eea5e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdaaa696-e988-4041-80b6-dc230da6489c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b457fea-3786-4731-b557-1031311ee815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e7581aa-a557-4eaf-ad64-eb3302abf7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db780397-d189-48db-be6a-daedf7115478",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "801ee5e5-293d-498d-84c5-b9da43b16357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed6197e5-f8b6-4446-b4df-d937730c5aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3779c0-bdba-4d80-b711-f155838057be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4cedf7-a1b3-4470-8c5d-4901ca174586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2383396-de1e-4fed-b1e7-245149ed0a5d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4fa00e-85b4-43e3-a5d0-a5b0aaf95942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb244d6-2005-4ab5-b3cb-e7d596d80213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81883430-780e-44f3-91bc-2eb4bd0a90c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9426edaa-f651-40e0-ae4a-13a4dbd03249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb63e2e-b8d8-4ef9-a7b2-2c8bf0ac2186",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c15c4c-3a92-4788-969c-2490d7deac21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b432d7bb-cc11-4bb1-a15c-a4d9662c4437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d568deff-d216-4331-8ffd-4ae9fb22a244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb6cf4f8-f7cd-4c35-b3fb-289daa0ec341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9b4d5a-1b00-4a9d-9569-65c71b9d5375",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b432fe3f-132e-4dba-8099-31ea5c93f211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcda816-5aae-488d-84c7-636b0a5e7c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001ea3c3-5d73-4391-9184-7ce6bec79157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f87b8c0-ef50-42f4-ac57-5b4072821908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514c0ff1-93e7-41de-856f-fa950e3d0b9e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b151a9bf-b7fb-48d3-a808-54de554be48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e01bfe8-e3de-4b3e-aaa5-451716c55b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9198c61f-bc57-4b9a-a380-f0caeeee2c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea8cc7a-3517-4ae2-8579-80003ca1c6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0759a9-7e7f-4f06-8b73-0910912449a5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33dbe645-d576-4755-84f2-27c235fddeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad4489af-32c8-4697-9f46-e6e8d8958f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382a09ee-2fc7-4818-a012-7df985331c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5466362e-2ec0-47c7-b067-b88c8ff483c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0336c454-8d9c-4a93-89aa-e561160180ad",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff1b4a8-7ba8-4ba8-a7ad-bf08a730763f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea69660-de33-4a4d-ae5a-da6083ff81e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0662c3b-31bf-4ab5-8be4-7d473551cd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e997c1-38b1-4d6e-83db-0a602cceb164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9248ab-024a-4289-bb24-47c51ddc27fb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a57e6b-668b-4c86-9c28-8bc92428e9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a439aaee-7bf3-4b59-a132-4ac0a65327a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc037eb2-35e0-4663-936f-ec961c1dd763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "39149603-483e-4398-981a-b589125b65c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44feb076-db47-4b3c-8b0d-00d1ba5345f9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f7b817-b268-46f8-8a19-c75cd5b64bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063081c9-5e20-4a91-89c7-277dd5b0f998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed64f4f-61f9-4d59-966a-b0064baad118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c8003f-2ec6-4e90-b6ea-c3bfc54b763b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2218f5a9-d32c-4333-83a1-a683b916c7e2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250180c5-ec3e-4d43-be0c-278a66a73a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d18704-b6df-40a5-a0a2-a56325f26322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d276695-09c2-4592-b196-c57a7eb85c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f49725bc-1efa-449e-99c7-745d0c558198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad65bf2-499e-4fe2-a58b-f54284db59b2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a0ce93-9a4c-4035-92f3-3ea400238d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f6cbef-6681-4ef1-8ae4-d3f016275fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01306812-5f9e-459f-bce5-5d6f98cf27d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94cb4dd6-fad0-44cf-a7c5-b7b92a92b5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48f02e4-d7bd-4680-a392-e5015859b1e5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d389e3c-4e89-46b3-8576-f685819f0a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a456d2e-1d6a-4c54-b5cf-12b50785919d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8103d1-5a54-44ab-9b67-4afe6033c84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2403f2ba-97fe-484b-a516-1e6cb11ea206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b3a70b-dfa4-4a0a-aea0-076b0c7139a4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af57d543-8d3f-4847-94d0-1a4753294b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d64790c3-ac0c-4364-b8ee-07c891fcdd0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4634daec-01e2-4991-88a7-b7d82fad623c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe801568-573f-4c05-824d-5a8a53605470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fe7f57-0314-4611-8dab-c3b53db1d78b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9bdc3b-4aad-47fd-8958-315fce6a4744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cc504c-6a5b-4340-9bc9-ef147ff93cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a77ef7-8d94-468d-84dc-817170a87957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df86cc80-63ee-4c03-83ad-1ff4604e5871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a9da0f-a233-44bd-ad43-71aae855aa0f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44583eee-9bf4-4f31-98ec-e1db9e6f2a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d54ff7-da43-4bf1-8d15-ca5a76657c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9754a21d-2b1c-42b0-b6e0-5d96c2b3199c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d81746af-7b7d-48ab-8047-dd1d888e64f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9506a75e-4b43-4165-9e8e-4f002d9566f3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9cf9fa-de45-4f1e-8e3e-0aad7f92b38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52b8e2f-ea82-4eec-82b2-dbabbfcaa14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3062ca-fe73-4ecf-838c-9b5a47bdf877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5de50714-5afc-46b8-b1f6-27bfbb60af7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632ada5f-a7cb-47d1-926d-27556ae9178e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c53fcd-5cfb-4d75-b8eb-6a1df03dc82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a278cf8a-9421-4d01-a939-0caf19465c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cfaedf-b509-4d86-89c7-5c5fc85a9487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b071776-0e92-4a9f-be6d-3d0767efa64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb4579c-bd28-4ef8-b73a-0e4979fd8404",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14544cd-18ff-41fa-96c9-4eb85b2a952f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86301c2d-6cfd-4208-bb37-69c6f2cb3b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7583345-d80b-4013-9181-cc1addd27668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24a1ec73-7b1f-43ba-81f6-7f90dd3f71df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791f9880-980c-4a07-9964-591de9944aaa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72190802-c063-4dba-9fcc-072d4c8482cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd1d413-dbc6-4672-b982-508e41f2674f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb90d701-7b20-40da-9f5c-fdf41ecdb410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "787a01f7-d37c-4628-970f-3e4f16c37987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68084cab-5bbd-47cf-b339-6f6883aa304a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4b07f5-3ec1-42f5-bd7d-991e260d990d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7fc495b-b012-4520-a2e9-8ddc9583911e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61bd34c-6167-4c7d-bf63-6d52aeacb452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d463edb9-6b93-4ac9-bf07-9912db62a4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0fa5e9-9706-4f12-b594-6f706fe6e290",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c614a418-dfb6-4cae-8b87-bf22249dea23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac365723-81b4-4fe9-a636-8000b2aec9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be65cb4c-fe2c-480f-ac4a-f8ae4f08beeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ade72ab1-92b5-4879-b4c8-796b39dfd287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78faada0-8bb6-4ef6-b54a-836164c68d7d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2629f5f7-1f8a-4202-815e-3fa5803a5cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bfa30b2-d3d7-45fc-970b-7db2d39e5dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe597db3-3a76-4687-990c-b0d444d680c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bced66e-4512-428a-a03e-363fb468ecf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb25327-c594-4beb-9988-2ffa455a9b28",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a441a45e-9e22-475e-9afc-a3425711f706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7872e146-c727-4b3a-b125-95ecb0850ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c777f6f-ed9d-4c0c-b3b9-4bcf59f4f37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4eb4eb-cb4b-4713-a3db-fa00552a01dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8fe8b7-8de4-4b24-a9bb-7c8082854236",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdd8b8e-8739-476a-96b4-397a40a6c4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aef79b9-3be4-4c87-a8b3-49ad5c048e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bdfd9f-d922-4fed-bfa5-1896aaeff389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d214e693-0d0f-41a6-97a8-bc5184c9b92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f9be09-487e-408b-a241-5da16f6c04f3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cc4402-6903-4bf7-b002-e66b54eb6611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a80033-d0f1-417e-b017-6ed02642dffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e23812-68eb-4694-b856-972b80e34e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa624f63-b2c3-4a55-a4ce-3235072d101b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c991f8-4fc8-4524-8b72-151261f2fc4e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75d5221-9468-4ea5-970b-a829f800b3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866fe21a-7c46-42d6-879a-7142a3a89a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93760004-d334-4fe0-b93b-130f7180ff69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9debc05-35a3-411c-82a1-645c48f50df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7e5f3c-fa1f-4573-a988-a7e459e2229e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d464ba15-8c46-42da-8176-07bef7948cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44787da-644f-47be-b603-45417e8af25c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d2d924-3831-40a0-ba46-9d92e7d3a42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac421f73-fa7f-432b-86c5-bbe37d6be55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ecec3c-e4d7-4c14-b8c2-91538e58d4d8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7613263-6cef-45d9-8862-edc8a8073fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9d40c3-cc2c-4c02-b826-81e7a98925df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1a3cc5-2ad0-4e86-9b88-1f1702c4c2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a634b23-d52e-4e7f-a4c2-b6916194bd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a62608c-1494-4cfd-975c-8cd9d9b8941a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c5d9ab-9de1-4f9c-b644-7897b2286d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f261f380-cdb4-471f-b45c-3d603cb5b840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24d308c-2a4c-4d69-a55f-bff61c1ec4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "703fe041-a828-4103-ad15-503ec2da7fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c5d500-c084-4421-93d8-1d7f39dfcbc7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e2da23-de44-4cdc-b294-640aa27404a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2718d9f-8706-449d-808d-4c3b33c7716d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13a63b7-d583-4bb1-931f-082797abae2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5de3565-c3c4-455d-be0a-fdc8299230b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439af4bc-208e-4cee-9cf9-cde5d929d533",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0050ccd-79f8-4a5a-81f4-192eca6da0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b91b67-f55f-45b0-b06d-d0341a2564e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23ee207-13a6-44a8-a473-0c2d270daa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e73276-b95e-4366-84b4-701a4472ecef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75efa238-6707-4d6a-a42d-23f54a9d6ffe",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f61cac5-d8d9-4201-925a-7f8cb3ab8f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a483eb5-7dca-441d-b4ca-adab2a904963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4578e00-df37-4f24-be22-165781d550ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "69afe16b-c888-4afd-bf39-87c7357ec6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9dd03f-8f59-443d-8077-37854be3b7b2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db27cd65-0d49-48e2-b482-ae75f63c98a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a597c050-e477-4109-9be9-c7884d4116c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f58338-b360-40b0-9ba3-b0a0d5f07d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a02885e8-15a8-46a2-9ae5-d330f7ab6f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c5e567-ad5d-445e-8048-58205e4b47e4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68b5b3a-4d43-4448-9611-cc4bd5607f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc7e744-30ac-4de1-bd28-597955108e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35d6044-5758-4776-baae-6f33aa989373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b536af6-0316-4d35-a363-ddd2c0f7994d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adea3dfd-e0e6-49a4-bef8-1c9ae82645dd",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2262bc08-261e-4cc3-89a5-7b5bcc4538ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e74a940-42d8-4086-9fbc-58590f8cbfe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c49b79-22db-481f-8d64-b92346170e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "420487d8-e899-4f22-97ba-a733435b90ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab389532-3296-421e-b749-b4aeb2574df7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a6ed48-23d7-485e-98f7-52639d7d1ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "388a219f-fd60-4426-b661-b8e6d4430b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a42578-5fe7-41c1-9e29-ab6a10b25db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c94126-ec63-4784-90d5-623e1fa2a975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151c9daf-71ce-4cb5-8512-2ac10f397fb9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd31958-a1d3-4046-92ad-e6210475822c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d155ddfc-d7be-4db2-99e1-42b8035ddb0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456b9951-b664-49ac-afb7-fda321164785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e07d4f7-fccf-41ff-98f9-3e656494e689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31455542-bf33-4c1d-bc11-0bfe7ba5c291",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f34f5d-260a-40af-9075-c568736bc533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c744facd-7e4e-4599-a34b-ea72edaade7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733f7a3c-bdc5-41f9-9a8e-f71ad413c2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c8426ad-d377-49ef-9b87-ddf6e57f6df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b62c4b-3c59-4dfe-8eb5-e0087240f32f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aed712d-1af0-4946-b908-78a71975f2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc2d6c5d-31e6-49d1-9348-decb6264a6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed71114-9c3d-4309-a00a-5c27d62fb267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a14e0696-bfe6-42f6-8008-c9dad3c92cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3648ef-2e1c-40f1-a751-6c6b065d1ffb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52781103-3ba6-4653-b981-fbcd95af4752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b183547-57b9-40ef-801f-605016164713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c42bb68-17fa-4d05-9ff3-820bb1578d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b74f8b75-569d-4eac-85af-46b08cd520cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59dd49f-1382-4684-a15b-acff18843c47",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3233aaf4-f3db-46dd-956c-82993d4f631d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472895ea-dd40-43cb-b3e2-3f06282d6463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9aabb0d-4aa5-48b4-9c87-cd33cb32bac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93d4e984-5c80-48be-aa8c-396487679f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecee8afc-0d84-4711-9ade-15144083e3d4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "883a4837-cf35-4171-adff-644e2c260895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f61965-015c-4b6b-bb6d-e608649cc2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fab6f8a-ed94-4ab0-bfa9-8304f2f70ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "865252af-e922-4ce9-a9ca-d986c04f58a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e998cf-dddb-4f35-8a3d-2a1d63d9c2dd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248779b5-157c-43a1-aea1-0e4fdb784be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7029aa7-9636-4371-b6a9-53938b5f4635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4256c8b-5460-4eeb-a4f9-d0f5d9f9d5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c74869-5aef-433d-99b9-48c2b979c62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526917dd-5dc3-4522-9fa5-01a0406c3961",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a3f8e8-5594-4a7a-9dd5-55e6f5465e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e681556-34e2-46b3-ac93-0b2d0f5e9f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ceb4c3d-f4fd-4517-8d2c-7f85961dcea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08ee898b-a916-4576-86e5-991b56a39c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e921c6b-cbdf-4a78-97eb-614e333ae97a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab4bc4a-9def-4aac-804f-f12dd3deb41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5742d7f-37c4-4ec5-a84c-24bdcbbbd1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc73777-2f76-4a57-9ebc-ff45a3d5fae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd44f1a-5a8f-4a28-bfdb-6f489c03f43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871b9ff2-842a-4de5-b4cb-3d3b71ba547a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14b261d-2648-4c40-8ed4-91ac0e7e62a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca2865b-51e1-47c9-943c-e2665f1f3b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be21ef5-6bdd-44a3-b6b3-b6d69cfb4922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd17b05d-5c9b-4ce0-b865-5e224e842aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b1ed6b-43bf-4fd5-ab90-c5d24a29358a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a360807-2a27-4bfb-8da4-9e906d88417d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae0a0d0-fd8b-4a22-a1fc-41c612ce6f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f915121b-43d4-41f6-bf19-2c235f86933f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "942a5709-06d3-4366-bffd-3009674f5e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fc5b3b-9855-4b3a-905d-a93d718684ca",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc0c8ee-4d4a-4d55-848b-e8572b3fc5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ac7e9c-f9d4-44b3-8640-fc6745f13379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a854ea-27e8-44a2-88fb-d0ea25ddf0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e184dbd6-c911-4217-ba77-c35cb1a0a26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0da35ea-86b0-4933-af91-f6520422fa75",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477d44f7-8541-41fd-b764-142c35030fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da57aaf-5484-4340-abed-493b046d9f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7630c2f6-86c1-4403-bc97-e553c86fc25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c47364a-8305-4769-b5ac-08c12c2508da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24aa237-b674-4dc2-bc16-2fdd5d34d502",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66597730-9880-4322-8251-f531950baf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e615a0f7-e04c-4d96-b15f-62c7bb795aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bcb897-5077-4ac3-8b05-82263de2d331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "147caa5c-cae1-41f8-9f6d-1dcb4ed9beaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed15ef87-8200-41cc-9a26-f2fd154e07e2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470969d7-6898-4f12-b382-4754ec203490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617b5623-0df1-4f92-8824-fc27fc7639ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e868ae6-a929-46ff-a104-a60e4c12777b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5d1873-b86b-4e44-8c51-3e3015397080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555285ad-2885-47ef-92a1-9cd49907ce96",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae62b93-46a9-4b52-8a50-6f297f4f2531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "699e950a-3f8d-41f1-bbc3-e34d6368ee1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005330d8-2d6d-47ab-bce1-266627de6a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9cbe5c-7ee4-46f5-9146-3f191166e8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161a84a5-050d-43bc-be5b-690e1fa4df4b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcff167e-6356-440e-a6d6-5446b804a536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4c1c77-8214-4d3d-8f9d-7bdfd7f652e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60890a3c-9d1b-43af-9605-871ee636d483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4bcb9d-8184-44c7-bd10-9dd3121cfaac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d64256-9a18-41ab-b3b0-4db9fe6414d8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7b075a-1a30-4ef0-8cb3-7e181fd8d067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edab2cdd-b367-4042-8c9b-cc22a9abb383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1089b714-f96a-4fed-b3af-e79c70546238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7c7960-3bf2-4259-8949-89b041974b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddcdb9b-a9d4-43ae-9ddd-79c86c3cb7d6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9651494c-dca2-49ca-a609-dfd119f1bab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef543eed-8eab-438c-926d-ebe61a3c88f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f697add-4299-4f92-9ff0-e56439769590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "08047e23-8b8c-4872-8659-f83eabca76aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51daf95b-443f-4176-8fd6-d0acd7dcd872",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261e8c97-5f19-436a-8a48-75092b14f540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d5e0b869-0fa0-4b36-ab39-e8f7304ee819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d51cdf-da92-463e-9be5-c1264c8cf1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "30d2479d-904c-44fc-9b6a-b51d6b2f988f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a3c0fdd0-4a5b-43e9-aaf0-c5be97ecb79f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82f8b480-9e9b-49b1-9442-7699e4090bbe",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6452709-f88d-4c61-bf21-89af3b25e0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e13c5d25-51a5-41c4-8f46-88b9d9b4d101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86432a60-f9de-4854-9daf-21517a728117",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f4faea9e-185f-4239-8e9f-926b22be0b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3fcc8b-3329-4e2b-89b2-ed503fda3aa1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5dc1c3-45d5-437f-8330-8f1f212adad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed0294ee-9bc2-463b-abf4-760caed4210f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28dcd749-7df7-4e4e-878a-a9ecd15ace2c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b94d3e4e-bf47-40ae-bea7-c5af018f624d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d484fbd3-764c-468e-acdc-b03f1386c544",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63c8e65e-9a62-4c7a-9d1b-95916d96f088"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "861b03ff-35a0-4638-a61a-178215dd3e37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a70b152-ce3b-4bb4-8cb0-d995f74a4b9b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a9d2e8c2-24b6-41c0-8b37-957967b912ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "275ac838-38cc-47ca-9046-0b23ebaebfcc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cf3bed42-ac2c-4d93-8688-4ba5690046c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4efb82ff-34f2-4e9f-b439-288f478be946"
                }
              }
            ]
          },
          {
            "id": "2fda14eb-c815-419f-8caf-f9ea1da54ed7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a99d6fb7-c5b1-4286-896d-40b25c1f1ce4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4619c3cd-c261-4514-8ca2-d042f7617940",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41b5e7b2-bf98-4f70-89eb-2b06b1adddba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75592604-b2da-43c5-94da-87b7e4690ae5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "77783b5e-6fbf-49d9-b106-9faa5c7566b0"
                    }
                  }
                ]
              },
              {
                "id": "4baf8225-4b40-43ce-8839-8d5aac5fa191",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e1c4c02-392e-4649-b972-abe67106797a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1400a6c2-e748-4a83-b15d-1d8c7ea73a52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26de9482-d637-4e7f-85b1-fdfea56ea842",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "874fc6e2-2f16-46ec-a8a9-941c44a3c4b2"
                    }
                  }
                ]
              },
              {
                "id": "06765cb1-9c0f-42fa-aa38-687049a1e94d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "377a416b-a9fb-4c32-88fa-2f6a613cc237",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d251652-d28a-4836-85cb-a9a660a1c246"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67d84c68-6ead-44ef-bebc-33340139eed0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d7f30f9f-277b-49bb-ad7a-6e6ea89ca17d"
                    }
                  }
                ]
              },
              {
                "id": "8ef6074a-a977-47ed-b5da-feaa284af96a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9f13515-ec78-42bf-b29b-a8f30096fd40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "418f8c29-0ec0-4c67-b328-ed4cd22a2fb2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ace4e020-9332-466d-a7f0-bc2528d8f6b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "98581405-3a36-4ef7-92bd-ae654b16e979"
                    }
                  }
                ]
              },
              {
                "id": "4aec4a7c-ab09-4445-80e9-61439b8fb294",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f08993cd-bee2-4cb8-9397-5f4f1ab20746",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce3960f4-9171-4d33-ad2a-80e85671e24a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a0f7d05-7b90-4e6c-87f8-3d5d0210707c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "706106a0-5745-4c36-b3b4-ac1ea760983a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c2322422-931e-43f9-888b-e25d0a825020",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9755c916-2ffc-4dd0-9f8b-319e99bca54b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e018c461-045b-4c84-b78b-071c94720165",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f5841c54-d2ba-4831-b678-fae133451ee6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01769d54-62ce-47de-854d-ede84788dc30",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "342ad4ba-d32c-4ba9-8243-30d6686c7280"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6936c43e-97d3-444a-ad60-eeec7000c52b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e273a8cc-2ad4-4ed4-b3f6-a319d5ab300f"
            }
          }
        ]
      },
      {
        "id": "533c8ac1-fb41-4c57-a674-fd5fe2193948",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d7e0b395-58e2-40ea-9142-3789c568a0be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "694d963d-07ba-4d26-ad93-2e5f75f270f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "054b1532-29e1-4d14-96b8-53104d5db67f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334b8f3a-5d3f-45ee-affa-ce8982bdabe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27fe1181-9fa8-4749-b5f7-0b07bd0c9ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128e9211-4f18-45c3-a74a-5886509df948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4038be5c-2105-451a-b601-afac7b256d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab810943-4950-4ef8-b286-3c3789658c39",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3627e667-0b85-4fa5-b78e-bf4979fd632f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779d3f3e-c7ec-4d81-9582-45647729c283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced3b72e-a7da-4f84-aa49-1a0278e567ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "638b5ab0-b4f6-4c77-8001-fabe1e59f0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73a0ab0-15b4-4eb1-af08-9242b9c52a75",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfb6709-4190-4ae9-8d2d-602d697a1679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d17602-3e30-4ec4-a8c5-92e330e5b5a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af7bee2-6694-4690-b5a4-21c8e7eb6f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d01fd342-8b66-4fd7-a7d9-ae72252b519e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817b42b9-6dcf-4974-8aa0-4f158b437081",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed6ae1f-bbc2-4440-b2cb-fb0660a3b8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf7770be-fab8-407d-b35e-fe0318f8a1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4878e9d0-40cf-4248-a0df-055461b86f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f16a568a-45d7-4733-8c48-7ddd45ffb9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e248e5-1b02-4f36-903e-3a0a25d70945",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e135aece-a899-4bc8-8603-7aed4819d553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe93c25-5522-4a59-943c-12a6e6b9a964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe7d087-e698-4bcc-b656-2893637f65fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "307aa3cd-9a06-47d8-9f17-eb9d38f03f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c0906d-d7fd-4635-8a6d-ae13e44acc67",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12dbd8fb-42f8-46ba-9592-8a172bf34cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24ddf27-a546-4ce4-8728-29303a18aba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9c2870-5b89-4fdb-9dbd-1cc518be40a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "073a6626-1e1f-4aa4-a443-d13e1d5c8c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5537852-6675-46aa-bb0f-49006c46ecf9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95082bb1-7934-487b-ad8d-180c872937ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5be9d7-b6b2-4670-90b7-b3691da19d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629421f8-3e7e-4873-85ea-825a0bbbaa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "78cf81b2-d712-477f-a073-8502d15df6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7765cab5-260e-4a31-b5ed-b7ab89267dd8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f85748e-e240-45a7-a6d5-552947433fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978e1c24-be8a-41f9-81bc-91eb4097e53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76e14c5-19bb-47e1-8737-b3ecb7180191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a50f04ba-825e-4362-bdb4-f53e592e4130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b145d5ac-6667-4444-be95-c9c58519f57c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639dc915-24cc-49de-bcdf-e0718ba3e322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffffe81-36c6-4682-8637-f33c99d19d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254122bb-da85-4a06-a123-38ef7f11b4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b03ac220-48b6-4f91-ad87-7cdc3cb0fc42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a154158-e64c-4866-9887-5b75af33f3fd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "926326a5-13fc-4736-a973-75813b3591f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088144ef-8fc4-42cf-a204-24f9dedd75e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4aaff5f-e877-44a0-a0c8-f459cc4441db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "289c74a8-1d07-401d-99cc-9625af824a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137db14c-a2a7-4ad7-a4cd-cc73978f7b4c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f1fedc-feaa-42f7-8e48-f578dfbeac34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba444788-4df1-47d6-ae48-46831b71fc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88626e8c-bb05-43a9-965d-0c3c4698bccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7b76a334-a941-42a7-a962-4de06dac4616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ed1189-3f0e-477b-8fb6-b160d43cead2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2eb25dc-0d01-424a-b294-829b7d4f9239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57dfddde-2c7a-4292-931d-faa2e1c55452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad451b2-4ea8-40cb-9c02-f73628d91c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67c2ebd7-7155-4a39-bcc3-80b9f4de4a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5377cba-a764-4a71-b185-77be28dee5cd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "463376ec-acf1-4ce9-94b1-38b679ee21bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07de9f3a-f697-40b4-9372-a25b8e92d0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3010522d-8735-4eb5-9894-6095ab7da98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfafd037-0d46-4258-a369-1712ad38e986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4402817-afba-4815-b31c-f50db01856d3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bff857-06cf-460a-9ab3-3ff0f0e570e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0daa95dd-3072-487a-84cd-f8b557c05283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365c3ca1-ebe9-4a58-abee-f75e3a3682fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc2934b-1176-4059-8c29-ee625c13df84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264f372b-f639-4c99-af6c-db98c0932fd9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d6962d-f92d-4a53-a232-cfa2de135590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661748c4-4092-4bae-9f01-12f28a5d73ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcfed9de-858f-44fd-9c47-e6bd274f005e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5d46fe-b281-4825-b35b-5d7f094aaa12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f312f1-a2de-4dde-a32f-cfa65b26d3e1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db7356a-dea0-4dd5-ae4b-e38df6931bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76c75ea-c474-4401-a07d-48b56119fc75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a640610-a2f4-4a3c-9a89-846689d23fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "183a8405-dfb9-4b19-b383-cf9740bef445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fa2bb3-e6a2-428c-ae80-6730d68d4e61",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dde8a30-7661-4212-95d4-53d9db3991be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5088bbfd-e461-4f20-9d59-99f779c058a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a6e420-d67a-4569-9709-c0b1c966527b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "23137380-a68b-4c1a-adef-ef484687f112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7466b2-783c-4dd2-bc47-e4f9ed9fc256",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f58997-9506-431c-86f7-1f684857040b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76bf371e-3527-4111-b565-5768e2497348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822b0f28-68b9-4680-af84-8b2cc7b7d2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f463752d-615f-42ac-8da5-f2e2b99a5836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903b7c7e-6a5b-41b4-891c-371975448dc1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de69b7c1-160f-44b5-a2de-41dff34d303b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1dbc78-01b8-464d-b683-aee6dd12afb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f148ad5-8921-4728-a90d-789bea7aa5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2a122fd-fd14-4506-9663-434540207cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f008a16-e9b1-42a3-aea7-b06b6c6ed35b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30545459-ba0c-4a78-8cab-28ee8e8c40de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58198eb0-9dd4-4089-962c-e6d50ef5f868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de5059a-0778-42b0-8f50-cd6eeb2a7cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e45510f6-a02e-41c9-baac-8d037c606287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c3127c-31a8-403b-8120-fe1f0c632128",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ccf0ca-eb52-4a31-bf9f-ff9664b00b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b00c364-ebda-4fa4-aa7f-98f1cd20ad5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c4f5aa-1a9b-4a30-9d5a-f1a83d71720f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d94f20f-0ec0-49a7-b1ce-60af4f0eff8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389707e7-016e-43ce-a7ea-602623420f70",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cb2955-88cb-40e3-a816-ebd8f17dc11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba16cec-9966-4d45-918f-fd5264be30f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97d5461-0406-4c28-b633-70934de3e720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "521fda4b-755a-4761-99e1-51ae345f2078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c867a99f-e34c-4188-a993-e25b0a048166",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fd139b-e94b-471b-a9df-ad74e9d8ca28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9479a1dd-a875-4e81-ac8f-5ba510e9224e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc92d83-2426-444f-a45e-c88336a548fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d29f73d-77ed-4336-baeb-7e0a798ff892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4888a2ff-d59a-4300-99c4-139849c2d1b7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e04dcdd-fde9-44e8-bab0-c157a5033ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc8181f-5c9b-4800-8160-9f0d75baa85e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172c2ef8-18f1-4419-904f-12f8d666389d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c658b01a-05e9-45f0-b4bd-5b72cf46417d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c1e843-a2a4-4bac-a632-13b17f5a0cdd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b9871d-40d8-469e-9312-b25210e0a676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eec589b-0346-4e53-bb3e-98dc793daf66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376dd12c-d3da-4c9f-88c2-dd82d7f23414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f38f8a-9959-4e45-99a9-4ca41489d10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261b75ab-c7c7-4b22-adc4-e3954e469a40",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6158e8c4-1215-4864-9284-ad4abb0b73d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ef17dc-9fef-4b9f-81d4-a9214309a5ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24f508d-289d-48e8-91b9-7d9ee994196a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5068651f-4061-42d7-a75d-89c35b6a5b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e12ab9-c7cf-4b17-b912-1f019bf999db",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0d163f-47b7-48bf-a423-5696d89a4c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659a6579-d321-4a47-8989-18ed83bcdab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e3caa1-f04f-48fa-90de-d1b1208e3a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae19bde7-2566-4c59-a25a-a9450b16130b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f1c7b5-bcc5-44c2-b4ab-0e406a2a2e99",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695648fd-f3e6-4934-84f6-9b8d42187d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47428e6c-f3dc-4cac-91b9-220fc1c419cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e43f261-ba5b-496d-a78a-e81e61f86909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdabafd4-f97c-4398-a8e2-e80c65874fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6622cf8-ba75-4d3e-8875-e34abf795d18",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8567cd-2efc-4ffc-82c9-624fe73b30d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60778db-359c-41e2-9b43-64153e0e1f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0999abfc-8792-4eb6-94a3-ed19f70b1d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf554e9-7788-4847-9a02-f47d201b8e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5266c35a-65ac-4f30-af9a-493300a5bcb2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb9b34f-bc55-4e20-9ef0-e5ab1ae7307e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee53036-c240-40f4-a70f-4a921b0e8d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcccf417-b930-43af-95f4-f41ab97800a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97f4b0c6-a0f3-4478-bc6a-2514f8aed297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccbd4c8-f106-4a16-a995-f9c192676d95",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d07e3c-caae-4f93-9843-9318e9b32bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5289e0ed-a800-471b-9ba2-98e739e5953f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76567a35-c7b5-4126-9eb8-c52a821cd3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f79b7e57-70ee-4226-a526-7d63d6b3ae06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed95acb5-0b14-4db3-99b2-64c8d4275e0d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c226c1-6da9-4236-bcd2-46cf68f7fb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ccba0e6-a5a8-4168-b3e3-b32ca5297e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d530ccd-8df3-4907-a5f9-87d78d40cc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd62b2c-7c17-4689-a748-bdd1e09b922e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "273ede72-8e3b-459d-bbed-de243589d0a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f2f8fc2-a14d-4436-9437-35488e9d07fe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae593da8-3206-4320-9079-0b8a849b1aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b472a44e-e636-4f9a-b379-853c2904f7c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "020c4688-31c7-49cb-a5da-9efb0d2441d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17973ef2-4164-43a3-aa21-d1da48dd8178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7912588e-48a3-449c-8508-3f91881e516d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9eb548a-9250-4eaa-a58e-edb280b91dd4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "25967658-4445-4e87-8415-d61685a57ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "544b5b67-01cb-4171-bcb2-fef45a30e44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d6c8cb8-4c4a-46ba-ba46-80181e795ad3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95c35e9f-cd3c-4ddb-a55f-ca11a24884a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cd71c0e-88ae-4d5f-b00c-170e254250ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a1bd67e-254a-4d11-953f-8773f1b134cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f1e23dc-0f61-4321-b58c-cac9f8a41166"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a52f85a-6c5a-4bbf-8e9f-f1c18ed9ea0b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5db50e78-6c80-4092-828c-6892e6949196"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a4d71a1-5554-45c6-a2d3-cb56b1fde8ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b48efb5a-2234-4681-b838-302bfcc2af82"
            }
          }
        ]
      },
      {
        "id": "bcd6c0d6-817c-4b46-9a08-bd2b763cd236",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8108622e-e443-4a05-9945-7d97273ae6ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8743ed01-a7b8-48ec-b8d4-9e9ba2fb8511",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "798c181d-296f-4081-97d0-b6559cc6f788",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbb89ee-81ed-47a3-a9de-9c42e5b19bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854e2a5a-6e05-44c3-9d9c-9386efe03815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7af1878-73b1-4d61-9e12-18106d2ec91a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfd83ab-b729-494d-931d-afb862de0c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d012564-dae7-4dce-98cc-230f92813dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d584a087-a4b7-4a5d-90cf-951b902eb06f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6c0e82-d2e6-4bcd-80af-7b9066efcedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b28698-bf36-44df-bf7e-5782033c25aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6fa62d-fcda-4e8e-8ffc-4351d622fb72",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932bba34-d710-4633-adc3-21eb4fdbd1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c125f9-6cb0-478d-b4bc-004c638e67eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec587f6-f626-4640-a7bf-48ce8ea9e51b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d43fda-98ff-4b41-be0f-c08468479b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786f7049-f90a-4fda-a53a-8f3ef8909591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2bfce4-2c10-4a98-94d2-7b65e3c4b1bd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81c61fe-d226-4d70-9b56-f1b0e40d5341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62fcac9-e61f-4561-aaec-98a8e8af416c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e285fea4-0fbe-4041-bb83-760a1350d11e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15448f7a-4bfd-43f0-9b65-254acc99af31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ac3dc7-5967-41fa-854c-ff99f0bc10ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1c2962-2a86-4fe1-ad9b-7aec9a9a69e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59303244-c996-46ea-b324-284d7af5190b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c61d978-07ff-4889-bfb9-9aaaed80e30e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c16254a-500f-4a7f-9174-75278616b55a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00080560-2eb8-4337-b47c-8599f221886a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad9a3d3-4f4d-4c5a-9b05-899079d3e08b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74235ea0-e967-4058-8e35-0a72ee3ec7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01fd1af-b34a-44c7-a4dc-91d2594f9550",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58334ea1-f571-40cf-9c03-e6e17856dba9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bc6617e-8577-4a43-8c14-1d5fb24c9d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24aa2039-eb25-490b-8668-5f9886cfe9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c0b1708-6982-4180-8f58-b89934db0c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72176c4-bca0-4919-bbd2-860140861c8b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca3eb76-92d0-4c13-9659-c290e0041da5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a44c6d45-165a-4dd7-a836-edc327cebf45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d322f4-7d20-4c00-a234-e04fde022add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4106b8-37e6-4370-8fc6-428edb1a63c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eea714-cfcd-4dc5-abdb-a9d6778e44fb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed73e212-fcf7-4471-855f-3722af0834ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b88bf63b-27fd-47eb-94f8-edd78fcf2e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194f080e-3bd3-4d85-89b1-993690e96696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4852d397-e264-4557-8a7f-546ac1d7cb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeee9d52-9daf-4682-a55c-0a9681410e5f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edb47f1-d865-4554-a2f6-c78d8fdeea52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0fb882-c0cb-4a64-b276-79086fe94755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68420b3-9ec3-4087-9818-3499ff57ed33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3328b0e1-6f76-4105-804b-0e829a8dfd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe293370-2331-4a6b-b738-7ed4cb9c33dd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a09633c-2f2a-4be8-b2a3-089aa3a1cc3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "219183cf-d720-44d9-8495-d17b03c13721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc3e3cd-7880-4c26-9a6f-6f4f8d809aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f880cba1-5cfc-4343-a96f-7c42487e8c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f560820-8e5e-483a-902e-2fd639f27ee2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5113e6-9649-45f7-9149-d720e3e9ea12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eadc6b2-1196-41bf-8552-809b95a67c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "783e5215-4d3c-459d-a16f-d8b34546b0f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352a295e-5bd3-4ac4-9742-84992065a11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027c1e10-c4f2-400a-9baf-c26725a02080",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c2707e-8ffa-4900-92f8-3fbad42f049f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a326e5c-fb74-4b34-8da9-12135fb8117f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d0cc8f-06b8-4747-89e7-ac0caceacbbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bcd27a4-e3b0-4c7e-9120-e23c1cf1452c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cf0da3-d147-4857-af73-b20f639f6494",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86aff1c7-d145-487c-be12-6873acfca1bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b60cedc7-9f23-44c3-a91a-40b26a3ad30b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5a8898-add5-40af-bcdc-44758da52aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739e1027-53ae-4c85-ae07-8c6b7083b865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c066e9-7739-4a69-8b70-366a72d16dc9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2256bdb0-764a-4580-8a7e-9f828cea7e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a355369-f2f8-4739-b6b7-00d80665da26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "753a7a1d-4f58-48c4-a678-4322cfd107de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "facf2de7-6e15-4e60-8f2f-45fb75302048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7569da34-bd90-4b54-a2c4-dfb98c1729d9",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b77cb8-80c6-453e-bc4c-1ef1eec697d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb3a47a-e879-46a8-8938-bd620b0767a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab12b323-6fba-4532-a55b-4ff65432c8fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f05052-a207-406c-bca0-3f478b2610b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1aba93-9b1a-4d81-bcad-b06e5e47b7c2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9224304b-1677-4554-ba30-d7e5fb665920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5518a0-4b96-4b13-9776-3fc61e24607c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58c9784-dda9-435b-bd19-bc3a30f8f25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3006ce-480f-4782-aa41-5395b30ecc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69fbbbac-206d-4750-9679-566d2b9a816c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9269b218-2ee7-4eb5-8404-e0ca6ec27114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d93b8e0-b82b-4cc5-a7fd-2c51bd8e99b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fc35cd-a3f4-4a1b-9fbc-77403d3a9917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192bb53e-d1f9-437f-bf92-9f4ceab0f039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f4aa57-97a1-482a-8b0e-0f439d36eb87",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62aa34e5-863e-459f-99a5-b9cc30cb5140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c34ea8d-b875-493b-9173-c51480a3ec73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a616f5-314b-4394-bc80-3b1f253fe948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c06a02c-5893-4f55-8bd3-0094b9725549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6726cb9c-b9a8-4cd9-97af-8a5eb697693f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a3a156-b8cf-484f-b9cc-1293e292239e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0802ce7-44ac-4535-98fd-9b61c3a5a143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c989bae-93ed-4de3-a2ce-00feedae2790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ce7860-24ee-4da8-93e4-3b9911e5b6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60a3f02-0471-463d-9881-eae36ae65328",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9994ee-d133-4854-9478-b85e47b525b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28cf4df0-5e09-49bc-9ad9-fd9d10825967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b23604-52bf-4d9f-be40-38495bee34b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1986b4-fe51-431f-afa2-e71331410a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30f913b-7b9e-4178-a9e2-4c838346b07e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48528f3-2b08-4ce1-a61c-3426702b51c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500804f5-17d1-4139-a81e-bb763579e868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "090aa794-6405-4980-8b83-792be0d157cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f920beac-588a-4f2e-9a8c-06dd9e4f9c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7450e9-e8de-41d1-bb18-8b15c0fbc9d3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3a0091-6dcf-4469-8e19-f9b8ba272cbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "092ccede-e458-40f1-a1b0-f9ec11fee424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06445c1d-ee83-4505-9970-bbfcf318c406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a94fa3-4671-412d-95e8-3214e93b8e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2247d21-c4ca-46f2-bc10-db4c79a662c0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5ae9bf-1673-497a-b1c5-5fe4d886f75b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6349ab9-ff98-4d55-91a6-f4a00a1643dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935946c8-236d-4c69-bfe2-38451d6bf7b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f37126f-a718-4d0a-be0c-9f67fadbd4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c22c627-fbf1-4c4d-9f2e-de22d6459893",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e985edc0-5eb9-4ce3-b384-0c299aaa9cb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5070933-5a8a-44d2-a7f7-3d205c8cdcc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f06d745-0768-49c0-9717-b1c650bc4411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3771eb7-1cb6-48c3-b516-bb5e4ca4dafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d176eec8-a0a2-47cd-81cd-f543825650a0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48a1a7d-8a6d-4893-8ceb-e88929a89bee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f04b41bf-b017-4d8a-a07f-b2cf96e10deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "861bba91-0a54-4223-9440-f33050176769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be4d818f-0f7d-43ad-83be-656445614312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75afd533-06fb-45b4-85aa-898f1348bb3d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b4ca7a-2630-42d9-9489-f1515f03236d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f3350a-0912-4873-bf5c-5498d61425d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b9d078-ef0c-4c95-84ef-06f8f00c600b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e91005ac-15c3-42fc-8dbe-9d798005e08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d9723b-3a81-4790-91f7-0614ead69ccc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90a8148-b1b4-4b69-a8dd-9f1b6daf8e04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a0222ea-f92b-42e7-b99e-954ab979bc4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22be196-b738-4348-8cf4-e21aaa0116ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1710d6e6-69d6-49ec-893a-97442b1f8c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ea34d9-ccd2-4d59-b995-59d4aae386e5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0ce78b-aade-4f7c-a164-860e53b296e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f63b8a90-8af9-43e5-bb1d-d51ce3f7d7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2ef703-1abf-4e72-bd87-6d95e092e9f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c102da81-845c-4b86-bd83-d210acd9515d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9a19b9-d12a-4776-9ce8-7f2eccb4d020",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d590204-e2f8-4698-a75e-b2b508895929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23b53978-90d7-4be6-aa76-da6f244b33cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58b6324-3011-4e7e-9c54-a310381d3dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a122a7-ead7-4b25-98c0-410b27b392ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedbb460-ea7c-4329-bdd5-cc109fada331",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec9a04e-ad16-4398-a15e-a6f6b4fc70f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1e5db14-1d5c-4645-9627-84ed8272f627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c72ee0-49dc-4b3c-8912-00636599f4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "950df576-6f70-42da-ae91-efef85dc839e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737b2bf1-377d-4a9b-b17b-bcc51049d96e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6538f92b-3f9d-485a-9bb6-8b45f3593008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "641c8b3d-06c6-4ffe-88a3-c7f9782c3db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6322a4ea-f93f-4947-b2fe-045187a06208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1eee01-ba44-4823-a167-9caadaa45b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b597e73a-c79a-41e2-baeb-955f20cfba94",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20396c5-fd5d-4b63-b77c-5bf0f95dae40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aceaf1a9-4e91-4adf-afd6-8fbdffd9dad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b43692-c30b-4990-b2ff-eedcd3d5d81c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ad4c3d-ea42-4e34-bef9-802be06f4bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28cb20a8-f078-4a64-a8d8-5cc06a1e5a35",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f30b697-b4a0-4ae7-ba5a-7bd1444b9cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38479a3d-1153-4e36-9db4-432448f5228a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a8f863-5b98-44cc-b1ee-0c9821ac1fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605ef477-d27c-4d5e-8b64-c5a4567d9469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ce4e6d-6fb9-47fd-ae6e-dbbb936d194a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b181615b-963b-4a4a-b848-fc8d303f29a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22274f5-f650-47fb-a372-911239843a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d964b2f9-2a2c-4f98-960a-bd5035cae7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d23825e3-f601-49e5-bab8-4966875fe7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17484318-76a9-4b14-8b9c-0d728e8a1ba0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3764f152-8650-44ea-9d4a-a9c08584bc61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e265acc3-71b9-4ad0-a672-b07742530379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e86d01-0ccf-4b63-b8d3-277bab412491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5ba75b-3a19-4ffd-8fd2-ae1bce0d192a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb84ec4-3256-4c15-b640-1e850237fb47",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a17c5c-3e07-41f1-af83-84a5a12162c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ebb80c-fd5d-4760-96d8-da8b260fccbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b8b653-1cee-4012-bd12-0565ec9b4e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b286c6b2-8fb3-40d6-b416-00d2118c5177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8dd9176-ac23-453a-a00e-a635613dc98d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff4207e-44b1-47c7-92bf-27db4a10412d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1713c41f-d91f-4344-b1b9-3825c94ef56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5202c8b-052f-40e9-9b9a-66d0ce69e9ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93fadac8-bfcb-484b-8b82-87e8f771d282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6dac43-dbb1-4b2b-b742-f7e738463561",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c79a1f8-fd92-4ac8-bb06-95ab347f3b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9798851-d6fd-4c0c-8347-4225271ddcb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1dd564-69c3-47b0-bde3-d26797c62c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8df1f67-c62b-41f6-b298-5a1312a3234b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f967a6-0650-479b-ae19-73423595e3d9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0552c3-e32d-4892-9ab3-e664f8b30889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ccf0a1-82e9-4525-bc54-6b1f647929c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4c8176-bc7a-47bf-9f82-39a4810b2b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fb803a8-b4b9-43b5-9ebc-5778bebaaea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679d9f9d-4d60-4912-b1e4-3f6cb32ba363",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8154d8e7-e654-40d0-806c-87181c86567d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df45d38-f0a0-4de0-b609-feb3e3dd3868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85725b8-0a1c-4c42-b036-401d1a162119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb85b9d7-99f2-4517-a6fa-3f881d481617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef9e6ea-ea91-4aba-b007-c3289baf54a2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44d0112-b59f-40a6-b230-7642b4e76e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a611284a-46ad-48e7-a119-57c0aa8166e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7103aad7-7c9d-4c84-920e-fc422d58cdf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c20c0c-b6ff-46a2-8cb6-c0e97476b863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3f9b5d-d7a5-43e7-900e-75ff544fdfed",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29999b32-2b2d-4544-8ed5-02bf2360b979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cac047b-cbc9-4c3e-8a2b-9c1e51cfc0d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a7dbdd-296f-4223-8c0c-4292705c4ac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70b666f-4d9b-4cb0-8aa6-020ee45b8b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6337d32-80f8-43c6-828c-7460211cb012",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb79f8b-51df-453d-9cea-b9216ec8f695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3071f8-b2f6-4246-9c4d-2e2e3ead01ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a606b2-591c-447c-8ed0-359072240ec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8216f1-45be-49ea-8b50-61b59c10aacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065dd474-1ddc-4eb7-9037-6e6c77a05f4e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b225da-1fdd-4f6c-bd6e-bd2e7f32587c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baca8bd0-81b4-4274-9f0b-7bc7c1b5a8f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c5ac4c-10a3-4921-8737-78863e081228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d913c4-05b4-4bc3-a84d-58298edc86f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1d2697-bf39-4479-9ce5-69643b9af483",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b62aca5-5726-4aaa-9760-8a1df2a97d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a95d645-ee1b-4dd5-a17f-33485110cd0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835c077f-976f-4dfe-beb1-231871207c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd50a994-94e3-45d6-bcf8-64a1dc276cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac026da6-518e-4962-bacc-57b7aba0b287",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57f5eae-0d52-4626-9383-b982bdaf158f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa597a01-6e15-4600-81cf-52a56f2245c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "581f8772-50f1-43a1-a29b-761b1f6b4a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563d2501-cae3-4106-a2cf-25d86cc2f6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5d986f-9962-47ba-8df8-b2620f1b78ef",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ded243-efe7-46ff-9386-a9fd958ef26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38781403-ff2c-4959-a998-cfbdbb78bae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97217bec-6a7f-4827-a9c6-7e5639b0138d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb26d3a9-c85f-4bf4-bcb2-a1c304138994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff5fe75-53ef-4738-88fa-0e875e9d1291",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12793e7-1ef6-4903-95bf-b40b4d955377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5fea57-9b1b-4d5a-af37-a9663310143e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8c2f83-d68d-42d1-a2e9-664459e1427c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d8917f6-c55e-4cd0-a39e-2c366c6c78f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765d9803-1e87-4b86-b34b-719cc48f4059",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315083bc-63be-4ce3-b5fa-96966c952aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902b7704-f38c-4cd3-b00f-a1a807c1f0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b5f252-fb4d-491c-8b7c-3742422e54a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b30251a-e005-4001-b192-2cc5ebd4448d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353a502f-cea1-441c-93b9-225cbcc76448",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5219516-e780-46bc-b72f-b584c14a78b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73992458-3f80-46e8-94f1-74e6c11ad9c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6842f827-befb-4872-b752-e02cb241dc5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ed96f3-6be9-4cc2-9107-cb7293348ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d733e31-72bc-47cc-8e10-01f2a6bcaf35",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919da870-07d5-4612-ad35-1c881db5f8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e3aa79-f748-43e8-9039-3f87f8b02296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e556ce97-c987-496a-96c3-3f104ad12ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6c5439-97b0-48d5-a780-9888dac9a888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc0541e-b61f-4471-a407-63135d2beb5b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b3cd61-ab48-4f6d-8f64-d858456981ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e059832a-183a-404b-8773-9884310a08d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c87b200-3d0f-48ca-a55e-9e8faf8ce094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d540bb-3938-4f00-8a7d-b47bdf6b1512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bd31f5-13ba-44a4-a7fa-2515fc8e2666",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9945efd7-6ae0-43f3-895a-eefda8f59a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "721636cb-6c85-4bcb-8da5-b3d6bf8c0bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35dabe8-8e60-4850-a228-f572513d7ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e8e01f-a777-4807-89c4-3d07c07bcc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93671b64-4e81-42ff-911d-37b69a44ebf6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5b6109-79d1-49a5-8aa8-cee4a989b403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed5177d2-bb72-4642-9ef8-e8281070187f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d695b99-7777-4fd7-b8ea-bce9ed49cda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3283c1e0-dda7-44f8-ad44-efce45459e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d0ed24-9abb-46af-976f-3bef044b89d8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7dc54e-7bcd-47bf-ba62-39c70e396f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc6c5cf-35c5-4617-8ec4-5ecf083e754a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e72240c-3bbe-4a10-917d-efabb765bc89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b644c2-8eae-426d-b01e-cd65b19ca18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3df57f-6c00-4aae-8559-9ebc303caf93",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccd5a9f-8452-423f-ac2c-2ed330e584ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6259e6-59e5-4ddd-9356-eceba052b73e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22721c6d-9bf4-4396-9ed4-d5c834161d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eddf837-9aee-4d22-9891-24c50af765b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5e6aff-b382-4e0a-8d76-18f17141e33e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3058a5b3-7fa9-49f0-94a6-55f78a28ab8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f968a6a-15aa-4733-bf37-00fda4d7bea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec3cd49-bb71-496e-a168-ba73c1783928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab3b85e-c1f8-4ae5-bf6b-4301e0ff52d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b44b22-b65a-4a37-a62c-17838a845e06",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef61bc56-c42e-412b-8984-6d65ca928eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2788d6c-151d-47df-ab65-966aa3e24f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fc68f9-e437-4362-9fc3-2ceeee7be655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cba7e89-dd18-4628-89bc-398cb00be7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecff963-e973-4258-8f0b-2e8d46910bf2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2b03ad-df22-452c-944f-d8b696a3209a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a54c56-b1f1-4427-907f-266f0ba33d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9bef2e1-a253-4574-825f-572162865efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3e284b-775c-4f90-b057-954a6dd74e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8c0ce0-a613-4d36-a5f4-6b12e5e4087d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcad1b9-ba24-4182-bc39-954e6bb988a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42e0ecd-ac14-4bcc-bdc2-28eb9e735cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "325c33e1-9780-4abd-9ade-182fa801cdd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a02176f-80fb-4eb2-9d29-8475f9198a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522d510b-e7e8-401c-9c4d-d0e4612ae2ca",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deddf39f-1640-4fce-9346-d41ec97abc83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c01dc3-618a-4e9d-9e14-48a5a6671352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7af24a-390c-40ea-bb21-492cc09c77a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb8b5fa-924e-4039-a4a0-b0182b432bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad323734-348b-4e2b-923b-2a816ffe109c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc97b208-c910-4558-bbea-ff76b0473cc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30d93108-2163-4b48-8289-79f365f41c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5875eba-f0ad-44d5-a642-4393706564f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129fbab4-6995-4e18-b802-13fbb34bafca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c13fbb-b180-4cc9-841e-186f4bb38df3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc0249e-3a56-4878-99e7-c5f5bd97ea00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "319f5197-d45a-41ac-b594-dc41fa16a018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27fa3d3-0f86-4e87-a4c6-dfdaa81a2060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2ce323-c015-4e1c-89d6-0b36ef96b6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3164c346-0a0e-495a-a515-f4cc87433818",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca1d592-8000-4ebb-bd87-4eee06c5977b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c126c214-0540-4295-83fd-48eb7e885058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d6b7e9-b519-40a0-919d-be4adea0cd00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ccfabb-8595-427c-8950-d1e21c74c08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd433c3-a22c-44d2-9edf-4ff7794b6fee",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c9c52d-c39b-4fb7-bfde-0e4c19cf7537",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e24027e2-debf-4e84-867b-92f0b5387573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9f60b7-4a77-4fd5-90d2-6c671d3cc66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce2f195-90a5-4d17-aa1b-12d3703af991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5770279-ad02-45d5-95be-f34a684be711",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eec3a3d-617d-4f19-ad6b-1d0289f8b29e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8fe97d6-c729-4e6e-9a86-961cc6452847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb8f6bd-2a71-46a8-81aa-94812c699c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7858cc3-e3f2-416f-a805-1957a078bb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bf4487-4d24-4796-92ef-158499acc60a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039f56d7-eb54-49c2-a6f3-136ff21cc6a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13da30ba-7f77-40d5-94fe-d2cc6c472891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e071ea34-64e6-48fd-a3f4-0ffce3ae0fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701236f6-a8cd-4ebf-b3df-7f52be502fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5231483-01cb-4435-8b7c-79c4c8ff4f65",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcaddfd-2984-47b8-82a2-41a959da1a36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14b16457-872f-4bc5-b74f-6cf7f8437ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecaab2e-5d81-4443-a510-18239c061c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6285ef8c-c52f-4dee-8038-b815a1773e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe817ea0-9d60-4699-89cb-173289f351d7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365ecedd-dcf9-4733-9796-a1195aad7372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98c62005-8f7b-49e6-87a4-b249caddf71e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52d2050-b7fa-4c89-9746-428192dd27f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3adcfe5c-e94c-4ca4-a69e-5086af5d5500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb193b0-5533-4a1a-a428-8bbd8bf94e00",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f137a78-6134-45bc-8661-53e84d876e98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d43fab62-a4dd-4bf3-a0ea-1e6b4a762eeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9b68ea-b58e-4876-88db-ea209c95ba34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c327cec-6be5-40db-ad6f-ac1ac3321fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a03fd57-e9fc-4797-a015-fa7cb779dcf4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e310af08-aaa2-47f1-ae7b-9862d15f3432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65239db3-08b7-4cdb-abd5-b18f40bae112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356a166d-04a8-4fd6-9953-6224fbc994dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e915686-9ee8-4b06-83ca-93f6fa566072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8e085c-4d75-4546-bf41-2cb177c69490",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ea71d1-c1fe-431d-930e-85b01a14bf27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59da2184-3a20-4eb3-87e8-811da5e603cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d7fa75-cbec-4501-b2bb-cf42764d2b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d372563-08ba-4744-b4b9-0e9fc4a4c464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fcae9e-bf33-4a93-88d5-9ab54bf43eeb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ac3ef2-21d0-4778-b385-c00f60ad2e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddfdafd9-6e1b-47a8-a431-aa5f578ebdde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc3ab37-5d68-4409-8ca6-000e081bf6f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24880762-093a-4bb0-89af-2446602c2de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43767c84-b582-4a7d-9741-10da5278718b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300ecfa7-7e88-4eaf-b99f-f0976853a745",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9403749d-f39a-4f36-946a-b9f9c0774fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c0058b-b9a4-4960-953c-29e3a2367e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defe5cc4-68af-4727-8ddd-81c252cb445b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2bd87b-c6ae-40e2-b722-f171c6825990",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1114a2a-319c-40c2-a5fa-2ee16e166861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "290b6bf6-a918-4b44-a308-dc203ffbafb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e725c763-9c05-45db-994c-0e7d95e01914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0a3bac-51a7-47c8-9099-1ab368d7eefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2092f396-6954-4ef5-b6dc-810be02936e5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6914e6fd-2a38-4e78-b756-a8e9a474eca3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "996a650c-ce16-48aa-847d-61311e9f25b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d47c0bd-2302-46ff-9de5-1cbd9943eb0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42d9f11-df08-4a19-a1a8-408428254fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e28f97-84c5-43cd-bc41-1191d65ec371",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9c8445-6e0c-4ee5-960e-ead765d63018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62d32cc0-1c4e-42b9-b3db-b24ed58b19c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcb4e90-d555-4f42-81a6-24bf8ca776f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba14939-30fe-4be8-b3b1-8106df632e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fcf10f-2a63-471f-abcf-e8140795d85a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b10ddd2-7fa8-4069-bd6d-f41a0829dbad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17d6ac5e-3078-4d64-8193-7dcec2ef447b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13269767-c7da-4bab-96d0-2176e09a900f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a193473e-8f39-4147-81c4-97aebee7ad57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1999ee-4fe7-4012-8595-0fbac60009df",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67eaea54-addb-4ecc-9dc7-2efdd0fc9c7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd6a34b6-e88e-485b-9e41-d4aece0aa57d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91755e5-1234-495b-b99b-5277138ae655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb73587-d765-42e4-af88-de03809ba564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cbe23e-fd02-4dfc-a290-82bf5487e3fb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa4d01a-8ff8-45b6-bf2a-4e3f04dd6ad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "762be1f1-a1dd-4820-b5c6-40e1c4cbfcb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73b5f92-9e83-4788-8a27-5d53a5b299a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b00224-8743-427c-aafd-99b65234d6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5c0ac9-b872-4185-a03d-37e644d8d28e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e2371e-8562-4664-81b2-e8fb50160722",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93f5b612-817d-4d12-ae4b-80350e40d91d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "666340f5-bcc2-4f73-99ee-5108592f719e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c3f2f4a-627f-4c10-bdbe-c1ff76f57c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782f287f-002a-4c4d-a2b7-1c7d6aa01c51",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c9a779-1915-4b90-9614-acf24930c1bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0f4638c-ed63-4761-affd-d7ca247739de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf46d7e-8dc1-4929-93fa-fe15427fc1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7915742d-9780-48b5-a27f-ce839d9db829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590d32d8-0054-4bad-b295-35df631c6a17",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea37aaf7-0fc4-4578-bffc-1777804f176e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67d4b9de-d5c0-4904-b9d6-74f4f870a4fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1599e686-04c8-44b1-9f8d-eeec7f905e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2be28c6-7ece-4658-8f97-70efaca58702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9f97b5-e87e-4f05-a69f-f8dd6cb45ef7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd12c02-5347-4794-88cf-bc57df7d24a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21568916-9176-455c-9915-4fdc6d3eabe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4946f543-7787-4d80-802e-26238d33f536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c03821fa-74a8-4382-a4b5-9aab98cecf5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed29e9a1-577a-4d0f-b962-03f4b62007cc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f718e9bf-fcdb-4237-b622-cfb6ab7cb8e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1caf1497-746c-4336-836a-17b2d09ab2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99ef4a5-7ace-4070-b762-156bec1e2cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a2d8ae-1572-4804-b4dc-288f9f4b6e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ea8938-91d0-438d-8ea0-b2e1925595fc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae17d67-4200-450f-95ba-dfc8e873c252",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d58295e4-f4c7-4e83-b508-ca13e208c703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c7fe36-fdfd-4cac-8a7c-08419eeba861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f595bbf7-2f1a-4166-b18f-eb6142b394d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85576775-8eea-4572-91ab-350350e652f1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f262602e-eca3-400b-a3ee-749dada23dcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d6ea81d-ff38-412c-be3b-bb094b0821c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "567993b7-733f-4936-a41a-0b89634f3646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2eef32-4387-43fd-822c-ed643a2870ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd21113-5361-4eb7-b97f-a15bfc0decb1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229dd810-c6f9-46ab-b95d-012ff41f3f8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57ba26c1-bef3-484b-960e-87f15ab50681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0d030c-8fe4-430c-addb-4ff3ca12cae4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879335e5-5154-4c03-8683-152578afc53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f143dcca-06dc-4763-93b1-67e984ff5314",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0f36e6-ce14-4226-9c5c-b73a98837116",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4771e07-d1dc-4b95-b239-06e3d2f2eecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ea7b19-d407-4b71-bb20-56ac68bfb74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f69e398-c3e5-4903-aa67-1cd0ec56d6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20115521-b3b3-41d5-9bf3-62aba9bd193c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e14222-c231-4db8-9c0b-f6ef61b2a2f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8600634f-ca7f-4a6d-b9b0-655990d80036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6dd9c9-853d-407f-b843-f7f470281428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29416ea-61c3-4343-b6e4-fc33467635d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035f8482-ff53-454b-9570-f7dbb588d238",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac862d8-9c3d-408a-8452-0a257cf61537",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39032de7-b415-4e97-9b92-ac9115722daa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3365384c-4150-453b-8f5b-732c9dbff12f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5998f9da-9c39-49fb-ac2d-e99fbd73dc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e1c81b-edd4-40cc-81cf-ae9e27e6861c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d83f059-49bc-4340-93fb-7ec7596a9b57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1e976e8-6b09-4a53-acc2-9744500a0e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2595bdb-ce3a-4c9a-a44f-eb9259c480ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea3dd79-dd4d-486c-b59d-935d2def9469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd480527-a480-4e38-a95a-7e60a26271a3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606dfb7c-9f14-45b6-a429-9c6aae48f25c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e687afb-19ba-439e-9e1e-aaf4015bd398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "184b6a65-6bd5-4ec4-a4f5-a365fe3c41d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e2b141-085e-4ee7-943a-a7d1c6778efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597de236-6cf8-4ad9-b24c-ec80f51e1dbc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0169d737-21f1-4de8-8d43-a6f12f019a95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab8a374b-b816-4ead-a0f4-27eed7beb64a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74e9601-02ee-4751-9011-b2a7746218dd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d97b5b-1c77-4b36-8c6c-0c72b7c6f696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3ee53c-b106-472f-860b-e2c5f3a3520d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28061890-f6f2-4d76-9cff-a3cbd8147d19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07f13f62-df6d-47b7-899a-50aa04673164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18ecabd-bafb-4a3b-b8c8-fadb97291880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60855384-c25e-4a8f-a562-a6847b78f1a1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "061d63c9-1d14-44c5-800b-e51ce29bee47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06e27b27-4c46-422b-8dce-792c93d17d80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b344d124-f675-48db-b622-5dd6edefb5b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ad642cd-df97-4ea1-9a22-8e30b6e3c132"
                    }
                  }
                ]
              },
              {
                "id": "0971cd85-b7d7-41c4-877d-13051d369122",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c026781b-d1e7-4d77-aca2-a8b125d3727a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf326ad-954e-4bb4-a0f6-f81fcb6381a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "62b3ca82-ba65-4849-b5a6-b40ac3aa48f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1eef1b4-180a-43d0-a696-89382fe356e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93c8d69a-8293-4b79-8cac-e2b536978f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4a540a-e3eb-4e74-a49a-2f278818d4fb",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec396e8-16cc-4aa5-a210-1ffc489e2d35",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7e26a943-a893-42e5-b613-ad9502b7c0ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd765a2c-b1e8-4641-9fee-2baae8f8b7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aac2c877-ce28-4f97-a29c-230d2a6518a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d643f82-2161-447e-9d27-8141d8152d51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62505848-5a61-4d9d-8485-41764090be43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a48319e-d948-4455-9ec3-73053e9c3428",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32227ace-b5bf-4c85-9b2f-79728ee8164d"
                    }
                  }
                ]
              },
              {
                "id": "4051ea47-8207-4c6e-87f0-bb62b99318f0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "aba2aee6-65c0-4c9f-99eb-0b984cc1a878",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd412e3-5046-4dc8-b1e9-71dc27e6b678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4c0c0e7d-7afc-45ff-8fd9-c73cfbc0ee53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725ea0be-7a41-422f-a5de-1b57d5556e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5849ade-689f-47eb-b24a-9afec268c4a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9af90d09-5e59-4b54-b6d0-a80329321873",
            "name": "Positive Testing",
            "item": [
              {
                "id": "732f6e15-b6d4-4d00-9199-5210b561f4c6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e240c46b-d8b2-4aea-a1b9-06562630b3f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5d9c745d-8abd-4526-ad5a-8b9fe34966d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a26a4450-6e61-4a07-b7de-acf7cd9a9031",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27e7295c-717c-434e-ba35-ffa12127734d"
                    }
                  }
                ]
              },
              {
                "id": "8303e9c9-f4b2-4089-9ea9-b8381939fe92",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1d7d4e8-1ea8-48ec-b711-0296a6a09c74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7893b4ef-7c73-4cac-85cd-f8472e1c269e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8a0ce81-39cc-4cdc-b4c8-86ee0252edf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d6359b2-fe46-462f-8836-25950278c317"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fc8bbaa-d517-45e7-996c-3322d2bfe64b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "290fb040-c4b1-4791-b37c-aee1bfed783b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e82a3484-a5cc-406f-96fa-d8fa8a43c1ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17568972-cc49-4a3f-8f81-52a479f1cdc6"
            }
          }
        ]
      },
      {
        "id": "93d98425-a007-4cc0-a538-226ca782cffc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "006df8d0-10ef-423c-b858-70086819a9d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6aa9746-f3bd-419f-b0f9-2ccc2ef0ef72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6055dcf6-a3e9-4d2a-bf08-5a5fb294bad4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2035c7-508c-41bb-97fe-1856628e507c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b73d1df0-4fb3-4477-bf65-87c057014dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b037ecf-366d-46b6-b5fa-781f3b19790d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67f71f2f-a7c4-40e3-9e76-aaf265eb6cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ea5d18-4343-44cb-b6a2-f057222a959b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8244a2a5-3378-4696-932f-7a771cd2ad00",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "30329cfe-abe3-4908-9dfa-d957820be802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8560536e-c5da-4a23-a247-9746b7d38c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bca07ae-262c-4525-8340-84ffcf9484f2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23ad5da7-6486-4e67-be73-672db2c3717d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1a0f2cf-f169-4032-aaf2-a2b7d2a1e20c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a521ee7-7c91-438e-81d5-450889ce22ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3fa2978-8db1-4426-bbe3-d2ebbc6a8ae5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6246ae3b-00d0-4206-9d2b-7b93726e353e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d97a8d1d-bf40-48a7-9e0e-4fbf64afbe18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1eb197db-40d2-44e6-b5d3-d4b5972661e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7cdc529e-de8c-412f-8093-3a64d6140534"
            }
          }
        ]
      },
      {
        "id": "619d0567-0928-42a5-a32d-e9b60e7b9663",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "34cc494b-a985-4464-95df-1ebde66e751c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90f4527a-9d18-4326-a82e-309ca36e2dcd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "515db033-fe48-47fc-a171-f58b7af588e8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9d22a6-aced-481f-8853-f0e3ef70dbbe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5fe6b889-3b26-4d4a-a0fe-1105d5f68f93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d85916-eb91-4b93-8850-a4e6ca36721e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bba895b6-4d9d-4ed5-8edf-bee8d067fdc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662843a3-d119-4e9b-a9a3-ca36e90fdaa0",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ff3a9b-4e5d-4c49-84cc-4fe0cc86eb45",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b99fd20-e57c-41cf-a2d5-aaca9a463159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9996a91-dcef-4478-b650-7b3c40abb2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2dab9388-4575-44b6-900d-163612cc3b69"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea24f6ac-217b-4a9d-8f90-9cdaef88abcf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "183d67c4-65c6-475b-9ab0-a1ee8197830f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae033f8c-314a-40d2-9d2e-9b55194095a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8daa4e71-14be-488f-9ac1-916040cfe573"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d45d7db-74a2-4fa1-a868-daff5be98ddd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "95a74814-b839-444a-9ea6-08008fac7faf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee31bac3-b6c1-4b0c-bcc8-59c88dec5bbe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4691a99-37ea-43a6-a1e1-c9aa3d0c553b"
            }
          }
        ]
      },
      {
        "id": "5dfd14ad-cf14-40ef-b660-5d10fae2f896",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "becf4b5f-5e36-4b19-884e-3d95823fdcbb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dac475e6-c5b7-4418-83fb-b82f09d6c2ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad1cd509-760d-4e52-a0b9-69eff37aeaa4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28995c7c-44fb-4c2f-bf4a-c646743b9e05",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5a95d36c-303d-4aa4-b2b8-fb2eaeb3f62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fe6a5e-c296-4b76-a644-db3c03625029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a212756-8a00-4005-a50c-7e76713fdf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85739b2f-a302-4fd3-9b5c-875ef62da26d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7285aa-ec91-42b2-89cc-e481f4588943",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "184debba-91a2-43ae-99b8-d9a76fb21c57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f25f5ab-78c8-48da-808d-00bde45137de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ba1f6f9-c122-410a-8efb-ba353afe2c21"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f246e15-67ec-4f6c-87c3-a9d4d66cd729",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "556fbac7-a003-4bf7-9658-17aed972912f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b740f44-8952-4e43-bfb4-99b7c12e0a5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "151b4b01-40f7-4e34-b1bc-51e523781395"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3870c486-e4ad-4210-8aee-f12ae4eb160c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bdbaed6a-ce73-4efc-813d-554a29ad5a7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb61c8d3-ea2d-4a87-ac3a-e4ddf48ac6b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2eb3a530-aac3-4867-869a-6e1d039fdf46"
            }
          }
        ]
      },
      {
        "id": "8ff7cdef-07bd-48d3-b741-2e46e8abd87c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b947e5f1-6c6b-449c-a634-a7bc3c70e03f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f11a1c79-3234-470a-acc0-acc91076270c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "30898f8a-0602-4f4d-af1b-ecfc2e043725",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41146bb3-3bcf-4527-abb9-5a19845ebf38",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "834731c6-fad7-49d2-859c-27a3af3827b3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 90.46183206106873,
      "responseMin": 6,
      "responseMax": 1055,
      "responseSd": 175.60122587254702,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674520853246,
      "completed": 1674520887889
    },
    "executions": [
      {
        "id": "77eda539-7abb-43c0-86fb-b56fcbe93848",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "924ffdc7-0e87-4342-b5a4-cda152bfc8c8",
          "httpRequestId": "3a9f64d0-2b7c-40e4-ac21-b179b3e11843"
        },
        "item": {
          "id": "77eda539-7abb-43c0-86fb-b56fcbe93848",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "27dbbbe5-6afc-475e-846f-46449a1ffe94",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "4168ac76-1892-4668-bdc4-f5e1bd6e647d",
        "cursor": {
          "ref": "90edbfcc-086d-4fa9-96c7-0a83fb427477",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "14c95581-713d-49ef-a953-3c6be9c67c0e"
        },
        "item": {
          "id": "4168ac76-1892-4668-bdc4-f5e1bd6e647d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4cc40911-a611-4743-8191-4765505f3651",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "f32787ca-0e4d-4b83-915a-3bf65b16564d",
        "cursor": {
          "ref": "190672cb-7cfd-44c7-a9f0-9a95fbd78b93",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cfb67e3e-c097-40e1-ac21-5396710ca9ed"
        },
        "item": {
          "id": "f32787ca-0e4d-4b83-915a-3bf65b16564d",
          "name": "did_json"
        },
        "response": {
          "id": "f43dbc7e-bde9-4593-bcfc-baabf269577f",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de42c14-6876-4243-8311-d5248f4cdf16",
        "cursor": {
          "ref": "415ee16e-44d4-4a65-86de-15ea05760b56",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "97f8ceb8-0f47-4e76-b6d4-f9b2a13db963"
        },
        "item": {
          "id": "3de42c14-6876-4243-8311-d5248f4cdf16",
          "name": "did:invalid"
        },
        "response": {
          "id": "3d7cf718-7863-4c1b-91a6-b12e939d6451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de42c14-6876-4243-8311-d5248f4cdf16",
        "cursor": {
          "ref": "415ee16e-44d4-4a65-86de-15ea05760b56",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "97f8ceb8-0f47-4e76-b6d4-f9b2a13db963"
        },
        "item": {
          "id": "3de42c14-6876-4243-8311-d5248f4cdf16",
          "name": "did:invalid"
        },
        "response": {
          "id": "3d7cf718-7863-4c1b-91a6-b12e939d6451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "558bbb6a-2fc5-4b9e-9b35-123b16426e99",
        "cursor": {
          "ref": "b02903eb-581d-4f5b-8da5-80732daec178",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "454e3d5d-1c4a-4de4-80b1-1559b52c61ca"
        },
        "item": {
          "id": "558bbb6a-2fc5-4b9e-9b35-123b16426e99",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6faa7144-254f-49a3-a8e3-705f4bac4536",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3488991-e046-44e4-bc8a-7077fbd1fb55",
        "cursor": {
          "ref": "10f60251-a66b-446a-912e-50c785d61fcb",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "654ffe95-0550-4f5a-add7-1a08f1db83fe"
        },
        "item": {
          "id": "b3488991-e046-44e4-bc8a-7077fbd1fb55",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8098eea9-35fd-4d58-8f1f-37d6536e3ba5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b164090-c465-4b1a-ace0-6fc02e2115e9",
        "cursor": {
          "ref": "502f656d-dd98-4c24-87cb-84ea381fdca2",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9e681abc-9595-4617-bef1-b0147cfd6a08"
        },
        "item": {
          "id": "8b164090-c465-4b1a-ace0-6fc02e2115e9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "351a53a1-307d-44e6-ab63-72428c6f4e54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d219946-670b-4850-b84b-9c2e25674a1d",
        "cursor": {
          "ref": "87badc07-5f5d-4491-8b2e-a32c464880a2",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d2ccde7b-358f-4b58-ae35-f25b2ca3a4ca"
        },
        "item": {
          "id": "9d219946-670b-4850-b84b-9c2e25674a1d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "03977e61-156a-4a3c-bd75-707950480006",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d219946-670b-4850-b84b-9c2e25674a1d",
        "cursor": {
          "ref": "87badc07-5f5d-4491-8b2e-a32c464880a2",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d2ccde7b-358f-4b58-ae35-f25b2ca3a4ca"
        },
        "item": {
          "id": "9d219946-670b-4850-b84b-9c2e25674a1d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "03977e61-156a-4a3c-bd75-707950480006",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0450c0f-ede6-4415-bd4a-20e76ef1d9d4",
        "cursor": {
          "ref": "f07ad6e0-443f-4e19-863d-f62ef7907be3",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3d611dc1-3e41-496d-b5ad-fcac6692cbfb"
        },
        "item": {
          "id": "c0450c0f-ede6-4415-bd4a-20e76ef1d9d4",
          "name": "identifiers"
        },
        "response": {
          "id": "2a434c0d-8b9f-4c93-865b-f0d2fdcf0e2d",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41888d46-918d-45c6-bbad-94657e559997",
        "cursor": {
          "ref": "d25bf3cf-729f-4230-aff0-89421771dc53",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "81a016f3-21d9-4aca-93f3-b91815b0549d"
        },
        "item": {
          "id": "41888d46-918d-45c6-bbad-94657e559997",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "38693cfa-78fd-4f86-8f60-5a59cf3b4a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41888d46-918d-45c6-bbad-94657e559997",
        "cursor": {
          "ref": "d25bf3cf-729f-4230-aff0-89421771dc53",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "81a016f3-21d9-4aca-93f3-b91815b0549d"
        },
        "item": {
          "id": "41888d46-918d-45c6-bbad-94657e559997",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "38693cfa-78fd-4f86-8f60-5a59cf3b4a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0924b1-35e0-4008-b49c-ea23083d872c",
        "cursor": {
          "ref": "5b84c856-2d37-45e1-b94e-12000d7b4eb5",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "61cd4669-24a1-4c35-8049-3582dd64d02b"
        },
        "item": {
          "id": "aa0924b1-35e0-4008-b49c-ea23083d872c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0f244cfd-660e-4f44-ba93-fc7676845453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deae7022-d31c-4ea5-921b-fd79f639ceb7",
        "cursor": {
          "ref": "ae99546d-3916-4cf2-b5e7-aff2f4d845a3",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d98ff070-b1b5-4724-8164-1740e5fe8102"
        },
        "item": {
          "id": "deae7022-d31c-4ea5-921b-fd79f639ceb7",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "1610f6db-f37c-4823-b074-ec221c42653b",
          "status": "Created",
          "code": 201,
          "responseTime": 584,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "6f68ae55-8104-4358-a819-863bf51c7e7c",
        "cursor": {
          "ref": "36701740-de5b-4748-b668-6f0b8ddf4c7e",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c988a183-faa3-4f12-8161-7f2a5062811e"
        },
        "item": {
          "id": "6f68ae55-8104-4358-a819-863bf51c7e7c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8ee2c1e4-a9e4-428e-aafe-a023aa8f7ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecf2a5e-d697-42e3-9dcc-0bbc37a6629f",
        "cursor": {
          "ref": "88456efb-c86d-4402-8eb8-dfc65cb4b1e8",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4d82d9b5-4313-4b76-8a66-e02fb16e3c29"
        },
        "item": {
          "id": "6ecf2a5e-d697-42e3-9dcc-0bbc37a6629f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ebce7ca8-8e74-40a3-8f25-dfc9af852df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c374e691-a5a0-42c8-a23f-3a1595bad984",
        "cursor": {
          "ref": "703e04c9-2583-49f5-a09e-b0a08bf69b8d",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5c3aebbf-0af1-4597-9c75-5514291bd453"
        },
        "item": {
          "id": "c374e691-a5a0-42c8-a23f-3a1595bad984",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6ca7345c-c336-434e-93cc-763f9e0723df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a445018-076e-4953-9e48-12f37f098715",
        "cursor": {
          "ref": "56f7b28a-6e20-4c57-9307-5a759ea8ac97",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "64c1e873-7e99-4c5f-b041-acc237e870bb"
        },
        "item": {
          "id": "7a445018-076e-4953-9e48-12f37f098715",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d4d352a6-2649-47bd-916a-d15c57f97e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf76e710-5185-47ab-8b02-7abc127e6b78",
        "cursor": {
          "ref": "c60bd57d-c004-40b5-83d9-b142fc986ccb",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7d5cd209-4b26-486a-b308-9187278837ad"
        },
        "item": {
          "id": "bf76e710-5185-47ab-8b02-7abc127e6b78",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0babbf14-3811-4272-a448-c34182cac2b0",
          "status": "Created",
          "code": 201,
          "responseTime": 491,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "21bf2a72-931c-4d60-baeb-4842ac041258",
        "cursor": {
          "ref": "2c881fd5-776f-4518-b529-58e9873a116b",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "805472c7-a5ad-47d1-9d17-be0e4e794e64"
        },
        "item": {
          "id": "21bf2a72-931c-4d60-baeb-4842ac041258",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5fcdcac3-e416-4bc4-8e51-746f2b6e1fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5882e47c-756f-437a-97dd-1dc0af8b1ed5",
        "cursor": {
          "ref": "a5f23996-0e29-4f71-bb81-cba2fef23619",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2ce53c07-2977-4015-9120-ae5088f7913c"
        },
        "item": {
          "id": "5882e47c-756f-437a-97dd-1dc0af8b1ed5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fc1dc74f-ccbc-4763-ad35-e567cdb4eba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0506627a-3c3a-4b93-a01d-109cd1bc82ed",
        "cursor": {
          "ref": "7d0b98f1-b15f-4f50-a257-2f7dc28a6c05",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0a1c0845-58de-4d9a-85b6-1e3c033eea2c"
        },
        "item": {
          "id": "0506627a-3c3a-4b93-a01d-109cd1bc82ed",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1db131ba-e983-4de5-8b81-21133beeb188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e01a38-b626-4058-ac95-8fa2b0877444",
        "cursor": {
          "ref": "38d84477-9e30-4032-b6f7-bec13737c01b",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "70410e17-d23e-4381-9d02-c47891fff39e"
        },
        "item": {
          "id": "57e01a38-b626-4058-ac95-8fa2b0877444",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fa6a8973-6f8c-48fe-b069-9b1b6dda3bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b3d2a8-0347-4be6-b7ea-4719c5dc4ded",
        "cursor": {
          "ref": "568ce156-581a-4460-bec8-2cd1ac8f1e2e",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6317d0fb-d92c-414d-a4da-ac67ec8c0ab4"
        },
        "item": {
          "id": "f3b3d2a8-0347-4be6-b7ea-4719c5dc4ded",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ee6a55ac-1ed8-4de3-bd99-5bd076179a70",
          "status": "Created",
          "code": 201,
          "responseTime": 529,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1d139fca-43b7-4d68-9647-23adcd5e1a8e",
        "cursor": {
          "ref": "3e1d97c3-f83d-46c2-8684-4cbd14073a42",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "032774d5-9522-4d8a-a097-2a62e70fb491"
        },
        "item": {
          "id": "1d139fca-43b7-4d68-9647-23adcd5e1a8e",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "078899ae-6a65-4863-b378-0c3ab33011bc",
          "status": "Created",
          "code": 201,
          "responseTime": 860,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "38d35daf-2a53-482e-a484-9ecfc3bb60eb",
        "cursor": {
          "ref": "80880d40-c3b3-4963-976b-748a904a297b",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dafc05a8-2b84-4d93-82a4-eae56cb931d2"
        },
        "item": {
          "id": "38d35daf-2a53-482e-a484-9ecfc3bb60eb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "00e32c51-179a-440e-8fa3-5d28b1e89c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0eb8b1-2422-4253-bc2a-bef474cea6b2",
        "cursor": {
          "ref": "613ac3b7-e74d-4777-a260-e3141270b014",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2bd2eb38-e612-4010-90c1-34c148b0f084"
        },
        "item": {
          "id": "8a0eb8b1-2422-4253-bc2a-bef474cea6b2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f7ee6b89-edd8-44d2-9a0f-3f99eb890e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdf69b9-0e1d-4c3f-806d-6bdb36574cfe",
        "cursor": {
          "ref": "ede9e93f-f6d2-482c-adb3-0bde5cf45ffc",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e5e5f1ee-e61d-4104-a665-39e199ee13ec"
        },
        "item": {
          "id": "3cdf69b9-0e1d-4c3f-806d-6bdb36574cfe",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a88bb1be-ff52-41d1-a946-b47bf7172d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82be33cf-3a55-445c-9407-e83cb65598b7",
        "cursor": {
          "ref": "01f47c7a-8a18-4b9b-b8cb-5508c40a9469",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8fec6032-e237-4e86-9707-19fb7206ded5"
        },
        "item": {
          "id": "82be33cf-3a55-445c-9407-e83cb65598b7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "160046cd-f5eb-4611-861c-9ab22a700109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6648822-92d3-47ea-8499-62babe4cd56a",
        "cursor": {
          "ref": "90fbbc75-c40d-44af-923e-559e82824e35",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "621f89a9-88fe-414d-a40b-df5cf3f7eabf"
        },
        "item": {
          "id": "d6648822-92d3-47ea-8499-62babe4cd56a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f1565fa5-8da2-4b91-b25e-98b466a9e0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1560e78-412b-459d-8a7b-6b9d1eb51b74",
        "cursor": {
          "ref": "e37ebdee-65d0-473d-9fa9-f1cd73bec9af",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2a564658-abeb-43e0-8b67-f545b3694d20"
        },
        "item": {
          "id": "e1560e78-412b-459d-8a7b-6b9d1eb51b74",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b6f6d4c0-ddde-431f-9e20-b61e24754950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e652895f-e779-46a9-b8fd-21f067ffa421",
        "cursor": {
          "ref": "119d9778-1c3a-44b2-98f7-6502f414250f",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0b51fd51-aedb-464b-858c-609219c9e43f"
        },
        "item": {
          "id": "e652895f-e779-46a9-b8fd-21f067ffa421",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1bde35b0-6b76-44b4-bcee-a804a39f9f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7b5f72-bb89-442f-9242-f720d66047f3",
        "cursor": {
          "ref": "c9aef64d-bcd4-418c-b358-a037b4e5da9d",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b988e9bb-d434-4459-9776-96d0494bb3ee"
        },
        "item": {
          "id": "0f7b5f72-bb89-442f-9242-f720d66047f3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b5898c1d-e84c-48fc-82e3-8516bb19c4ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d17e27c-c32c-4754-a7c3-1a3309b946d7",
        "cursor": {
          "ref": "f7f7e2fc-1d00-4f99-b414-f0d0907173c0",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e2e6e237-0eea-4e19-97a6-5f514d457707"
        },
        "item": {
          "id": "1d17e27c-c32c-4754-a7c3-1a3309b946d7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "76972437-8a8b-4c2e-a541-57722d7b52c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c665b643-fbcc-46a4-9fa4-1922ec7cb9c8",
        "cursor": {
          "ref": "11cea378-fbdd-4abf-8d83-6df230bdcf37",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "81b30fe5-ea8f-40cc-8ad1-2c8121dd9fe4"
        },
        "item": {
          "id": "c665b643-fbcc-46a4-9fa4-1922ec7cb9c8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c40424a7-463f-46f2-bc65-33457ba7a58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3c42a7-a2cd-4784-9690-4ef659f7b3ac",
        "cursor": {
          "ref": "733bf528-444b-42c3-9c26-a89d876f3f01",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "58a22280-2711-45a4-86e4-0b209cc9e62e"
        },
        "item": {
          "id": "cd3c42a7-a2cd-4784-9690-4ef659f7b3ac",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f64888b4-e10e-4085-a78f-17b56ebec68a",
          "status": "Created",
          "code": 201,
          "responseTime": 660,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6f6ef11a-ab17-4f50-a28f-fdb39068248b",
        "cursor": {
          "ref": "50842bdc-0105-4403-95f8-7a4886fbad62",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d79b396c-9b96-499d-a847-8853a7698981"
        },
        "item": {
          "id": "6f6ef11a-ab17-4f50-a28f-fdb39068248b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6a1514bf-ce9a-4a19-825e-83e615806760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55afcb9e-ae55-45dc-93dc-e584dbff0c3b",
        "cursor": {
          "ref": "778a8edd-63d7-466e-b429-276d05bad911",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "48b2a00f-f788-4355-8a75-cbb858c1c257"
        },
        "item": {
          "id": "55afcb9e-ae55-45dc-93dc-e584dbff0c3b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "dd04fdba-208d-449f-b616-d463b1a32026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a18f6a-89ed-4264-a961-c906dabf37f2",
        "cursor": {
          "ref": "75fb1380-3b9b-466f-a745-dff653a08844",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "08d24862-a85a-45c6-b585-012fb2550a54"
        },
        "item": {
          "id": "34a18f6a-89ed-4264-a961-c906dabf37f2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "84013a3d-d7a0-4c55-926c-f0f7e1a81a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238b6557-c21e-4c04-aa81-b6bb4b1d37dd",
        "cursor": {
          "ref": "b7b143cd-59de-4773-ba0a-f9f09d30f302",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c5041d62-1510-4eea-9491-09bd4ee71196"
        },
        "item": {
          "id": "238b6557-c21e-4c04-aa81-b6bb4b1d37dd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "57ff6be3-8f79-47b3-9b38-a8224aa52019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62e412a-1778-402d-a0d4-d4211207ec75",
        "cursor": {
          "ref": "e0d0806d-27dc-4e79-8d1c-54487f605d26",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "85502c4b-d4d3-4c09-bd1f-86a2ee2f07c6"
        },
        "item": {
          "id": "e62e412a-1778-402d-a0d4-d4211207ec75",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5dd9eafb-ec64-40de-b77f-fabeb785ed96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7754880c-0e70-4bfe-ba3d-9d199f828feb",
        "cursor": {
          "ref": "916ddcd8-c350-46b0-af14-38f9971053b6",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6de15a5c-4e67-4d70-939f-40c1ba96feda"
        },
        "item": {
          "id": "7754880c-0e70-4bfe-ba3d-9d199f828feb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "688ffd87-6dcd-4f5f-b4c4-edf4e0b7eec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d41450-d84f-41d1-b0b1-cca544ee4216",
        "cursor": {
          "ref": "a0cc7cff-49d2-45d1-a0d6-1b76d96960a8",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6f112947-d9b9-4e83-a6f1-6e90113685ca"
        },
        "item": {
          "id": "80d41450-d84f-41d1-b0b1-cca544ee4216",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "22d03a9c-4a8d-4f0d-a8dc-28b4dd295446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa1109f-ec98-48fc-b4ea-864e29e2db69",
        "cursor": {
          "ref": "364d6e3b-ab84-4037-8c69-0cf9e21b4370",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0be45e19-5c4b-427d-b629-8526d10f4ae9"
        },
        "item": {
          "id": "3aa1109f-ec98-48fc-b4ea-864e29e2db69",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f2a52c40-95d9-4cf9-b334-5def675319c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f29304-21ca-4e87-b972-9d2fd0a7f489",
        "cursor": {
          "ref": "3b46ca43-3e19-4187-939f-7ea4e3e92cc5",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4fea1436-c5bf-493f-be6f-67ac3bbbc9b7"
        },
        "item": {
          "id": "71f29304-21ca-4e87-b972-9d2fd0a7f489",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fa2bf376-871a-4670-82e1-1720aba307bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d22d00-7397-435e-a606-d274edb998c3",
        "cursor": {
          "ref": "48a006a9-4b18-4327-a45f-645f1e621b80",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d6c64691-d2e5-4ea7-a0bb-ebc2790e2f99"
        },
        "item": {
          "id": "58d22d00-7397-435e-a606-d274edb998c3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "690cb25d-1284-4879-8d64-5c420ecddbc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50da4a3-95d8-4503-b321-6936ff7cd2e2",
        "cursor": {
          "ref": "0b76975b-ffb2-4b9f-bbbd-2a5343a3f691",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1b88da02-07fd-468e-9e7e-04b251754121"
        },
        "item": {
          "id": "a50da4a3-95d8-4503-b321-6936ff7cd2e2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "217ff7d1-110a-43e8-a5fa-d9b166954e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ccd428-a982-4406-9422-ffd4b0cc2031",
        "cursor": {
          "ref": "13dc0fbc-bbdf-49a6-a7dc-4c2a5612a996",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c50300e4-6ee2-4050-9a73-ed4a4269fea9"
        },
        "item": {
          "id": "f5ccd428-a982-4406-9422-ffd4b0cc2031",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3c8cbe7f-5e48-46a3-8b5a-9a4fb371c57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8415614e-76d6-4128-944f-a7fa7013a5bb",
        "cursor": {
          "ref": "df763657-3f83-49d5-9d48-66e891a2fcce",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d57b868c-d6d0-48b3-a61c-1ea05be2bf8e"
        },
        "item": {
          "id": "8415614e-76d6-4128-944f-a7fa7013a5bb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3081853f-2608-4153-a0af-c8d85bc6a0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 338,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "db780397-d189-48db-be6a-daedf7115478",
        "cursor": {
          "ref": "bc9e7dc5-8c3a-4cba-b559-5d0ea0380577",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d1bc3cbc-f8c9-489b-931a-1655149ecce1"
        },
        "item": {
          "id": "db780397-d189-48db-be6a-daedf7115478",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a67c8c85-2e7d-427e-9c55-e79937b32792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2383396-de1e-4fed-b1e7-245149ed0a5d",
        "cursor": {
          "ref": "c6cb6698-304b-442a-9a36-bb719b6d1f52",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "232a6cbe-d0ca-4801-bf14-af8c5bf3e6c8"
        },
        "item": {
          "id": "e2383396-de1e-4fed-b1e7-245149ed0a5d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "db5d7600-ea0d-441e-b9b7-1fa0b6b8d80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb63e2e-b8d8-4ef9-a7b2-2c8bf0ac2186",
        "cursor": {
          "ref": "ad0c76cc-2f35-488b-a58e-a2763b7c7784",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4e77b567-bc66-460d-9b8b-13a7db931b91"
        },
        "item": {
          "id": "0cb63e2e-b8d8-4ef9-a7b2-2c8bf0ac2186",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b138b2b8-9944-4808-9799-1c183755589f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9b4d5a-1b00-4a9d-9569-65c71b9d5375",
        "cursor": {
          "ref": "672cf90a-a673-41f3-b0ca-74a2c2ff4bdc",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6d6dff60-71ea-4e3c-a252-11f45fbf6674"
        },
        "item": {
          "id": "ac9b4d5a-1b00-4a9d-9569-65c71b9d5375",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "48eee3ce-a01b-4ee8-8f7d-b7ad3f6b9bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514c0ff1-93e7-41de-856f-fa950e3d0b9e",
        "cursor": {
          "ref": "ecaa8a94-b44e-4d7f-9cc2-143150798e39",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2e2819fd-b282-48d7-96cf-ccdc45e4e5aa"
        },
        "item": {
          "id": "514c0ff1-93e7-41de-856f-fa950e3d0b9e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0f007f37-883e-4799-a787-51d7080213e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0759a9-7e7f-4f06-8b73-0910912449a5",
        "cursor": {
          "ref": "4b3397be-e1b3-467a-bdf2-e990cbcb2059",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "126138aa-a72a-4a18-89b9-107f0a0adfbf"
        },
        "item": {
          "id": "ef0759a9-7e7f-4f06-8b73-0910912449a5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8960a11c-46f5-45ff-9880-3fa27abbccd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0336c454-8d9c-4a93-89aa-e561160180ad",
        "cursor": {
          "ref": "29181971-a3b2-4714-9e7e-fa53e006e878",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "70e919f6-d628-45e2-afaa-0aa7ec567262"
        },
        "item": {
          "id": "0336c454-8d9c-4a93-89aa-e561160180ad",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "16117377-2fb6-49e0-b82f-464e67420602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 364,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "ba9248ab-024a-4289-bb24-47c51ddc27fb",
        "cursor": {
          "ref": "67374379-c063-4ba0-9bed-87722e94a449",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "719cc320-e97a-4500-a216-7b7d985bc155"
        },
        "item": {
          "id": "ba9248ab-024a-4289-bb24-47c51ddc27fb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bec2bfeb-0d95-47df-96f0-52ea4fbc4015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44feb076-db47-4b3c-8b0d-00d1ba5345f9",
        "cursor": {
          "ref": "0828f2f4-7408-4a9a-ad10-c0bcf7016427",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7d419e74-2c5a-45a1-ac69-a5e752f3e18a"
        },
        "item": {
          "id": "44feb076-db47-4b3c-8b0d-00d1ba5345f9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bcedda2e-b8b2-4257-ac94-bc4229152d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2218f5a9-d32c-4333-83a1-a683b916c7e2",
        "cursor": {
          "ref": "54d2690f-0002-44ed-892c-58c132ae842d",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ac62363d-a1ca-4327-9023-066677c0bbca"
        },
        "item": {
          "id": "2218f5a9-d32c-4333-83a1-a683b916c7e2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4b9e6372-fe87-4b3f-a9cd-2966c0ea1be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad65bf2-499e-4fe2-a58b-f54284db59b2",
        "cursor": {
          "ref": "9656eb9c-9035-4e77-9e9c-77a9b5ef4d8a",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5717ed0a-a646-49ef-9845-d34c2375331c"
        },
        "item": {
          "id": "2ad65bf2-499e-4fe2-a58b-f54284db59b2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "eb3eb949-5adc-4fa6-9ad2-43d57f1dda69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48f02e4-d7bd-4680-a392-e5015859b1e5",
        "cursor": {
          "ref": "3fceedd0-1b85-44cf-ae2e-1eec1238757f",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9704070a-2d75-49b7-b60a-0e15d8f4a265"
        },
        "item": {
          "id": "b48f02e4-d7bd-4680-a392-e5015859b1e5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6d5188d4-bb88-4a9d-a3e5-b1e921d8ed7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b3a70b-dfa4-4a0a-aea0-076b0c7139a4",
        "cursor": {
          "ref": "fc519041-1abf-405f-8451-930e7cbdc85a",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0527bf6f-dadf-4cb7-a05f-60cd98790149"
        },
        "item": {
          "id": "27b3a70b-dfa4-4a0a-aea0-076b0c7139a4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a1895958-e3d7-4c37-980a-0c9213bc64f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36fe7f57-0314-4611-8dab-c3b53db1d78b",
        "cursor": {
          "ref": "f3383eae-c8ff-491c-bfe5-89a2a6dd1eb5",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7ea1cdde-55aa-4d11-877f-5e16583766a9"
        },
        "item": {
          "id": "36fe7f57-0314-4611-8dab-c3b53db1d78b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5b09df80-1641-43fe-a6ba-0e2b045c7c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a9da0f-a233-44bd-ad43-71aae855aa0f",
        "cursor": {
          "ref": "cc87f7a0-ecc0-4a3a-89ab-bf8e78c6d20d",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "af677647-0d45-425f-9cd5-abdf64ca762b"
        },
        "item": {
          "id": "c0a9da0f-a233-44bd-ad43-71aae855aa0f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ec275a95-0d6d-4656-aaae-d934c13309d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9506a75e-4b43-4165-9e8e-4f002d9566f3",
        "cursor": {
          "ref": "0b566e91-9724-4c53-a024-505d68f93b96",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "87108711-247b-4eae-a002-5f680078bfc6"
        },
        "item": {
          "id": "9506a75e-4b43-4165-9e8e-4f002d9566f3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3b953e21-4e39-429d-9571-8a3934471553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632ada5f-a7cb-47d1-926d-27556ae9178e",
        "cursor": {
          "ref": "dc0b19c4-2c0c-47c5-97e6-cd1904b66c47",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d75961b0-b7f8-4166-9b46-353ac00c4bba"
        },
        "item": {
          "id": "632ada5f-a7cb-47d1-926d-27556ae9178e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c3c85e9b-f92f-4d88-8c95-539a0144bc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb4579c-bd28-4ef8-b73a-0e4979fd8404",
        "cursor": {
          "ref": "72b7c400-72c1-41c0-a6c1-521e444e5926",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c1906f6d-970f-4805-923d-bbfc1fa57c5f"
        },
        "item": {
          "id": "2cb4579c-bd28-4ef8-b73a-0e4979fd8404",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d19ec3de-43c4-4d51-99ad-17b605094d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791f9880-980c-4a07-9964-591de9944aaa",
        "cursor": {
          "ref": "489ad494-6046-4a99-86bd-b6e3ebccee83",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a986654b-c2c8-4c9c-98b2-eeb2a184f0ce"
        },
        "item": {
          "id": "791f9880-980c-4a07-9964-591de9944aaa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d08e4ddb-221a-4732-8036-da2b4cf6e1d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68084cab-5bbd-47cf-b339-6f6883aa304a",
        "cursor": {
          "ref": "5244a3ee-096e-409a-837c-157e3746bba6",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6e777b24-13bd-4be4-bb43-d71eb803dbfb"
        },
        "item": {
          "id": "68084cab-5bbd-47cf-b339-6f6883aa304a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e813de64-e292-46fd-8538-7c5ed0e1b99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0fa5e9-9706-4f12-b594-6f706fe6e290",
        "cursor": {
          "ref": "27ec5a58-0ac4-4b43-9475-152ae4bbff4f",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2deacbd0-041b-4bef-be44-2bf1113ee600"
        },
        "item": {
          "id": "5f0fa5e9-9706-4f12-b594-6f706fe6e290",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0072044a-675e-4594-9e96-4c144894140a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78faada0-8bb6-4ef6-b54a-836164c68d7d",
        "cursor": {
          "ref": "9e788507-58b4-4ab6-91ca-4e1dafd4d969",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "65283626-95cf-43c8-91c7-c8c368319385"
        },
        "item": {
          "id": "78faada0-8bb6-4ef6-b54a-836164c68d7d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "42c1d8fa-d12b-4bcd-8774-67b7970912ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb25327-c594-4beb-9988-2ffa455a9b28",
        "cursor": {
          "ref": "42330dba-54de-40a7-bccf-54d15c2f9a39",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "eef2775d-28af-450a-adf9-e1da6b52b379"
        },
        "item": {
          "id": "5cb25327-c594-4beb-9988-2ffa455a9b28",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f7dddf75-1730-4113-abc2-ff67ff5673d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8fe8b7-8de4-4b24-a9bb-7c8082854236",
        "cursor": {
          "ref": "bdbf7ef5-027e-459f-94c1-1b0c64cb2608",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "91f17b1e-83f7-4980-847a-8521a7e5f06b"
        },
        "item": {
          "id": "bc8fe8b7-8de4-4b24-a9bb-7c8082854236",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c1a589e1-0cc2-447a-a0ef-ec75a8773448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f9be09-487e-408b-a241-5da16f6c04f3",
        "cursor": {
          "ref": "f287f6b7-94a9-43fd-94cb-cbe2c7e6cc36",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7f7e9fc8-e53e-47c4-99e4-8dfe369fb7bf"
        },
        "item": {
          "id": "91f9be09-487e-408b-a241-5da16f6c04f3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5d8e5dc1-488d-4843-8e2b-9d3eadfcf821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c991f8-4fc8-4524-8b72-151261f2fc4e",
        "cursor": {
          "ref": "3013dbf2-54df-45f7-9f90-1e9ae4cf160e",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e8f07238-c4b0-4c0f-b80a-45f3ca0f83c4"
        },
        "item": {
          "id": "f3c991f8-4fc8-4524-8b72-151261f2fc4e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9aae7e45-b462-4d0e-ab57-54f732ca854d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7e5f3c-fa1f-4573-a988-a7e459e2229e",
        "cursor": {
          "ref": "bb5afeb3-c1c9-4987-ad2f-41ebeae4bf5c",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7d999c10-a373-4670-9285-58ff904d7d13"
        },
        "item": {
          "id": "0d7e5f3c-fa1f-4573-a988-a7e459e2229e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bd1f1283-2897-47b0-90d5-976fb7cb013f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ecec3c-e4d7-4c14-b8c2-91538e58d4d8",
        "cursor": {
          "ref": "12b825b6-cab6-4013-8dd3-671c51e846d0",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7a44457b-2ace-4446-b236-c16229a44db8"
        },
        "item": {
          "id": "d2ecec3c-e4d7-4c14-b8c2-91538e58d4d8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9e5a41f7-5839-4e1c-aaca-b44a78069750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a62608c-1494-4cfd-975c-8cd9d9b8941a",
        "cursor": {
          "ref": "a2b0ae2e-04df-44c8-bf93-4e7bd739afb4",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "35acc1d9-7089-4fb0-83b6-00c0f8cf9444"
        },
        "item": {
          "id": "1a62608c-1494-4cfd-975c-8cd9d9b8941a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7a4f3e58-5781-4cf5-905b-fb0335078753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c5d500-c084-4421-93d8-1d7f39dfcbc7",
        "cursor": {
          "ref": "af094de0-8094-4731-8e34-826b582e93da",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "09f837fa-2ef2-4e26-9531-287b0ba7752a"
        },
        "item": {
          "id": "b3c5d500-c084-4421-93d8-1d7f39dfcbc7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2cd8c97b-535e-4e25-b531-ff23e038749b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439af4bc-208e-4cee-9cf9-cde5d929d533",
        "cursor": {
          "ref": "fb81a93f-7e25-401c-8cb1-84e419f037bd",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d13b78d8-6209-4067-bd35-ba2252635e97"
        },
        "item": {
          "id": "439af4bc-208e-4cee-9cf9-cde5d929d533",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "46a52d8e-13c9-4f9d-8851-b62b9c347409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75efa238-6707-4d6a-a42d-23f54a9d6ffe",
        "cursor": {
          "ref": "16a86be5-0a8a-4bab-b43d-96e1365726d4",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8a1147fd-a520-4115-afda-dc41a568926c"
        },
        "item": {
          "id": "75efa238-6707-4d6a-a42d-23f54a9d6ffe",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2feea0b9-f75d-4731-818d-6e59a0547067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9dd03f-8f59-443d-8077-37854be3b7b2",
        "cursor": {
          "ref": "dfc8d2ca-12cb-40e7-bdc4-0159b48cdf8b",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "38f7884b-389a-4ac0-a3f6-7b76b86a1f11"
        },
        "item": {
          "id": "dd9dd03f-8f59-443d-8077-37854be3b7b2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2ad5849e-6451-48ff-a452-011a5f9461bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c5e567-ad5d-445e-8048-58205e4b47e4",
        "cursor": {
          "ref": "14786d2f-fa9c-4c0d-9522-aae4a1945859",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7b74422c-e45c-44f1-b0eb-131d2cbce292"
        },
        "item": {
          "id": "d1c5e567-ad5d-445e-8048-58205e4b47e4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "574c9ba0-4ef9-4264-9777-a11d71385215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adea3dfd-e0e6-49a4-bef8-1c9ae82645dd",
        "cursor": {
          "ref": "9c452f6c-ee5d-438d-8fbc-b9098d780c5b",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "13ddebdd-1547-41a0-b56c-a3d6922873e6"
        },
        "item": {
          "id": "adea3dfd-e0e6-49a4-bef8-1c9ae82645dd",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "887a23b4-c750-49f4-aff2-46c3eb2b5427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab389532-3296-421e-b749-b4aeb2574df7",
        "cursor": {
          "ref": "6735ea12-a213-47c1-9ba4-69fe3922bc4c",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c64d1eba-ecac-4f3c-b48b-fb49a2b03ac0"
        },
        "item": {
          "id": "ab389532-3296-421e-b749-b4aeb2574df7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ab30580f-bc7a-4ba1-bd28-bacd2c248b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151c9daf-71ce-4cb5-8512-2ac10f397fb9",
        "cursor": {
          "ref": "c669acba-92fa-490b-ad32-7c2004aa1012",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3cbbe297-78ef-479f-8bc3-a530616d954b"
        },
        "item": {
          "id": "151c9daf-71ce-4cb5-8512-2ac10f397fb9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ddaab64c-bdb0-4f68-8dd0-08ebff9b7c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31455542-bf33-4c1d-bc11-0bfe7ba5c291",
        "cursor": {
          "ref": "6ddc6132-22cf-491e-a9e3-be3a9fa4e974",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9d64685e-e903-4baf-b14f-f890f1411478"
        },
        "item": {
          "id": "31455542-bf33-4c1d-bc11-0bfe7ba5c291",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4a4d5a71-5066-4223-8748-c56bc20792e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 354,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b62c4b-3c59-4dfe-8eb5-e0087240f32f",
        "cursor": {
          "ref": "56674599-51a4-42b4-be3c-75874a0a7eea",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d3d4a502-f24c-4b98-9f98-7e1e808a6843"
        },
        "item": {
          "id": "b6b62c4b-3c59-4dfe-8eb5-e0087240f32f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "df697561-0401-47f8-ad7d-12e462c43e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3648ef-2e1c-40f1-a751-6c6b065d1ffb",
        "cursor": {
          "ref": "b074a9d3-aae7-4bce-acbb-5714261ecfc1",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4d617970-4d08-4ca7-9c9c-fe6d975819e8"
        },
        "item": {
          "id": "1c3648ef-2e1c-40f1-a751-6c6b065d1ffb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7705f96e-52a2-4201-a6f9-3781777aa3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59dd49f-1382-4684-a15b-acff18843c47",
        "cursor": {
          "ref": "1f96fc22-8f38-46ec-b123-2d300126da63",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a98cdb0c-e6a1-4440-b0cc-7d80dcac1561"
        },
        "item": {
          "id": "e59dd49f-1382-4684-a15b-acff18843c47",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "66eeb84e-c488-4c51-b79c-3a47a6578159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecee8afc-0d84-4711-9ade-15144083e3d4",
        "cursor": {
          "ref": "bbc7cd32-bd80-4de5-9fe0-7f185e8d4e6d",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "74c89395-83e8-47d1-8803-3976587ba858"
        },
        "item": {
          "id": "ecee8afc-0d84-4711-9ade-15144083e3d4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2ae1b8fe-3173-4ab7-8aa8-33e799a85506",
          "status": "Created",
          "code": 201,
          "responseTime": 667,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "74e998cf-dddb-4f35-8a3d-2a1d63d9c2dd",
        "cursor": {
          "ref": "caf668c6-55a4-4bf1-9763-6d46fe321a4c",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9f2a9846-edb9-43a4-b44c-9e98fe2fd0ff"
        },
        "item": {
          "id": "74e998cf-dddb-4f35-8a3d-2a1d63d9c2dd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "dd9b33ea-94c3-4058-a34e-69979176da6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526917dd-5dc3-4522-9fa5-01a0406c3961",
        "cursor": {
          "ref": "15edd68a-3d75-4b24-b6db-b97491213587",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3294b4d9-9b89-4925-ba87-94f2187dac67"
        },
        "item": {
          "id": "526917dd-5dc3-4522-9fa5-01a0406c3961",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4cff828c-7aad-4b47-b1ca-2745145147f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e921c6b-cbdf-4a78-97eb-614e333ae97a",
        "cursor": {
          "ref": "892926dc-f157-401e-aae5-97c899846d01",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d49fd82c-298d-4a0b-938e-98a4cffb548e"
        },
        "item": {
          "id": "7e921c6b-cbdf-4a78-97eb-614e333ae97a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c7ede07c-f88b-4d2c-9f3a-1b3cbb551e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871b9ff2-842a-4de5-b4cb-3d3b71ba547a",
        "cursor": {
          "ref": "46174595-61d1-43aa-9eb9-cf5a87d83e6c",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7f2d1a82-28ed-4bee-9723-bb11ca83e284"
        },
        "item": {
          "id": "871b9ff2-842a-4de5-b4cb-3d3b71ba547a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "61443a47-3687-4a3d-9c49-0c60dc9ed9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b1ed6b-43bf-4fd5-ab90-c5d24a29358a",
        "cursor": {
          "ref": "2e3e3f0a-2e6d-45ba-8bf6-cd269e578688",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3f8d6481-61b8-408a-82b3-355cd6f3438a"
        },
        "item": {
          "id": "f9b1ed6b-43bf-4fd5-ab90-c5d24a29358a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8c25df17-1124-4bb4-ad71-09550038d7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6fc5b3b-9855-4b3a-905d-a93d718684ca",
        "cursor": {
          "ref": "d1448181-6b31-4869-bd30-53196e3fb455",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f70b57b2-4849-4b63-87cb-181bcd8b83b8"
        },
        "item": {
          "id": "a6fc5b3b-9855-4b3a-905d-a93d718684ca",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fbc551d9-eacb-4f60-829a-42e2fbe0e9df",
          "status": "Created",
          "code": 201,
          "responseTime": 698,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "f0da35ea-86b0-4933-af91-f6520422fa75",
        "cursor": {
          "ref": "d1ab6e73-9c0c-4355-8daf-4e4f77bffe5b",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4c9a8019-6296-4cae-a17b-99fb68856399"
        },
        "item": {
          "id": "f0da35ea-86b0-4933-af91-f6520422fa75",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cefe56ff-aba3-437c-8467-9435226de4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24aa237-b674-4dc2-bc16-2fdd5d34d502",
        "cursor": {
          "ref": "9a901a52-bf80-4fa3-a5f5-772eb1863930",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "008a8ab8-1ada-4c30-904e-da258adfba24"
        },
        "item": {
          "id": "b24aa237-b674-4dc2-bc16-2fdd5d34d502",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6d37c15a-29bc-45ac-8a25-eb1b2efaff19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed15ef87-8200-41cc-9a26-f2fd154e07e2",
        "cursor": {
          "ref": "3169270f-cc55-4b9f-9256-674d3edece40",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1bbecfe3-7ca8-4dbb-8881-f44d7b40152f"
        },
        "item": {
          "id": "ed15ef87-8200-41cc-9a26-f2fd154e07e2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fadcf73f-0eb6-42ea-9d07-b6049861f89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555285ad-2885-47ef-92a1-9cd49907ce96",
        "cursor": {
          "ref": "53871a9c-1e90-424b-8fa7-03090e64948f",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e16c0229-788f-468c-a952-a650b7443871"
        },
        "item": {
          "id": "555285ad-2885-47ef-92a1-9cd49907ce96",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2ebdc557-9822-4ec6-9bfe-6a80da19e2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161a84a5-050d-43bc-be5b-690e1fa4df4b",
        "cursor": {
          "ref": "9ff8338d-3d6a-48de-94a6-3411ddbd50cf",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0796ad5b-812e-487b-9265-5b1c86aa1dd8"
        },
        "item": {
          "id": "161a84a5-050d-43bc-be5b-690e1fa4df4b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c26b52c8-ce12-48a3-ae45-d7819c266de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d64256-9a18-41ab-b3b0-4db9fe6414d8",
        "cursor": {
          "ref": "f6916613-afe9-4f13-a8cd-532015328fcd",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "47e62c0b-09e8-4a67-baaa-57384aa122c0"
        },
        "item": {
          "id": "21d64256-9a18-41ab-b3b0-4db9fe6414d8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "94b7e4cd-8008-41af-b7a7-acfcf260123d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bddcdb9b-a9d4-43ae-9ddd-79c86c3cb7d6",
        "cursor": {
          "ref": "471380e8-8cb3-4d18-b0ee-3f7399bc527a",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "08f9dd95-44e5-4747-8f67-184892415725"
        },
        "item": {
          "id": "bddcdb9b-a9d4-43ae-9ddd-79c86c3cb7d6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0232db45-a15e-4d55-a56c-95475949dc28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51daf95b-443f-4176-8fd6-d0acd7dcd872",
        "cursor": {
          "ref": "fb856461-935f-4b26-80dd-7833fd3eafd4",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "39cfdbae-4d69-4a21-8986-5fdd6a10c3d2"
        },
        "item": {
          "id": "51daf95b-443f-4176-8fd6-d0acd7dcd872",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fd4bfa51-5a3b-40aa-9b70-049af8bf92b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f8b480-9e9b-49b1-9442-7699e4090bbe",
        "cursor": {
          "ref": "c1007950-8345-4e33-a48a-c119c16e7711",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "114eec2b-5270-464c-a794-d5ed16a80667"
        },
        "item": {
          "id": "82f8b480-9e9b-49b1-9442-7699e4090bbe",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "95464d03-3c64-4d46-a950-43b1531d1e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "fe3fcc8b-3329-4e2b-89b2-ed503fda3aa1",
        "cursor": {
          "ref": "a20db0d3-5f00-40d5-a6ae-4e429f32e81e",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e89b2097-47c4-457c-af3e-725aa299459d"
        },
        "item": {
          "id": "fe3fcc8b-3329-4e2b-89b2-ed503fda3aa1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0489b1b2-fc39-494b-9cea-f17427354b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "a99d6fb7-c5b1-4286-896d-40b25c1f1ce4",
        "cursor": {
          "ref": "a713328c-bea5-4eca-b8ef-4cccf1e0680e",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1b8b8687-9ca7-4fcd-8783-c002e71a1811"
        },
        "item": {
          "id": "a99d6fb7-c5b1-4286-896d-40b25c1f1ce4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0ee95f7e-2ba1-4f5e-855e-65f60f74cad8",
          "status": "Created",
          "code": 201,
          "responseTime": 723,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baf8225-4b40-43ce-8839-8d5aac5fa191",
        "cursor": {
          "ref": "9fc47b25-f9e6-4587-85d0-9134f27e8064",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ffadd261-13a4-4e1b-84cd-5d7ed549e721"
        },
        "item": {
          "id": "4baf8225-4b40-43ce-8839-8d5aac5fa191",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8fcb63ff-cc60-4504-b860-e7bfde6a72d3",
          "status": "Created",
          "code": 201,
          "responseTime": 681,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "06765cb1-9c0f-42fa-aa38-687049a1e94d",
        "cursor": {
          "ref": "a43f9f0d-5ab9-4af4-8200-97f6d5db19e5",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e75acd36-675f-4407-95ce-b7dff1fbbcf1"
        },
        "item": {
          "id": "06765cb1-9c0f-42fa-aa38-687049a1e94d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1bd58aa9-890b-41bd-bad1-8654fb3b8b5c",
          "status": "Created",
          "code": 201,
          "responseTime": 661,
          "responseSize": 746
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef6074a-a977-47ed-b5da-feaa284af96a",
        "cursor": {
          "ref": "8b0c03c6-cc18-4f76-974f-b1e8a96754cb",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3fc31685-ffff-45ff-82ac-c230b2f3fafb"
        },
        "item": {
          "id": "8ef6074a-a977-47ed-b5da-feaa284af96a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "23a56109-66d0-40c3-b48d-7c3cc087485b",
          "status": "Created",
          "code": 201,
          "responseTime": 643,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aec4a7c-ab09-4445-80e9-61439b8fb294",
        "cursor": {
          "ref": "c474b202-470c-42f9-8fd4-3eb5c66bfb62",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6da7bce0-7fe3-4157-9da3-811217861a6a"
        },
        "item": {
          "id": "4aec4a7c-ab09-4445-80e9-61439b8fb294",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e0a98f39-dc16-4733-ab41-1e7b573b4826",
          "status": "Created",
          "code": 201,
          "responseTime": 648,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "054b1532-29e1-4d14-96b8-53104d5db67f",
        "cursor": {
          "ref": "0b84b656-2c38-4372-86a4-6a7e5fd2aeb1",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "88c3e54a-ad5d-4c78-b6b6-9b7dd459ed94"
        },
        "item": {
          "id": "054b1532-29e1-4d14-96b8-53104d5db67f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0f72513e-8dfd-4f3b-b0c2-14fe0da63ef7",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "054b1532-29e1-4d14-96b8-53104d5db67f",
        "cursor": {
          "ref": "0b84b656-2c38-4372-86a4-6a7e5fd2aeb1",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "88c3e54a-ad5d-4c78-b6b6-9b7dd459ed94"
        },
        "item": {
          "id": "054b1532-29e1-4d14-96b8-53104d5db67f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0f72513e-8dfd-4f3b-b0c2-14fe0da63ef7",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "ab810943-4950-4ef8-b286-3c3789658c39",
        "cursor": {
          "ref": "cc80dc11-2cc8-4aa9-a840-820e0bf942e1",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4d4607ae-42d7-46e8-8050-a7536ce10a54"
        },
        "item": {
          "id": "ab810943-4950-4ef8-b286-3c3789658c39",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9ebecb7a-0286-46b6-ac2c-1910cfc3c0a6",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a73a0ab0-15b4-4eb1-af08-9242b9c52a75",
        "cursor": {
          "ref": "27e49d4b-a198-4ab5-9250-3c4e8977a3ef",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ec5da58f-851c-4159-8868-d67d3783f70e"
        },
        "item": {
          "id": "a73a0ab0-15b4-4eb1-af08-9242b9c52a75",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8bc42cc9-09a5-473f-af7d-cb2c9fea318f",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "817b42b9-6dcf-4974-8aa0-4f158b437081",
        "cursor": {
          "ref": "65d4ad6a-f28b-40f3-bcc0-7bae21206745",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e9dea5af-037d-4e27-9b4a-828f0205d6c5"
        },
        "item": {
          "id": "817b42b9-6dcf-4974-8aa0-4f158b437081",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a8b3a638-860b-4541-96fe-b9744d31295b",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "17e248e5-1b02-4f36-903e-3a0a25d70945",
        "cursor": {
          "ref": "3ecf703a-377e-4637-aaeb-3abd6cf7c2da",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a78ea332-1cca-405f-8f73-c1cfe2f7bd8d"
        },
        "item": {
          "id": "17e248e5-1b02-4f36-903e-3a0a25d70945",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fbdd7996-35ca-47be-905b-5bf06fecc168",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "d7c0906d-d7fd-4635-8a6d-ae13e44acc67",
        "cursor": {
          "ref": "0f160df9-6ebb-4692-b506-65d4c3c80bc9",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "67e95829-1a1a-4cc7-bbcd-f51c1212afbc"
        },
        "item": {
          "id": "d7c0906d-d7fd-4635-8a6d-ae13e44acc67",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c7af8dc8-5237-4cba-a5c2-ab10f53b76c9",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e5537852-6675-46aa-bb0f-49006c46ecf9",
        "cursor": {
          "ref": "4bca20c5-9157-4839-b4c0-e82414e800c5",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "969ed7d7-0da2-4099-9066-8dce7f758322"
        },
        "item": {
          "id": "e5537852-6675-46aa-bb0f-49006c46ecf9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f138863b-927c-4069-b691-a02b30e14bc4",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "7765cab5-260e-4a31-b5ed-b7ab89267dd8",
        "cursor": {
          "ref": "83b81ace-54cc-41a8-94bc-cf22b55ca6f4",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a05c1d5c-a085-43e6-9f30-747955a79533"
        },
        "item": {
          "id": "7765cab5-260e-4a31-b5ed-b7ab89267dd8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "082099bf-8c34-452c-971e-1fa20a61ff01",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "b145d5ac-6667-4444-be95-c9c58519f57c",
        "cursor": {
          "ref": "12de1c51-dbf5-49d2-9555-6b224f38dab1",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4fceff64-3d3e-4991-9b26-8c8547ebc2ce"
        },
        "item": {
          "id": "b145d5ac-6667-4444-be95-c9c58519f57c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "acb7d401-d7f4-43f7-8833-c4e42c1fb4a3",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "1a154158-e64c-4866-9887-5b75af33f3fd",
        "cursor": {
          "ref": "0d3dc8bc-78dc-4738-b23a-ff056bca3f71",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2544c712-31b1-42eb-aa8f-12bb33ed7844"
        },
        "item": {
          "id": "1a154158-e64c-4866-9887-5b75af33f3fd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2081b152-87b8-4a70-902a-0f90ac899ca2",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "137db14c-a2a7-4ad7-a4cd-cc73978f7b4c",
        "cursor": {
          "ref": "1fadbdf5-6ef7-42ca-8891-a914c93f003d",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "27b107e9-6e01-4e6e-8d27-02a4bf380ab8"
        },
        "item": {
          "id": "137db14c-a2a7-4ad7-a4cd-cc73978f7b4c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "276a58d4-64a3-417b-b710-03a26951ef20",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "50ed1189-3f0e-477b-8fb6-b160d43cead2",
        "cursor": {
          "ref": "d45d08a7-1462-4ce1-bc2f-4cd6ef3cbc74",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b709ba04-640c-4d28-b1c9-22db74e16d1d"
        },
        "item": {
          "id": "50ed1189-3f0e-477b-8fb6-b160d43cead2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0e0ed62a-3234-407d-9639-23424b441b0b",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b5377cba-a764-4a71-b185-77be28dee5cd",
        "cursor": {
          "ref": "2d9533ac-3b49-425c-8e17-91d9c00b716f",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fdf8ce1c-95b2-411d-8424-c9b92102655b"
        },
        "item": {
          "id": "b5377cba-a764-4a71-b185-77be28dee5cd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c8521b99-93af-48d0-baf2-4aaf4225eab1",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a4402817-afba-4815-b31c-f50db01856d3",
        "cursor": {
          "ref": "3f9a3fa2-ad88-4f34-b4ff-d7f5d312ba5c",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c7eba30a-9b97-4039-99c7-d92481455060"
        },
        "item": {
          "id": "a4402817-afba-4815-b31c-f50db01856d3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c21c93f0-ca38-4235-85d3-c66db4c6f23f",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "264f372b-f639-4c99-af6c-db98c0932fd9",
        "cursor": {
          "ref": "3e328d43-5818-41e1-8752-8feec85677fe",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d6648f3c-4094-4217-9307-7f4458451b27"
        },
        "item": {
          "id": "264f372b-f639-4c99-af6c-db98c0932fd9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6315500d-0410-4aeb-8c4f-d29b5e78cada",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "91f312f1-a2de-4dde-a32f-cfa65b26d3e1",
        "cursor": {
          "ref": "30991281-f877-485d-a0cc-6080497b559f",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9998beba-6e79-419a-87db-557d27b12a47"
        },
        "item": {
          "id": "91f312f1-a2de-4dde-a32f-cfa65b26d3e1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "64f505ad-4e3f-4495-a557-f36d4ea79d98",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "f9fa2bb3-e6a2-428c-ae80-6730d68d4e61",
        "cursor": {
          "ref": "5c3fb4da-b571-4dc2-8b13-a1c67ba6dfb2",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "751fdc17-7ff3-4d02-a0f2-c12b4c6aba8c"
        },
        "item": {
          "id": "f9fa2bb3-e6a2-428c-ae80-6730d68d4e61",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3dad1ae6-a56e-4ee5-b3bc-80035ebbb25b",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ac7466b2-783c-4dd2-bc47-e4f9ed9fc256",
        "cursor": {
          "ref": "b6db4372-2e29-4c05-a049-95cb79395ed8",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3f651d60-e59c-4071-9aaa-0ac12acfffff"
        },
        "item": {
          "id": "ac7466b2-783c-4dd2-bc47-e4f9ed9fc256",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c07fcfa9-ac2b-41f4-937a-b37c48dc51f1",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "903b7c7e-6a5b-41b4-891c-371975448dc1",
        "cursor": {
          "ref": "90730990-b30d-4059-a32d-4ba198af56a1",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "91943da1-ace2-4575-8196-eb5ae0f78129"
        },
        "item": {
          "id": "903b7c7e-6a5b-41b4-891c-371975448dc1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "14f892dc-59c5-45d5-b480-570f5ea8aa84",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "4f008a16-e9b1-42a3-aea7-b06b6c6ed35b",
        "cursor": {
          "ref": "e7f889bb-e72a-41ce-acd9-1b3785577928",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ee3470df-0351-416f-b716-fa530a7578c8"
        },
        "item": {
          "id": "4f008a16-e9b1-42a3-aea7-b06b6c6ed35b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "41023f62-ecb5-435e-bbc3-d9a10843e82e",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "78c3127c-31a8-403b-8120-fe1f0c632128",
        "cursor": {
          "ref": "3f8fcda2-7b24-4930-a9b6-64a915dfc1a0",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2c994ebd-78e1-4453-aac3-e255a721d5ea"
        },
        "item": {
          "id": "78c3127c-31a8-403b-8120-fe1f0c632128",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "631112e1-05b7-41df-b4bb-2d77a8f45a7d",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "389707e7-016e-43ce-a7ea-602623420f70",
        "cursor": {
          "ref": "bf44c605-eea0-48db-ac4b-80981f7413b6",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "18325be5-d105-4dd6-a961-dd8f50c1b810"
        },
        "item": {
          "id": "389707e7-016e-43ce-a7ea-602623420f70",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3a897769-35f8-41f0-a309-253924d2d3ee",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c867a99f-e34c-4188-a993-e25b0a048166",
        "cursor": {
          "ref": "f5a959da-2d24-4af7-a1ab-52437b144208",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bedb0898-a05a-4de9-9964-a84b233ca31b"
        },
        "item": {
          "id": "c867a99f-e34c-4188-a993-e25b0a048166",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cb625450-1548-42e9-ba53-6d4c4295ffcf",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "4888a2ff-d59a-4300-99c4-139849c2d1b7",
        "cursor": {
          "ref": "e80abad5-98b3-4d93-aa29-ed1e91e21b41",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c01680a8-9a57-440e-b084-ca359e300f9e"
        },
        "item": {
          "id": "4888a2ff-d59a-4300-99c4-139849c2d1b7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "24a3f161-d173-4e9f-9624-ac0973c1f1df",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "47c1e843-a2a4-4bac-a632-13b17f5a0cdd",
        "cursor": {
          "ref": "232246d7-4d5d-45d2-8a71-052751deeff9",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "224aa7a6-a05e-4faf-ab50-740a606193d3"
        },
        "item": {
          "id": "47c1e843-a2a4-4bac-a632-13b17f5a0cdd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fcf34893-a8c5-4ec1-b9ba-14d651f97035",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "261b75ab-c7c7-4b22-adc4-e3954e469a40",
        "cursor": {
          "ref": "8c432b23-1602-4a70-8635-dbbee6710355",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a5a9d11f-d165-4dfe-938b-8063c0cfc2a2"
        },
        "item": {
          "id": "261b75ab-c7c7-4b22-adc4-e3954e469a40",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1f793548-3bfb-4ada-8567-3bce7437e13d",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "82e12ab9-c7cf-4b17-b912-1f019bf999db",
        "cursor": {
          "ref": "4551a804-6684-4dea-b12e-2e0830a27fed",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a138d433-9139-4769-a75c-c09f0944bbdf"
        },
        "item": {
          "id": "82e12ab9-c7cf-4b17-b912-1f019bf999db",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f26bbe17-784e-46e2-816e-070dfc0b3abe",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "50f1c7b5-bcc5-44c2-b4ab-0e406a2a2e99",
        "cursor": {
          "ref": "79d2d0ef-89d5-4ee4-a121-659a08cd72be",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4ac9367a-8698-40a2-b8d8-432b1129b2df"
        },
        "item": {
          "id": "50f1c7b5-bcc5-44c2-b4ab-0e406a2a2e99",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9d2e5593-bb0c-4866-a397-d686fd7fbbd5",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "a6622cf8-ba75-4d3e-8875-e34abf795d18",
        "cursor": {
          "ref": "bf218b80-825a-42e4-9670-1cdfcfe18da2",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "79bfeab9-4951-424a-a1d6-313e34a79b6a"
        },
        "item": {
          "id": "a6622cf8-ba75-4d3e-8875-e34abf795d18",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8e9a777a-b0fb-4ec4-b1a8-eadd3954c01f",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "5266c35a-65ac-4f30-af9a-493300a5bcb2",
        "cursor": {
          "ref": "649cc668-59aa-4fdc-8e1e-19c2de1d25c4",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "46c4a6e3-240d-4f1c-85b7-2fbdc726ce69"
        },
        "item": {
          "id": "5266c35a-65ac-4f30-af9a-493300a5bcb2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8ef99977-22b7-49e9-89c3-0005674c4079",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "eccbd4c8-f106-4a16-a995-f9c192676d95",
        "cursor": {
          "ref": "231169e2-7bb2-4173-802f-158f7bba2447",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a8ff6733-ba33-42c6-9f93-8c3c907f583f"
        },
        "item": {
          "id": "eccbd4c8-f106-4a16-a995-f9c192676d95",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1f4cb807-9e35-4f2f-a118-c4c8ce908866",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "ed95acb5-0b14-4db3-99b2-64c8d4275e0d",
        "cursor": {
          "ref": "9e39ed34-b586-4751-ab1e-8e6616b1d142",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8c0f7945-3038-4970-a295-dcb92d2dbdc1"
        },
        "item": {
          "id": "ed95acb5-0b14-4db3-99b2-64c8d4275e0d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "de6908c3-3ce0-40c5-a203-4cdb780246f4",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "0f2f8fc2-a14d-4436-9437-35488e9d07fe",
        "cursor": {
          "ref": "3c2aea21-fee9-47fe-a7ea-00a9d96f2d2e",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f1f22ac4-a84b-4bdf-866d-87adc1197823"
        },
        "item": {
          "id": "0f2f8fc2-a14d-4436-9437-35488e9d07fe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "53b6f45e-04d7-4b59-8ce9-31db802fdb81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7912588e-48a3-449c-8508-3f91881e516d",
        "cursor": {
          "ref": "a7ab5590-882d-4235-a4f6-12a61888d852",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ebabcc89-f7bc-4e80-b3b4-932f7405dc99"
        },
        "item": {
          "id": "7912588e-48a3-449c-8508-3f91881e516d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a74e2fec-a0f6-4682-8113-d73eba2a3f4b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798c181d-296f-4081-97d0-b6559cc6f788",
        "cursor": {
          "ref": "79964681-fece-4bc4-8320-3c632a107d8f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2c492462-36b2-426e-943c-0d30e1827824"
        },
        "item": {
          "id": "798c181d-296f-4081-97d0-b6559cc6f788",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2490fa50-a0f9-46c5-914f-716a096b403c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798c181d-296f-4081-97d0-b6559cc6f788",
        "cursor": {
          "ref": "79964681-fece-4bc4-8320-3c632a107d8f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2c492462-36b2-426e-943c-0d30e1827824"
        },
        "item": {
          "id": "798c181d-296f-4081-97d0-b6559cc6f788",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2490fa50-a0f9-46c5-914f-716a096b403c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7af1878-73b1-4d61-9e12-18106d2ec91a",
        "cursor": {
          "ref": "c4278ed7-6155-492b-b5a4-9499436ae0d6",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "465ed03e-7b82-4234-a245-292260597ed2"
        },
        "item": {
          "id": "a7af1878-73b1-4d61-9e12-18106d2ec91a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8496b247-ec6e-4098-afb7-0983866f0bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d584a087-a4b7-4a5d-90cf-951b902eb06f",
        "cursor": {
          "ref": "732053a0-88c2-4ac7-95f2-767f571c67e6",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "db8b80fb-0c81-4f4c-af50-a1ab53f07016"
        },
        "item": {
          "id": "d584a087-a4b7-4a5d-90cf-951b902eb06f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d151ffe6-82e2-49da-9a3c-ac8278502629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6fa62d-fcda-4e8e-8ffc-4351d622fb72",
        "cursor": {
          "ref": "54fdcd5c-db55-4b69-9591-269d265c81e3",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c1f11fd4-ae7b-4bdc-86ee-7f85ac877966"
        },
        "item": {
          "id": "9e6fa62d-fcda-4e8e-8ffc-4351d622fb72",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4064f3ce-2d96-4ffb-8df2-3ebeb058e3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec587f6-f626-4640-a7bf-48ce8ea9e51b",
        "cursor": {
          "ref": "f3119282-f562-4b2e-94e8-a8751b7e0375",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "41dcc6e4-d723-4001-89e9-9c02c3d59826"
        },
        "item": {
          "id": "3ec587f6-f626-4640-a7bf-48ce8ea9e51b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a170d283-7929-44d2-ae0e-9870781b8e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2bfce4-2c10-4a98-94d2-7b65e3c4b1bd",
        "cursor": {
          "ref": "2b358813-06b7-485c-b823-1e59c4451b95",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a0641ef5-7184-49c5-a243-61f1278eb3a6"
        },
        "item": {
          "id": "2a2bfce4-2c10-4a98-94d2-7b65e3c4b1bd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fa8fce6c-60d6-4c49-92a5-12128ade4219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e285fea4-0fbe-4041-bb83-760a1350d11e",
        "cursor": {
          "ref": "dfa43d68-aa2a-479b-a5f4-2a4c4855b069",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "23fe2e54-4521-4a8e-ae85-e2f440719fd1"
        },
        "item": {
          "id": "e285fea4-0fbe-4041-bb83-760a1350d11e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "789f2d71-f05c-41ee-af3e-286e974914f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c61d978-07ff-4889-bfb9-9aaaed80e30e",
        "cursor": {
          "ref": "ed68c1c2-694b-4368-8a72-ca66ff459bbc",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "92714616-f198-4c47-8832-d43a4dfa6eea"
        },
        "item": {
          "id": "4c61d978-07ff-4889-bfb9-9aaaed80e30e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "80a94fe1-9533-4549-aaaf-8e887d04f685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01fd1af-b34a-44c7-a4dc-91d2594f9550",
        "cursor": {
          "ref": "14e744d0-68f6-4ab0-853a-2d318e5a0328",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f8217e59-edba-42cd-9252-def7a94d509a"
        },
        "item": {
          "id": "f01fd1af-b34a-44c7-a4dc-91d2594f9550",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ad942f10-b32a-4d56-bbc0-d6c15c5b1506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72176c4-bca0-4919-bbd2-860140861c8b",
        "cursor": {
          "ref": "0d98d86a-c711-4472-b9cf-0e2b8b0dd9da",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6ad00717-9b50-46c3-88c8-0072cf21d9bc"
        },
        "item": {
          "id": "e72176c4-bca0-4919-bbd2-860140861c8b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5b1f99be-f49e-4709-9ab5-0bdb37383499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eea714-cfcd-4dc5-abdb-a9d6778e44fb",
        "cursor": {
          "ref": "1403a2c4-2a3a-4e0e-bfa1-52824693aea1",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "692e3ad6-bafd-49c5-99a1-2a1d5b5ea9dd"
        },
        "item": {
          "id": "f1eea714-cfcd-4dc5-abdb-a9d6778e44fb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a49cf954-4360-43ec-85cf-828e93da9b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeee9d52-9daf-4682-a55c-0a9681410e5f",
        "cursor": {
          "ref": "3f6d6a89-5077-4503-928e-dfa6d61455c4",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c65bfb37-4e4a-4e21-ad40-e21bd22733f5"
        },
        "item": {
          "id": "eeee9d52-9daf-4682-a55c-0a9681410e5f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d5ea0110-b5d8-48a4-8b2a-742349f373e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe293370-2331-4a6b-b738-7ed4cb9c33dd",
        "cursor": {
          "ref": "dc084b1e-1728-4a0b-a69f-78d02a3ce1c2",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6ab2fc02-e317-41cd-b34b-71903ad8ad5e"
        },
        "item": {
          "id": "fe293370-2331-4a6b-b738-7ed4cb9c33dd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e5d5346f-12bd-4bd2-bc61-e6a769c371ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f560820-8e5e-483a-902e-2fd639f27ee2",
        "cursor": {
          "ref": "7560a5a4-eb9b-42e8-9c1d-8bf95d29534d",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7adf10bb-4b7d-4a82-b218-bf121cc64e7f"
        },
        "item": {
          "id": "4f560820-8e5e-483a-902e-2fd639f27ee2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "53c0f279-d8fa-4d64-ad6a-32c00fa63b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027c1e10-c4f2-400a-9baf-c26725a02080",
        "cursor": {
          "ref": "e12303fd-e8cd-4a8a-aad1-81983ed885ae",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3a042f4a-7dcd-49f3-bb2f-1b326eadddd9"
        },
        "item": {
          "id": "027c1e10-c4f2-400a-9baf-c26725a02080",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7dd7ad3a-ccb1-4191-9c0f-911f0cf02a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cf0da3-d147-4857-af73-b20f639f6494",
        "cursor": {
          "ref": "07e72c97-941c-4915-bded-92d906176dca",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "31655c6a-83f1-4f24-8249-ec5b465350a3"
        },
        "item": {
          "id": "65cf0da3-d147-4857-af73-b20f639f6494",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cd0d45ed-5ed3-4902-b581-1551254c24cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c066e9-7739-4a69-8b70-366a72d16dc9",
        "cursor": {
          "ref": "9609e20a-231c-45e9-9230-0085886adb60",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "420cce17-6cc7-415c-8e9d-1050d063f28c"
        },
        "item": {
          "id": "73c066e9-7739-4a69-8b70-366a72d16dc9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7c27f4e0-4994-4805-b265-2b8acb53039a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7569da34-bd90-4b54-a2c4-dfb98c1729d9",
        "cursor": {
          "ref": "09e7b07f-9c87-48e8-929d-525f8db3da98",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ea3ca709-4dfc-41c2-be9f-25588f48b05f"
        },
        "item": {
          "id": "7569da34-bd90-4b54-a2c4-dfb98c1729d9",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "c592595c-0538-4b8d-8318-6139735cb7e3",
          "status": "OK",
          "code": 200,
          "responseTime": 1055,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "5f1aba93-9b1a-4d81-bcad-b06e5e47b7c2",
        "cursor": {
          "ref": "a048a2e7-de33-4694-be4f-9bea345150e9",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "20977456-114d-4e42-81dd-6dbb5b5e30a0"
        },
        "item": {
          "id": "5f1aba93-9b1a-4d81-bcad-b06e5e47b7c2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "91beb097-5e44-4088-987d-d99be9b88c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69fbbbac-206d-4750-9679-566d2b9a816c",
        "cursor": {
          "ref": "db305b3a-0015-415c-a0b1-a7a0dd829106",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e590defe-885f-4703-b84e-dc85f8090265"
        },
        "item": {
          "id": "69fbbbac-206d-4750-9679-566d2b9a816c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c1baa565-d884-4273-81bc-f23fc9b7a5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f4aa57-97a1-482a-8b0e-0f439d36eb87",
        "cursor": {
          "ref": "c8592b0c-e08b-464b-99f2-8aac74ceb836",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a7a69f7c-ec83-4818-b9f2-7885632408fd"
        },
        "item": {
          "id": "66f4aa57-97a1-482a-8b0e-0f439d36eb87",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4a1bc49b-b2cf-4def-b12d-21b751a393bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6726cb9c-b9a8-4cd9-97af-8a5eb697693f",
        "cursor": {
          "ref": "ddc0871a-264c-4a54-89f7-f65a2628fe02",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a54f8a3a-8712-439c-97ab-b333054e8309"
        },
        "item": {
          "id": "6726cb9c-b9a8-4cd9-97af-8a5eb697693f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0f6c4a13-d66f-425f-bd95-a9a6c96ef4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60a3f02-0471-463d-9881-eae36ae65328",
        "cursor": {
          "ref": "70424459-ae90-4312-b434-829e1fca2c53",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d270088e-4ce2-461e-b4a6-86a1904fde6b"
        },
        "item": {
          "id": "d60a3f02-0471-463d-9881-eae36ae65328",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "75fcb579-553b-46b8-822e-a6c95c0a6ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30f913b-7b9e-4178-a9e2-4c838346b07e",
        "cursor": {
          "ref": "c15281e3-6bd6-4844-bc82-582a7647de7b",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "69f48686-678f-4fb7-ab96-baf6b36e42a5"
        },
        "item": {
          "id": "c30f913b-7b9e-4178-a9e2-4c838346b07e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "17de2757-40ca-4361-8927-ca40d5606522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7450e9-e8de-41d1-bb18-8b15c0fbc9d3",
        "cursor": {
          "ref": "87215c4f-76df-4232-be83-514db75bc174",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a5b5efcd-9b1e-4f20-90e1-7980fe55e895"
        },
        "item": {
          "id": "fe7450e9-e8de-41d1-bb18-8b15c0fbc9d3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0b2f1b99-39cf-4a52-870f-683987f4d1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2247d21-c4ca-46f2-bc10-db4c79a662c0",
        "cursor": {
          "ref": "4f956c22-da37-45dc-9078-275f815053c5",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "67be5484-716d-4efa-b840-3ebf3159172e"
        },
        "item": {
          "id": "b2247d21-c4ca-46f2-bc10-db4c79a662c0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5fa3af7b-c216-45ea-87ad-90f576cbe181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c22c627-fbf1-4c4d-9f2e-de22d6459893",
        "cursor": {
          "ref": "070f00c6-b98d-4f35-9570-4ee7cf92b67f",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "37e69809-ebca-4a53-9886-9d104f1bfab2"
        },
        "item": {
          "id": "8c22c627-fbf1-4c4d-9f2e-de22d6459893",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f19a219f-6a2b-47f1-8876-a9afa15bbf99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d176eec8-a0a2-47cd-81cd-f543825650a0",
        "cursor": {
          "ref": "a5e327a6-d759-46d2-a71e-64fd5e32820e",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f35c11ce-25f0-43fc-abcc-62e2afea9a31"
        },
        "item": {
          "id": "d176eec8-a0a2-47cd-81cd-f543825650a0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "70dda300-a89e-4db2-a33e-a83114f343d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75afd533-06fb-45b4-85aa-898f1348bb3d",
        "cursor": {
          "ref": "8d3a1c24-ff2e-49b4-b3e7-6c7c54bc1a8f",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "941debbf-c4a1-4a6a-b07e-eee46d2cb872"
        },
        "item": {
          "id": "75afd533-06fb-45b4-85aa-898f1348bb3d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "68f3e638-fa32-4bd7-9c16-682e8c2e8873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d9723b-3a81-4790-91f7-0614ead69ccc",
        "cursor": {
          "ref": "c118d675-4352-4d3e-8126-a6f5ae25adbd",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f86eac8b-32f7-4687-b3ef-8be3bbc53f21"
        },
        "item": {
          "id": "e1d9723b-3a81-4790-91f7-0614ead69ccc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ca65e7f3-05c5-4cb9-8a85-97b98b85629e",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "99ea34d9-ccd2-4d59-b995-59d4aae386e5",
        "cursor": {
          "ref": "e20bb59c-8edf-4f17-89e9-ca074daff9a1",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "315abbc3-4a9d-4936-9232-321e1377e140"
        },
        "item": {
          "id": "99ea34d9-ccd2-4d59-b995-59d4aae386e5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "71a443f3-3f18-4d1c-90a1-f97be3cfc307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9a19b9-d12a-4776-9ce8-7f2eccb4d020",
        "cursor": {
          "ref": "38dd0e1d-a12b-4bbd-ad57-deb05dc74ab3",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a2f59f26-39a4-4e6b-9c8b-f41bff2e8b69"
        },
        "item": {
          "id": "fd9a19b9-d12a-4776-9ce8-7f2eccb4d020",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "69ef2fee-a8c0-4f68-9bee-7d176091114f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedbb460-ea7c-4329-bdd5-cc109fada331",
        "cursor": {
          "ref": "ad4ea144-5d84-4f7b-859c-287b5dae7f77",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "28d6b6ef-ad0a-4b95-bf40-3e7874c92648"
        },
        "item": {
          "id": "aedbb460-ea7c-4329-bdd5-cc109fada331",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5cbadda2-2ef8-4a1f-a1ee-5069cb222049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737b2bf1-377d-4a9b-b17b-bcc51049d96e",
        "cursor": {
          "ref": "1ff3682b-cd67-4060-9a88-0a3ca00b7792",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ebe02a3a-1819-47dc-86bb-1cde1a079f1d"
        },
        "item": {
          "id": "737b2bf1-377d-4a9b-b17b-bcc51049d96e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "81b48355-52e0-4f7b-8c91-546d4d6be34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b597e73a-c79a-41e2-baeb-955f20cfba94",
        "cursor": {
          "ref": "c4c1ab1c-cbc0-4624-a732-24901e3d4474",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "494c15c5-08d5-455f-b8f1-8c499b6b7cfd"
        },
        "item": {
          "id": "b597e73a-c79a-41e2-baeb-955f20cfba94",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e772e1af-0696-4d93-8952-58927c901989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28cb20a8-f078-4a64-a8d8-5cc06a1e5a35",
        "cursor": {
          "ref": "e5c6d0d8-f914-4692-8d1b-3c369656405e",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "adf46008-6589-4198-918e-54e7c2bbf180"
        },
        "item": {
          "id": "28cb20a8-f078-4a64-a8d8-5cc06a1e5a35",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "71bd82f5-47be-4997-b1de-8a8955d78956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ce4e6d-6fb9-47fd-ae6e-dbbb936d194a",
        "cursor": {
          "ref": "85599634-e3b1-4332-be96-a485f064ba5a",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7b12f7d6-3cce-4d98-9191-d665386f60e9"
        },
        "item": {
          "id": "36ce4e6d-6fb9-47fd-ae6e-dbbb936d194a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c382639f-64a2-41b4-ab09-84ae21b708ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17484318-76a9-4b14-8b9c-0d728e8a1ba0",
        "cursor": {
          "ref": "365a1733-63f0-48af-b675-496ed93ba3be",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "090e337b-ed0a-4cea-b12a-a610b5bffa07"
        },
        "item": {
          "id": "17484318-76a9-4b14-8b9c-0d728e8a1ba0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "455f2dfa-038b-4d33-8574-6205f8bd2ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb84ec4-3256-4c15-b640-1e850237fb47",
        "cursor": {
          "ref": "acd20e0b-d443-4acc-9f0a-2972d9d479bc",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "cb62c091-a7bf-446b-8cb4-aa93d486989a"
        },
        "item": {
          "id": "acb84ec4-3256-4c15-b640-1e850237fb47",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "445dddf1-7248-44bd-96d1-13804f834eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8dd9176-ac23-453a-a00e-a635613dc98d",
        "cursor": {
          "ref": "dc966898-4e21-4946-8823-936d27c15df3",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ce610e84-2173-48f0-ae2f-07860d1259fe"
        },
        "item": {
          "id": "a8dd9176-ac23-453a-a00e-a635613dc98d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "96831504-2e7f-4ce8-b93f-db60c0d8de68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6dac43-dbb1-4b2b-b742-f7e738463561",
        "cursor": {
          "ref": "b0fe2b96-e8fc-4bf0-b606-fa190b9c576f",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b8677ea4-6456-45cf-8193-5c471f7e728e"
        },
        "item": {
          "id": "2a6dac43-dbb1-4b2b-b742-f7e738463561",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e5f2fbb2-33c6-4122-9afd-ab530c4d128e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f967a6-0650-479b-ae19-73423595e3d9",
        "cursor": {
          "ref": "b0686e7f-7fb3-4010-abc9-a0c9649d5965",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bc5e729d-3d53-45ba-8ef6-a7ce26f521bd"
        },
        "item": {
          "id": "c3f967a6-0650-479b-ae19-73423595e3d9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "27baa25b-60f9-4885-b4d6-ea77da58ee2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679d9f9d-4d60-4912-b1e4-3f6cb32ba363",
        "cursor": {
          "ref": "153919cf-c78b-4f69-9730-dfd8ae2e8a2e",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a41bca79-9ea0-49fc-8633-1cedaefacde5"
        },
        "item": {
          "id": "679d9f9d-4d60-4912-b1e4-3f6cb32ba363",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8cdf5e82-7169-48e0-8cf4-29ba94500b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef9e6ea-ea91-4aba-b007-c3289baf54a2",
        "cursor": {
          "ref": "db610c42-661a-41ed-9bd1-6827ec1c9ab3",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "84593538-2d01-4fbb-aeb7-98939e2a15a4"
        },
        "item": {
          "id": "3ef9e6ea-ea91-4aba-b007-c3289baf54a2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "12291be2-f927-4f1c-abc2-7fe4c698efec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3f9b5d-d7a5-43e7-900e-75ff544fdfed",
        "cursor": {
          "ref": "b99d84a3-67ee-4e20-b8a8-9d1f9717ef30",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c87c1674-ff17-4088-a719-89b3231e5fec"
        },
        "item": {
          "id": "bd3f9b5d-d7a5-43e7-900e-75ff544fdfed",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2192d94e-1135-44fb-9565-e959aed8ca94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6337d32-80f8-43c6-828c-7460211cb012",
        "cursor": {
          "ref": "cd0cb01d-8ca7-48ae-a331-247db70eef92",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a1ad536d-dea8-4255-b627-f6e5b045c586"
        },
        "item": {
          "id": "b6337d32-80f8-43c6-828c-7460211cb012",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cef3ccba-ce42-4e4e-86e8-2d67ad1d73e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065dd474-1ddc-4eb7-9037-6e6c77a05f4e",
        "cursor": {
          "ref": "654b7f30-9dba-4014-9662-fec4d21f3483",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "361a3883-7bc9-4812-9b70-0f4c34446f1a"
        },
        "item": {
          "id": "065dd474-1ddc-4eb7-9037-6e6c77a05f4e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "aa29ddd3-c2d9-4802-804a-ff6b33cf9900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1d2697-bf39-4479-9ce5-69643b9af483",
        "cursor": {
          "ref": "93c3c3d9-fccb-44ab-9c46-3e4360a3777a",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c3154ed3-50b8-45d8-8451-3e7cdf5882f4"
        },
        "item": {
          "id": "6b1d2697-bf39-4479-9ce5-69643b9af483",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "de59f142-92e9-4239-8f84-5cd826a20bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 335,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac026da6-518e-4962-bacc-57b7aba0b287",
        "cursor": {
          "ref": "ccceb925-ee92-401a-8a73-3ffa6b6c1cb7",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e2c81bf7-4e2c-4d31-9633-2d133d462ca1"
        },
        "item": {
          "id": "ac026da6-518e-4962-bacc-57b7aba0b287",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c587d915-d2b7-48ee-8db0-e0bbe4df3781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5d986f-9962-47ba-8df8-b2620f1b78ef",
        "cursor": {
          "ref": "61ca1afc-58a6-45d8-b9e9-c1a18328160d",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "429a5982-45fe-4202-bffd-7163bec2751c"
        },
        "item": {
          "id": "2e5d986f-9962-47ba-8df8-b2620f1b78ef",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "827a5405-6a48-4d45-a021-39796cb62679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff5fe75-53ef-4738-88fa-0e875e9d1291",
        "cursor": {
          "ref": "32f7a793-0756-4a2e-9e80-c813004652e3",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a47ff02f-8297-4520-b764-69d9e70b2731"
        },
        "item": {
          "id": "3ff5fe75-53ef-4738-88fa-0e875e9d1291",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "814356e7-a642-405f-b5d0-960e51fda8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765d9803-1e87-4b86-b34b-719cc48f4059",
        "cursor": {
          "ref": "648cae24-c933-416a-87d0-3ea8bc7d4180",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0b200009-4b9c-4855-be40-8e9dc145c29a"
        },
        "item": {
          "id": "765d9803-1e87-4b86-b34b-719cc48f4059",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dc9703bf-862e-42dc-8ac7-42f5d457a779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353a502f-cea1-441c-93b9-225cbcc76448",
        "cursor": {
          "ref": "7648d5a9-2265-44df-9616-944b5b198012",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c454bc67-4068-45ea-8896-5c8e42e06ab7"
        },
        "item": {
          "id": "353a502f-cea1-441c-93b9-225cbcc76448",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "bc8b2fff-ee54-4d73-99ea-b4b72048000b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d733e31-72bc-47cc-8e10-01f2a6bcaf35",
        "cursor": {
          "ref": "c109919a-2de3-43cd-9a9f-6a1cd5daebbf",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b7f7a8d2-8641-49aa-b2d5-08b62d9e0985"
        },
        "item": {
          "id": "0d733e31-72bc-47cc-8e10-01f2a6bcaf35",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4a59ffdb-eaf5-4e8e-b149-f4f6f615d5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc0541e-b61f-4471-a407-63135d2beb5b",
        "cursor": {
          "ref": "7d2dbeb2-9104-449c-bb83-49f4cc77b6e4",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6be30d00-7fcd-49d1-bd42-ebefcfcf9911"
        },
        "item": {
          "id": "2fc0541e-b61f-4471-a407-63135d2beb5b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4edd13b6-1bed-4dba-9da8-7acff20130c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bd31f5-13ba-44a4-a7fa-2515fc8e2666",
        "cursor": {
          "ref": "3d1d3564-5901-4853-9c5b-58bbc8ce37dd",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a86cbf96-23e8-4fce-b04f-7b239f7e6349"
        },
        "item": {
          "id": "f7bd31f5-13ba-44a4-a7fa-2515fc8e2666",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9433fe09-fbbe-4ced-aff4-e8abbe8817a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93671b64-4e81-42ff-911d-37b69a44ebf6",
        "cursor": {
          "ref": "58f16503-d0d5-41bf-9225-64dbf9cb57e1",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8d8a9f7c-03e1-4409-8485-bee71709c365"
        },
        "item": {
          "id": "93671b64-4e81-42ff-911d-37b69a44ebf6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6fbabe87-6040-4543-9a1f-4b01fd9fe7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d0ed24-9abb-46af-976f-3bef044b89d8",
        "cursor": {
          "ref": "1f7db63a-ec79-4d37-a68c-5e28809cb422",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "17dcc6bf-fcba-4a0c-aa82-41e3f7dacb38"
        },
        "item": {
          "id": "e2d0ed24-9abb-46af-976f-3bef044b89d8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0f9c68bc-7b7a-4858-9539-d9673632e38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3df57f-6c00-4aae-8559-9ebc303caf93",
        "cursor": {
          "ref": "b9688559-4384-490a-ad4d-fd55dafc981c",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a815f0c9-440a-4c7b-bc78-2d762acd7083"
        },
        "item": {
          "id": "ad3df57f-6c00-4aae-8559-9ebc303caf93",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0d56273f-a01e-4016-916e-3f8b972e0d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5e6aff-b382-4e0a-8d76-18f17141e33e",
        "cursor": {
          "ref": "043bf3cb-88ca-4581-be76-5332c9f33bcc",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ded9525f-c9c0-4abe-bab4-6c56e9204872"
        },
        "item": {
          "id": "5d5e6aff-b382-4e0a-8d76-18f17141e33e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f56d623a-c611-4e7a-b053-165b8189213b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b44b22-b65a-4a37-a62c-17838a845e06",
        "cursor": {
          "ref": "6142138f-bd07-4ca4-b293-d9c671f19711",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "852ad952-e882-4e7e-8b78-9c407b328eba"
        },
        "item": {
          "id": "75b44b22-b65a-4a37-a62c-17838a845e06",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a691ba18-afe9-4a37-a79c-bbb50bec30de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecff963-e973-4258-8f0b-2e8d46910bf2",
        "cursor": {
          "ref": "8488997d-cff8-4b95-9d50-ee1834913b0d",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f2c99115-92f6-451f-9482-cb140675f2b6"
        },
        "item": {
          "id": "6ecff963-e973-4258-8f0b-2e8d46910bf2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "54607607-e39b-4fd6-a7b3-a495c31c198d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8c0ce0-a613-4d36-a5f4-6b12e5e4087d",
        "cursor": {
          "ref": "f5d70f4a-a4b0-4284-b131-94a152558b97",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "20879b5c-ae8d-4d7e-8e7a-6b2c530201a8"
        },
        "item": {
          "id": "7c8c0ce0-a613-4d36-a5f4-6b12e5e4087d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d8b75386-e35f-4be4-8b97-b36792c661f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522d510b-e7e8-401c-9c4d-d0e4612ae2ca",
        "cursor": {
          "ref": "cca8c61f-8130-4024-aeac-bed851f76200",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "73a99f51-f742-489e-89d8-023c0938e1f6"
        },
        "item": {
          "id": "522d510b-e7e8-401c-9c4d-d0e4612ae2ca",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2c41e325-9a7c-4002-9d31-0fa2c863074b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad323734-348b-4e2b-923b-2a816ffe109c",
        "cursor": {
          "ref": "5009420d-f1aa-4646-b2fa-95434854ba19",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a5d72fa2-00f5-4d69-9f90-ac73c4b7824d"
        },
        "item": {
          "id": "ad323734-348b-4e2b-923b-2a816ffe109c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d0e0bc36-25f0-41f0-b713-b1b5d389ca31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c13fbb-b180-4cc9-841e-186f4bb38df3",
        "cursor": {
          "ref": "90a9a943-6025-433a-901b-4180c82695a8",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c1847063-fba3-462c-b9dc-631b170590ed"
        },
        "item": {
          "id": "18c13fbb-b180-4cc9-841e-186f4bb38df3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1c964e95-f4b8-4ad8-ad9f-2c523290bfae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3164c346-0a0e-495a-a515-f4cc87433818",
        "cursor": {
          "ref": "ac99e1e6-0f0d-4cd1-a565-1550e0bfb957",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7ebe71bc-fd8e-4427-860d-9b26d60dfede"
        },
        "item": {
          "id": "3164c346-0a0e-495a-a515-f4cc87433818",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "39cea8bc-90b2-4d09-92d6-c454801fe3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd433c3-a22c-44d2-9edf-4ff7794b6fee",
        "cursor": {
          "ref": "597de0c3-dc48-4ab5-aa3f-f4f372efad8f",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "581a0732-fc62-4976-afbe-a6eb8721a65e"
        },
        "item": {
          "id": "abd433c3-a22c-44d2-9edf-4ff7794b6fee",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a70611b7-3d51-401b-b3e3-611ecd181e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5770279-ad02-45d5-95be-f34a684be711",
        "cursor": {
          "ref": "6462c5fc-50d0-45e2-8264-990e383e2d15",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c67d61c3-fa80-4b84-9756-eb6c57b8af1f"
        },
        "item": {
          "id": "f5770279-ad02-45d5-95be-f34a684be711",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "72965dec-c031-4131-8f55-dc85e02f1103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bf4487-4d24-4796-92ef-158499acc60a",
        "cursor": {
          "ref": "d62c6b90-5bbd-4dc1-9ecc-8c72868654d1",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0174dc3e-f675-4e2f-8cb4-b6ad56bc0eab"
        },
        "item": {
          "id": "07bf4487-4d24-4796-92ef-158499acc60a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "63bbcb4c-7576-42cf-a5f1-79e9a9a68e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5231483-01cb-4435-8b7c-79c4c8ff4f65",
        "cursor": {
          "ref": "58404d6e-129e-47b2-b851-b566aaa49863",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b02ebe02-cc99-4e87-a928-f47e844fafe2"
        },
        "item": {
          "id": "e5231483-01cb-4435-8b7c-79c4c8ff4f65",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "309a9eed-e4d2-4f43-b487-d96f97feb85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe817ea0-9d60-4699-89cb-173289f351d7",
        "cursor": {
          "ref": "08fda51b-bde0-4ae9-8956-8b3851cef730",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a41c6b4c-eb11-42fd-833e-f9f2193cc9b3"
        },
        "item": {
          "id": "fe817ea0-9d60-4699-89cb-173289f351d7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b3bdcbce-55e6-489b-82bc-161c86aac5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb193b0-5533-4a1a-a428-8bbd8bf94e00",
        "cursor": {
          "ref": "381c9b69-6094-4312-aed8-543da2d9133b",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6350f0d0-cc81-4812-8d2f-90059125f214"
        },
        "item": {
          "id": "7bb193b0-5533-4a1a-a428-8bbd8bf94e00",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ab5e33c5-116f-4e21-849e-d2cff4f51447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a03fd57-e9fc-4797-a015-fa7cb779dcf4",
        "cursor": {
          "ref": "8d51c916-a6a1-4a7b-af1d-e6bfed44d9da",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e61c863c-9e5e-4e83-96df-1ab5ad8b0952"
        },
        "item": {
          "id": "8a03fd57-e9fc-4797-a015-fa7cb779dcf4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9618c9f0-3e7e-49c4-88a6-5062cd607064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8e085c-4d75-4546-bf41-2cb177c69490",
        "cursor": {
          "ref": "84a0df8d-75a8-4138-b245-92f34a69417a",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a7592cea-1d31-489d-8308-15e19ecbfa79"
        },
        "item": {
          "id": "3b8e085c-4d75-4546-bf41-2cb177c69490",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a3fec983-a277-4a80-bbb7-05e2bb8676e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fcae9e-bf33-4a93-88d5-9ab54bf43eeb",
        "cursor": {
          "ref": "83a8ceea-1838-4a23-9efe-39c01fdaec36",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "54528caf-bf63-4ecc-b69c-98688596a5ab"
        },
        "item": {
          "id": "e1fcae9e-bf33-4a93-88d5-9ab54bf43eeb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "19cce01c-9320-45e9-8f27-931aa545fa3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43767c84-b582-4a7d-9741-10da5278718b",
        "cursor": {
          "ref": "51c264b4-d199-4c91-b1d5-61188d57958f",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cd9450a8-3e85-4b65-964b-e65d3737c385"
        },
        "item": {
          "id": "43767c84-b582-4a7d-9741-10da5278718b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1f282d1e-d903-4153-8b2f-745464be939a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2bd87b-c6ae-40e2-b722-f171c6825990",
        "cursor": {
          "ref": "ca0ebf43-5ec1-42ec-b95b-ed5bb7ecb4c2",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d58cfa8e-1dba-4dfa-ab3e-c56c76af673f"
        },
        "item": {
          "id": "df2bd87b-c6ae-40e2-b722-f171c6825990",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f2aceb8b-1848-4055-9676-9d998c9d7844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2092f396-6954-4ef5-b6dc-810be02936e5",
        "cursor": {
          "ref": "d859fb99-fafa-4d22-b705-45d55a2bd93f",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0a353fce-36cc-4ca1-9218-449f53634a41"
        },
        "item": {
          "id": "2092f396-6954-4ef5-b6dc-810be02936e5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6fa1acc3-f0ab-44b3-98c5-8e772506d922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e28f97-84c5-43cd-bc41-1191d65ec371",
        "cursor": {
          "ref": "27dcb85c-8c7c-4360-91e7-ca25d835c844",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "62691045-0120-4951-becf-d600696cce59"
        },
        "item": {
          "id": "68e28f97-84c5-43cd-bc41-1191d65ec371",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9441ecf3-bbaf-4fda-95b6-b662a6ba9aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fcf10f-2a63-471f-abcf-e8140795d85a",
        "cursor": {
          "ref": "0864579a-338a-4665-b5e3-570d6ca3778f",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cbe83e76-00d1-45ab-b9f6-f386f6410c85"
        },
        "item": {
          "id": "38fcf10f-2a63-471f-abcf-e8140795d85a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "31035409-38c6-474e-b8e1-e731efa47131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1999ee-4fe7-4012-8595-0fbac60009df",
        "cursor": {
          "ref": "46761daa-48bf-41fc-b0e8-2e009b831a2b",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6f39b774-f87e-4c5f-89bf-0e4bb0b1e6e1"
        },
        "item": {
          "id": "8d1999ee-4fe7-4012-8595-0fbac60009df",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8f424b2b-31a1-4a59-9965-a19efc0597ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cbe23e-fd02-4dfc-a290-82bf5487e3fb",
        "cursor": {
          "ref": "ac1db47d-1223-476a-95ba-f3fe3201e959",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4f082264-2d15-4496-87dd-f939619aef8d"
        },
        "item": {
          "id": "e7cbe23e-fd02-4dfc-a290-82bf5487e3fb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "72b99624-47fe-4c64-83d3-53975b3b2f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5c0ac9-b872-4185-a03d-37e644d8d28e",
        "cursor": {
          "ref": "c12a3ee7-e8c4-4b1c-b2f6-68e7c4ca6d35",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a7677af3-106c-450b-9045-373331793e46"
        },
        "item": {
          "id": "1b5c0ac9-b872-4185-a03d-37e644d8d28e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "be2b65f1-d3e9-47b3-a10c-132e99e5ccf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782f287f-002a-4c4d-a2b7-1c7d6aa01c51",
        "cursor": {
          "ref": "70ceffa5-66ca-49ab-a67b-110f942309db",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d00e36cc-e233-47fb-9ee9-b28f8a4bc4ce"
        },
        "item": {
          "id": "782f287f-002a-4c4d-a2b7-1c7d6aa01c51",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "68a21001-01b9-49f4-ac9d-47fe845e25be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590d32d8-0054-4bad-b295-35df631c6a17",
        "cursor": {
          "ref": "0eba516f-1692-4cf7-94d6-923e93fb4b20",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8fcb4421-8be2-40c6-a03e-a04129ca0dc1"
        },
        "item": {
          "id": "590d32d8-0054-4bad-b295-35df631c6a17",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "94cf6fac-37e2-452c-9865-0cfb5cbd8faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9f97b5-e87e-4f05-a69f-f8dd6cb45ef7",
        "cursor": {
          "ref": "1614a540-850d-4863-950b-315b9b3b4a10",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6ba21125-c5d5-4e27-8957-14f0502dff33"
        },
        "item": {
          "id": "ec9f97b5-e87e-4f05-a69f-f8dd6cb45ef7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b3fd3c57-69c2-4d1e-ada9-03ae12571ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed29e9a1-577a-4d0f-b962-03f4b62007cc",
        "cursor": {
          "ref": "c99f9e7d-2981-4b10-8eb1-c5f570c50e22",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "18083c5c-c046-409d-8e3d-f32fda7df7ac"
        },
        "item": {
          "id": "ed29e9a1-577a-4d0f-b962-03f4b62007cc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "565c5f2a-3992-455d-ae27-691f7d74b19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ea8938-91d0-438d-8ea0-b2e1925595fc",
        "cursor": {
          "ref": "76473852-cd8e-439c-aceb-a91251793ec8",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0b17a780-fd38-45c7-b530-51ae5a8ae465"
        },
        "item": {
          "id": "a4ea8938-91d0-438d-8ea0-b2e1925595fc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0adff28d-b8c0-4829-a622-9f24eb6fe579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85576775-8eea-4572-91ab-350350e652f1",
        "cursor": {
          "ref": "353cabbd-53a0-44d4-aae1-3ea2a0002ef7",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "abb75d54-6ed2-4603-8797-4b599ba70229"
        },
        "item": {
          "id": "85576775-8eea-4572-91ab-350350e652f1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "03a7c51d-1208-44fd-94c2-a7f3aff6bd87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd21113-5361-4eb7-b97f-a15bfc0decb1",
        "cursor": {
          "ref": "513df77d-f279-4b0f-9db1-42c1e99f14ca",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "aa2c4966-63f7-40d9-8018-e1ab3c636be7"
        },
        "item": {
          "id": "ecd21113-5361-4eb7-b97f-a15bfc0decb1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f5d91c88-4457-4a2f-b17d-4a0a2bd0515c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f143dcca-06dc-4763-93b1-67e984ff5314",
        "cursor": {
          "ref": "3a69dee3-571a-4108-b8a7-456ffd233524",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7606c7b2-2c57-48af-a25f-c7994948075a"
        },
        "item": {
          "id": "f143dcca-06dc-4763-93b1-67e984ff5314",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c8e271e5-8438-4155-b816-841f23e04177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20115521-b3b3-41d5-9bf3-62aba9bd193c",
        "cursor": {
          "ref": "e2fd7baa-46bd-4c19-aff8-7446388dfc77",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "92aec953-8f82-4c25-8762-27649074a35f"
        },
        "item": {
          "id": "20115521-b3b3-41d5-9bf3-62aba9bd193c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "921ee974-dd65-4520-8828-e0f282e5e913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035f8482-ff53-454b-9570-f7dbb588d238",
        "cursor": {
          "ref": "9cb82b84-d59c-4ce8-b2f7-e0d9979a126e",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9d27560d-f52a-455a-8451-abdb7bd92bd8"
        },
        "item": {
          "id": "035f8482-ff53-454b-9570-f7dbb588d238",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a290e508-60f7-4872-b7ca-c05c724fe8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e1c81b-edd4-40cc-81cf-ae9e27e6861c",
        "cursor": {
          "ref": "9f084e53-505b-4535-a509-428746d9d883",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ff85b929-22f2-43b0-925e-42d66a812a85"
        },
        "item": {
          "id": "d9e1c81b-edd4-40cc-81cf-ae9e27e6861c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5ddc4924-7282-4212-b1d8-ce45baaefb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd480527-a480-4e38-a95a-7e60a26271a3",
        "cursor": {
          "ref": "6acfdac7-4a27-4d31-a50b-6f641986787d",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "62891f85-0ad4-439b-91de-36465e4e54d7"
        },
        "item": {
          "id": "bd480527-a480-4e38-a95a-7e60a26271a3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2e937f20-5806-47f2-a850-baa9ba93e6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "597de236-6cf8-4ad9-b24c-ec80f51e1dbc",
        "cursor": {
          "ref": "cfa510a3-0c3a-48b5-8114-07d22127bc58",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "146e7f1c-6bd4-41d6-bfa8-301c7b02653d"
        },
        "item": {
          "id": "597de236-6cf8-4ad9-b24c-ec80f51e1dbc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7af85bac-e6e5-4c6f-b440-ae97faf3c6ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3ee53c-b106-472f-860b-e2c5f3a3520d",
        "cursor": {
          "ref": "5741f39f-c9cd-4b7d-bd55-e9f769a354ca",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1ba8da3b-1609-4345-a59d-fe0108cb1fa0"
        },
        "item": {
          "id": "4b3ee53c-b106-472f-860b-e2c5f3a3520d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d3a65c1a-5bd0-43cb-a444-9740c0881bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c026781b-d1e7-4d77-aca2-a8b125d3727a",
        "cursor": {
          "ref": "5df583e6-07e3-4722-82b1-b94712d45a79",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1ba6b282-fec5-4b24-bc61-3b7d611fd64f"
        },
        "item": {
          "id": "c026781b-d1e7-4d77-aca2-a8b125d3727a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1d0ec020-ec1e-4b70-b5eb-3649f0544713",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4a540a-e3eb-4e74-a49a-2f278818d4fb",
        "cursor": {
          "ref": "64a05cd9-288e-45e4-ae55-1c1ec7b7d5a6",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "19d0ff89-5bfa-473e-a2a7-8394031630ba"
        },
        "item": {
          "id": "da4a540a-e3eb-4e74-a49a-2f278818d4fb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "82a02722-0078-47bb-a73d-3f93895eb42c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba2aee6-65c0-4c9f-99eb-0b984cc1a878",
        "cursor": {
          "ref": "fca308f4-cd90-4b53-83a2-042fc5777362",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9eef6cfa-beab-4334-b87b-ca3cd9204107"
        },
        "item": {
          "id": "aba2aee6-65c0-4c9f-99eb-0b984cc1a878",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "83d7f194-702a-452e-aabc-fdb1da84f98f",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "732f6e15-b6d4-4d00-9199-5210b561f4c6",
        "cursor": {
          "ref": "46922a36-03da-40be-b345-08d50aee160f",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a25b6017-e54d-4207-a805-a7515aa6554f"
        },
        "item": {
          "id": "732f6e15-b6d4-4d00-9199-5210b561f4c6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b343cf82-fb9c-4fd1-a857-cfbd0c0c9476",
          "status": "OK",
          "code": 200,
          "responseTime": 598,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8303e9c9-f4b2-4089-9ea9-b8381939fe92",
        "cursor": {
          "ref": "f4754425-0c0d-4efc-b277-9065ffddbfa6",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6c952f77-c1fb-4689-93af-a04db5c92c64"
        },
        "item": {
          "id": "8303e9c9-f4b2-4089-9ea9-b8381939fe92",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5c8223bd-00e6-4b84-90ee-7447b4ef8bce",
          "status": "OK",
          "code": 200,
          "responseTime": 592,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6055dcf6-a3e9-4d2a-bf08-5a5fb294bad4",
        "cursor": {
          "ref": "c0e485b8-92c7-45f4-a4c5-c6e9f2ad1afd",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0f9bfaf6-84e0-42a6-8025-bf7df951e074"
        },
        "item": {
          "id": "6055dcf6-a3e9-4d2a-bf08-5a5fb294bad4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "52f47e5b-f51a-4ed3-b1e4-ed75ec69704b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6055dcf6-a3e9-4d2a-bf08-5a5fb294bad4",
        "cursor": {
          "ref": "c0e485b8-92c7-45f4-a4c5-c6e9f2ad1afd",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0f9bfaf6-84e0-42a6-8025-bf7df951e074"
        },
        "item": {
          "id": "6055dcf6-a3e9-4d2a-bf08-5a5fb294bad4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "52f47e5b-f51a-4ed3-b1e4-ed75ec69704b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6055dcf6-a3e9-4d2a-bf08-5a5fb294bad4",
        "cursor": {
          "ref": "c0e485b8-92c7-45f4-a4c5-c6e9f2ad1afd",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0f9bfaf6-84e0-42a6-8025-bf7df951e074"
        },
        "item": {
          "id": "6055dcf6-a3e9-4d2a-bf08-5a5fb294bad4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "52f47e5b-f51a-4ed3-b1e4-ed75ec69704b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ea5d18-4343-44cb-b6a2-f057222a959b",
        "cursor": {
          "ref": "658a50aa-b36d-4f4b-891a-c56c23789e3f",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b7f6289c-b92a-4875-a46d-90799bb7933c"
        },
        "item": {
          "id": "39ea5d18-4343-44cb-b6a2-f057222a959b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f5d51414-8db4-46dd-a380-5d3e2ad6dfea",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515db033-fe48-47fc-a171-f58b7af588e8",
        "cursor": {
          "ref": "fa8883e5-e229-4dbc-9db7-11192cca4e94",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "63978f16-66f0-4fad-a063-5db183974363"
        },
        "item": {
          "id": "515db033-fe48-47fc-a171-f58b7af588e8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fd4e82e1-4387-4b34-9ead-52c3972bb2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "515db033-fe48-47fc-a171-f58b7af588e8",
        "cursor": {
          "ref": "fa8883e5-e229-4dbc-9db7-11192cca4e94",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "63978f16-66f0-4fad-a063-5db183974363"
        },
        "item": {
          "id": "515db033-fe48-47fc-a171-f58b7af588e8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fd4e82e1-4387-4b34-9ead-52c3972bb2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "662843a3-d119-4e9b-a9a3-ca36e90fdaa0",
        "cursor": {
          "ref": "80df3404-1149-4377-9ce4-5e332dfa3d92",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6723ec98-3e34-4140-8c2a-a381161be8f0"
        },
        "item": {
          "id": "662843a3-d119-4e9b-a9a3-ca36e90fdaa0",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c9fa3647-f42f-401d-b2d6-1d4b1ef5efbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ad1cd509-760d-4e52-a0b9-69eff37aeaa4",
        "cursor": {
          "ref": "f2d040ac-dbc0-440c-b971-0edfa962cf42",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6307e4ff-c73c-45de-8761-0ff4212a2f96"
        },
        "item": {
          "id": "ad1cd509-760d-4e52-a0b9-69eff37aeaa4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6627b5ed-2169-465e-82dc-73172975379e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ad1cd509-760d-4e52-a0b9-69eff37aeaa4",
        "cursor": {
          "ref": "f2d040ac-dbc0-440c-b971-0edfa962cf42",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6307e4ff-c73c-45de-8761-0ff4212a2f96"
        },
        "item": {
          "id": "ad1cd509-760d-4e52-a0b9-69eff37aeaa4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6627b5ed-2169-465e-82dc-73172975379e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "85739b2f-a302-4fd3-9b5c-875ef62da26d",
        "cursor": {
          "ref": "3513eaad-71fc-4cb2-814a-d6e5846787d3",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "87c48df9-0c9b-421c-a4d9-c2cbe592852d"
        },
        "item": {
          "id": "85739b2f-a302-4fd3-9b5c-875ef62da26d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f67f92d3-3b03-4c20-a6df-c436dc5fa46f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}