{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "526a6d1f-5590-463c-b1c4-4955140300b9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "38a2a33b-ef0b-48cc-9bed-62c515df5b76",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "26b406c1-2da6-4e10-a8c5-523a4e781781",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e03dac00-d867-44d0-9d4f-9312a2003165"
                }
              }
            ]
          },
          {
            "id": "d98e8ef9-fb5e-4de6-943d-b8aadf5667e8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7da0cd91-4b8b-492a-b4db-c903ef324579",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "767520f8-72b1-46eb-8f9c-fdd735f78496"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5487bdc6-a9aa-4a5a-b1a4-5d38af47b324",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a866ffcb-63fd-408a-8d0b-08a72d339c5c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "63772ac7-5a2a-4426-b605-dd5ac66d846c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce277f4a-e044-4d69-816e-bb7c290c0104",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e583f941-7b9f-4cd2-9b99-03b82463bcfd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "505a20ff-bceb-4348-9977-e68641406ab4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34f402ff-d4ff-470b-b823-6ac3814d3d4d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fa037457-e406-453e-89db-a42c201a8a67",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "18648eb7-5c1f-4225-987e-943c637a65f2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44e4846c-8ee4-4c83-b90b-4cbc86f3ea89",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b8c3699a-99af-4dc5-a619-0955cd02aa9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "257a2590-e5dc-4edc-9e71-91de91d866df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f2beb5a-a4e7-416c-a56a-d80d0a31164e"
            }
          }
        ]
      },
      {
        "id": "a9c048ae-9011-4f24-b4a4-4d10e4004ba2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8842b682-3ee4-471a-94ff-c7039b1ad52c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "300a12f1-522f-44c4-b452-1567872055ae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "56a2d3b1-a9f2-48fb-b24c-fe0ba87b36aa",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddb6603-f4d7-41cb-a7d4-43a714a47bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86c024c1-903e-4b4d-a6b3-1881dacdc8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87900c9e-5af6-4350-9304-250a07d125ba",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a12fb60-1d69-40fc-a3c0-188cf31818b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1e623a7-0057-4b21-8e35-b7b0d2e7d5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f45f0ee-8d2d-479d-a4c7-ac9fdcae3bcd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5911060e-22b7-4318-82e3-cf5bcaf450ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "494b7b0f-87f7-4cbe-8671-3f3e30a13a1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c02ad904-21df-443b-8d4a-7ee6c39a7615",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "510f498d-717e-4e16-b997-7c373b5adbb9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b8fd68-ecd7-4456-8952-79624106b1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9c57960-8f31-4c09-a933-dcdd0ea0c516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbbc767-5356-41bf-a438-7a6e17df8515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da5e48b-272f-447e-b12a-eca5b86c8632"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5a444857-5b23-47f5-845a-529650055f99",
            "name": "Positive Testing",
            "item": [
              {
                "id": "68e87a0c-a008-4546-9328-791827eb2b63",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8dfbb708-7ac1-4e98-bcd7-5eaadf15ab63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "708efd63-7e29-4448-bfa7-f490f45ebbe5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf7e0a47-4a7e-4e6d-abbb-bc22cb398a92",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "342e83ef-c6c3-4cfa-8307-001c1b9c0d6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c47d081-47da-4484-8c68-a964d3f06a0e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01f8dedd-697b-4f2f-a272-e18d38d801a8"
            }
          }
        ]
      },
      {
        "id": "3d998570-2608-44e1-bd29-cead89ec1c70",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0241379c-eb5a-437d-9fd3-b052a8a1aa16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b890f648-d32c-4584-8c48-ed22c888b728",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "61d10c9e-7c8d-46a8-96b4-7f1ca251fc67",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e841ac-9b74-4d0c-8fd9-f6dd7c9d1cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef8141f-9c48-48c6-9ac6-c5f871b1bbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e73153e-4fac-46b6-b49e-96ad1c154f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab4da101-e02d-4a23-946a-beb26571a8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b49d1c1-5ac2-4cf8-9e0d-eb61fea539ab",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59320228-e6f9-4445-9c28-2587de09589e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b3840d-e28c-4308-a0ba-165e9a35a761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e765c28b-dfa6-458b-a649-e953ac196d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dcec7fc-bd7e-4c45-bbd6-4784973abb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a4563d-6664-4905-9c74-ba168e8382ed",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ea2ae7-f059-4319-b6e4-aab56aee5e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48af1a8-6ef6-4805-95d7-837e86351553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c16635d-5492-4dbc-ab8b-3e10faea709a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c2cfee2-e952-43ae-88dc-61a822d25dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79caf90f-0031-4720-8898-d2f9853b2c9c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad614713-3115-48b1-82bb-619ccc46a876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ae6cdc-8a95-494e-86f7-5e3ac1aa2da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cd5ab4-5e45-4ea6-8829-e59d9dfa8ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97cdba26-efb8-4330-99a2-b311c2c6dac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d545d5-bebf-4809-99ee-0f255524e26c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04d112d-13cb-4d27-8ece-02d5b69cd1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a49c16-df7a-4b04-b895-efe163459352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4215c2eb-1966-4dcf-a61b-8cc73e8230df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2181009f-7eed-483c-921f-49b951a5871d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00f2e6a-951c-4a3a-b89f-67a63b573847",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad30d43-8831-49a8-8f93-980f9364e5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e8e64cf-038c-45c6-b15c-2381f873714f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5830022e-28a3-4a6d-a8ae-b46040ae2704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f05ee56-d3de-4837-98b5-a25471a47e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71cf245c-ae31-4d7c-84c1-28ee5d7032bf",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "857524c4-ab61-497d-a067-86664de9ea2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a5b65a-fe9b-4e22-a141-696f936a9131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0927f5c-0077-4519-ace5-7f74731b218a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ae04c16-7fe8-4cc6-afb7-d8396a781b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe16d343-12a2-436d-87e7-ffa744b040ae",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9cb7a4-f2ef-40aa-ad18-ae0a2d7a5baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a50ff60-6ead-406f-9fc6-f19cd564f01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2df1966-7bf0-41c0-9df7-cd8d4e6f9cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70bd5507-5fdf-44a0-b4b2-d3e4e075bb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3875d9d3-9c2c-4e16-8a64-39806cc22068",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ea5a8a-f565-4ad2-902d-e886f1c6f0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c74a7ac-b643-4ff2-8789-dd5dce6f45d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f66f7fa-b438-442c-b71b-3bb7aae8a523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01721bf6-5748-4e54-b075-3ec3169a1cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6182b0-1052-480d-a341-2fb11a55bb25",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442549fc-11b1-4f22-9fa1-77159f58be17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c7d2b0-5004-4f70-9dce-6e9ebd9d0d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9943489e-a576-4fb3-a98c-bbec76bd0faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36b5790c-3445-405a-8134-8824a375a94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b4db62-3fdc-47cb-8bca-d7fa90837a15",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871cc179-dffe-4d45-ab26-01247a385388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b10415-285c-4094-854b-4be793bfb070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5ab094-ee26-4937-bda8-580820a9fc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f978a44-f9dc-4276-8b05-a31211fbd666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39902cab-d34e-4a62-871e-82dc53edb09f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1161dac5-3b83-4d2b-97e9-f6dfb2761c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d40f16-db26-4c62-ad15-ea86a3fcd33a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2b6167-a916-46d2-967b-4b00a40efb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5f195b3-d29f-49ec-8cfc-08bd2afc50c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8b6941-dd8d-4264-a087-6af50f4d8ff4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a76f27-2c9d-43d2-b69a-cf6f062ad3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11880378-e864-46c9-ab11-23966927ad43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c7a2ed-edd7-4f3a-bfd5-e94c2758ef63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6b2dc39-c87d-489f-8657-8eb0acb99bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f89b8c-6024-4659-a46d-a378c1aa1e1a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8490f1ae-5f40-443a-8dcc-b6bf5f8b08e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e7485a-dcb7-4b4f-b5ec-4d488db59ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f2bdb4-84da-4758-ad86-297ecfd3d365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1183d64d-1f77-4a4b-8b77-b64ca89a6f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b714783-5462-4eec-93f7-b4f5684e817a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc5273c-32e9-4fa0-b4ef-8549238b296c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b0336a-f835-4f8c-ae29-5b76cc3a81a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5caadaf6-504a-4c7f-b4b8-af4ca6aff1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e57baef-88e1-40ce-87c9-5db0181b8f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97c4dad-eeac-438f-8cd4-9cef6913fcef",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77590494-d676-4c23-a588-3d4bdbb1e7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c686e18-95f0-4044-836b-94608331c6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a08901-f3b2-427d-8d91-bc57debdd895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f02092c4-6441-454b-8e81-50bdb7dfcb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8787949b-5d96-4997-9bb2-615172762566",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57aeef5-744c-4006-b681-94d74e2c1542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ebaf5c-81bb-4819-9ca7-b9c3de492f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c449dab-308d-4d40-9e6e-9495acdf661b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "261895e6-cefc-44e7-b400-e707a21b115a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2780293-9ba1-487b-b784-80e65b688d9e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de613363-5223-45ce-90dd-f11a3939bf3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9699af5d-4066-4a3d-903c-05f632fbf742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eda2422-8c80-4216-ade2-4d0bc3f2d68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4607a50-a595-4047-9b38-9c07d1f7eb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b790aba3-4097-4e3c-a402-2260c0f92157",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "625c3a17-70ec-43ca-aca9-b468277f213d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2865a1d-116e-42e3-b9de-2d70cc7591bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8b2560-0975-43ed-acdc-69d674230d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "535662c0-2fe9-4d0d-80e1-526facbdc3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02745042-fd33-48d1-909f-c6abb0c43fa8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881aaa39-7de4-474d-b804-01b3bf1a9551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a4ed836-d46d-49e2-89a0-ce2f83198a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc90c87-ffd8-4a96-be94-cdf45834886c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "060bcc44-38b9-4bc1-80ce-953577a14469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6298b2dc-7676-4903-9ae9-f0e7197fdfb1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dda5760-f0ed-46c6-9ad0-1943ba16b1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5307e86-8785-444f-b996-bc78542e153b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b61239-6c1a-4b87-b7c9-c5763e5e1df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75edc032-37c7-4256-9d01-ef79d8884e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ea6159-14a1-47be-b9e0-ca5eebcdd584",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cc6a33-8888-4a56-b96a-b566bd3f6828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68499441-8d85-4260-97b9-842ad561d50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de57d35d-1943-4062-9f35-92a7b285e802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9320e89c-7991-4d68-b564-ef2365e687e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafc3306-a864-4ae0-966d-d317cc772c86",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40232dc-b543-48cd-8114-773faa8f2522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8a28ef-dd71-4090-9d78-af1678e9fe5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21da7b8-84dd-4637-94ff-fe45c75221ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1a7237-ef23-45d5-bff7-7c5d42078f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6156c30-0c33-4924-b503-52d23301b7ba",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f312af-e32e-4a50-bf34-4bb7167fd6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00367da3-3292-419d-8db0-cd61a021c2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e3822d-5a2a-4337-9d7c-1a792ad1eb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "59f4d827-601d-4fbd-a8f2-4ef181fda074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170ca053-92c9-49b4-bea7-c2630fd32034",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e92c0e-97e2-43e5-9588-2608f0d34c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e618e0b5-5b9d-45e9-9f80-46989fc06dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90eeffa-aead-4102-bcab-7cf1ae97e7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d5c9e4-a46f-44e6-8d5c-2a3fc811b165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b02504c-b273-4b75-b92c-ea28c76d320e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57b698b-731f-4664-9880-4fa0ad59a34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651e4f4f-9a10-4ccb-9d9a-626937922ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b38eaa-a92a-4507-91ed-7f46fda54972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e247d811-3691-4d23-a9a9-1c0d339b579c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29fd6b94-e5ee-4d6f-bf17-9db7f295064b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0cd192-0615-4292-83ab-7f97fffbc928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2755773-d7e6-49ee-ac94-f4c1a5c3327d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea843d8-8a7b-4c3c-b44b-ca014a065fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2bba707-5dfc-49dd-8c9e-c3350d241382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1c4712-fe9c-44a7-9f10-c98000093b06",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f433cd9a-e6dc-4f8e-b92a-838d3c75c7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee804297-9cb4-4208-ab3e-515c12630966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b838f2-aba0-44f3-82df-625e9accb811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "375dc96e-f75b-4cc4-9c93-02e04e90ca76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8228456a-bf9a-4bfa-a818-7f60d7cee9ba",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca47440-1923-4ceb-84aa-ab4bd3280baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1020b57-45c2-4620-8fa6-aad11fb94484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be07ef2-09de-4464-8e1c-678963ad31eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c31442b-851d-4ce8-a538-7c2ade824537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300dc82e-212d-4c42-b451-1141d251b136",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31773483-5b4f-4b5b-9965-3a9581ec7246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34e5fc9-653c-4152-8ef4-aa61c2b00270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d889017c-dd8d-4d10-8b61-aa48f5e51a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9020f4b-786a-4c06-828d-d516df9110ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a8de5d-4877-49f1-ad3c-a77e5a008cf5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a21b996-8f36-4dc7-b176-1fa75830cb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a45067-9e4e-4bf3-869a-650309255fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cc9ba2-4d6b-4c45-b182-3dd5ea4f4dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcde219-5917-4331-bcca-70a794197a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c13aa10-c95f-4a2a-b1b1-743ded37e761",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c86923-4b07-4536-a367-ecb8d9681aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fa858e-56f0-42e8-960a-bd46589d160b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a2322b-5062-418b-8e43-c910d160d90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "245397e2-d89b-451f-9d51-639456aa9f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a720ef0-f7cc-4037-b8f1-250f07640615",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267cef6e-ea4b-483d-bf2c-7962ced70a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2216d94-9171-432a-81fc-d03e200e57c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d948d79b-5455-4587-899d-ac06dfdf1006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "863fa493-d53d-43db-b23a-7d660345097f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ba2d40-dd12-478a-a83d-1bb4534a293f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fe991b-4799-41fe-9d18-7022e7cec8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ceb9144-0e12-4b0d-98e4-53631b5edd3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4e6934-9cc6-4316-88ed-4510a1faddf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2244a49-8f5e-471d-994f-35fb29f683fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e52b836-1fba-4b6c-b9a0-46c5e1c6fad5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac48c6cb-9a40-4129-b761-18baaf84d23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ebcbbe-9a2d-4e81-9a67-8b143dedfd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1f3f1b-1734-4e00-9eab-f77a2591b5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "64d085bd-68dc-4fa7-aff6-f603c7541c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e28fef5-5fdc-4cb2-b303-243439f82ab0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a68839-0f79-4a92-bb4d-fee001ffe84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38f53405-11de-4d48-b40d-ceebdc5b1620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07edc06-5f90-4307-9c81-b160f433c28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33bdfdd7-4c15-4d3b-962d-5d6ecacbc0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831ae3e3-cb59-4764-9b02-df22cc194a46",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6547bfbf-3c64-4909-9607-223cb62b1f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44316a2e-bdcf-4e57-993b-b1293e69ca79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f17a1e-d772-4cc3-b534-e0d4f4afcebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dbc6312-0733-45ee-af81-70e37f29ba5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5fc556-bd73-4db5-a35e-9b8042861112",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b5d596-421b-4d25-abb3-3e7c5b2e7c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945e5071-e1f2-466d-aaf2-34f7166cdadf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28ffa07-4509-47c9-a3ab-509b8db9623c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "40280700-8c5d-4123-a388-855f3c8db992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4ca10e-9192-446a-bdfe-7c082b32258e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f299f6-8db0-4615-93a1-04c3a29c235f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac1b8e9-e8b1-4a7d-ad34-2df927b2fe67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938ccc24-e1d3-45b3-bed1-4f53607f5c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "08fc9d40-6977-4573-81e7-672ed760ae8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73205fb-0d8b-4b30-a6ae-964017b89e13",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf31c4e5-de79-4528-a09f-886a0836b4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7bd7eef-6869-4b6e-926b-9c895f02c691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670cf314-7c4a-4d3f-ad1d-b7cd67a0c8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "55e3c1a0-3141-46b3-8ad5-f015a2779cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2da0404-6dad-4f8d-a866-415c84235915",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51eee7e7-3cb5-4be8-9155-616b4d3897bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c947ee4e-99bf-4d29-80e5-9617bcc89201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8892514-4584-4462-8ad8-9de91d6eb68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "eed006f0-c983-40a2-89fa-20885bb485bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5d15fe-d5b7-43cc-8c24-8f8a4e2cf0e4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dba6455-9a8e-4254-99b5-62ddc4bd4c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7327d52-f8cc-4c5f-a906-ced671d0d5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04645ab7-7175-4603-90e5-80372bd4b061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "065362f2-cb45-4b82-a84d-db9c9011eaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59344385-6b8e-4aaf-8dda-116e47ecd88c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681eb140-f5c8-41d6-adc3-cf25f5ecc716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3628adc6-1e58-41ab-b152-79671108a86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d13f6f9-95f3-4781-ab9c-b7ec95ed35b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd66de35-aaa1-4f58-a672-8665473aba44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d23d56d-112d-4951-a900-d63501e7e9bc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28d6918-9c0d-4d2e-8787-6e4040198ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c48da6-a6bd-43c8-88b4-967e8ce28f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488f5f03-9da8-47f2-9617-1d3fee6a05c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "11edb163-4d28-4b7b-8f26-738c50a1caae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83f6abb-c3f2-4b0a-b6e3-a7225e6c19e0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ce47bb-246c-404a-816a-3be2bf07f8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51371c28-b749-4466-a231-b848eb37ef41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6553fff-e9e9-4d17-bb12-84a2f4068e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a54a2f3-ca4b-4808-a052-1cae5488dfee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7c6f82-2c2e-4aa6-aa16-b4e1008e2238",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6f7887-3e55-4ec8-9313-8efc9336c064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20ee849-e2f7-4ef0-b214-bfa06ed9e652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44dae821-e2ad-4959-a735-bd7e34cfb027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca668b79-be81-42a0-9daf-b15793bdcc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f88d4b-5275-4981-8fde-7587c2c8f816",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf5520d-7871-4f7a-9e43-560ceb921266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9dc2f8-675d-4c2c-bcf5-94f8827dcf34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b703cc1-4b5e-4cfb-b374-c8d538d0c287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3acf79a6-fd18-483a-8588-860fb61f91ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94617cb1-5670-4198-9410-fcc244b9086d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc82f5fc-ca47-4a12-be69-3aebcdc851d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c0403a-8628-43df-bbac-d8afc9a97313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13b59b9-24f2-46cf-970a-b14d9bf53ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d7b859e-6f54-47da-aa9a-18d80c57cdca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9875d5-4c34-4df7-aa3b-5c13f51e2752",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9d5bac-c5ef-4051-b48b-bd168ac8eadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bd18ea-08ad-4df6-8fd4-c9440a102943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1829a9e-8b1b-44f4-8582-5b7298c6ffbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "98897cad-cf53-4bf6-a375-97008203ce29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2389a73f-1c38-4c18-a562-9d9a525d1763",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d7f378-184b-448b-a485-52c449273cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2492e980-a577-42a8-ba1e-009e71153a82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e06907-3a42-47db-9e53-ea67467f2f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0d4266-3f7b-41f1-af33-d41ad43b96dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96113ce8-2801-4776-aae5-09e37581eb90",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c266d7d-0976-41ef-9715-cc16d65041b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ab0e01-1843-4606-a4c9-d4f55157b369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007b76b2-72e9-44be-b9bb-8f3d7060375f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c6c2188-85e1-4c6e-ad9a-4b58d1a18fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4260596d-d5da-4141-bf18-a2a741de0bc5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc6e698-96a9-445f-9582-e069206e1c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb305f4-fa37-4d2a-b628-060fd2abd667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a29db4-c6ad-46a6-a086-504992b5dce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc321bc2-0e6d-4821-bcfb-797d76edf532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b8bce9-b13d-4e65-a8e0-f64ad5b5b014",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d2bf3b-69d0-4150-8757-ea0f2c3e681c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42eb24b4-8256-4658-9fce-4c59e2c4b229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e1dcc7-1e55-4d1b-b878-d6c28439a63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d67f37-5347-4fda-857d-05324041e77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f7c7d2-a4b4-4e2b-ad6c-14c9059a9611",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0c3ec1-597a-4703-a7dc-dafbb203581b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137571cc-2f98-4102-b9c2-8f0d48451f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc50e99d-4b8c-4efa-9487-5b397aac6996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab07d74-19b8-42f0-b9fa-7cab76a0cb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f801526f-f1b4-4c2e-b501-07ecd41bcfcd",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee80a4a8-28f0-433b-8343-13ee139bd22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c122ff0-4c85-4b9b-9997-bddff210cbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d6387f-cdce-48a7-97ef-c61fc95a68b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8555ad8-a3e2-47b4-8e3a-64aef40c1d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235f2136-e8a8-47b9-9585-b5d1e9cc9b0c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980a5196-5428-4c59-9d19-797c993cc441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b215dd6a-0b69-4b71-90dd-6fbfa9c73dc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c4ea23-500b-4174-9a39-3b720832f90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8a2d7f22-abcf-4599-9c5b-30761bdfea6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c879e85e-c518-496b-83ea-aac3277acf59",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24baa93-3fea-41b9-8372-85d0b19cbee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f599b00-ead9-4950-ba98-531a717ee75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93446cd5-a3e9-4e5d-b048-593344574c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "49d43dd4-f642-4e3b-a2bb-c10210d6a6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cf763f-e2c4-45dc-85ed-0acac889e0af",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d5f24e-8566-42d0-8b2c-a63758f96986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6d7f14-10a5-4769-ac30-5cecdbae4803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4c6e24-288c-4cb3-9e1e-756a8cbce755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7651cf14-72f4-403f-abd3-d9182e6a8461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2aa210-ef3a-4978-8aa2-89a4c48a3f43",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ef038b-80e8-4715-8e05-60b1416138dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "642ce3b0-6dfd-4aa8-81b1-e72b5e420a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c160898-fe8b-4ea1-afa9-df3bc806d93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "573eeb68-ee4b-418b-8bc6-83a222bd0814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7798d6-a741-4bfe-bf66-4d005d1200c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ba514c-6057-4af4-a341-2195212e4260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c221e5b4-e46d-4460-acab-d1a86526edef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56318327-a79b-462a-9abe-9a3f726c8068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b48ab3b6-9989-45f0-a161-0d11163d3c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66171964-2a80-454a-94ca-cce067913435",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d80d41f-6383-48d0-96d2-93a7f176c4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d198066-241e-4276-a716-c59292d15b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da53c2cd-587e-47d4-a370-1d5662f2a1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "72f123b0-03e6-423d-8545-28901e30c8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fdfa5c7-2705-4745-be0e-81051373cddc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed0049f-3c42-455a-aafb-e3eac3061e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc098751-9d4d-4a5b-a518-5837e8934152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6182932-312c-4a7e-b97f-d5c37505fe59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5519514e-42e7-4857-b928-be8aeff85a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a25848-c8c0-4e5d-a71b-a21ae9caa299",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b318a9-3976-4fd5-b734-dd2cc52d711f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cc50d73-5e6b-42c3-aa7a-4b8efd5b5c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3796624b-112b-4a34-b967-a2f02808830b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4d7f0f-0019-450e-90be-4bc11e384292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2c5268-ff6e-486f-b72a-198f4a18433b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900a8281-5451-4972-a074-c149e48be879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5d1edf-0e3d-4117-a6f4-923378855e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c91bd29-49cf-4778-8b9d-f9d9d4e2fdc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "261f2ca8-7334-4516-aa6c-142d04f87c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f38227-a591-401e-8dab-4cb42041ec83",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e58a2d-aaad-4baa-8fd3-173acbf876a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a5cfca-6ca7-4927-a0d9-6598784e72e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc52267-69ab-4779-9528-ab2633d50bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd30822d-5d11-4a54-b4f1-a82f18cf11cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad26a130-eacf-4537-ba96-07e7aea4e390",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b96c176-223e-4dc2-94f6-40b2151326ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435ef42f-d326-4841-87d2-51d40646d90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae106561-4582-4a0e-a6c4-4bfa4adef827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e40fdcd-b836-4a14-8c31-ca01226b1323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df456979-9224-4900-bdff-b4984bf343ad",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8417de0-1338-4986-8c83-c7da8d978817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd4a877-8269-493e-aa3e-f9c75cd6c536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e03d3ff-b227-4511-8fc3-d0288e4114c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8011c045-f8f7-454d-aaac-653fda2bbc57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a42d976-0352-44e3-8668-afa7cf39102e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3bfc7be-ef6a-4982-ae14-c4d61d89992e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16676b4f-bd95-4627-8769-91d7b5f5091c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93346aef-c469-46e1-9d05-098667f862f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ba958c-7e45-4b5d-a719-ee8146603f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c80d99-df75-4e1c-ae3d-3b9c4fd70527",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f37514-648c-4ae4-9cfa-3253bc12a2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e888c1f5-4407-4c9d-b68a-b4a7e5a4d2e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f315f32-bfc8-4eb5-8ad3-c3d3e48e57e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9c1104-04ed-4685-aade-3d28c169963b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d468e6bd-11f5-489a-b5e6-7cf33f5d6c17",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905fa537-4183-49bb-a520-14baa3e2937d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f4585a-8a36-49c1-9587-dbee024c57a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f99a4e1-e736-41aa-a9c6-18e3f2cfd38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "497ec5ce-3aeb-44fb-9b55-fb49767a336c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e34e55-afef-4dc7-ab6e-ff42804904e4",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8031eb8-7a14-420f-a82b-b2ab76e7b99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0aa81fa-f16c-4b1a-95cd-9b75f92dd61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2164d57-61a2-4dca-818c-83a4d4e63b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05b95281-ac45-44b9-98f2-2f5275afdd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7de075-150a-4027-a322-825a1fb3c7c2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbb62f4-d916-486d-a4e3-3a23f3c03d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3d8dc0-0322-4636-9d8b-faac23182c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440909cd-a0f3-4e60-af97-fbe3870d9080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b575470-337f-42cc-bc32-ff15665458d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bd0d61-ced5-47a9-96ae-6f7042282b87",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ea5c1d-6ac4-4514-8dde-8460472659e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43ec2f8-6025-4841-a684-066d146cc618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031bf2d7-5931-4a0d-b1b1-2f07aa62a786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33f97983-a4e0-442a-9749-de83c7e365f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca76380-db77-423c-9e37-4d58bd86de18",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396c34d6-dfc7-4bde-9a33-791f58f66221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d67100-27d9-41c2-9c07-98ff1f8a1b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0271b649-8e0f-4687-b75b-5c9bd758757c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb99ce23-1cd9-4898-94b5-7e99b08926fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffaa0d6-d448-4df3-9912-13cc96d3d266",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31511a18-d8bb-4e18-8afb-063cf2940e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58add1d-9634-4a73-a224-bb73769de289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f73b70f-43d5-462b-a693-a66a29ba26ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa310ddf-133d-44da-9c6d-c621247eebf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f34d2e5-54b0-4e5c-b87f-8b4a11067e36",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7d3c18-cd6f-4596-9fda-124177ab8620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eace1232-cf49-4980-937b-882f1dd6e0a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc0088a-6584-4fe4-a582-ae70a514c55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c73a69b6-2c4b-415a-9bae-5c995de2f455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46fe664f-64f8-43f5-a88c-4a6bf52aab6c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ca59ab-89a9-420b-b0d3-1f32bea7d0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f62dc36-d768-44cd-8033-7e55629fbfa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115226b2-97df-4e70-95d2-a562d3a161be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43d01e7f-0202-400c-8094-ac56505d49f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47932f64-3437-42bd-a4e7-0f8061675e9a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5454218b-86b2-455c-b971-bdcc047ddb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d48806-f8c7-412c-9d8c-0c5c6fa2f467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3645bc5-bfb6-482d-ae4b-fc8d9a6acb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0952ef-4cb2-49b9-aba6-ec144eb57e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f4ac6e-a11b-4d3a-8953-8075c7e42221",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08750bc-414d-45dc-a5c4-f1b03e7836e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68530969-16c2-43d4-9996-4a38a7b4dec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b65c22d-3c92-44e4-b40d-ee217220921b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58496e03-459e-4bae-9718-dc9603aa03a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4b2ec8-0eb7-4a7e-8c2e-02d16843a7f9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc4b992-fc0a-4581-9cf7-3b7d03f8091c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95910f55-d017-4bda-b592-bbeeb7e38dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164f248f-b62e-4411-8f95-275baf410985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "033eadf8-0429-4d7d-8a5b-80554745fbd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008d9709-3deb-4757-92ab-f11715d582dc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e2a341-fe09-43e7-83c4-bde3afb92a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20eddad-7b25-45e3-82b3-6c270f2d155a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7faabe15-0665-4388-b6ea-d4743bf53ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0cf077e-518f-4fcd-b508-1f4a64fb4ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0d9f6c-a8af-4772-af97-6467c2c1d4b7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277b45cd-ea61-454c-b173-522bed57cb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ea2ac1-9cb9-42d9-8c7f-6652cecfc8f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1e080b-daaf-4834-90b8-96027f5bebae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f00434-7136-4ad9-8d7c-afb3012969c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73045bb4-ca54-4781-9632-071acea44fcc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c41c85f-604a-4b70-85f4-24fe69d25e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc47057-1d9a-413b-824e-553c220721a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4106489-4910-4f53-9238-17e8ec018011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c34afe0-6fce-44f0-95ff-7bd790a75adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b97334a-774b-4eee-9839-9e3cd3db80ca",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2429860-5353-42c4-a998-8049fc497296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2461e7a8-0f45-4018-9686-7f7ea14a3708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762784e1-ca8b-4bfd-b2bd-0f275228fdfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "413f267d-b40d-4d0c-8e4f-57f1105d3f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e32db4-afd7-4fd7-8ef1-fb34e4de0f15",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bbd583-3af2-417c-bf81-56d6255d81b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd56510d-5a5d-44b0-84aa-07f95b8363ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a045f5-87c4-4f7b-9723-524a90820081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "976ee806-e045-4a59-8986-a0c779a705f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf07aa2-1e83-4fe2-85ec-deef03530fb9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f81cd9-9c20-4169-81fb-a59cfa5ebc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a874a175-271b-42c5-a9ec-1b13b32e9a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52037c7a-61e1-4bdb-b8f7-099601eddcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "74da069e-a815-4c6d-919a-cad413dce5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1debae8-67a7-46e7-aad8-28b87af30c7f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43ce14d-0a82-441c-a858-44e34c0da827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "759a204c-bd28-41cb-a9f0-7557016cff38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee31786-6492-4541-8c3f-5c1ebfc17df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4f2671-d160-4a11-8349-e53a477de363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c35b8e-e46c-45e7-9855-546773f9bd00",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1017d7-1e5d-4a70-961d-a924e6ee02dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441a71c1-7888-473f-8996-ade26c3bbebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22b3787-9200-45a1-b40e-f7e6b76fbf57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd37bb91-f288-4376-bb88-ea8ad1876f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f83d50-a423-43d9-85fa-29543327cd24",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc1656c-601d-4457-8aee-38a32cf0bc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a7292d-2128-44da-ad3b-56a93b64a1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b7291e-f7bf-4a35-83d9-e6f83919e8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a2b220-44df-4fe6-b2a0-6bf82e125963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f5ea2e-a90f-4ab5-9267-3883aeac0845",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76e13cb-7d2f-400f-9980-2bd9853a7532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1a7569-7ee0-40a4-9278-615522c70c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e11a47-d229-4532-b166-1519e3a2ef42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "726761ca-33f9-4d08-a9ff-0a430e6a47ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10081f86-e698-4b32-9c27-e86a830ce873",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5583f33-ac0d-457d-9796-5395f3f1c72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09da82e2-1dac-47f4-8137-e93ac463b3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd934fba-32a3-4b26-b0b4-797fe44d17e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb1aeed8-0d2b-4f31-9b9e-f3f8db84018b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a962fc42-2a1e-4763-8340-522049da2889",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201ca68d-ad81-4503-bc4a-92e5ef822837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "48d411ff-adb0-43a7-b9e9-a7a76093f14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1721317d-9589-4bfe-b230-6ad90609d699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "44a679de-040e-46b1-99cb-cac0ba5551b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6623fbb8-a175-44ce-8b97-6c4b7abb66e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a29b8f67-bfb1-4c75-a326-e0d46a609fb9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06d6b37-1990-4e6e-b49a-7bedff817fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fc88bf4-c2b2-43e2-92b4-a0293610ce58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68aa5874-d776-432f-b599-f2d0c1816441",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c3f7a2a-787d-4800-8a1b-7a9a6cc58414"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cef687c-791f-4fa9-be82-c05d9bce1125",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e29126c-d256-49dc-9d7c-4ed890ee182d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fe63dfa-1111-49db-bcae-53f809ed31ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2773515e-de23-407a-a21e-8dd99ff9eec6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbb60148-0a5b-4bad-bcbc-6cf5680b22cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a28f44d-99c9-45c9-8dfb-0b6982d29fa9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c59177ad-3ae8-4167-be73-e36f42d0077c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97524b8c-e946-43da-9273-5d3635563a54"
                }
              }
            ]
          },
          {
            "id": "ca2344a8-6360-4728-8f47-7765bd6dec59",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9444b170-db0e-4a52-8370-0da361ea30c4",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f45d8a26-a53d-4550-97ea-32233fc2b3a0",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a17c21-faa0-4e02-a559-4d5e0d8b226d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7d86296f-9d48-4dca-a17f-0b475207bc5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9937c2-2ef2-4064-b076-3aebdea9458d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb6686c-cbe3-4fec-ba3b-08a48dd8e614"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "17169fda-84d0-4916-a7c3-3cfeaf8af83d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98d39405-3c1c-4874-a8f3-c57506f7a2f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94ecce68-8aae-41b4-8218-9d5570720ca6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adf468af-96d3-4824-94fb-d3f26bda8c69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aaa0d203-60cc-49f9-bc74-5b6f5519fac6"
                    }
                  }
                ]
              },
              {
                "id": "fd54fafe-166d-4d91-865a-136719d86b6c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8fd611f-47ae-4405-996d-82a5292fb7f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba41057a-de24-44c9-b850-cc26491f17bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bf0c999-cd3d-4980-bf90-515754055a8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "95bb530f-1806-49c7-881f-f15a0bf814c7"
                    }
                  }
                ]
              },
              {
                "id": "60c0debf-1649-47a3-9309-6c159762e202",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4745d236-7890-4ce4-aed5-05ec6a3ec582",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60e3fe6b-b434-46f7-a2e5-feb6e0e360be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66ef4464-7eef-47f6-8a8a-3e4387418957",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1da2fc99-6a0a-4ffa-a367-99f5ca1129e3"
                    }
                  }
                ]
              },
              {
                "id": "73996708-b767-4d81-a728-ce6a0829ce0e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0186e024-ada3-4508-9818-2ef759e5cead",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7eadaa95-3754-429e-9e69-e6145b3bf137"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56b590ab-4bf5-41de-9a3f-a13df0292a60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f542d719-0e97-47ff-922c-c9c51f3eadeb"
                    }
                  }
                ]
              },
              {
                "id": "fd3385a8-f4a3-4740-a85a-63dbf45e6060",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef3edfe5-6477-487c-884c-cfb3b915f145",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "208955c4-69fa-4f45-9a76-189c12a658af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f28c8b9-43b0-49ae-83d9-81f609612912",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b169eecd-3d07-4ddb-bbf7-c3e660b75b96"
                    }
                  }
                ]
              },
              {
                "id": "b9283336-3734-45d6-87b5-c270b69cd199",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5069166f-d4d1-44dd-83b5-cc4f2b7f542e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18e94c26-7c01-41c4-8638-d5d737e477ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e27fe26-f326-4a93-ac33-0b1717095ac1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "20161b09-0620-47bd-aed6-83804b7e9dc2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec43d3ec-b691-4b5a-9999-5d3dc7555880",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65cb215d-1541-40e6-b374-421fafa105b6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "235e12d6-9909-4a10-9cc2-2bb9c1b7a1b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dee85758-55a9-4765-888f-fa7cfe416dec"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff18cb18-13fd-48ea-af46-3c40e98f5c0b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "55a8fa2d-3c04-493f-a20f-62ff8d3e6f9d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "974bc52d-f354-42e4-bfd0-cc4f9108f942",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e099427-de6d-4829-a3ab-592d106c6647"
            }
          }
        ]
      },
      {
        "id": "ae3aeb94-a420-47f3-a8a4-34381d257a53",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f35c18ce-5526-4e70-87f5-4fe9f8d5aad4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "139cef23-68a0-403b-82f5-e172739afb32",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b4bd689d-d4ae-4936-807b-ab6300e4fc94",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9b0a01-1bfc-497c-8ff8-c17420ba482a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "933b73b2-aa75-427d-b7a7-3940eebf2a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a5a3ad-b9d2-41ae-ad1a-7d6ead2eeaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f89995c-e162-47f3-97af-9b7e1a939d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263391e6-0c57-435a-a321-af3c72e75990",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca86b8bf-7314-4b80-a3eb-48f5baa8a89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d6f5b8a-ddf5-4fd7-af27-fa02ff86c8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e392cda-6653-463f-908c-63046dd9ef0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f16ed28e-f021-4376-ade7-f62673c744ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d475328b-15fc-4d3a-9e5c-0d79947d7401",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31c2191-b49c-40d1-a7c5-a71d8eea56ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c8b646-fe16-4db4-b00e-3c6f583d0d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bfb914-0c51-40b9-a013-651ebe589e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3df0065-3cf2-4fb2-8ed7-25371165a1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5b09ab-4f68-46ac-a875-3934c4dce4ab",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af42c17-ad14-414a-af2c-b610354fffbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e16568a2-d2ed-4b42-9294-33b00f90479d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec288d0d-c992-4836-b7b8-1e536db3fa8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e69f42e2-8829-44b0-8816-cd529f8a04db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9ed0d4-8017-434b-9287-bf0421d0e3b6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581f9f58-6171-4294-af31-f5be8adfe98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09326aef-b669-491d-ad4d-dd3c85380136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9368c070-36ba-47d6-9ad2-c8804b59d4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f66fa4fe-02fe-4c45-938e-0ec885d481d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339a06b1-d24e-43af-ad35-f07a596dfa59",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bd3f13-444b-46b0-aedb-64b9b2076ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e1eacc-bcaa-4769-99a0-e401349b6c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11791e4-0b6a-4541-b5ff-ec88a8d3d07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94820bab-af5c-41cf-bcdd-aa9de39bfe4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07704b5b-d27d-491c-8476-a7bcaa6dd93a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062c1bc4-a63b-428b-8106-22b52e78f657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52642aea-7d7e-49e2-9997-96f577b73f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b519162-6f25-4619-9516-7067bab26d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7effadd6-172b-4026-9084-50c755a246a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2420a5-b7a1-4400-a291-c6d40a94ed04",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de47dc38-0998-4f2b-b7e1-ab0ad831c884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7e98cd-6283-452b-9e08-4373787b5d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8bb412-3fee-423e-80c0-9e3057f79862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b092bb9-60a1-4187-908d-aa0635ba50b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f03837a-f807-4593-97d2-8325deafa426",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8e6044-057e-4fe0-a6c2-e734a3e9f3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c75d3b49-ad6f-4506-bc40-11b2d11392f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176e3e64-7b11-4790-80cc-b057f0a70993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "546b8e9d-42e1-4ca5-8f89-32d019b4a240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b129d906-2fa0-4e93-be90-f5b6c9e082f9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467a571a-6ad4-4acd-a2b3-dbdb987ec0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7eaeaf-282a-414e-9d51-da517e47e041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972911ef-6dbd-42c8-b256-969886a978a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c284595-47ee-4e54-b8ec-2973173e50f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d592b78-0e76-47d3-89e8-2cfb60f4a4dd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb90fe8e-d2ee-47ae-8c0d-5d5a4c2e9f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e881cecc-2290-483e-9c09-ef92a5511e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805ec8c6-1cef-408f-aaad-74abac512501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3f4909-bc06-4368-a6b0-3ab34d54f058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45ca93e-7bdf-4f00-99ef-5cfd44111d73",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6390a9-0b67-433c-b3d9-ab13b4bb17b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef5f0e6-8fac-407a-aaca-92ce3ffe8775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a186a65-7f72-4baa-abfd-ab5a5a5f6eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c093738-0f9f-46e1-a90b-7912887728e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b125ddb-4cc1-45b4-93f4-d038d84019a0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1394f6-5f06-47f3-b39f-bd54efd2a2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4573f9a7-5065-4f18-8ba5-83d0a62cf21b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d194ba9-25c9-4c00-a051-3c40d0bf340a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a761154-51e2-4d5d-90d6-7a3039c77690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bfb85fa-915e-4bdc-a4b1-69296a77a10d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b4c060-a45c-4769-9bb5-4cb6f462eebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74368a28-115e-461d-b1b9-791e341fe16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29dfbfc-2f27-473d-b1b7-ada4a752e248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dda126ce-3dc3-408c-ac45-f7436af23964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4e75c7-f57f-4a53-a0aa-630482a655af",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d4cfad-9466-4afd-96e1-bdca64a84355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf248fa-d26f-4e7b-8610-e7b66369e88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a811e97-1c89-4dad-8246-d53aa6909fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "78db2fb8-398a-4b1d-b6a0-08d13fec3639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c47cfe2-4510-4aea-9136-609f184d32ce",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b74844-25eb-4a49-a2fb-84fef8535621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a82ed7b-729b-4cc3-a8d1-e712dbe75f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1697f0a-579d-4230-8d1d-863f6b17d8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a57253-b61a-4e44-afb1-c5c1f412c11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98288d99-3506-43db-a8d1-e242cd9d14a9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "116c6a9e-2b91-4d84-9b81-66a28bca35ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99da20c7-d10a-408b-bb9a-53a9f4710b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9399eb6-38e9-447d-93bb-418e343a6999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "96fc4f4a-3308-4a31-a3a5-0b88b17a692e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f2c8b0-1842-4dfe-b3da-04377e4062e1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba15b66-4877-4363-8ae4-07a520ec7bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9ef62d-62b1-4fcd-8e6e-f587cabaf8f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f46a188-374e-4716-bf46-613f3ef2463d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a04304-e17a-4b29-82e6-f59fd68c4645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b411eb-64d6-4d47-989c-c7d806bba4af",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1239e4d5-0d7e-4fe4-9fcc-6a46041ac7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1294765b-cbd7-4dd3-8469-f943428e89f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7c4895-b779-4e64-a751-efa242294833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1503075c-e4b3-4a69-9f8c-caf947739f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ce2168-49a5-40df-a91c-70e641443dcb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b7a342-a96f-4895-84fb-9cc2dc26b042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8423fc10-8f4c-480a-b23d-2f7c46cea837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a805a6a-3fa2-41d5-99e7-02828b6c2d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27b574ba-e0af-4b2d-8407-2dcd1b23c432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c82f71-1a67-405e-b238-322917dacdb1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dcc191-a3ff-4117-9498-ce44c49f913e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709a9662-7466-471c-b2f9-b2bbdb761fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc054694-8c2e-4ed7-9ac6-79d11549e2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91c72964-1a75-423c-87f9-6875adf01552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0757fa-86f3-4e7d-aa4f-863fa15ee37e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43195d7a-693b-47e6-be9d-5698a97b6890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db14436b-6aad-4a46-8c59-685e9e2c5614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ee138c-6aaa-4d1c-bb05-e34a9ea0955d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfbe32d6-184c-4d19-ba83-15f145276c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a54ee62-78d8-4506-a01e-f8ef9f12c4a2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36730f9b-a67e-4b9a-8b3e-c01ddca1f01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948342d4-2063-48e3-a64b-d4de0a35082d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ac3c98-352c-424d-b633-b5d799b42da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c2f9c5c-ba13-4ea1-864b-207e16f274c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabd4364-0250-4fbe-a45e-a6cfcf03f8a8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e17031-9d0b-473d-8c52-f5cc1fb6d370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39024900-8337-4ba8-8e13-ac93c57f8654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6405a38-c097-457b-aaff-6fc11dfa2d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1cab3ce-d604-441e-84a9-ffd9754a1b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ea83ac-368a-4754-a86c-32cfc764f81c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410e788a-609f-4e6e-a616-8fb878be1cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e711638-ff92-40c3-8887-f71de0355231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baed86db-ba47-4b14-ba81-adbd05e7c8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60269001-6753-4b97-b9af-cfa51c6a44bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe3ac10-07b7-4605-9ad5-dff7874efe3e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b39dc8-c39a-4f70-8646-f1c3037e00ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd5468e-da82-437e-97c4-2d44b1a8d016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df08c3e1-3f8c-4024-9ebe-21263c06895c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f67b6055-50b1-4f07-8bc0-356194e4172b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6440b300-f521-4016-851c-f63533f73851",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ac9375-4c87-4729-8aa1-d208de495ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c572ab8c-e0ad-4080-95f3-86a81456ecc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac74c2b-9780-4175-ae60-4db46515e8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13ee168e-9f53-47fb-8ac1-ec0d5d7f0c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929eba12-52e0-4aa5-bcf7-36a25917f1c8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca93912-5da2-4a2f-8f94-5b3941f364cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862427ed-f91f-44af-9a8f-7430487ff7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e4200b-b558-4201-b17f-618672b1c29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2a11cf8-f507-47de-9925-81ce736e0704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1424086b-f740-4ea2-8615-8085e370d616",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f08316-0193-4124-b41c-b1d1709d3aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b665cc-3c02-44a2-a688-2ce1458cbbe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a7159b-aae5-440b-b95b-70e1f1065ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c42f1d-055e-40c7-831b-5f3fbdf9e20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e7eca5-a6cd-4caa-bf62-a0c802b19fd7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b06f252-3fbe-431c-8fcc-6d81272873c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2301d8d7-62ac-4649-9946-eba789ffa3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f5a405-5ed4-4cd8-82e4-8ee312f35014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "880653f8-8339-4890-ab0f-d46b86f435d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4e2a03-4bbc-490d-87ba-49a0c16ffa4c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c50d8a-0395-4665-83ce-2670a5492966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6b2713-bedd-4034-b654-01e2a562b726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd56dea-87de-421d-a154-355741aee85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47af2106-fdc4-4f3e-a33c-0855f0a2e347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2b68e9-57c0-447d-97a2-7f05780bed60",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbebad58-27f7-4889-9b0f-c2c036e66e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02664924-73c7-4e23-b5b9-a6123b71cefd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a1f9ca-ba1a-472d-951a-a80f5e2abce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e6a6098-4b64-4327-a77c-c02900ed138b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "66891535-fdda-4708-8532-26db62bb8022",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73c7c1c1-138f-410b-b352-5e3f9f8943d4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6cd180-9828-4473-9547-8e743561e4a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2c976621-a9eb-4bc4-a86f-63fc6cf0b4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7da119-aa09-4429-b854-1a6052f24e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad360789-c049-4283-9b22-df52a6974a31"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62686c74-4554-4121-9ffb-2b05c54ed060",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a2bca77-736c-4d5c-82ef-21b2b23ed7ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "42df5ecc-b2d8-4961-92ce-547ad0028f3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21ee61e6-a1d2-4cb6-ac92-bc9aa8779efb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e572187-0bcf-483e-b302-49088004be9b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f8d1d5b-d305-47e7-902c-e7b45856f643"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcd24a0d-3f2f-447e-92ee-cfc0e4c51b48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2afff54-daa6-49b6-83d6-03676ec9ad65"
            }
          }
        ]
      },
      {
        "id": "4ee7ea2a-b401-4a91-bef3-023ffd0beaba",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "238a1c74-9daa-4386-b646-db75088ff6fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a44d7cf7-2478-42dd-8463-db6118cab795",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4dfcf6c2-476f-4165-8589-05ce57ba1980",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22925ec6-304b-41ec-bc94-4bda8b46dcb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e29a59f-2dd1-479f-a527-408897ae6a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5005d093-fb15-4926-94f8-df74fc07ea8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1595e926-9ca0-4040-83aa-345247526a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b452d42f-a4bb-4bfd-97d1-e9fcf0ef832f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20986fc1-5216-4ddd-b5a4-5ad9047f1930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c4334c-9407-4d37-ba7d-d4bfb43583be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a226e9-b83d-45f5-a6bc-8e5fc2cdad03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7e8125-ead8-43fb-815f-251b21c4d70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1089ab98-2a80-4106-a117-d4340ef16bca",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077cf0db-5108-4946-9bec-15c40696f1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1677e3f5-ccc0-45e9-b064-4850f54a027a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc4092d-f6be-4318-808c-0f688d45d927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5670b1d-3ba2-4c4f-b58a-89d258fd4c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51839610-e63e-4372-8f6a-a9bd02d32063",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c9554c-4697-49ce-873c-96608301b059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ec54c4-87f9-4cef-9e6c-f52995b8bec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b741cdc-e2f4-40f5-b9b9-f6d2a2329b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ec9ac0-77ba-42d3-9f05-70da010c4db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6eeb953-8895-44b5-84b4-557a2889de2c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e146ac-1dca-4b2b-bc68-10f6ea747ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceea6735-53ad-429c-b2bc-8693c3ac5004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32844a6a-d9fb-4f3c-be22-aa9a5a4449b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af06dcd0-20b5-49f1-960f-3a0dcecfd75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14162673-acf9-4f9e-9b87-96639ebd6219",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cfcbd1-38bc-4c78-bb01-dabd614ae498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4140731e-dadf-4fe6-9e2e-c7026a92792c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f0b731-f30a-4da0-9233-678b16d470d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a43464e5-d4ac-4b3f-a455-a776cfe1be05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22566dd9-db72-480a-a6d3-dc709e42b5a1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070d5667-2af6-4bd5-92bc-9808d633af7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1068a088-6a20-4a3f-9353-32813b45d4f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07b3053-73bc-49f4-a03b-3b77b0d7ac2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf0050f7-a2c1-4155-9de0-a5a947d045f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2da9790-fc56-490b-8882-cfb906338158",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7553302-0394-4bb7-a6ad-9bdefaeea4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2445815f-944f-4147-9298-f27b97ef1b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728dabf2-dc79-413a-8477-1764a6f3e2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97b23710-e8ca-4aac-bc7c-a56af0af0733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52a06dc-779e-4d74-8e39-12901427439c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e4c135-34c7-4d08-9a4b-1559e5e174ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624e7583-6238-4ced-abc0-5eb1e2d2d32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdf9208-b5bb-494e-b972-0fcf2272710e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab89e4f2-dd86-4e33-9d12-6099b37c57e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898ef22d-8eb1-4f26-9f03-d9c7c68adf2e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9076cc-5025-4a9b-b5b6-d4d8bf8723eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fdbefb9-8b6e-4046-b01e-267faca9cb60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69680ac4-3236-484c-8951-bf9ea5dec78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "045b18e9-34fb-4230-98f9-9b3cefd818e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402f7d34-2c7b-4305-b9f6-dad85b4a035c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "067bbe3c-de9c-4ddf-bfc4-793811ccb960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11c49b2-c3c8-4eed-ac97-fd3b8602dc2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b908a626-dd8b-4cf1-a0ee-3c443467d603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "53854d36-a65a-4dde-ba9b-9560469e117f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe5a199-f164-4a37-bb92-5a057e52ec1c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf656241-3833-4213-9256-f9bb11201d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e10a53d-7c57-46b1-a265-5d111f69f6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1fa61f-3925-4933-8729-045b3fce662b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c74ab3c-2781-4d2a-b546-c09f0726724d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c747e1-7eb8-45b4-bb4c-f218f36cb12f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e0bff9-3bb3-425f-a002-c5a673f0f283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cca7f91-d08f-47b8-a743-e3d0b490b5e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cce7dbe-8b25-4d67-b45e-f7859d8f67d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad29ae9e-4ab9-43db-9854-12b791051d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdb044c-06b0-4a1e-9d26-38f8f6765565",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26934ad-ef88-442f-86e7-4ad7626a954b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630d8194-f315-4a3b-acec-7b490b245515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25153044-8f6a-475e-ba55-fd3635242c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab08bd99-fabe-4735-a143-283440066f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc35032-5613-4f94-84b4-aaf04d9caabd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fea091d-fc2e-42d8-a8fb-903b2ef8eb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061ff936-8602-4a1c-80ca-1c0924b573e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a56b14-24dd-4d3e-867e-b3c70f669680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "afb8db68-7025-431e-96e2-e5e860ecef64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea687860-3842-43fd-b9ec-88710365de4e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9fef6d-ca35-4729-a744-a86e8a69935b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4061bef-c368-44d9-87bc-eb7cacbc6421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8beff9df-44e8-40ad-b44b-c054975e62cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e777659c-846f-49d9-8ed6-98472baa62cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d35c7b4-962d-470b-8b98-ccb5fa762d0e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6f3a38-392a-4702-be3c-e781bf94e5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eaa1e6c-3847-4630-b3a6-822af8ffc966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56012952-d2f2-48ce-8710-11d8518a9295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b9e79b3-0f78-4eaa-87c9-6152d9be0c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd719707-9e0f-4cb4-883d-8078fec36811",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119f7972-9bf2-4581-afd5-3a512b4dce90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2463ebb-6b17-42bf-9454-65c7b4dfcdff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d754cd4-91f5-4496-8734-74e111c52adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a896a198-4176-45de-b273-6dbb14ab1592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57bfab3-ff8d-4f37-ae2c-bfddbb0ff336",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e75eeb-baa1-493c-b18f-f04552339c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85ffc6a-c8a1-4b37-ab81-064905c2fdaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49755d0-6443-44b0-bbf6-2eeede38aec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58eb27be-9b48-4b29-87d6-c8a0e39e54d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86b260f-41c2-4099-8d19-ffa1d283f2d7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a05e6c-8c38-42b9-8375-0359190f86ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e902760-7bc0-424a-8885-c2a83730b2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877acfda-4eda-4474-9a21-09cb73f37eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c87424e-12d4-4dd1-ad32-514823bf3ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9447c7ca-1e82-4ac3-9747-825c73d02139",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af7f324-e9f5-4558-9b6c-9ea0213d9b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8214df37-37dc-446d-8b96-784c64217329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b9d9ad-b9c1-4fec-b4d9-b45fcac0eed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f99696e-2e07-4e85-88e6-af185c814481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67376f7b-1e88-485d-8af1-5985c21545c3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e722d0f-4019-4a2b-bbd0-1518278e2451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9abcfd4e-2160-4275-9c24-17d2c8ca3574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db5bb99-8168-4a28-8f55-68586e6a91ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0890850-43d7-4bf8-b518-7c90c4d69c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0e1a2c-595e-4cc9-bccc-d8afb28902d7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de55eb3f-16e8-49f6-ab49-b79dc981c5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1a17dd-867e-48cf-b290-7155fcab8d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762246f0-79cb-4e8b-9fc3-4a09ec8288e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1789245d-8caa-421f-b395-b9b76dcc6ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b216aa-0f76-4712-8228-fa269036b507",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a38d76-a6f2-4cc5-8697-97cdfcf1737e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729bd332-0234-49e8-a4b6-c624de1abd7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb59af0b-394a-4268-ad8f-de85ed4a037e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97635160-9d7b-429c-ba9b-cac0324de0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17335770-c362-4a98-b920-115651325b81",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bd8420-0d24-4a75-8148-272249fdba79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5bb1ce1-a8b9-41a1-931c-e938de079c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b966748c-5230-4ff9-aa0e-62bc2349d9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e24f727-171d-470f-8161-25b7e781ca18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c321ec-6430-4896-931f-fc36e3f1761d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80044a3b-2788-4016-aecc-55acac81d239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636ed09f-5cdc-4d3a-b898-6088c3ae665c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea509b23-0747-4f65-8546-3f02e9b6ce72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f36ad1a9-5f78-418c-98e4-a1e1bee9e0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ece538-2436-49e7-b5b3-70db08e58cec",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d2c6f2-4eba-4976-b12c-4eee138d0cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98242c0d-a167-476a-8e09-01ca5917ef73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a478c5d-4a97-4be3-afe8-7a1c233b2943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "972d74ff-14c2-4c2e-a8b2-728f944f39f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092a79ed-7f50-4854-a397-7776c9598e9e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183b385c-6ec9-4a1f-bd0b-4fa0530b49a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebda3c64-b024-4db3-b400-c99386d614c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5a28ff-fd53-4b70-9ed2-251fd2456a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe20c50e-a572-42b9-b21f-72e48d6436fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300f979d-a620-4056-b428-b83eb9a1c1bc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ead1e3-fe67-4b5f-97e4-6efe38179132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e181217-dd76-48d7-afa4-1fab612e3280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06da05d8-996f-4a90-8edb-170ea2fcdd45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06f85015-8c69-4431-85ec-ceffc1147684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1153f99-eb84-43d1-85a3-7e2984d58a53",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf46c2f2-7bd5-4ced-b3ca-4a798a6fefbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b64e757-1f2c-443f-9f1d-3c4db3fc5493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb1527d-9d20-44da-92d4-49f22537cdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3831b0c7-9320-490b-99f5-bafd61c74aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aee3271-9b79-47b3-8f47-1953ab40c6f2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3fef22-29a5-496d-bc70-03c2baf573eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a411c21b-9a29-4b3d-83b6-522deb1f7efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf89e16-73ea-4479-8ee9-d4b01440b429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5eb3b45-1cb8-4c69-8028-e5888f64b6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28367142-be24-43e9-8e0f-0a45acc479ee",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db98888c-87f4-4641-9595-9c3b72e6498a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd38f43c-5538-4c20-8a6a-7463f215ba53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d83ab6b-91c7-4ea8-a7ee-3a6b62a56964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f19431e2-40ac-467e-9aa6-eb31f43a2b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8e7475-b40d-4fec-915f-577594ee496a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5d023c-7b31-4acd-9845-31c1b547e87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f7bf692-bf12-4d4d-a3d0-f691fd532341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ebf28c-1b48-41b6-a061-983d14181f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b84ecc5a-1797-4f7e-8fab-9e49e718a101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dffa39-72c8-4318-8d41-f2b11607d044",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90733705-c56b-40a7-8366-669f3f045c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e871ee-e238-461c-b53d-9bb8816d6812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81bc4035-1007-4b64-ab6c-2eb9765d5957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60141eb9-44c2-4d66-b7a0-560a4bd1cb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5082656c-462a-426a-9194-1c26590fcff0",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2644ead9-b244-479d-9146-abd94d75cb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aecc6da2-4b45-4002-be4f-f3aae6c5178a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c1a55b-c12f-44f5-b0bc-83e715760c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b13aa4d-bc3a-4fe9-8ddd-f2310aeabeeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bad6baa-e2a5-4c51-8b59-f1af6bd50e65",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555f493f-e174-4c39-9eab-17aca19f5d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978975fc-e2a3-47df-a263-b2dd7010393f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d800d20a-4c57-41ca-a7b1-aa1095b69922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "567533ac-c8b7-4217-b764-e72a6d3a6b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c48da5-d5bb-45bf-b5f1-dd84c30e957e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f721f70c-44ba-45fa-9db5-c83187d75b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8822056-6d7f-4f2d-96d7-0ab24473a50e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b193ff-0c14-45ed-9dd1-2539ccb67e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a67abad-28a1-4813-80b3-8ebde173cfdb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f94b474a-f763-4dde-b157-5d9cc28da229",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3643bccb-e211-49d8-ba0a-6b18f4126cae",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472b9e07-2767-44e1-8974-91abb3eb7be3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5cab1387-09a6-4f40-b1e4-14379bdd0989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d99562a-705f-49c6-84b8-291cb965b819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bff38aae-8780-4c1f-886b-9da079ade194"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e615205f-7c23-478f-ad6d-943b918ff584",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f83e48be-1513-48c3-94cd-47cfa6732ba5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9acab2ff-e3a9-4078-8fcc-dbcbf391d847",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "889720b4-5469-461d-bbf2-0245da86cb53"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e535dae1-8476-4c2c-bf93-126d8ba9e13e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7ad84365-0e84-4827-bd1c-51388cdca040"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f9f9795f-f409-4ac8-bda8-186572eec366",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f709816b-4a53-42a1-8296-bb17fb72f63f"
            }
          }
        ]
      },
      {
        "id": "6be13413-6af3-4320-912d-4a79085f0a31",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d404c19f-f8e7-4461-aae8-596eaac9ca33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10578b85-75b1-4ea8-979d-4ec426966389",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60b9fd05-8a4c-4391-8d23-02f58df7489c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab29da4-8b88-4020-a46f-29fd69b1b850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09797b83-2861-453e-87ca-e63db52fef49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e40fabe-016e-4818-bcce-93d023dea8ce",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79764b66-855f-4663-9d96-0d353eb8d611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c90616-0828-474c-97f5-c8315fc605e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39737152-2106-403d-b554-713617f0c41e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3e5c76-ab0f-4f35-95fb-6aa09fbcd430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfb5893-b8f7-49fa-924d-5a780b4186fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8a3135-f131-409c-97df-b9f4159d5c2b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9b43a1-291a-41b8-a910-2522a2b35b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70969599-e491-4ea4-b651-1e8c885b933e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a037bf1-ab64-43ad-85df-a664db0878c8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f343ff-adf8-4cb2-a3a8-4e0341505b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fad3131-b0d8-4b23-90c4-9d983c05f0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec375351-efb2-451b-a197-152e6e73d1eb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43cc77b-c253-478e-8e66-4a99a2ebbf37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e18b8a0d-ffd8-4aae-99c0-fbaebb847192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1afcdc-06ff-4565-b904-43f371bb3932",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc57150-71ce-4a7a-9f2d-e6d73f1dddc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da6195f-7449-4f1c-a4a8-084a0f17259b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8682785-843e-47e8-8021-e6633c3c69fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e15ae74c-d02a-4a56-9065-70d227973fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebf4df7-4555-4be4-a198-e64d8a284dc7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938681e9-be35-4619-a365-b19dc3d092b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76beedcd-01b3-4fb4-9cfa-1e07d27a4b80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1feea2-072f-44a8-95ce-ba50d3d0a096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1609cee-61d7-435f-b1d6-d4c6a2b63491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268bf223-8e8f-4916-bf18-0ac1fd1ec75a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1cc57b-515f-4fea-94cd-4384dd76f027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f171237-b3bf-4a97-a622-2a1236af72f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "951740ef-0d34-422d-a95b-ccdafa9bc50e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeff9c02-5e29-4ff2-b15b-ca6a3907179d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88abd42c-b205-47e5-bbd0-3a63a569822c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebea7c03-332f-4a48-b47f-78900ceb62bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "035c9797-ad5d-4d97-be16-07b5ef8042d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85e308d-1d32-4b75-bd08-3f18a8ac8828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779b9972-1af3-4bf7-969b-e74a120b274a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cead585-c87a-4ded-a50e-0614a8ac5659",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463a6ee4-c62b-4a21-99e7-3e964be98f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e8d8d5-aa9a-4ccd-81ce-e4a0bd036148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88fe2e78-4bc5-4a6d-a462-48a0b1b6c74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0e1796-12d4-4c1d-969f-5ebc94fb6162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688075b6-bcb7-4b15-a947-b9b115641961",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4432f87e-5d5e-48f0-b9ce-5d0739aee4d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5daddf49-9b7b-4843-b911-7c81a41ac840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be40fb1-97f7-4a76-badb-fd1549e5c966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae41aad-a18b-413d-88d9-5aeb500860c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859dfe2d-78e0-43dc-8bea-4f59ba3da802",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0147d15-12a0-4f88-b0a6-e373dbce892a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b999874e-448d-4dcf-a7d2-e6b78aeb1437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37002b4d-5481-48ac-8425-f8acb63cddd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29c9e81-82d2-4c18-bbaf-85dd090b37b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb72630-fe6c-408e-9246-de110a3478d5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566b46ae-bd9c-4deb-b9a4-c601cf9000c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "062ae31d-e302-4920-a884-73d4963a42df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb6ee69-32a7-41cf-b6f6-2c1d736caa5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdcbe334-013d-4467-88eb-f50a401c6080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0393d9-d9eb-47a7-af04-956d04df53be",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55eac477-d6ca-4a00-a0b2-7e4752be065f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "286acb2d-8489-4323-bb3e-10c3f0b9cc3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c27749b-a734-4b23-80d3-5d03287ac9bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d0f5ae-a75a-441f-8c4d-926123064c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94c1c6a-3cca-43f4-b917-bd38dce4c9b4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e7740e-7fdc-417d-816e-2ebd05933552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d15f49d-1ebb-4366-8168-82995e63cca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c429676-a833-475b-9a1b-6028215daee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8627be8-5766-4df7-b28e-50f2b6f9eccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea36e4c1-3d40-4f87-8908-bc2e8ed2295e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876a00c7-0537-438f-94f7-9a4f25ab30db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f452a25-30c9-4074-8636-37617ae1e5cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54b8e3c-b0d8-4c46-9391-27ea3f762645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0c012e-dbcc-46a8-af7b-4e713a27f737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329bec72-1443-4587-b706-b1f89f316486",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97480d3-7c0f-4d2e-9ec8-389d2fe4cdb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "134f67dd-8bcf-4461-a187-7d5bc4102195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441e34f6-ff93-454f-8be7-97a6fd861418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846c3695-3b77-47ac-a522-e8c8857abcf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c4fd22-77e7-4a0c-9e4e-503c765e23c7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56117f8c-648a-4fb5-afc1-dccf7f2491a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "018d313f-1367-4027-b606-e1a8c0487b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b038cf2-05ca-4ca5-9e53-e72d4e9af27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9529541-6635-4404-b2c9-2f697896e9db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857786cf-3d59-438e-bcf0-d44474e46037",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f8ae7e-6d57-4753-9ca4-175090d40fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca9211c-dd89-4e8f-b0b6-b1f8abdeeece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cce6fa-e5f9-487c-aca6-be1040cc8e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f20db21-0f63-482c-a159-52f1dd079007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77761122-4983-4dc9-be4f-f52c606e5ee9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287b0520-80e9-47b9-a644-dab5bf9216d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f2fba7-8dd8-4dea-9fc0-e9f332b9a317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deaf11be-7b41-4b23-a653-c66c871357eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e762f7-8660-45ee-9a0a-03ac5a4ca5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d51937-ed5f-4084-882b-ae5e2a5ccc13",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098d64d5-fa37-4072-8196-2d017a16e094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5def9693-b00b-459e-89de-d06b512ae46f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755a8621-02ea-4d04-b0e9-e446adef147a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7ffd00-da0e-4e2c-9225-88400db73039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fc5926-4383-449c-90b6-6b2a987dde6a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d6b8e8-ef3e-4ab6-a9a3-3dfd257ec25a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3fce689-e12b-4f40-ad47-c9769191a89c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f502be-c0b2-41f7-9414-197323921b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10e2f3f-4873-460c-8656-c2b7cfac2e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea04df6f-5a2d-445a-80a5-bfff2ac9e9b7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba20a908-06d5-4bba-bf2c-1a572b860014",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5e88cfa-be4a-42e9-a6e0-f2f88ec65e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b374a362-d132-4f9b-a663-bcdfa7c2cbf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cf5082-5205-400f-bbc2-1e499b90cb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519c3d0d-4aa4-4da7-8419-fa239af610b8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a5dee9-b5e7-4e98-9fdf-846e0830a3d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2889ac1d-644f-4097-999c-3dc6c9120e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9a004d-d110-4703-85a7-d56a17ee74ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c062e5c-cc09-423f-822c-9baf83bffcf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddaf436a-0a74-4e99-9337-4f3e9c6699db",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6355dd-02f1-4fd3-a19b-4d4fb1cfd5db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6411fd99-1e65-44ca-87c9-6d9b3e5759be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5d3fa9-9dd0-4ecb-8fe7-ed20325322b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd6971e0-72e6-474e-9206-14b6e9feda25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056f3ca4-6377-48dc-9c29-3920e6232718",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d20bf6-113d-4f5f-91ae-da4b9c8ef39a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22ac5ecb-6b60-46ac-819f-ed3957f8e93e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422f8a0f-aa51-4b3c-99e5-3d4eba4356b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0af624-03e7-4c75-ab61-99995828e202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1312e1c1-dbd8-48d3-bb2b-d4dab9e18821",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe04d68-53ff-4dca-8ce9-0af6d8ff6201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e3d5ce-265f-4ca8-980f-1462f829610d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d343b545-0faa-4691-855d-5fc205a61818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9676a6-182f-4064-baf4-083c78b5cd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c214160-6105-4006-9f88-24096bf92324",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35062b7c-74ca-4fe1-ab59-92fdda0cd1fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c3b9637-ef9a-47e3-b4cb-58853bea501d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "133356e1-f52b-42f7-8d2c-af79f4bb0d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b05e6ca-8505-4d83-8f30-ffd4eb5f833c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c3d3d6-474b-4d90-8e31-c97293e64c92",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3207a30-ab1d-4ff8-a4db-3e96aa8c54b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b619c600-2ad0-4457-bad1-f17c333b1cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf600f2-82cc-468e-84bb-7e72a8b70fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c35bbe16-42fd-47c6-8147-f9d99e10bdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5fc89c-9daf-4be5-b3f8-0b9eb915db9f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f7cd20-a019-45fa-a878-722aad4bea2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be2b1cc3-36bc-4418-886c-a9d73b1911e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00119f99-d509-4a52-ad8f-dae1003fc45a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f07cc2-e4de-4582-96f4-2fca85424bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46087613-3186-4e5d-8d60-a2c3964738e0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7660f6-82c6-4e1b-8531-467d47297854",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a5f86d7-5dd0-45cb-a2f3-c7b51866f337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02374398-7e2e-49ed-8430-b683fd618e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90278f3-c592-4924-912a-acb473776494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21418f9e-2dc6-42c1-8382-a2337c5ca8cc",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ac7192-c4fd-4605-831c-09c7879a98e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d73acf46-08a1-489b-ae96-da02030ccc71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59204b73-4621-4cc1-bada-1198e75a3c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc75f9af-1ee2-4626-9af8-8309664fb848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4f5c72-b686-4ef2-a7ee-a3990a6ae417",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcd6c93-4eeb-494c-8e4d-0c90afc27f08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21fadd04-0bf2-42f9-aecb-c5ef0aa2de41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa83f259-01b3-485c-8a5f-07f27499627a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5497980b-7bd3-410b-9bb4-ede57fec59e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aee948d-073a-4184-8bb1-a2f7b36c37c0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6907cbff-e405-4440-b736-238e1c753efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b79777d-80aa-4ec9-93e8-66d5ee806c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb09f2f-fea6-4e59-934e-754c009c997a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795271b6-c2d1-44ab-869c-4c46fcc81c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3989871-1489-487a-853b-c26c885c877d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784b48d3-12bf-4ed9-881f-a818c5bf3034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859ad570-fd01-4204-8201-5aa82ab2a40a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfc6953-3c0f-4fd6-b860-54eb321b10b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec35688e-c798-40b9-8192-2db71c92bac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d2009e-12df-416c-8e14-a6ed74d1f7e2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b74c1cc-57a3-4064-9afe-5d9fb617fd0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5078ce12-a932-429a-991e-1bed14753166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80fe08a-6210-4f4d-9bc5-cba55e6a3b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d0742b-6b48-428f-86e5-59f19da84f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c06d0c-80c0-477e-85d2-67d18f905c1e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec08188-e679-4bab-b2db-0de1212d582a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81d8cc1-72b7-43d8-bf69-c83f40ff0840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98506157-a6e6-4632-8088-21355d11a288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa02ad6-1ec3-45ba-ab29-f0c8e6fd47fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d474265-c8b5-4cf5-950b-c21d76063605",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8950993d-5c0f-4d73-9d18-f0e07ab770cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5491817-1ac5-4a5e-99c1-084641f848c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa99dec8-aba7-4414-92e0-3d3a17407d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75e0d6b-9891-4d2b-b89f-20a43840d75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32431ce2-a75f-4c52-b541-f6f75d3ae03f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ddf2f2-52b5-4e1c-925a-3bd3afe94f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1fee850-c5d9-4866-abec-a3c8741d6fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8d33b6-fcc7-4d2f-8fe4-c9d1c3d7104b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56b21d7-4de7-484d-96ff-f9ac7a9966cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950299db-a66e-4d51-8d3d-ba12da0397bb",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32da39a-7f1c-4ba2-b3f0-ebc4759b7902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb5765f-1f94-48d4-b080-74b4ad0e7cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fe36fa-d6f5-4070-9dc2-f7f5caa8c33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e5cc6e-2ad5-4f11-b72b-e56c7adb8b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8b836d-4d5c-4643-8907-d6481f224214",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5099f4d-b3e5-4171-94ce-bb3a41c91e57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "112aebff-1b4e-40eb-bc71-c3068eea6ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77195b0-1b2e-4345-9596-6631ed95e4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288fb79a-5785-420b-bf26-6cb62c6897e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f80140-3697-4a18-aba5-8d34b83e6486",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741511c6-5c6f-4007-a0fe-e9102f1d9b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9661d6e5-2179-4b4a-a5f9-6c32cbc04467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d21cd42-05fd-48e1-be55-739b7e131a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b8e3e4-d049-4e24-8314-52e4c5f2c0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771ad6b8-f91c-43f5-b509-8322e89a3973",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af24fdde-0e8a-4e39-ad84-be8cfc4e151d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "617b2f48-8184-4c1a-8bf5-1e5ff8220d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f9f682-1b11-4dca-a3a8-6b9304958df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60c77ee-cd85-4b3c-960a-71cf0e9ba1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba198c5-7bbc-4fac-a56b-b6c26ef1cada",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b98237-e36d-4a18-98ba-6d63d150daaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "240e290d-b167-4fd3-9930-5e22d099e3ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d63be0-0c45-4eb4-8ba2-4359ea284dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94246811-898f-4b89-911c-ed5bede16dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebd6af3-293c-4fe6-95ec-ae4c6e9a5146",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe71846-b6a1-4fe4-bba5-123287d3dd82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8db9db-7cb1-438b-8010-068c698ee877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6294b06b-d2a5-4ded-873c-e9b5d506821d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d666dd-9310-48a0-b970-e9b8ebb406b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4084469d-3f6c-499e-91ba-dbbab30d5b77",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772ae388-170c-4397-8b57-ba0b16fe5840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c75b15e-0491-49a8-b62e-c7651d12912a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1714259-20ab-4a80-bb25-3dedcb205bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b78803-b81e-4e79-a279-9dcdaf61a6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfcee8f-4df1-49c3-ba3c-eb282f5b112b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6564ed6f-5d27-4f37-ba5d-fa0505942585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060f3983-490d-4a77-971b-8c130aefa243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15daa12d-0f41-4c53-83ce-85eea4dfbff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cbfa4be-6c2d-4de1-bb0e-85cb486dc03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca887fa2-3a40-49f8-a972-23952b23f022",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43751717-2e4a-4b98-86af-71777878e5c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46550d7-81d0-45e8-b1fe-843bf9086e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa772e88-c27c-44f1-a033-6ee110ca9678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643c072f-be94-4abd-aca6-16614fb1d33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e58f88e-2958-410f-8e22-91d3545a10e6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbaed2d-0b58-40bd-9e3e-ac0323701fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f92a3b-8dc6-4d71-8a03-c36f3248774c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d806878b-62fe-496a-b010-8645a788345b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7593b9d8-5379-4c90-91cd-cca65241bab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88328d49-7f04-4c9a-ad4b-193fa6454d1c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed90a326-bea6-4d54-b7a7-b6d5d3f65c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a256da4c-d889-4c25-871f-e47440b491ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f1c800-de26-4de9-a509-e526b1d0d45f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8410f937-332f-4ab4-9824-df20617e125f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf99203d-0a67-47a1-a585-79789dc32b4b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3dad5b-2d4e-4937-8a00-566ecebaf3ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c161e8f-8dda-4df6-897f-3a6f6aff4f77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82ecc8b-a9ae-4b98-a043-dd366d6b8e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a80430fd-efe2-442f-ba51-61415241dc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad0ad3d-2487-4ac2-b172-3cfb83bf30da",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d6f39b-5a52-470b-b1de-18f2a757f66b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e3a9f3-add7-4fed-9ebf-810c410d972e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a97a9a2-a6e5-4cc9-a6be-f181d0ba1558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c116920-b7f1-4ded-a8c5-76b1204bddf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c2daa7-4c61-46d3-9f6e-87f5420e5c65",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11776e4a-ea6b-4b09-bc97-d1b98a9aa9b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5fd6d2-268c-40e0-b8ae-b93ae5e63ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071ddb46-4965-498c-b554-5dc01c93f2f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e878415b-4d4e-4ef4-89a4-6c1952be1e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10b165a-c073-4085-a343-60118ca65075",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e7c70e-8f8d-4b5e-a7ca-1e8eaf67a825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbade5a-10ca-4069-8cd9-d0908fdd178d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e34eb1-e877-4984-80b4-df8439c05614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341e415c-93d7-488c-9d1e-f3ea9b202594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80461e26-97de-4aa5-871c-6f282114e63a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735c59db-2a71-40f2-b1ce-a203b4b58376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4949f5cc-9d37-4f00-a989-2b6e9285bdc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb6313e-61af-49a1-9c3f-5a2a75042853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b37fe36d-ca88-4fcf-bf52-9d8c1723d3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3536702d-11ec-466b-9957-fbc5e8fe3538",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea9e686-a905-44bb-9ee4-854f29f243be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4758b0fa-be75-43f2-94ec-4234b3c44877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca67486c-b8f5-4b07-ac6e-9512ef43c43e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa663ca-6fdf-45f1-8674-0fba4a7c99ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac03b10-e84b-4e86-a6c4-7563043ee803",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43dca12f-8d6a-4e37-affc-d73173235c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4365cf-4d13-465b-b799-7f1e2973b46f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a41e02b-189e-4ce2-8703-662b3adc7000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505d81c4-4ac5-4c4f-93cd-2363f5ecbc84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3e51a1-eac0-4a65-b904-095fae69e5e1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff3383c-b524-4b2a-a64d-30db637b6376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57019f6d-1880-4081-9d60-3c489c99b388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e09831-89af-4fc3-bfd1-b247cbe934a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e2a59e-09ac-4ca0-967d-a236892fd3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967c0b84-3a0f-4148-945b-1f807d93f87c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234bf950-2ce2-4589-b369-007c4ccee711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2344f1-e3cc-4bda-a1ba-713da8ebd519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca93f6d3-7235-49b9-9a35-fe2d04feafc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97808b6-c496-47a8-a0c5-f1c923cb2465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689765d1-5ffb-448c-be20-a96e48f5620a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b29ef9-5dba-4f5d-89d2-258d33b87d17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07cc469a-9a39-426c-8303-ea2ece97d6ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "286da9f7-70bf-428e-abaa-17cd3e6968c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0c1d8d-e808-4de1-a40e-e64f708ea55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df08f83c-0610-49b5-af91-742ecbe0b860",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6276a64f-9474-4464-9414-eae8f3e1c93c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3169a6-2694-4d9d-85d9-858bfa6b2766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee858e0-3ca3-4dcd-a42c-9fe46dbdd278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3f0e8d-9d96-4cbc-856e-3b3752a27393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f911a7d4-6fce-46f3-8652-511332288b4d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b73dc53-235c-4817-871b-42bd2116021e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5e74f7-c5ff-465d-b24b-77eb7db996c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59b747e-ad75-4d38-b9eb-770b97a70311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fb1114-ffb8-4b93-9a1b-424ba55a6b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ef7d5c-7e71-40f4-8664-017189cee8b5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee34c247-53fd-4344-a154-dc0d56732184",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08fd6b2e-5f19-4763-9ad3-da28e8a26690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc03457-2596-400c-a646-c1ab89884470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f94397c-5a1a-4080-83f0-af17a6c770ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73e64ec-3745-49f7-a04c-f67f1e937636",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc01bb1-2fe9-4044-b826-7d0dfbfda5af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13bf1ba9-85d2-4f90-9d46-825ab071f057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7688ca9c-d715-4ae7-acb3-ae7dc5a6d08a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888a37c8-06da-474f-877a-9b31bac35479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f26911-dd4b-491d-ab28-d6d996a19ce5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68ade95-5d52-41ca-9ea2-8b6e574930df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4384fcb3-2766-4b17-a3f1-8b2ea3f7b63f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136137cb-41f5-494b-a4f7-3f52be97e1ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62101ca6-2f29-4db2-9e9e-7a3af428cf2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f357215-ffeb-44fb-8260-ee1861e26de9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c6e1d7-bc72-4234-92a0-7c9689a8c2bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9464cae-8440-431c-bdd8-0a3039c2844a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e4eb21-ffe5-4b75-8de9-ea52e3bdc161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbef2cd3-2528-43ab-b077-ddda336e16f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d614c31-5831-40e1-9c9d-a164f6bab839",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9d15df-0ae6-468a-b40a-5e16b3ec2e41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe14390a-4efe-40fd-bbd7-eee54ae3bcce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399da433-e150-427c-85f1-97ca184806e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54f5279-d711-429a-b645-65f548dd5c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53dfec9a-6e5b-47c0-9cbb-13091de4c77f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ef4b81-feec-46b3-b128-4bf73cc5d2a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9150f544-e35c-4ec8-86a6-5a9351cfaeb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6abc03-0ede-4322-ae74-64601e6cf81a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a15fa8a-aa80-427f-a66e-d16a1e2e8111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1abfaa-ec08-4600-8bfc-cbfe62677eeb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb8de50-5ff1-450f-acb5-a64d66b82c5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e2ead2b-1a10-4a60-a04e-e4db263ef641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61741b2-bc68-43be-abfc-f1d9318537e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da394ece-f304-45b0-891d-a896edc7d461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2ad97a-5ee5-4b01-a8a0-0bfcd868f410",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da57d96d-8d7f-4c39-aaaf-6d5efca355a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6ca43b8-2ba3-4570-a248-b5e65c53f648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede95d8e-3433-48a2-bd47-7b622778fabc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0579734-3f25-436b-a211-b5250929de60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26162562-9208-4fed-91d1-e2f7587d1f0d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63256f33-f621-4bf8-9af0-7b73d9fc57c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d31418b-986c-4d3a-bbc7-a00a3a95ecc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bcd37f-7aff-4b66-913f-33ca17861e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34bcb644-c5a5-440f-8ff9-f21c2a726c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a104d452-c95f-4b4f-8f06-3ee39c9320c8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40920b7-a85b-471b-992c-7c30c81127df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "433241c9-ca03-4d51-9605-f600b4f293c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91d8a81-cc0b-40b7-8d00-055b6d956a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82638cd7-e9e8-45cb-a659-bd0d81996202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6227a391-a5db-46c9-b4a5-c3d3bb51267d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9f08e5-5ed0-4acd-b49f-b708a4d058ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "681f263d-d752-4cb3-865d-74ea3925b427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c177f64-6320-46a2-b679-183eea89a4c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdc9dc37-60fb-410e-82b6-4886b70af9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600892f8-a31d-4778-90ce-d700af0650d3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2087f65-b704-4e50-9fca-5eba0321d5bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64305c99-7e4f-4370-b40a-6a9def3a27f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15618fd5-87e3-4901-aeea-5f7c1c804b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816d77fe-59ec-402b-85d9-36d5663001f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac097c9-6d2c-414a-92e8-6f69e2194eb7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ca1572-2b2c-4e6a-8d6a-8c6cb6ee485d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e53ff720-b960-4162-be19-e08ebca13a61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5787bb1-04d5-4844-84a5-549a33602e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8577e63-70dc-453c-9f6f-cb52afa77e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d6be59-1b7e-42ad-9b61-9bf880087028",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd3a649-ccdd-4f1c-8217-38e11d0a1206",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c98b2c8-c8f6-4b13-938e-ae3bf731d74e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e33661f-721e-4593-9808-7fd50f326b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b79d6596-213f-4310-a102-d3f081f69a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4fc43a-412d-4f35-b9e1-bc99f34727fb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01154c73-0918-4fd9-ad15-15a3cc6ac99e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8abdb19-2a1e-41c2-8aa7-1896cb6f6c0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d39c473-ab65-429b-88af-f67805b4d408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5327e0c2-a91e-42a2-91fd-b8f15fd5045e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0293c887-b456-4e4a-8dba-bd54b04f0f49",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7aa0451-4d41-48d0-b6c1-aaaddbbb9923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "567fca56-2b04-42d1-a7b8-b0ad19b32ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c74d43-db4e-4c65-9891-337e965f7aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e3f2536-0e33-4f19-93ca-65c6776fa91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72ee4b9-4b7e-495e-b3a0-694bfb6ef72f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b72a4f-0404-4d80-8f73-66ef22270bf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e0dbf62-8956-46eb-9cf8-674f1b3cb03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfb21c4-f4ba-4984-824d-06ffb4d3d509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2678ee20-3beb-4e25-8a43-69fafa4c3754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b245c8e-da29-44fd-a0df-4e9f5f6adb51",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ad9410-f517-427d-a98f-3dfe716b8ae8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75fd73cd-c5b2-4765-a2ab-8c271cd44673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92781ad-3d2c-4871-826f-7aec86097413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32216b38-40c9-4850-88ae-3180a1a509c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439d77be-3574-4079-b64a-22149b67fd1b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf07e45d-cf85-4eb1-9f4f-f583b1157e51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45b70b63-6976-441c-a149-21b07a9f44eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac113593-eb3e-40ce-9f9c-5784e8c46660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c25271e-6863-4176-b4c8-cbb781ed898f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decc48c7-288f-4f40-9f26-eb3b9adacbef",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27e8061-efdb-4dc2-822e-6752f6970e3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af3cf31f-2940-4dfd-9e6a-3a606d8760e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe10d98-7a66-449e-a96d-1e696e1614e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d238c73c-98b5-49f7-9db9-1c400e83db51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55288ec-2d17-47a1-86d8-bcf88b3618a4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f455f84c-955d-44c4-8452-6eb0f9b2fcdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a1ec6f9-cc39-4f25-aec2-b3addce8ca38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67b36e7-a538-4232-8961-ebff8a36e579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02acd7c-228c-4379-8ea5-9277f32178d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628ac908-f67b-4911-bf95-bc3439d0d73f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d7de3b-867b-4a92-a497-a2733475244f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6baf44a-fed7-4571-a967-3317024965a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79fa41d-3438-47ab-bc67-32ff9810aaa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490fe6ef-f0ea-4ce2-b2bf-1da1e3829551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafb7f27-c8dc-481b-a198-e40c6a51f8e2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41622b97-d273-4550-9b80-c4bcd18c5365",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a76c83-89a4-4556-a071-7de87e9e70b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df27ad90-fb85-4960-9207-d14fa56955f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b25a2e53-cf91-4a36-9576-e6373a84a1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6111c4-79bf-43c0-8ba8-bd5e1426c01a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f0f289-a0ec-4b72-abc4-c3462dc76cf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d4d6239-28c4-429d-bb70-8b5134956e85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f0d6d1-318c-42eb-8dea-ea332d4b6af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5c2eba-baf5-4d6a-906f-0eb567a36639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa70761-fd65-477b-aa46-281ce1878bf0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08d2774-9acc-44b8-bd68-7dba4c1df9b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f189be6c-88a4-44c7-9a75-94451760e0a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e56d1ef-852e-43e9-868f-f0695e8cdb59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59f680d-6ccb-4716-a8f8-1cba57293fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214a5dbb-18ba-4742-9795-a11384274011",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10cd7649-40bf-4106-9f0a-a74bc9f4901a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf03223-2d5c-4e4f-8a7d-551a8cd6dbb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00efd041-8504-47b4-986a-b3faa00ec04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a2f1af-79d5-40a8-8c40-a97e5398c74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a223b8-3f35-406f-aed6-73aace28a308",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823f74d1-fe2f-40c4-9542-16aced76e319",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaf98269-295b-4c8e-9a0b-bf2c6e11d5bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d439e5a1-18ba-4675-940a-c6db4582a306",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe51a24-e51f-43c8-ac4e-b4d25e90587a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b111bf-91c0-4840-82b5-1c6616edc407",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d7a751-80e7-4b73-b183-3a00e26f97f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee35af00-b31a-4a52-afa2-710f24b3d540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93531e3-2cf3-45d0-9ff7-428ac5daae40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3136351c-1b71-418f-a0e7-725a37f15cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd600054-cdc5-4e52-bc14-4ea6f71cfb5b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2405ad07-9207-4bc5-982e-afdb1b32496a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8936d8dc-23a8-49e9-8410-afae542d96c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa99735-7c9a-4353-b4bd-bf2f9ff16833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef9fcca6-8afe-4e5b-b55d-892589af301b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5ddd00-fc4f-4794-b968-2311877871bb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eaba156-8153-438d-9ada-870d51272dea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d0485bb-ef0f-4774-8537-3b8de92277a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f82fbf-5a25-4870-aca7-57b405979414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d384909f-9efd-4de3-96c6-9d402603c61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4639b97d-70c4-4db6-9fb6-3c4ea5f18750",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755e7a8d-713c-406e-9bdf-0bb5d9e3cd9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69f5ce47-2830-49c8-9d34-10f1caaabe12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505bcf39-f663-49c0-86bb-5484474373f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17164016-95f6-4cc3-9957-a10b7edd5ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6853f9-d68c-4a03-a6e5-edb4383ed17d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24832f3e-ecf1-426d-8a49-297d006bac4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8d97040-fdcf-41db-9884-1cd2ec281055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "423a2f06-dc60-49b9-affe-2851d49ffb63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32b2831-0e00-4329-bc93-fefaf4d8521c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafaf17d-e0ba-4524-8945-d0911cfdc642",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da684ed-be05-41f6-810e-849e0b5a3551",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7d983af-72ad-4f56-8706-fa5a7ae4bf3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a004f077-c83a-422a-8b12-16a5c708c20a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dede385-3373-4df3-bfda-b16f57422c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04df023-1d78-4e7c-b946-a689fe01a85a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398a5288-141c-4c51-a8aa-7df494ac8b63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10fc4d81-78b4-4a93-ac4f-148c2426afa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5d601a-bd99-4d52-8517-cfbde8ab6f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ce9da8-ba5d-40b4-9ea7-0e0664edf28a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ce974b4-e56b-4920-b227-294a73f524c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfa0f1b3-0992-4c80-b337-be81afe58111"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04e6fad7-1411-4638-a43e-d9355512b314",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6771a94a-7e16-4384-8ca6-4b8eb3f29992"
                    }
                  }
                ]
              },
              {
                "id": "39dc3ab0-1366-4ac9-bb0b-dc29b06bc206",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08164559-ba4f-4887-845f-20030ca5d5dc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbaa0f79-b9ff-4fae-8f58-10fd4c4dcefd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "62602f39-bf76-4130-82db-ee60e8fed093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafefb13-a97b-4a77-9116-570eac4b855c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a181428f-7319-41d8-a8fa-0cbc7fd56949"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9c4bae0-32d4-4fc2-8bc1-adc59ce971a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "525bcd4e-5cb0-4ea3-84c7-4f391debf002"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db622287-2c99-439d-91f3-e0f3d9fa17f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fbec425-68cf-4f73-a29b-c31e9bdf7ea5"
                    }
                  }
                ]
              },
              {
                "id": "df9298b1-01aa-41e6-b6b2-613f6f6b0f9e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "90a9f5d3-e083-4d95-b34b-0f8c4feddea3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab9eee2-7dc9-4c7c-ac68-24f89fb475ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "378b47b1-2b2c-4932-b2fa-c631d0358990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1c5373-b760-4802-be23-f527e0a733f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50505fe2-65c1-4afe-bb75-f48232a18fa4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ff731585-94a2-4ef2-bb2a-c17ebe66bd44",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ca91bcdc-ebef-4abf-bcde-d96eac0f0055",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efd87474-6591-42e8-9323-a1dee734e88f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4c56bf0c-c4e4-4ced-8052-d286fa1b929d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a74859f9-4579-43d3-a625-b6f8e9518caf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6af03f1-5e0b-4939-b121-7baeaa58e1e6"
                    }
                  }
                ]
              },
              {
                "id": "1bea917e-8b59-48c5-902c-7035c3f3c7c6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74746894-cfa8-42a7-8717-f9de09a35f01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1c0c37f1-605f-4494-99b4-9d8b4081f3b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3f829d5-7814-47cf-acbf-0df0c1d69cb7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2feff4a-37c8-4077-be92-27956965c65d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b3a9a58-7a0e-4550-94a8-6132740ad791",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4382c4b3-2c48-4a14-9434-a16a5c8f6020"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6d7b259-46e7-4344-8e60-aa6a5915d3ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87582050-f743-46a7-93a3-f659e83e6bd1"
            }
          }
        ]
      },
      {
        "id": "e4af851e-e141-4495-9256-868e0988817a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e681fe01-3e6d-471f-9f9b-c41d4ad26dbd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "569abfec-b4cf-48cc-9dad-870e1c7a73a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c7221a0-f144-4130-a241-6c784aeff2dc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5842016a-2d04-4d15-b9eb-e10509e55f68",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cea07633-a421-4319-a017-424ec368442e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae44cd2-56e3-477a-a8c4-fcf878013087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "330ace71-7fff-432b-a029-7d0b68b83ce4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5dc87488-c4e7-4104-b0bc-34b881e283a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59da2d09-f1e8-4bb7-b24d-a653d3e3e10d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb34017a-2e3e-42e9-b578-cfa1e27b1f79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a5a8985-5207-4b49-a68e-44605dfa36d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b52a84d0-4ae2-499f-8bc3-f46d79ff3e5f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d570a1e4-8ace-4334-ab63-eca73d5f8732"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b17a0e3b-f736-4bb8-bbbb-413cc353309d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72a0e671-4f0c-46d9-84fd-16839181d60a"
            }
          }
        ]
      },
      {
        "id": "4fd476cd-7000-4e33-90f9-ba4c2ff9830f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e44a1674-d8cc-43f8-b592-af886903f107",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fddf3fb-bd9c-4601-bc57-d36ba470c587",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29194afe-76d9-4f2f-95b9-779fcad9dab7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661223f0-301e-4a6e-8fb6-78e5fc440f85",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94b856b6-e444-430a-a070-f5141a207d1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e706d0ab-990e-469f-80ef-f850345b2f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ded01f1-986a-4daf-8446-7b565b8770f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b946c12f-ad73-448b-8ee2-98d844397e2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dc400da-c5e2-4d34-8cc5-77fa03b512e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1913263-84ca-40b4-ad70-3bee0df676d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5c9cc34-53f3-4f0b-890b-f9ffb7cf817d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d099ac6-d79f-424e-bc47-59da89bf6d83",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ec6198cb-b4a2-4f37-afcf-c80fe18e1ac1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27114ddf-a586-41d4-98b1-1d962d1e29dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65972183-da46-4349-a3c0-d1bc0bcb931d"
            }
          }
        ]
      },
      {
        "id": "aacdac5e-84ba-4747-aa39-bf2456960ff8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9738a1e6-7e3b-4f0f-a6c6-1a76a70d1367",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a35d68a3-4dab-4243-888f-16426f3e2918",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d837dbb-b84f-4246-bb01-bd77d2311bc8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78a73fe-e955-46f2-9567-4f565e9fb8f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fed6fa3-041e-415f-9d2a-dffc0ca3b941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a10bb0-2237-4bd7-b7ad-e197bfd81818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67f0559e-88b3-4b09-b50a-cb020dfe62da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1181f367-4d74-4b05-ba77-9d6678a13dfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e3f0217-ed54-46dd-9e34-e41d3e954341"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18caf6b4-37e1-46ee-ac86-91293fe83ff6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e04a01e-c858-4dfa-b0a3-b2f45116bbcd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1033637-616c-4b72-9d09-610299b1b203",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "94dd4a96-b707-4517-b917-d246431feff2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34cc2c91-f8ad-4699-8046-1eeed7ab83e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb48f26b-aa17-409a-bd56-d2d4e3fa6930"
            }
          }
        ]
      },
      {
        "id": "7d5bce1d-7b8f-40d9-ab01-4b0cd4c6620f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59c29499-4f67-45fb-a575-0f711a7d81f1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1ecde5b-993c-41ed-a70a-dc9d063e7847",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "efc1feb8-5b4d-463c-9baf-9f713ce8dede",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfc3d63c-c18f-4573-905c-47ffda163de5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c159e1f-b244-4ada-93ff-ed9fdbd31339",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.23157894736843,
      "responseMin": 5,
      "responseMax": 628,
      "responseSd": 76.73345791878275,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703637257246,
      "completed": 1703637284105
    },
    "executions": [
      {
        "id": "38a2a33b-ef0b-48cc-9bed-62c515df5b76",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4d91c053-8ffa-483a-b62e-960a739cdfc6",
          "httpRequestId": "ae0370ea-8c61-438b-bfa1-d8ab4a7036be"
        },
        "item": {
          "id": "38a2a33b-ef0b-48cc-9bed-62c515df5b76",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "60709f67-265c-423b-8bf3-f750224382c7",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 0
        }
      },
      {
        "id": "d98e8ef9-fb5e-4de6-943d-b8aadf5667e8",
        "cursor": {
          "ref": "17bb08ca-3896-49ab-9558-96f64640b10f",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "88979913-4574-455f-883f-8579ae5355c5"
        },
        "item": {
          "id": "d98e8ef9-fb5e-4de6-943d-b8aadf5667e8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b37dd24c-4f50-4c0a-9ea1-2af1f7f9a89b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "63772ac7-5a2a-4426-b605-dd5ac66d846c",
        "cursor": {
          "ref": "3c835c0e-0120-4000-9ca8-87c7d8dbc16d",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1603233d-ae06-4de2-9b2e-30216bb481f2"
        },
        "item": {
          "id": "63772ac7-5a2a-4426-b605-dd5ac66d846c",
          "name": "did_json"
        },
        "response": {
          "id": "0ea6cc91-2cea-4c28-bbf7-458bed1f781c",
          "status": "OK",
          "code": 200,
          "responseTime": 206,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a2d3b1-a9f2-48fb-b24c-fe0ba87b36aa",
        "cursor": {
          "ref": "923c6365-71c0-4f65-8d76-6910a37f6189",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a71defe6-55f9-4e39-b7f9-adfeaa5247df"
        },
        "item": {
          "id": "56a2d3b1-a9f2-48fb-b24c-fe0ba87b36aa",
          "name": "did:invalid"
        },
        "response": {
          "id": "e876123e-f4a1-4360-a679-b9fece07bd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a2d3b1-a9f2-48fb-b24c-fe0ba87b36aa",
        "cursor": {
          "ref": "923c6365-71c0-4f65-8d76-6910a37f6189",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a71defe6-55f9-4e39-b7f9-adfeaa5247df"
        },
        "item": {
          "id": "56a2d3b1-a9f2-48fb-b24c-fe0ba87b36aa",
          "name": "did:invalid"
        },
        "response": {
          "id": "e876123e-f4a1-4360-a679-b9fece07bd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87900c9e-5af6-4350-9304-250a07d125ba",
        "cursor": {
          "ref": "29ce3ce4-3ecd-4209-a221-1cee6209acb2",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "12f067ac-8eb0-4945-82da-e15294f39413"
        },
        "item": {
          "id": "87900c9e-5af6-4350-9304-250a07d125ba",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6b071378-0c4b-416a-b4da-60fd361809cc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f45f0ee-8d2d-479d-a4c7-ac9fdcae3bcd",
        "cursor": {
          "ref": "fcb04766-f125-4685-86a9-af9fce189465",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5e2e2227-3abb-49c9-97da-a8a02bb33cf7"
        },
        "item": {
          "id": "6f45f0ee-8d2d-479d-a4c7-ac9fdcae3bcd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ae231fcf-0982-49cb-918c-fdcb7fdca0f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510f498d-717e-4e16-b997-7c373b5adbb9",
        "cursor": {
          "ref": "dfa10a58-d01e-4a74-aaab-84136e67f67a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f85b2402-b5a4-4320-90e4-2947623d538c"
        },
        "item": {
          "id": "510f498d-717e-4e16-b997-7c373b5adbb9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "72f96c71-f5a0-4ea2-bea6-2b215566139e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e87a0c-a008-4546-9328-791827eb2b63",
        "cursor": {
          "ref": "1f9daa7b-c1cc-46e1-91b3-369de04d1289",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cf3bc7b6-a397-46b1-a0a4-bb27542b29f1"
        },
        "item": {
          "id": "68e87a0c-a008-4546-9328-791827eb2b63",
          "name": "identifiers"
        },
        "response": {
          "id": "bbcb46a5-8a8a-4bd0-bb57-a17b9be9f1a9",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d10c9e-7c8d-46a8-96b4-7f1ca251fc67",
        "cursor": {
          "ref": "121d21b9-8a35-42cc-b8db-7b76e69d0f83",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "06fef394-a40e-4245-bfad-34c1be0286e5"
        },
        "item": {
          "id": "61d10c9e-7c8d-46a8-96b4-7f1ca251fc67",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1fabb485-7708-4d26-9cfe-17d6020e9e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b49d1c1-5ac2-4cf8-9e0d-eb61fea539ab",
        "cursor": {
          "ref": "dcd0719c-0b07-4e72-83bd-836c20fa387d",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2d48802b-a73c-47c4-b9d0-06dc80baffcf"
        },
        "item": {
          "id": "7b49d1c1-5ac2-4cf8-9e0d-eb61fea539ab",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c14c2908-0924-4880-a3dc-6fcaf1eadcf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a4563d-6664-4905-9c74-ba168e8382ed",
        "cursor": {
          "ref": "c293209a-3e9c-4f7d-ad6a-bcf21e5cff61",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7ff7659b-f22c-466e-beea-51963dc1195c"
        },
        "item": {
          "id": "c0a4563d-6664-4905-9c74-ba168e8382ed",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3bb7df4c-815b-4a9e-b9ec-c88b2d7e0fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79caf90f-0031-4720-8898-d2f9853b2c9c",
        "cursor": {
          "ref": "134f88ac-0cc2-49fd-b968-6ab4408a0a57",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b8051665-1fdf-4289-b1a6-8069e06c059e"
        },
        "item": {
          "id": "79caf90f-0031-4720-8898-d2f9853b2c9c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8eea4104-edda-48ad-b48b-99a495a685ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d545d5-bebf-4809-99ee-0f255524e26c",
        "cursor": {
          "ref": "b2845293-4291-4ecb-afda-d67ee1a26c11",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "88cc0df2-c247-4fc0-bf8d-27cd957d606b"
        },
        "item": {
          "id": "63d545d5-bebf-4809-99ee-0f255524e26c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "88d51aae-e2c9-431b-9df2-279e819fcbe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00f2e6a-951c-4a3a-b89f-67a63b573847",
        "cursor": {
          "ref": "adc30626-c9f3-4e63-8114-439991207d6d",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c1c68c93-0f7f-4c30-b104-e958fe22910d"
        },
        "item": {
          "id": "f00f2e6a-951c-4a3a-b89f-67a63b573847",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d6f266dd-7b3d-4027-bc49-5f82b6e94cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71cf245c-ae31-4d7c-84c1-28ee5d7032bf",
        "cursor": {
          "ref": "aa0bd626-5df7-40c7-8da5-6cad489f18a1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3a7e9f7d-6d87-4813-8802-63579734f74e"
        },
        "item": {
          "id": "71cf245c-ae31-4d7c-84c1-28ee5d7032bf",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "de61fd65-de7b-44a7-a03a-8a0142c86363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe16d343-12a2-436d-87e7-ffa744b040ae",
        "cursor": {
          "ref": "65ae69d1-ed6f-41bd-b408-dc1e69f0a068",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "576c5315-f5b8-42ab-b24c-7c5bab0a7d54"
        },
        "item": {
          "id": "fe16d343-12a2-436d-87e7-ffa744b040ae",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "83970da1-c8c8-4399-ac13-44b50ec10e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3875d9d3-9c2c-4e16-8a64-39806cc22068",
        "cursor": {
          "ref": "7d659aa9-ae6e-4d41-879a-07abfb7195b5",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "10001423-eb7e-4ae7-ac63-b1acd79179a4"
        },
        "item": {
          "id": "3875d9d3-9c2c-4e16-8a64-39806cc22068",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6c8ed09b-8485-44f5-9b17-0265765a170f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6182b0-1052-480d-a341-2fb11a55bb25",
        "cursor": {
          "ref": "76c0f590-dd93-4c68-aff8-837d92e74ff8",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b9a4fe1d-b570-4c8e-b651-debe5796fc11"
        },
        "item": {
          "id": "0f6182b0-1052-480d-a341-2fb11a55bb25",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "58de155c-7fd0-4ba5-9fae-208c875c1220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b4db62-3fdc-47cb-8bca-d7fa90837a15",
        "cursor": {
          "ref": "c571833b-2f75-4dc4-9201-9d3484a8e1cd",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7f399ab1-60b8-46f1-b7d7-37494ccd497a"
        },
        "item": {
          "id": "d2b4db62-3fdc-47cb-8bca-d7fa90837a15",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4db0b0fd-b154-460c-a34b-8451b0886818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39902cab-d34e-4a62-871e-82dc53edb09f",
        "cursor": {
          "ref": "d993d443-39e2-46e9-8254-37b6bc710d48",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a6f16301-68e5-4598-8595-b144872e9fc3"
        },
        "item": {
          "id": "39902cab-d34e-4a62-871e-82dc53edb09f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3a89110a-5a19-4292-91e6-1c1d584da1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8b6941-dd8d-4264-a087-6af50f4d8ff4",
        "cursor": {
          "ref": "65279654-a2b4-4b25-b20e-38eb9848bf78",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "88554469-fae6-4d49-acf0-0af5837aa74a"
        },
        "item": {
          "id": "0f8b6941-dd8d-4264-a087-6af50f4d8ff4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "67b8dbd0-48ba-4fad-974e-5d6bf7d021d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f89b8c-6024-4659-a46d-a378c1aa1e1a",
        "cursor": {
          "ref": "e94a4af2-92ee-4b83-82eb-f57ce04d1444",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "98ab7cd0-a2ff-42cd-9230-5e8b1a8be934"
        },
        "item": {
          "id": "78f89b8c-6024-4659-a46d-a378c1aa1e1a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0ca75058-959b-4eae-b4bd-e78a26871324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b714783-5462-4eec-93f7-b4f5684e817a",
        "cursor": {
          "ref": "dc4e5c21-52c5-47eb-86de-2742a2899ef0",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4a8f9265-2a82-4325-9e58-91fe063e5647"
        },
        "item": {
          "id": "5b714783-5462-4eec-93f7-b4f5684e817a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "273fbeae-b885-4499-8e2e-d14ff692bbb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97c4dad-eeac-438f-8cd4-9cef6913fcef",
        "cursor": {
          "ref": "c82bc95e-72e7-4d4d-ac47-1094b9454620",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5b190790-3415-41ae-b7ef-6569b3a9b4b6"
        },
        "item": {
          "id": "f97c4dad-eeac-438f-8cd4-9cef6913fcef",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ca936c33-4afa-4377-8dfc-eed790a3a9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8787949b-5d96-4997-9bb2-615172762566",
        "cursor": {
          "ref": "2afdb938-fa97-4835-be35-24d5c7fac499",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7de02669-1ec9-4508-a3fc-012157e81c39"
        },
        "item": {
          "id": "8787949b-5d96-4997-9bb2-615172762566",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "00428624-f444-465e-849b-2c8c4ba212dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2780293-9ba1-487b-b784-80e65b688d9e",
        "cursor": {
          "ref": "2c669107-2c83-4003-8518-e5cf9f9e6a72",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c57a5708-f3b4-4252-88de-6665f24a9310"
        },
        "item": {
          "id": "c2780293-9ba1-487b-b784-80e65b688d9e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7a5f6265-6b99-45a6-98d1-9d03b3e2a0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b790aba3-4097-4e3c-a402-2260c0f92157",
        "cursor": {
          "ref": "1d928e48-1385-464e-a974-bcdbbf3c5000",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "96ca0ebc-4b94-4d12-9b55-d4681b12ec5f"
        },
        "item": {
          "id": "b790aba3-4097-4e3c-a402-2260c0f92157",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2ee86382-226a-46c1-a9c3-9ce9d803f25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02745042-fd33-48d1-909f-c6abb0c43fa8",
        "cursor": {
          "ref": "e9cb8b29-ef1d-4064-9541-313e49dbd66f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2b3e6c84-23ca-4401-b765-71ade7d42076"
        },
        "item": {
          "id": "02745042-fd33-48d1-909f-c6abb0c43fa8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "381f19bc-a24b-48c3-865e-40294cef1ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6298b2dc-7676-4903-9ae9-f0e7197fdfb1",
        "cursor": {
          "ref": "5279d0cc-f856-4012-9be8-3742ef057c6e",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "509b2ad4-1b39-43d7-9025-2e01399c800e"
        },
        "item": {
          "id": "6298b2dc-7676-4903-9ae9-f0e7197fdfb1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "aa1c792c-bac1-408e-aae5-5cbb888fa070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ea6159-14a1-47be-b9e0-ca5eebcdd584",
        "cursor": {
          "ref": "c3b0dac6-fbca-4ce5-a84c-8a2051de728c",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0a7dda69-e21d-4052-81c5-76c5aa50d4eb"
        },
        "item": {
          "id": "33ea6159-14a1-47be-b9e0-ca5eebcdd584",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bcc224e9-92fa-4fd0-a56b-793396a74ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafc3306-a864-4ae0-966d-d317cc772c86",
        "cursor": {
          "ref": "6f640e0c-b102-41a1-bc30-0b0a9e1d7eae",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "15d8e14e-4e8b-4ce9-ada2-92985977ce14"
        },
        "item": {
          "id": "eafc3306-a864-4ae0-966d-d317cc772c86",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4f185936-5dd3-4461-be15-d4f39190e2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6156c30-0c33-4924-b503-52d23301b7ba",
        "cursor": {
          "ref": "596a985d-8c70-413c-8d6e-29a3f9db5a28",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f3c39d90-85ef-4f6f-9e36-79d53b8bd626"
        },
        "item": {
          "id": "c6156c30-0c33-4924-b503-52d23301b7ba",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5f56ce5e-f342-4010-939c-7837b31ecddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170ca053-92c9-49b4-bea7-c2630fd32034",
        "cursor": {
          "ref": "c5a5b4b0-31e9-4732-aab8-e2fd844da068",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "979a58c2-8781-477e-8814-90cb42be6367"
        },
        "item": {
          "id": "170ca053-92c9-49b4-bea7-c2630fd32034",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4f1b195e-e94d-4b88-ba9b-a095d39e5e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b02504c-b273-4b75-b92c-ea28c76d320e",
        "cursor": {
          "ref": "dd74a29b-759e-4725-b5d2-06474871e3bd",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9aee6333-26df-41d5-b173-54e51e044466"
        },
        "item": {
          "id": "1b02504c-b273-4b75-b92c-ea28c76d320e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d74d04fa-0c6d-4ff2-90ce-d6a43ccf1672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fd6b94-e5ee-4d6f-bf17-9db7f295064b",
        "cursor": {
          "ref": "7ec6faf6-c54e-4af9-a202-23613ca9d3d7",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ef74d698-1ff6-4d14-b3c6-029dff27be02"
        },
        "item": {
          "id": "29fd6b94-e5ee-4d6f-bf17-9db7f295064b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4a91a211-afa1-49b1-a11a-7267381a7258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1c4712-fe9c-44a7-9f10-c98000093b06",
        "cursor": {
          "ref": "d4f891fd-5f39-41ad-bc59-1adf3b1b7131",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "921b1e24-8dcf-4599-8d7f-907282dbb8ee"
        },
        "item": {
          "id": "0f1c4712-fe9c-44a7-9f10-c98000093b06",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9038eb03-e4da-4fb2-b3fc-9a12212dafd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8228456a-bf9a-4bfa-a818-7f60d7cee9ba",
        "cursor": {
          "ref": "6542ba71-ce1c-43d1-8279-1b8e54d566d7",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7d10586a-c006-4080-a11a-1b23058884f4"
        },
        "item": {
          "id": "8228456a-bf9a-4bfa-a818-7f60d7cee9ba",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3b313847-16b0-415d-b050-508da9f77ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300dc82e-212d-4c42-b451-1141d251b136",
        "cursor": {
          "ref": "b7a06685-642e-4741-8ece-555ffc854fbb",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ff761211-cbae-4b32-895c-7d29efc64f2a"
        },
        "item": {
          "id": "300dc82e-212d-4c42-b451-1141d251b136",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e8897112-38b9-478f-bb32-8900d96374a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a8de5d-4877-49f1-ad3c-a77e5a008cf5",
        "cursor": {
          "ref": "4facab29-2aae-492f-90a6-95aa4697a894",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1922eb8d-eed9-4e06-84c1-efdd1552a0d6"
        },
        "item": {
          "id": "b0a8de5d-4877-49f1-ad3c-a77e5a008cf5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "65185647-af5e-401b-985f-424916490a0c",
          "status": "Created",
          "code": 201,
          "responseTime": 628,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6c13aa10-c95f-4a2a-b1b1-743ded37e761",
        "cursor": {
          "ref": "32ffd260-bb76-47e6-942a-7e7f84896cf7",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "74bc753d-3bef-48d7-a8c6-7ea9f487da09"
        },
        "item": {
          "id": "6c13aa10-c95f-4a2a-b1b1-743ded37e761",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ba057e2c-70b0-4658-abbc-44caac059ce4",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0a720ef0-f7cc-4037-b8f1-250f07640615",
        "cursor": {
          "ref": "9a21fb3b-d9c1-4111-8c2f-ad10d3110366",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "494e25c5-21c6-442b-b0ff-a40b1454bcde"
        },
        "item": {
          "id": "0a720ef0-f7cc-4037-b8f1-250f07640615",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c5164316-3d97-4e1f-9f62-f44ce724d425",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "27ba2d40-dd12-478a-a83d-1bb4534a293f",
        "cursor": {
          "ref": "94047b9c-8ba2-472b-ae13-9e9eb274708f",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cc0cd966-b368-4a62-82f7-bbf4dc44f1db"
        },
        "item": {
          "id": "27ba2d40-dd12-478a-a83d-1bb4534a293f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4f4ae8ae-c9c2-44ae-bc40-e824d0284459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e52b836-1fba-4b6c-b9a0-46c5e1c6fad5",
        "cursor": {
          "ref": "4171046f-dc95-43b4-a219-124c8b268dea",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "42bc6efa-a9f9-43bc-9d7c-f4ce77bc4250"
        },
        "item": {
          "id": "9e52b836-1fba-4b6c-b9a0-46c5e1c6fad5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8f2a534d-009d-4364-b276-c15cb951e3b6",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9e28fef5-5fdc-4cb2-b303-243439f82ab0",
        "cursor": {
          "ref": "f7696640-7401-4831-a4ca-9ea530fb15b2",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a003af2a-4455-4520-b882-e2ea76858be2"
        },
        "item": {
          "id": "9e28fef5-5fdc-4cb2-b303-243439f82ab0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9b156fe2-b4c3-4b78-beb2-cfa0a97a638f",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "831ae3e3-cb59-4764-9b02-df22cc194a46",
        "cursor": {
          "ref": "54269e22-0c3a-47d6-800c-c1678fbaf1fb",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a4183323-95b2-40e5-ac2d-9316a53ad3c4"
        },
        "item": {
          "id": "831ae3e3-cb59-4764-9b02-df22cc194a46",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8d0e46da-391e-45df-aeda-6109f47b1c94",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4a5fc556-bd73-4db5-a35e-9b8042861112",
        "cursor": {
          "ref": "2c69af89-8a1a-4731-b2f9-2f4f62b7260d",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ccd8181b-c577-4248-ba27-d1fefa956367"
        },
        "item": {
          "id": "4a5fc556-bd73-4db5-a35e-9b8042861112",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e0c57463-2114-4dbc-bd43-5555c068d68d",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1b4ca10e-9192-446a-bdfe-7c082b32258e",
        "cursor": {
          "ref": "5771396f-e500-4cd9-b0b1-6d6477d69f51",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "78923c31-66a8-40b9-a948-4fef1aaa619c"
        },
        "item": {
          "id": "1b4ca10e-9192-446a-bdfe-7c082b32258e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3b8e34b0-df52-4d57-bcd1-0cfe8cf14b8c",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a73205fb-0d8b-4b30-a6ae-964017b89e13",
        "cursor": {
          "ref": "9cefa169-85f1-4cc5-8911-14e602e12958",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e1d385f2-120a-4600-b999-1a9f67fb7978"
        },
        "item": {
          "id": "a73205fb-0d8b-4b30-a6ae-964017b89e13",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dd0d3076-8aa8-4ee0-b4c1-b369f3a2d757",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f2da0404-6dad-4f8d-a866-415c84235915",
        "cursor": {
          "ref": "64e4a7f9-0355-49db-966b-2740ebb10a79",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7911308d-100a-4451-9351-ce4505ebd3af"
        },
        "item": {
          "id": "f2da0404-6dad-4f8d-a866-415c84235915",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fc3b3892-14d0-42fa-a359-1eae7e40dfdf",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2b5d15fe-d5b7-43cc-8c24-8f8a4e2cf0e4",
        "cursor": {
          "ref": "86bbf1aa-2c5c-4e39-b5c4-4ea3c2f0ccf5",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5fed390a-ecbc-437a-87f7-732cd6b46cbf"
        },
        "item": {
          "id": "2b5d15fe-d5b7-43cc-8c24-8f8a4e2cf0e4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4fb1a1e6-1368-46de-9563-1ced0707c19e",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "59344385-6b8e-4aaf-8dda-116e47ecd88c",
        "cursor": {
          "ref": "018132b5-0542-43ba-9461-f6e3531727f6",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4e21a908-53b1-408a-9334-90e64c89c5f7"
        },
        "item": {
          "id": "59344385-6b8e-4aaf-8dda-116e47ecd88c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "05017bc6-0295-4a40-a7d3-b542371d52f1",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4d23d56d-112d-4951-a900-d63501e7e9bc",
        "cursor": {
          "ref": "6c945032-657d-4121-9532-15eb0358a66f",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6c75128e-3e9d-4dc2-9c6c-eb681fbf1b20"
        },
        "item": {
          "id": "4d23d56d-112d-4951-a900-d63501e7e9bc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "840e9805-a445-4c8a-b891-1bc483c0c3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83f6abb-c3f2-4b0a-b6e3-a7225e6c19e0",
        "cursor": {
          "ref": "fa876fcb-b1b7-48b5-ae37-b15d3af696f8",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4f4850b3-232f-46c7-a118-76d8bb602239"
        },
        "item": {
          "id": "d83f6abb-c3f2-4b0a-b6e3-a7225e6c19e0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "21cf040b-6f25-4f72-a11f-be9c6c719aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7c6f82-2c2e-4aa6-aa16-b4e1008e2238",
        "cursor": {
          "ref": "6cec793d-417f-4825-a628-dd97cc04381d",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d628b670-9302-4071-91de-04bc550e0d86"
        },
        "item": {
          "id": "7f7c6f82-2c2e-4aa6-aa16-b4e1008e2238",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fd3b599f-3167-49c7-ae7c-8a5764ed59e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f88d4b-5275-4981-8fde-7587c2c8f816",
        "cursor": {
          "ref": "c098fde6-31c3-4ed6-9c32-dfe3faba3966",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ef42514b-d85c-4a01-8a76-1d5c6d7fa8a4"
        },
        "item": {
          "id": "d7f88d4b-5275-4981-8fde-7587c2c8f816",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8accab1a-309b-4820-b107-551f7fb5b937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94617cb1-5670-4198-9410-fcc244b9086d",
        "cursor": {
          "ref": "1d8023f4-6701-4b8f-a405-211222f38c4d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7bd5ba8e-0bd8-4e63-a305-0e687b937b54"
        },
        "item": {
          "id": "94617cb1-5670-4198-9410-fcc244b9086d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2e927be5-7f6c-4bbb-ada4-3ef549640dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9875d5-4c34-4df7-aa3b-5c13f51e2752",
        "cursor": {
          "ref": "230b9ebb-6b62-41d2-b5ae-ed14d7a6828b",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6ae260f2-0ae8-4784-82f7-c04cfe7be1d4"
        },
        "item": {
          "id": "9b9875d5-4c34-4df7-aa3b-5c13f51e2752",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "15b54da9-9971-4f69-bd16-18711c37dd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2389a73f-1c38-4c18-a562-9d9a525d1763",
        "cursor": {
          "ref": "009b24af-b09a-44b7-b4a0-2402c13f8293",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "985b2ea4-101a-487d-9fda-57ab893fc6c9"
        },
        "item": {
          "id": "2389a73f-1c38-4c18-a562-9d9a525d1763",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6b46e88d-a750-41b7-ba22-2e0efbcde8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96113ce8-2801-4776-aae5-09e37581eb90",
        "cursor": {
          "ref": "e2de43c5-54ef-4955-a31a-e8837e10824d",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b23a8ad7-c165-4316-a38a-b7512db122fd"
        },
        "item": {
          "id": "96113ce8-2801-4776-aae5-09e37581eb90",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5f52a489-68ba-4d76-8e4f-246d3a620f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4260596d-d5da-4141-bf18-a2a741de0bc5",
        "cursor": {
          "ref": "0319410f-0e24-4f8f-9cdc-69f58a1a1bc2",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2db1cb11-ca4e-4556-a050-51009f5f6364"
        },
        "item": {
          "id": "4260596d-d5da-4141-bf18-a2a741de0bc5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8a80a0de-9312-4e49-9e11-813be179921f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b8bce9-b13d-4e65-a8e0-f64ad5b5b014",
        "cursor": {
          "ref": "3bcc3a1d-601d-4ba6-835c-235658693419",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a9f9559e-a543-4c4c-82ca-ac1b0d71e4bf"
        },
        "item": {
          "id": "99b8bce9-b13d-4e65-a8e0-f64ad5b5b014",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "624fa938-baf1-4085-ab88-b48c41759b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f7c7d2-a4b4-4e2b-ad6c-14c9059a9611",
        "cursor": {
          "ref": "6850e5fa-934b-413b-897b-2767fd71912b",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "de1f352f-bbf5-4763-ae66-172532f23279"
        },
        "item": {
          "id": "70f7c7d2-a4b4-4e2b-ad6c-14c9059a9611",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f6b11fad-36cb-4975-9cf1-1892ad41a3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f801526f-f1b4-4c2e-b501-07ecd41bcfcd",
        "cursor": {
          "ref": "9d0bd3f2-53f0-4ff9-be46-d8b88c43d54e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3020ae78-4a7a-453b-810c-6028e999bd0b"
        },
        "item": {
          "id": "f801526f-f1b4-4c2e-b501-07ecd41bcfcd",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "787781a8-1cd0-4b74-a63d-d56ce46ed327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235f2136-e8a8-47b9-9585-b5d1e9cc9b0c",
        "cursor": {
          "ref": "da9a6db1-3fee-4cb7-bd2c-631c34053d5b",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "08b37fe4-e5ae-4f72-a445-ced99924235f"
        },
        "item": {
          "id": "235f2136-e8a8-47b9-9585-b5d1e9cc9b0c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ce601178-e6c2-4928-952c-81cf6e4e9ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c879e85e-c518-496b-83ea-aac3277acf59",
        "cursor": {
          "ref": "4a2f9f47-1ecb-4f4e-a122-b57ad76a8527",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "70229de7-bf37-4aa2-9090-7ecfa24c5316"
        },
        "item": {
          "id": "c879e85e-c518-496b-83ea-aac3277acf59",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e96444ef-6ae7-4136-9454-89119b31d2a1",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "41cf763f-e2c4-45dc-85ed-0acac889e0af",
        "cursor": {
          "ref": "a80fd681-34b1-4410-b1f8-b1efcff62112",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "87357203-9ed7-4616-8bcc-7008a224d63c"
        },
        "item": {
          "id": "41cf763f-e2c4-45dc-85ed-0acac889e0af",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1b215515-ea28-46f6-b4af-521b8622c1cd",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3a2aa210-ef3a-4978-8aa2-89a4c48a3f43",
        "cursor": {
          "ref": "2a60700b-233c-4918-b2c2-f64d8285a28f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "96802c39-5468-4e93-bca4-d82b4b17a35f"
        },
        "item": {
          "id": "3a2aa210-ef3a-4978-8aa2-89a4c48a3f43",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d688cc19-6ca4-4fce-8470-313fa5d95873",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "bd7798d6-a741-4bfe-bf66-4d005d1200c6",
        "cursor": {
          "ref": "0592bf95-ed54-4449-80b6-3cece7a78b6d",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f8b064c1-0399-435a-88ba-fc27af05c371"
        },
        "item": {
          "id": "bd7798d6-a741-4bfe-bf66-4d005d1200c6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4609199f-f99a-4e19-9505-d59a305acd47",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "66171964-2a80-454a-94ca-cce067913435",
        "cursor": {
          "ref": "b852cc9b-f8b5-4cc8-87e4-976d742853b8",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5380d334-cf45-4ae8-97cd-586837dfa36e"
        },
        "item": {
          "id": "66171964-2a80-454a-94ca-cce067913435",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a8628667-68e4-4387-ae63-8e072799deba",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6fdfa5c7-2705-4745-be0e-81051373cddc",
        "cursor": {
          "ref": "34b6c17c-38c9-44c4-84e6-1d54751d414a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "39d0aec2-cef3-4a28-bedf-98cd39571de6"
        },
        "item": {
          "id": "6fdfa5c7-2705-4745-be0e-81051373cddc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2002eaf9-6fb0-4e9b-ba4e-82d7a037c742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a25848-c8c0-4e5d-a71b-a21ae9caa299",
        "cursor": {
          "ref": "a9bb5755-60a4-4981-bd71-05fe76e33edd",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fb79d65f-b231-4079-922b-ce1eee442f4c"
        },
        "item": {
          "id": "47a25848-c8c0-4e5d-a71b-a21ae9caa299",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a1886095-9ea5-4329-ada9-5f9d0a3066a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2c5268-ff6e-486f-b72a-198f4a18433b",
        "cursor": {
          "ref": "28f4fb35-830d-46be-8901-668cabd6ffb0",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e3f34e9c-2dfc-4bf1-bfff-4f15c2e79c18"
        },
        "item": {
          "id": "3c2c5268-ff6e-486f-b72a-198f4a18433b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b4932b02-0450-4207-af49-8f5b03f5e014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f38227-a591-401e-8dab-4cb42041ec83",
        "cursor": {
          "ref": "003a80a9-a841-4d86-b990-da47bbb080c2",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c5dd3121-9c71-4536-90b0-e7a45057257d"
        },
        "item": {
          "id": "a5f38227-a591-401e-8dab-4cb42041ec83",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b91229b5-f248-4561-bb1d-a68fbbb2ea2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad26a130-eacf-4537-ba96-07e7aea4e390",
        "cursor": {
          "ref": "343bc11d-1f8b-4273-9b5b-082e3d3de0c3",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "37c0b81c-b071-413a-a77e-dd95538d4030"
        },
        "item": {
          "id": "ad26a130-eacf-4537-ba96-07e7aea4e390",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "14d796bf-dc2d-4e4f-82f6-3efb2ea713ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df456979-9224-4900-bdff-b4984bf343ad",
        "cursor": {
          "ref": "6d6627d5-6093-494b-91dc-ce741c7c3d0b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "184e8faf-885b-4817-8ed7-cb29ff952d43"
        },
        "item": {
          "id": "df456979-9224-4900-bdff-b4984bf343ad",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8bf4e69e-0873-47a3-b7e8-d51bf9fa81b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a42d976-0352-44e3-8668-afa7cf39102e",
        "cursor": {
          "ref": "11f62ad8-afec-4bf2-a17f-8c46420ed88a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5dc25d25-39c1-44d4-ad30-89740769e3de"
        },
        "item": {
          "id": "7a42d976-0352-44e3-8668-afa7cf39102e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2ba0c5c9-3c1c-488b-a897-8d8d9d04152f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c80d99-df75-4e1c-ae3d-3b9c4fd70527",
        "cursor": {
          "ref": "44ceec40-29fb-4b4b-a167-48d7b3f87e6c",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eb9c1c70-ce0d-463c-a000-f6f89977ed47"
        },
        "item": {
          "id": "81c80d99-df75-4e1c-ae3d-3b9c4fd70527",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9b2a784e-cddd-4b90-bd80-d91f664393f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d468e6bd-11f5-489a-b5e6-7cf33f5d6c17",
        "cursor": {
          "ref": "ec8372cc-26eb-4b56-a63e-5c787cbaef76",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "78844145-81e4-4007-afb2-8477bcee159f"
        },
        "item": {
          "id": "d468e6bd-11f5-489a-b5e6-7cf33f5d6c17",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f86c4173-feec-4143-bdea-704a134b11c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e34e55-afef-4dc7-ab6e-ff42804904e4",
        "cursor": {
          "ref": "96f0f4de-df82-4901-a4bb-1bb504ef828b",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "07f25a36-7aa9-49ef-9ac7-abbdb83265fb"
        },
        "item": {
          "id": "c6e34e55-afef-4dc7-ab6e-ff42804904e4",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b2d8d7cb-6a06-4995-b851-cd4a6fce6fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7de075-150a-4027-a322-825a1fb3c7c2",
        "cursor": {
          "ref": "67482e33-8267-4896-94cd-7a4855e9e5e7",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "37494aea-2ebe-4b31-82e9-2ad481ca1ea5"
        },
        "item": {
          "id": "ff7de075-150a-4027-a322-825a1fb3c7c2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2320d62b-58bb-4154-999b-ed836b8356cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bd0d61-ced5-47a9-96ae-6f7042282b87",
        "cursor": {
          "ref": "c37f3fab-f66a-48a1-a49f-e5852ea649ff",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c2c2e910-cd11-4b1e-8274-54c6c3dfa81c"
        },
        "item": {
          "id": "89bd0d61-ced5-47a9-96ae-6f7042282b87",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "73a1b601-696d-4f33-a0b4-9c0806f65b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca76380-db77-423c-9e37-4d58bd86de18",
        "cursor": {
          "ref": "ae219a16-b16e-4a10-b5b0-cefda041dd64",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7ae2ae9b-c8b0-4a45-996c-b5045ac382c4"
        },
        "item": {
          "id": "aca76380-db77-423c-9e37-4d58bd86de18",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4310454a-79fd-4c15-b3ab-5686f85aaa42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffaa0d6-d448-4df3-9912-13cc96d3d266",
        "cursor": {
          "ref": "5194fc7c-7ea6-4276-aa1b-e39f68c11127",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "96ce8d51-a75a-443b-b188-a461ce0acf11"
        },
        "item": {
          "id": "cffaa0d6-d448-4df3-9912-13cc96d3d266",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ede37f3e-6498-4b9d-9ca2-ce1b20e8690c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f34d2e5-54b0-4e5c-b87f-8b4a11067e36",
        "cursor": {
          "ref": "e3e1203d-da6c-46db-88f3-f41fbe121453",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "77f9802a-5bab-4852-a4e5-3b58c4fc516b"
        },
        "item": {
          "id": "0f34d2e5-54b0-4e5c-b87f-8b4a11067e36",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5c88227b-57b9-479c-8b3f-f1201c0b101c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46fe664f-64f8-43f5-a88c-4a6bf52aab6c",
        "cursor": {
          "ref": "85b4c90d-1e66-4336-8e80-e183b00911f0",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a47802fb-e33c-48da-bdd1-507721a82c90"
        },
        "item": {
          "id": "46fe664f-64f8-43f5-a88c-4a6bf52aab6c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "efd28b35-6c7a-4f8c-bec4-dcbec4b039be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47932f64-3437-42bd-a4e7-0f8061675e9a",
        "cursor": {
          "ref": "c05ce5a7-5b46-4b83-a6b7-986dfa0f187b",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3aafb4f1-e930-4115-a091-2cb0526b0aee"
        },
        "item": {
          "id": "47932f64-3437-42bd-a4e7-0f8061675e9a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "97c7cd95-40bf-4bae-b2fe-704076302765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f4ac6e-a11b-4d3a-8953-8075c7e42221",
        "cursor": {
          "ref": "5961b1f8-d54e-434d-bd31-6ecec49c0062",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "61fd7e17-fe42-41b0-b52d-89c1d68b19a5"
        },
        "item": {
          "id": "22f4ac6e-a11b-4d3a-8953-8075c7e42221",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c8aba646-9414-40d6-aee8-f705988089cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4b2ec8-0eb7-4a7e-8c2e-02d16843a7f9",
        "cursor": {
          "ref": "8832c1bc-bede-4a8a-8f63-96f7fc81a7e0",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a6aae6f9-617c-45a9-9dac-97fcf5241078"
        },
        "item": {
          "id": "df4b2ec8-0eb7-4a7e-8c2e-02d16843a7f9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ec98d870-e3cc-484d-8cff-f322589f629c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008d9709-3deb-4757-92ab-f11715d582dc",
        "cursor": {
          "ref": "7b03470c-ce3d-455d-9dbf-03fa161d5224",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a6cf2d80-f2f3-4c3f-a57d-243c6080665d"
        },
        "item": {
          "id": "008d9709-3deb-4757-92ab-f11715d582dc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d87c1be6-6f51-4455-a920-da9f348bb91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0d9f6c-a8af-4772-af97-6467c2c1d4b7",
        "cursor": {
          "ref": "cbc47c4b-4952-4db1-a84a-f2f3b59c5e44",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2214f034-78d3-440a-bce7-bc59b154278c"
        },
        "item": {
          "id": "ae0d9f6c-a8af-4772-af97-6467c2c1d4b7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "39d0bfe3-487f-4cc2-a7b5-95a063066a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73045bb4-ca54-4781-9632-071acea44fcc",
        "cursor": {
          "ref": "6bade70a-4a56-41b1-8b4e-3d332b7aae2b",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4d61ca8f-00bf-4b57-a27b-8090b99b5870"
        },
        "item": {
          "id": "73045bb4-ca54-4781-9632-071acea44fcc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "545096ad-9709-49ca-88b6-ba434e44437b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b97334a-774b-4eee-9839-9e3cd3db80ca",
        "cursor": {
          "ref": "dd000924-77e2-4cc9-a07b-02f340aca7d0",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8c0d593d-f663-4e87-98dc-1c23a1c68e06"
        },
        "item": {
          "id": "0b97334a-774b-4eee-9839-9e3cd3db80ca",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a7f911ef-45f7-4529-8cb3-57c8f7ecd742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e32db4-afd7-4fd7-8ef1-fb34e4de0f15",
        "cursor": {
          "ref": "b44d2816-281a-428b-a565-ca2fdd3212e5",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b2cd226e-feee-4d61-8aa6-10327156a858"
        },
        "item": {
          "id": "22e32db4-afd7-4fd7-8ef1-fb34e4de0f15",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9c58a221-138f-46b5-81b1-622188068e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf07aa2-1e83-4fe2-85ec-deef03530fb9",
        "cursor": {
          "ref": "7662d877-489d-4225-9f6e-ae273289c10c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a240968f-6f82-4c53-93c1-f44c5e0f9407"
        },
        "item": {
          "id": "bdf07aa2-1e83-4fe2-85ec-deef03530fb9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0bd141a4-d5d2-430e-81c3-914c6300194f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1debae8-67a7-46e7-aad8-28b87af30c7f",
        "cursor": {
          "ref": "6d0c6321-9221-476a-8894-b4b36ffdcb56",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0299733f-f171-4622-8226-4df0a06d8a94"
        },
        "item": {
          "id": "c1debae8-67a7-46e7-aad8-28b87af30c7f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8b6b3c96-eeb7-4222-8a97-0ddc11b01bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c35b8e-e46c-45e7-9855-546773f9bd00",
        "cursor": {
          "ref": "85bdec23-8b91-4673-980e-5e1feca03dda",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "24de2677-7652-4789-9076-65372effd3d7"
        },
        "item": {
          "id": "16c35b8e-e46c-45e7-9855-546773f9bd00",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5f318d3b-b9be-4d03-bc83-ceb23ab02cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f83d50-a423-43d9-85fa-29543327cd24",
        "cursor": {
          "ref": "ffe6837f-70f8-4d27-b5be-d6a77a1ab0c5",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3aa8722f-e6a0-446a-85fb-150d73c9eab7"
        },
        "item": {
          "id": "c4f83d50-a423-43d9-85fa-29543327cd24",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "74e7cf0b-3dcc-4355-99d7-7a6e0b1b7207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f5ea2e-a90f-4ab5-9267-3883aeac0845",
        "cursor": {
          "ref": "937639b6-490b-49ae-ae19-d88bac2c8483",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "767951ab-4e46-4fa1-add7-30ff5dbb2b9d"
        },
        "item": {
          "id": "97f5ea2e-a90f-4ab5-9267-3883aeac0845",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8be43216-0367-4ff3-b72f-80aba1982cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10081f86-e698-4b32-9c27-e86a830ce873",
        "cursor": {
          "ref": "a07a2089-48dc-4282-bf7f-b7c6ef48cb50",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9fcd1999-fc20-4203-b21a-8387a6e5fe51"
        },
        "item": {
          "id": "10081f86-e698-4b32-9c27-e86a830ce873",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b23babaa-91dc-40d7-b75c-b3537852618e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a962fc42-2a1e-4763-8340-522049da2889",
        "cursor": {
          "ref": "bf16e627-a0ca-4af6-8921-3c282e117dbe",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b68c74e4-eae7-437e-b709-ff22705cf1d6"
        },
        "item": {
          "id": "a962fc42-2a1e-4763-8340-522049da2889",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a53b3cc3-f50f-4d80-9f57-c2b77cc4f529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29b8f67-bfb1-4c75-a326-e0d46a609fb9",
        "cursor": {
          "ref": "d2fd7c4c-c4d1-42d1-9682-8b0bccbdf553",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f7a60ee4-37b9-44a9-b086-2504b50e1a25"
        },
        "item": {
          "id": "a29b8f67-bfb1-4c75-a326-e0d46a609fb9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "445dd8e5-4624-4fc6-ae0d-63c82dc0e08d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45d8a26-a53d-4550-97ea-32233fc2b3a0",
        "cursor": {
          "ref": "93d955a7-5442-435b-afb9-92b5c48bb614",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6b5a759b-95e9-42d6-925c-b8c434861715"
        },
        "item": {
          "id": "f45d8a26-a53d-4550-97ea-32233fc2b3a0",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d133de00-4159-40e0-b6ee-fb3941af0366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "17169fda-84d0-4916-a7c3-3cfeaf8af83d",
        "cursor": {
          "ref": "b22c540d-2f58-4353-8370-2e10a2eee8fd",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "00215213-4199-4d00-b0a3-a44dfe6447bc"
        },
        "item": {
          "id": "17169fda-84d0-4916-a7c3-3cfeaf8af83d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8d72969a-9d9d-4531-9b8d-9bfdf4fd8e0f",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd54fafe-166d-4d91-865a-136719d86b6c",
        "cursor": {
          "ref": "80282cea-1ae8-45c3-9bb3-22fcf096581e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e3beb485-7f12-4086-8fb6-06a5b61b2730"
        },
        "item": {
          "id": "fd54fafe-166d-4d91-865a-136719d86b6c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "937bbefe-07b0-4f14-8ad8-db23c5fcf948",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c0debf-1649-47a3-9309-6c159762e202",
        "cursor": {
          "ref": "28682e19-f452-466a-999e-e6b22ce686b9",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6c9ae9e3-afed-484d-ae21-2b78c48efd36"
        },
        "item": {
          "id": "60c0debf-1649-47a3-9309-6c159762e202",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "62ec1798-b979-4968-b1e3-58eb49fa9a33",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "73996708-b767-4d81-a728-ce6a0829ce0e",
        "cursor": {
          "ref": "cd884c45-7176-460d-b5fb-39aa42056069",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "24714557-387c-49bf-83a3-87583b90fcc8"
        },
        "item": {
          "id": "73996708-b767-4d81-a728-ce6a0829ce0e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b6119652-1fa3-414d-a4df-e6f26337f0cb",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3385a8-f4a3-4740-a85a-63dbf45e6060",
        "cursor": {
          "ref": "608ea39c-85a0-4fff-99a4-ba387af30916",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "46e9d339-5f84-42b3-85b7-2de053003bfe"
        },
        "item": {
          "id": "fd3385a8-f4a3-4740-a85a-63dbf45e6060",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b02ccf6c-861a-4a10-808d-ccf1fcac400f",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-27T00:34:30.902Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-27T00:34:30.902Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b9283336-3734-45d6-87b5-c270b69cd199",
        "cursor": {
          "ref": "a6141417-3acd-47bb-be9e-19c0f052846c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "16e43b0a-fa8c-45d8-a233-1d331641b6ae"
        },
        "item": {
          "id": "b9283336-3734-45d6-87b5-c270b69cd199",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ca7b48f1-6ae8-40b1-a556-256ea081544b",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bd689d-d4ae-4936-807b-ab6300e4fc94",
        "cursor": {
          "ref": "fe3dfe4a-4f77-46bb-ba78-a76f96e6465a",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cca80737-b710-4e7a-8888-50f3e3797516"
        },
        "item": {
          "id": "b4bd689d-d4ae-4936-807b-ab6300e4fc94",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "dfaeda92-23ca-428e-80c4-325b0b9e7bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263391e6-0c57-435a-a321-af3c72e75990",
        "cursor": {
          "ref": "57c584ff-ca6a-41d3-9e30-8dbc6126d203",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "63f34851-11c7-4cfb-a5b6-5a23d5e53321"
        },
        "item": {
          "id": "263391e6-0c57-435a-a321-af3c72e75990",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f129fce3-43b9-4be5-9ff4-435e31dea136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d475328b-15fc-4d3a-9e5c-0d79947d7401",
        "cursor": {
          "ref": "7f4b3891-761b-48e5-ade1-c52b62234cd5",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ba6bfb11-7b8a-4c5b-9fb9-a5fed5dd3a72"
        },
        "item": {
          "id": "d475328b-15fc-4d3a-9e5c-0d79947d7401",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3dd68dd6-42f7-43e8-9a68-b9bb28065624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5b09ab-4f68-46ac-a875-3934c4dce4ab",
        "cursor": {
          "ref": "d8e5d1c6-b97c-407e-bba4-7a440362edf7",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5156c14e-4768-4919-840c-e230c1e0b349"
        },
        "item": {
          "id": "1f5b09ab-4f68-46ac-a875-3934c4dce4ab",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cc603e29-4aee-4544-80a0-4fc49698d2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9ed0d4-8017-434b-9287-bf0421d0e3b6",
        "cursor": {
          "ref": "49c85a3b-3ef6-4e34-8cfc-5e9e7f1bc84a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "39e17a88-f75c-4880-9235-df4cdca00a5c"
        },
        "item": {
          "id": "3f9ed0d4-8017-434b-9287-bf0421d0e3b6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d797ec5f-30c1-4a09-acf4-24908036da9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339a06b1-d24e-43af-ad35-f07a596dfa59",
        "cursor": {
          "ref": "5a4ac607-d491-40b3-a2f9-123464733ed7",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b5d419f5-d0cc-454e-9f6f-6e4ad4c228a7"
        },
        "item": {
          "id": "339a06b1-d24e-43af-ad35-f07a596dfa59",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0933b745-5b67-48bf-8bcb-d02bb44119be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07704b5b-d27d-491c-8476-a7bcaa6dd93a",
        "cursor": {
          "ref": "745ee8d1-349a-45c9-95bf-a5422a5120b9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "75a56a4e-64cb-4a3b-b795-18a32e819bda"
        },
        "item": {
          "id": "07704b5b-d27d-491c-8476-a7bcaa6dd93a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "484f8930-55ef-423e-b53a-a407b8d45b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2420a5-b7a1-4400-a291-c6d40a94ed04",
        "cursor": {
          "ref": "bbf3164e-d75e-4ad5-9a91-d395c47b0a41",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c08146a2-5268-406b-951b-d7266d0297f0"
        },
        "item": {
          "id": "df2420a5-b7a1-4400-a291-c6d40a94ed04",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "48e6b784-a3ae-4abd-9e1d-ca9e4ea1a653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f03837a-f807-4593-97d2-8325deafa426",
        "cursor": {
          "ref": "dd5e2975-3ea7-4c39-b63a-20cc907b7000",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "caeb987e-f393-4a87-aabe-65fcede26195"
        },
        "item": {
          "id": "7f03837a-f807-4593-97d2-8325deafa426",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5add7ad9-0201-4295-a947-471ab39cfdb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b129d906-2fa0-4e93-be90-f5b6c9e082f9",
        "cursor": {
          "ref": "8086014f-d4e1-486f-bbfa-257db01e67c5",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "497e0684-7fac-4f4e-8cf9-26a97eaa45a9"
        },
        "item": {
          "id": "b129d906-2fa0-4e93-be90-f5b6c9e082f9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5e77f7e1-ddf0-4bab-be8f-6a3929f7f40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d592b78-0e76-47d3-89e8-2cfb60f4a4dd",
        "cursor": {
          "ref": "9610d764-c0cc-43b5-9f22-15e58e842ad4",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2ac09ea1-4621-4551-b757-22996e822fa5"
        },
        "item": {
          "id": "8d592b78-0e76-47d3-89e8-2cfb60f4a4dd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1211c00a-cb12-4ece-b0a1-3ee95d817ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45ca93e-7bdf-4f00-99ef-5cfd44111d73",
        "cursor": {
          "ref": "59420faf-4de5-4cfd-a7c6-2be31cf1cea3",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b09acc2f-7817-49ba-9118-d806bd56286e"
        },
        "item": {
          "id": "f45ca93e-7bdf-4f00-99ef-5cfd44111d73",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1ab7d61f-0b5f-43f7-abaf-9fdc766d8cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b125ddb-4cc1-45b4-93f4-d038d84019a0",
        "cursor": {
          "ref": "4119bbde-150c-4705-88b2-f028b4924594",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "35f0a28d-7453-4dc8-a270-72da0d9d0faa"
        },
        "item": {
          "id": "2b125ddb-4cc1-45b4-93f4-d038d84019a0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "79feb8f7-1d2a-45cd-a0a4-54d2c9997888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bfb85fa-915e-4bdc-a4b1-69296a77a10d",
        "cursor": {
          "ref": "9b81ea26-99ae-4bf4-9ca2-741ec7cee6a7",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b65a4dc4-b818-49d7-9b2c-243b03137daa"
        },
        "item": {
          "id": "0bfb85fa-915e-4bdc-a4b1-69296a77a10d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ea7bcfb3-18f5-4d7e-aa88-51f2004887a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4e75c7-f57f-4a53-a0aa-630482a655af",
        "cursor": {
          "ref": "d206c2c0-d392-4efd-810d-0382a2cf4241",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c19d277c-ed58-477a-8371-2c5a0295fcdc"
        },
        "item": {
          "id": "5b4e75c7-f57f-4a53-a0aa-630482a655af",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "37fba177-ccf8-449c-a4a4-889f82700e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c47cfe2-4510-4aea-9136-609f184d32ce",
        "cursor": {
          "ref": "c108569c-5877-417c-b979-493b433cdf48",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "de403b7f-0a90-45b6-9f53-be00d2fea4ec"
        },
        "item": {
          "id": "2c47cfe2-4510-4aea-9136-609f184d32ce",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "189ae67d-663e-4aca-a7a8-a35de2a23407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98288d99-3506-43db-a8d1-e242cd9d14a9",
        "cursor": {
          "ref": "cc3dcc2b-3269-4c2d-b930-1622c6337550",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4e844ca4-dba8-459d-a98c-6fa42ab57259"
        },
        "item": {
          "id": "98288d99-3506-43db-a8d1-e242cd9d14a9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "37bde34c-bb0a-451f-99e8-aed3809c9b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f2c8b0-1842-4dfe-b3da-04377e4062e1",
        "cursor": {
          "ref": "a1cd0591-eaff-4218-a2cf-20f493c263dc",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8a1661b3-73a4-4682-955a-7d38dc1eedfc"
        },
        "item": {
          "id": "24f2c8b0-1842-4dfe-b3da-04377e4062e1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ddd7c6f4-3356-401f-a198-27b169d8fca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b411eb-64d6-4d47-989c-c7d806bba4af",
        "cursor": {
          "ref": "f8627dc2-1a63-4ca2-9860-28f8b5fa4ef9",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0155f913-448f-4fff-bf07-f163b1f0c7e8"
        },
        "item": {
          "id": "b1b411eb-64d6-4d47-989c-c7d806bba4af",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "849bd26e-e60b-4e5c-8cd0-c3c94643f8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ce2168-49a5-40df-a91c-70e641443dcb",
        "cursor": {
          "ref": "6d712285-47c2-4238-a1aa-f23c0cc38b37",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ebb84607-a8c0-4e64-80a9-c50511d80576"
        },
        "item": {
          "id": "69ce2168-49a5-40df-a91c-70e641443dcb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c5480644-9d98-430f-a300-38cba231a08d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c82f71-1a67-405e-b238-322917dacdb1",
        "cursor": {
          "ref": "5c079ee4-cdec-4a41-b2e7-532eafffe377",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b64e4d07-19a7-4c97-aa2c-b2c880f11680"
        },
        "item": {
          "id": "44c82f71-1a67-405e-b238-322917dacdb1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a0f8533e-5fe0-4352-9cf6-35680d95396b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0757fa-86f3-4e7d-aa4f-863fa15ee37e",
        "cursor": {
          "ref": "7a6118c0-8b71-4dc1-9c09-bc851ceb9b92",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "138051bf-9ede-4861-9f79-e8f52bdc46dc"
        },
        "item": {
          "id": "1c0757fa-86f3-4e7d-aa4f-863fa15ee37e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6e423058-157f-4eb7-9bb4-fc8f4d2e2fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a54ee62-78d8-4506-a01e-f8ef9f12c4a2",
        "cursor": {
          "ref": "65c7c9bf-6d45-4339-b376-97d2e203b7e9",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "67edb5cd-e5a1-48d0-a2a9-201d7bb1b3db"
        },
        "item": {
          "id": "4a54ee62-78d8-4506-a01e-f8ef9f12c4a2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "46573528-1f9f-4130-8087-b57c436b2b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabd4364-0250-4fbe-a45e-a6cfcf03f8a8",
        "cursor": {
          "ref": "ed818cdd-bbc0-4a72-95ff-7b248912aed2",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "41e61bdf-f8ae-4c2a-9b93-45372aaad344"
        },
        "item": {
          "id": "cabd4364-0250-4fbe-a45e-a6cfcf03f8a8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bf73e613-01ce-4321-ae75-7b3fcd9cc05f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ea83ac-368a-4754-a86c-32cfc764f81c",
        "cursor": {
          "ref": "1564b0e5-3452-4baf-bfa6-f8dda331879d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b9835de6-e2ce-46b8-bcb1-c015bb2fb481"
        },
        "item": {
          "id": "a2ea83ac-368a-4754-a86c-32cfc764f81c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c99c15ba-6956-4434-9b61-d60598134560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe3ac10-07b7-4605-9ad5-dff7874efe3e",
        "cursor": {
          "ref": "c86685cf-392a-4ee1-aae4-1f1a53599ef7",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7b706c7b-c8b1-4dcc-937f-eef588c004f4"
        },
        "item": {
          "id": "3fe3ac10-07b7-4605-9ad5-dff7874efe3e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e4523ce4-c013-4ea1-bf47-a475534aa6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6440b300-f521-4016-851c-f63533f73851",
        "cursor": {
          "ref": "7c7ca90e-6b0d-414e-888d-557c7bc401c4",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c4e805d5-ac33-4028-8dce-daf3baddac07"
        },
        "item": {
          "id": "6440b300-f521-4016-851c-f63533f73851",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0a7291bd-8a86-4bdc-b942-59a896f61f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929eba12-52e0-4aa5-bcf7-36a25917f1c8",
        "cursor": {
          "ref": "a2b97fe3-78f3-42d9-8a68-1911261dac26",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f810b21f-af26-4a57-a02d-60563e8e3ed1"
        },
        "item": {
          "id": "929eba12-52e0-4aa5-bcf7-36a25917f1c8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "db40a7ad-76ab-4a48-93a4-a2ed920e56b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1424086b-f740-4ea2-8615-8085e370d616",
        "cursor": {
          "ref": "2b22c153-4a52-44b2-b48e-0b12b5e9baa6",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cc8ff10b-f50d-4f1b-b391-837c8e27aa84"
        },
        "item": {
          "id": "1424086b-f740-4ea2-8615-8085e370d616",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1c3a8aa5-434a-4514-9870-ff9c57638058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e7eca5-a6cd-4caa-bf62-a0c802b19fd7",
        "cursor": {
          "ref": "4666f15f-44e4-4268-a5c3-732b9009e6bd",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a950d690-e8e5-490b-9eb5-6c0f0d40cc52"
        },
        "item": {
          "id": "62e7eca5-a6cd-4caa-bf62-a0c802b19fd7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "31c10998-5f1c-47d9-9adc-1b3a3e92165d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4e2a03-4bbc-490d-87ba-49a0c16ffa4c",
        "cursor": {
          "ref": "1d1290bf-3fe5-471d-8988-3c8c5a79b510",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d34a76f8-8376-4286-8f91-246a8ade9f13"
        },
        "item": {
          "id": "5c4e2a03-4bbc-490d-87ba-49a0c16ffa4c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "83c39741-a95f-427d-bfb8-e23e7c0cd4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2b68e9-57c0-447d-97a2-7f05780bed60",
        "cursor": {
          "ref": "21635138-6768-4c5f-b255-bb81ea304905",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "249e1a80-c84d-4eca-95be-0edd933a3d6e"
        },
        "item": {
          "id": "8d2b68e9-57c0-447d-97a2-7f05780bed60",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8b80120b-b29e-4b35-a393-36656d05e1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c7c1c1-138f-410b-b352-5e3f9f8943d4",
        "cursor": {
          "ref": "022176f2-f7a6-4b0f-bd02-2b04ae82c811",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6c4bf961-7187-4deb-a9b0-3949decb4a9d"
        },
        "item": {
          "id": "73c7c1c1-138f-410b-b352-5e3f9f8943d4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8c9dbcda-78d1-4be2-862a-b44535ff4f6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfcf6c2-476f-4165-8589-05ce57ba1980",
        "cursor": {
          "ref": "82059b62-d817-41e1-b502-d338f65ac06b",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0c6a4030-4d82-489a-8050-4158d512b9b4"
        },
        "item": {
          "id": "4dfcf6c2-476f-4165-8589-05ce57ba1980",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "03a67242-c0cf-44b2-839b-f306b07dd3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b452d42f-a4bb-4bfd-97d1-e9fcf0ef832f",
        "cursor": {
          "ref": "0549428f-3297-4c64-9c21-35b7b36b6db5",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "156c686c-a00b-4c21-835c-4ad14067ee0f"
        },
        "item": {
          "id": "b452d42f-a4bb-4bfd-97d1-e9fcf0ef832f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "02c5f1ec-57d7-428b-9301-0e237d6f2708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1089ab98-2a80-4106-a117-d4340ef16bca",
        "cursor": {
          "ref": "38c038d5-d0d9-4db3-8b3c-ed750f4ecb04",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "455ecb8e-eaca-4f74-a2f3-fda89041860c"
        },
        "item": {
          "id": "1089ab98-2a80-4106-a117-d4340ef16bca",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6096629f-4e82-4573-be92-7dc16de10d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51839610-e63e-4372-8f6a-a9bd02d32063",
        "cursor": {
          "ref": "851467c7-2471-4bd9-9eb5-21adefe4b1fe",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2a10181b-9065-4b0a-88a4-1a325582e9ae"
        },
        "item": {
          "id": "51839610-e63e-4372-8f6a-a9bd02d32063",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7f921c73-d81c-4379-b2ab-33fe347eb774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6eeb953-8895-44b5-84b4-557a2889de2c",
        "cursor": {
          "ref": "1480cda0-9480-4b32-940d-62ff09358624",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8c32e383-e39f-4196-ad19-d683e762615d"
        },
        "item": {
          "id": "b6eeb953-8895-44b5-84b4-557a2889de2c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "53db5d31-34ae-47b5-948c-d4685ec282ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14162673-acf9-4f9e-9b87-96639ebd6219",
        "cursor": {
          "ref": "8fa0a87e-dd71-46b6-a4c4-3d249be0f26b",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e1e19a8c-19f0-4f8a-9ae6-6585fce78880"
        },
        "item": {
          "id": "14162673-acf9-4f9e-9b87-96639ebd6219",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4eb14b5f-1bb3-4bf2-8ff6-ce6d6c624cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22566dd9-db72-480a-a6d3-dc709e42b5a1",
        "cursor": {
          "ref": "52a920b6-0637-43ca-b093-9bcac62d9d73",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1fc822d1-671f-4d52-bc51-0b767c7bcb9f"
        },
        "item": {
          "id": "22566dd9-db72-480a-a6d3-dc709e42b5a1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2fed2adb-d824-4171-8011-03ba0ddc3890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2da9790-fc56-490b-8882-cfb906338158",
        "cursor": {
          "ref": "0f4019ea-5192-4157-b8f7-a6a92eab35ff",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8f213a6a-7d39-438a-a5d3-9b13c7628aee"
        },
        "item": {
          "id": "d2da9790-fc56-490b-8882-cfb906338158",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "548ea26f-0519-48c3-b416-8e85a67c9312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52a06dc-779e-4d74-8e39-12901427439c",
        "cursor": {
          "ref": "901ebe03-a5df-4563-9cda-dc415b196dea",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a78034a3-481a-45c2-9495-b72918f6fd7d"
        },
        "item": {
          "id": "b52a06dc-779e-4d74-8e39-12901427439c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9449bb19-ae28-4a51-84ca-baf38239376f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898ef22d-8eb1-4f26-9f03-d9c7c68adf2e",
        "cursor": {
          "ref": "cea3696d-025e-45e1-8422-517702940887",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6d2c2fa8-16e1-4257-8413-17cca77da561"
        },
        "item": {
          "id": "898ef22d-8eb1-4f26-9f03-d9c7c68adf2e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bad369a4-6d46-4dab-8d19-10ae2b597444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402f7d34-2c7b-4305-b9f6-dad85b4a035c",
        "cursor": {
          "ref": "f9d02bfb-b87a-44d7-85ab-3706fe0f2582",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "16e8b9c3-cfad-4b47-b3cc-c293aec00b2e"
        },
        "item": {
          "id": "402f7d34-2c7b-4305-b9f6-dad85b4a035c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "68a9ad05-576c-4650-a935-508ba50c8acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe5a199-f164-4a37-bb92-5a057e52ec1c",
        "cursor": {
          "ref": "e4ef4baa-52f7-46bb-a77d-71261917b2be",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1a5ca19f-b81b-401e-8f5a-fe0233da8a96"
        },
        "item": {
          "id": "3fe5a199-f164-4a37-bb92-5a057e52ec1c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d6788f4f-2d85-44a1-bca1-12099831dfac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c747e1-7eb8-45b4-bb4c-f218f36cb12f",
        "cursor": {
          "ref": "9c38e839-84d6-4048-b1e5-0e5b438cfddb",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "db127e4c-e051-4272-ad68-af3e1694b2f4"
        },
        "item": {
          "id": "f1c747e1-7eb8-45b4-bb4c-f218f36cb12f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7ecd7cbc-93ed-4b12-9f38-cad50823cbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdb044c-06b0-4a1e-9d26-38f8f6765565",
        "cursor": {
          "ref": "864dccad-bc7b-4860-91dc-db9d3cae4797",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "68c923c1-c2f4-46c1-b45e-1f4de8c0328e"
        },
        "item": {
          "id": "0cdb044c-06b0-4a1e-9d26-38f8f6765565",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "62f56e6f-c6a0-429b-8d43-63d96357b794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc35032-5613-4f94-84b4-aaf04d9caabd",
        "cursor": {
          "ref": "17cd6d35-a33a-4f78-aacf-ca96ed9afa31",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d37d00a3-f157-4891-97ce-1f2920d7016a"
        },
        "item": {
          "id": "7cc35032-5613-4f94-84b4-aaf04d9caabd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c1e062df-354f-4438-8855-93b247e3415a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea687860-3842-43fd-b9ec-88710365de4e",
        "cursor": {
          "ref": "7277e0e8-24cf-47f6-a412-f2b93149700c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e82a7c74-a93d-4b96-8c80-f78fd5016a08"
        },
        "item": {
          "id": "ea687860-3842-43fd-b9ec-88710365de4e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "27495a20-e50d-4f43-b1ec-d36bf695d7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d35c7b4-962d-470b-8b98-ccb5fa762d0e",
        "cursor": {
          "ref": "22bade89-e172-4bb7-b896-d7ff9de4253e",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "971b4e91-1997-4c9e-9c96-f6b8873b175f"
        },
        "item": {
          "id": "2d35c7b4-962d-470b-8b98-ccb5fa762d0e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "29dac9d7-22b2-408d-98f6-c72f2656979c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd719707-9e0f-4cb4-883d-8078fec36811",
        "cursor": {
          "ref": "6016de7d-bae2-4764-a917-2dd8ac70051e",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6789a3bb-3005-4c5a-b792-7a2699a6016c"
        },
        "item": {
          "id": "bd719707-9e0f-4cb4-883d-8078fec36811",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "66d029d8-c9c5-4362-bc23-0204e4b5787d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57bfab3-ff8d-4f37-ae2c-bfddbb0ff336",
        "cursor": {
          "ref": "5f3dd9d9-bbb2-4846-8b5b-1c6222c1e2e7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "24214ac4-e008-4a3e-b101-3ed0ce548ae8"
        },
        "item": {
          "id": "a57bfab3-ff8d-4f37-ae2c-bfddbb0ff336",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b8541855-aee7-4ea0-b89d-a040c5f110ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86b260f-41c2-4099-8d19-ffa1d283f2d7",
        "cursor": {
          "ref": "275ecb91-aabb-4927-a622-086eaf6070b1",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "53354493-5217-4cff-898a-f569fad7c760"
        },
        "item": {
          "id": "d86b260f-41c2-4099-8d19-ffa1d283f2d7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1a0a5f1b-677f-4c71-85fa-d099b2a7b3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9447c7ca-1e82-4ac3-9747-825c73d02139",
        "cursor": {
          "ref": "c70be01a-bf7f-47ba-8b83-92cdcd74c815",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4234f988-4155-435a-a1c4-a1b335380ef0"
        },
        "item": {
          "id": "9447c7ca-1e82-4ac3-9747-825c73d02139",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b343f492-aaf1-47f2-b5a0-81077a74f5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67376f7b-1e88-485d-8af1-5985c21545c3",
        "cursor": {
          "ref": "40340415-3ebf-47be-ac34-2b5148fb4a9e",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e60eb608-749a-48e3-ab24-d9b1c15ea03c"
        },
        "item": {
          "id": "67376f7b-1e88-485d-8af1-5985c21545c3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4152c059-a842-4ba0-aee4-ecbda923b896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0e1a2c-595e-4cc9-bccc-d8afb28902d7",
        "cursor": {
          "ref": "cb08ad0a-22b8-46a1-a942-4b201893835d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4ba6ac29-fe71-442e-99f4-9b8d694dc53f"
        },
        "item": {
          "id": "1c0e1a2c-595e-4cc9-bccc-d8afb28902d7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "392ce196-daf2-4470-a4f2-0a8917143400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b216aa-0f76-4712-8228-fa269036b507",
        "cursor": {
          "ref": "856186cb-89ff-45ea-986a-e70646f54c9e",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "343f739b-a27a-4c8f-8440-a6038c72283b"
        },
        "item": {
          "id": "31b216aa-0f76-4712-8228-fa269036b507",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "22e8911c-545b-47de-a6e1-cef8c3152769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17335770-c362-4a98-b920-115651325b81",
        "cursor": {
          "ref": "3092e9ba-89c3-4359-8a27-28e02db2773d",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2c2dfdf2-cbb4-41f3-8968-107f8f427239"
        },
        "item": {
          "id": "17335770-c362-4a98-b920-115651325b81",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5669e5b2-6421-4cab-8490-803e566d9dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c321ec-6430-4896-931f-fc36e3f1761d",
        "cursor": {
          "ref": "c9470fd3-3f67-42da-8469-bd2b12537c9e",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3e004db1-c3c0-498e-9c17-e8230fd62e7a"
        },
        "item": {
          "id": "e2c321ec-6430-4896-931f-fc36e3f1761d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "447407ca-c33e-4f7c-8307-28738d53a4b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ece538-2436-49e7-b5b3-70db08e58cec",
        "cursor": {
          "ref": "85a212da-d989-49c0-aee6-29d7ea3da266",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "355c8512-b493-4bd4-b3a8-c9eb7816666e"
        },
        "item": {
          "id": "b5ece538-2436-49e7-b5b3-70db08e58cec",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b1145fb1-f6ad-43a7-b548-da7cf351970b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092a79ed-7f50-4854-a397-7776c9598e9e",
        "cursor": {
          "ref": "019e35b7-a87a-40b6-9dff-3995d68512ef",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7cf0055e-15e8-41ac-a70c-fc25edbaff19"
        },
        "item": {
          "id": "092a79ed-7f50-4854-a397-7776c9598e9e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e3876746-3d47-4b89-a2df-d9f80a4b92f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300f979d-a620-4056-b428-b83eb9a1c1bc",
        "cursor": {
          "ref": "5dabd6bf-cbe8-4226-a6f5-3912c0be77b5",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0c5e1486-de7c-4c79-833b-100db3ef697a"
        },
        "item": {
          "id": "300f979d-a620-4056-b428-b83eb9a1c1bc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "209f159b-b073-4be1-9a84-e602b03f3b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1153f99-eb84-43d1-85a3-7e2984d58a53",
        "cursor": {
          "ref": "573bacf6-7819-48fd-99fa-08d1f53148ee",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b0373e57-8880-49c5-9e67-7dc7a6edfd85"
        },
        "item": {
          "id": "f1153f99-eb84-43d1-85a3-7e2984d58a53",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "eb6f3408-8b9b-4535-a9b2-cb4eda93a2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aee3271-9b79-47b3-8f47-1953ab40c6f2",
        "cursor": {
          "ref": "3ab37969-895d-485d-a817-26f14a4e0428",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1ff3d4ad-dcc9-4397-8cd3-d058d29a52b2"
        },
        "item": {
          "id": "6aee3271-9b79-47b3-8f47-1953ab40c6f2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e59cc018-71a6-431f-b49d-d7d262421dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28367142-be24-43e9-8e0f-0a45acc479ee",
        "cursor": {
          "ref": "4fb74b80-da6c-4947-af54-b45a5019b9fb",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9fd457a7-5278-4a23-a85d-3927f00fa39b"
        },
        "item": {
          "id": "28367142-be24-43e9-8e0f-0a45acc479ee",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "dc936fd7-6a07-4546-9501-907baf591010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8e7475-b40d-4fec-915f-577594ee496a",
        "cursor": {
          "ref": "a48fdc3f-05cb-40c0-8b8a-456787bb5d6b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "697c8428-babc-450a-b33d-5af2d4c29cfe"
        },
        "item": {
          "id": "7b8e7475-b40d-4fec-915f-577594ee496a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "67a5173f-a0e9-41c7-8a0f-dfd96b307ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62dffa39-72c8-4318-8d41-f2b11607d044",
        "cursor": {
          "ref": "3352a69e-61fe-4917-87d1-f007fd2a2724",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "072fd044-d196-4ea2-a98a-d3ea8cb7b77b"
        },
        "item": {
          "id": "62dffa39-72c8-4318-8d41-f2b11607d044",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7f025895-eef1-4c62-a660-8c5c21e0d6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5082656c-462a-426a-9194-1c26590fcff0",
        "cursor": {
          "ref": "ab0e3d8b-7904-4ef3-95ca-5a18fd8ade76",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bffa26e4-8476-48a1-a31f-d3005be46885"
        },
        "item": {
          "id": "5082656c-462a-426a-9194-1c26590fcff0",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "866c3fd6-c4a5-42c7-b724-a1e7e00dbb86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bad6baa-e2a5-4c51-8b59-f1af6bd50e65",
        "cursor": {
          "ref": "79d25c62-96e1-4885-be38-1b5fee674b2b",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6f7f02c2-43b9-426a-a044-c0329c50cfd7"
        },
        "item": {
          "id": "3bad6baa-e2a5-4c51-8b59-f1af6bd50e65",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "84a0b14a-af3f-41dc-9a69-93d1dd17b0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c48da5-d5bb-45bf-b5f1-dd84c30e957e",
        "cursor": {
          "ref": "5faf2ede-c633-428a-8c4b-3c792f289a82",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "269cb5ec-6f44-499f-bf3b-29b77fdd6379"
        },
        "item": {
          "id": "17c48da5-d5bb-45bf-b5f1-dd84c30e957e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c95e52a9-e4df-4b73-8bfe-1f4fe26c4d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3643bccb-e211-49d8-ba0a-6b18f4126cae",
        "cursor": {
          "ref": "63da3b1d-e786-43d8-aaaf-b23306f476e8",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "13fcb9e7-cb7a-42fe-a3b6-23b12885045d"
        },
        "item": {
          "id": "3643bccb-e211-49d8-ba0a-6b18f4126cae",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ecc1c246-c4bb-4ea7-bac1-c9a15335534d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b9fd05-8a4c-4391-8d23-02f58df7489c",
        "cursor": {
          "ref": "882cd71f-dda5-4890-a5fa-36ed30277a3b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a5721507-9f97-4089-a52e-cc94671fff5c"
        },
        "item": {
          "id": "60b9fd05-8a4c-4391-8d23-02f58df7489c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "732e961c-4bc1-4608-868f-be527139fd38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e40fabe-016e-4818-bcce-93d023dea8ce",
        "cursor": {
          "ref": "15e9d55d-c48b-4f9f-a108-2e191495ee52",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "87984b63-7d4f-4347-aafd-6b14fa5c7834"
        },
        "item": {
          "id": "5e40fabe-016e-4818-bcce-93d023dea8ce",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fbc5bb17-ecf9-4c99-be2d-f4eb2fd6b98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39737152-2106-403d-b554-713617f0c41e",
        "cursor": {
          "ref": "69f2f458-d302-4ee8-a70d-75d67ccf8923",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "dd9d5281-7a77-4540-a62a-c0caa545b606"
        },
        "item": {
          "id": "39737152-2106-403d-b554-713617f0c41e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bb6a93da-09d0-4665-a61e-2ba3fe33524e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8a3135-f131-409c-97df-b9f4159d5c2b",
        "cursor": {
          "ref": "c5de0f32-4396-4ff1-a76a-e1b1dd4ca4a6",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4b201c5c-9653-4d3a-9885-f1f60930bf1f"
        },
        "item": {
          "id": "bc8a3135-f131-409c-97df-b9f4159d5c2b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "98b6a90b-2936-45ab-ac30-1a7f84081a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a037bf1-ab64-43ad-85df-a664db0878c8",
        "cursor": {
          "ref": "22794318-64f2-4994-8340-8c1f088e1cb6",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d7b004b1-058a-4514-b58b-8485d4bf6023"
        },
        "item": {
          "id": "3a037bf1-ab64-43ad-85df-a664db0878c8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d2c2dbe1-1748-4451-bbcd-790c6feb057a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec375351-efb2-451b-a197-152e6e73d1eb",
        "cursor": {
          "ref": "09caffc2-bc54-4ea9-a6a7-500dee24e248",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cd681cc3-d33b-4559-b3bb-0ec42a58c868"
        },
        "item": {
          "id": "ec375351-efb2-451b-a197-152e6e73d1eb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b270f2a3-3993-4804-a52a-2062dfe7ff35",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "da1afcdc-06ff-4565-b904-43f371bb3932",
        "cursor": {
          "ref": "0de5245d-23bd-473f-9663-1515dafc6ced",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "36fdb02d-610f-4fbb-86ce-5c9e7fa7a74f"
        },
        "item": {
          "id": "da1afcdc-06ff-4565-b904-43f371bb3932",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c475c882-ccf4-4eff-8da5-4acc549cbbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebf4df7-4555-4be4-a198-e64d8a284dc7",
        "cursor": {
          "ref": "d193a6ec-9142-4416-9815-859075b25dfe",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "914b4d6b-d3fa-4d90-a256-af99fb48e3c7"
        },
        "item": {
          "id": "3ebf4df7-4555-4be4-a198-e64d8a284dc7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "565cbd07-f5f4-4fab-bf51-6d8af44307c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268bf223-8e8f-4916-bf18-0ac1fd1ec75a",
        "cursor": {
          "ref": "2d28b43a-35ac-479a-8d58-739a35852e4b",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6a4a9cc2-9c8b-4f2e-871e-b93832bb2953"
        },
        "item": {
          "id": "268bf223-8e8f-4916-bf18-0ac1fd1ec75a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5b0f6265-b9ff-4e85-9d8a-ebe18f513480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88abd42c-b205-47e5-bbd0-3a63a569822c",
        "cursor": {
          "ref": "c5e4c8c2-74f1-45e8-b28e-572acc898abc",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "34ae0422-a584-496d-92fb-7ca1bf135c82"
        },
        "item": {
          "id": "88abd42c-b205-47e5-bbd0-3a63a569822c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "683d8a98-5278-4151-bb54-646e20c0a24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cead585-c87a-4ded-a50e-0614a8ac5659",
        "cursor": {
          "ref": "9154613d-5461-445c-b4d8-49ac0e09377f",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d8924008-f167-4da4-b8b6-137a21887a53"
        },
        "item": {
          "id": "6cead585-c87a-4ded-a50e-0614a8ac5659",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fee28c66-4a8b-4fa8-9555-534359c862e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688075b6-bcb7-4b15-a947-b9b115641961",
        "cursor": {
          "ref": "be67fe6b-b91d-4150-b138-e1e8d1406178",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c04ef450-ddbc-47a2-8a54-0b9611151ca6"
        },
        "item": {
          "id": "688075b6-bcb7-4b15-a947-b9b115641961",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3c852f68-3d9e-49f2-b646-581b329934d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859dfe2d-78e0-43dc-8bea-4f59ba3da802",
        "cursor": {
          "ref": "21362c61-c65b-40b3-9124-c0c57aed02a2",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e6a32c59-6099-40f2-9db2-f5f9c02c130e"
        },
        "item": {
          "id": "859dfe2d-78e0-43dc-8bea-4f59ba3da802",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c6a10db8-cfbf-4abf-8381-427490803370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb72630-fe6c-408e-9246-de110a3478d5",
        "cursor": {
          "ref": "9af238a9-8c33-40af-81d4-82217feccdda",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f09d6bad-f9cc-401e-bac7-965b2fc4abbd"
        },
        "item": {
          "id": "5eb72630-fe6c-408e-9246-de110a3478d5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1e59aac2-7795-4d11-80bc-54c75489e75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0393d9-d9eb-47a7-af04-956d04df53be",
        "cursor": {
          "ref": "59c5d694-c15b-4092-887a-bc7c7e07dd0f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2f2561e0-e5f1-4b56-b3cb-66abe8fe6b24"
        },
        "item": {
          "id": "ad0393d9-d9eb-47a7-af04-956d04df53be",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d50a5076-0aed-4fae-8a02-a24a034fb204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94c1c6a-3cca-43f4-b917-bd38dce4c9b4",
        "cursor": {
          "ref": "1f5ac66c-c584-4b0b-8ad4-2f7f2e5c3e0f",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a5fa31a9-a5f5-451a-abd5-b909ea21111f"
        },
        "item": {
          "id": "c94c1c6a-3cca-43f4-b917-bd38dce4c9b4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3c808c21-e3fa-448d-9456-080bbf51d8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea36e4c1-3d40-4f87-8908-bc2e8ed2295e",
        "cursor": {
          "ref": "076942bb-808c-44bd-8239-9ed47a67ad98",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4eb7398c-dd3f-4f97-9099-3e94065b4baf"
        },
        "item": {
          "id": "ea36e4c1-3d40-4f87-8908-bc2e8ed2295e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bcb2e2b5-87b4-4d10-a46b-b99d39a22684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329bec72-1443-4587-b706-b1f89f316486",
        "cursor": {
          "ref": "17f53aa8-1356-4790-a225-098408580be5",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e448feb5-7c67-434d-a21d-f3ed07194aaf"
        },
        "item": {
          "id": "329bec72-1443-4587-b706-b1f89f316486",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3e7a0120-e050-46cb-962a-388f25963b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c4fd22-77e7-4a0c-9e4e-503c765e23c7",
        "cursor": {
          "ref": "a57947d2-23e3-4bb7-a66b-3d656c685d55",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0d8b4fb5-ae34-49cf-acba-4e4be77fd9bd"
        },
        "item": {
          "id": "94c4fd22-77e7-4a0c-9e4e-503c765e23c7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "62b9be4a-7a49-4ad6-aff1-d06ba8e72fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857786cf-3d59-438e-bcf0-d44474e46037",
        "cursor": {
          "ref": "2a49ad32-80e0-4132-879a-3025dab9b71e",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4e4fe3bb-970a-4a17-a357-e9c82d7846fc"
        },
        "item": {
          "id": "857786cf-3d59-438e-bcf0-d44474e46037",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b8f1421c-2bf8-4a63-b1ec-174ceaf7ef58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77761122-4983-4dc9-be4f-f52c606e5ee9",
        "cursor": {
          "ref": "39932328-bae6-4530-81da-976e5495888e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "92f974a8-3efa-4b71-99ad-53897c34f3df"
        },
        "item": {
          "id": "77761122-4983-4dc9-be4f-f52c606e5ee9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3b542991-c29f-4b0d-b499-928aa9f1ac4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d51937-ed5f-4084-882b-ae5e2a5ccc13",
        "cursor": {
          "ref": "5f359123-e62e-46e8-bbc0-0e42a0f12cf2",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7644237b-6e18-4a52-927c-d39efb0067dd"
        },
        "item": {
          "id": "e9d51937-ed5f-4084-882b-ae5e2a5ccc13",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1fa80340-2fef-4b0f-a9f5-b122a6e239aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fc5926-4383-449c-90b6-6b2a987dde6a",
        "cursor": {
          "ref": "bd50cc65-a169-4673-bd22-d6fcb8714e73",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9ed339eb-b0fb-48a9-a349-f733085df2b5"
        },
        "item": {
          "id": "e0fc5926-4383-449c-90b6-6b2a987dde6a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bead78a6-bf42-44e9-9f45-44645d306c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea04df6f-5a2d-445a-80a5-bfff2ac9e9b7",
        "cursor": {
          "ref": "a7a32400-f821-456b-8b0f-be436b2d00e5",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2b3566a8-180e-4a6c-be47-8a178ed0f799"
        },
        "item": {
          "id": "ea04df6f-5a2d-445a-80a5-bfff2ac9e9b7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e2e9526b-648f-46fa-9666-919bc3d0afa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519c3d0d-4aa4-4da7-8419-fa239af610b8",
        "cursor": {
          "ref": "7c53bdf4-8a4d-45dc-91cc-bab9adf26a23",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4429a8d1-1484-4263-a8f1-9b9f97ba3f7a"
        },
        "item": {
          "id": "519c3d0d-4aa4-4da7-8419-fa239af610b8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "aedeaabf-389f-439a-a6c3-4080bca67506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddaf436a-0a74-4e99-9337-4f3e9c6699db",
        "cursor": {
          "ref": "83f2a93f-90f7-4204-9ed3-5dfc91554a83",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0d6c0da2-fe14-48c5-a492-a2f25ffd1e93"
        },
        "item": {
          "id": "ddaf436a-0a74-4e99-9337-4f3e9c6699db",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d9f8ed7d-4d97-47aa-8601-723c0a9b5dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056f3ca4-6377-48dc-9c29-3920e6232718",
        "cursor": {
          "ref": "07eeb670-88bf-43b5-a627-4d9b6f69aeb1",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cdb5fe8c-c429-450d-af34-6152d49f46fd"
        },
        "item": {
          "id": "056f3ca4-6377-48dc-9c29-3920e6232718",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1870c6f5-1c79-4eb3-9153-109715c6161c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1312e1c1-dbd8-48d3-bb2b-d4dab9e18821",
        "cursor": {
          "ref": "6714758d-dd91-4f25-98ab-a596b45689b8",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ab342347-f2d0-456b-b588-6e65d4b9b7b6"
        },
        "item": {
          "id": "1312e1c1-dbd8-48d3-bb2b-d4dab9e18821",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "845620a0-0ee7-4bc3-9ec3-d8eff259143c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c214160-6105-4006-9f88-24096bf92324",
        "cursor": {
          "ref": "138849fb-5e3f-4797-8688-7e4ee564be6c",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "26ea9e6e-ed6f-4718-a3bf-7d197757e26f"
        },
        "item": {
          "id": "5c214160-6105-4006-9f88-24096bf92324",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e92ad58c-c18f-4158-9e89-20bd17e32d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c3d3d6-474b-4d90-8e31-c97293e64c92",
        "cursor": {
          "ref": "dcb19695-53dc-48e3-b7e9-0954141da586",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b515986a-c651-4d2f-b30a-3a1efd796c53"
        },
        "item": {
          "id": "60c3d3d6-474b-4d90-8e31-c97293e64c92",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bea7a4f4-9c0a-47a9-bf25-23954efcbda1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5fc89c-9daf-4be5-b3f8-0b9eb915db9f",
        "cursor": {
          "ref": "9d53f088-626d-481f-bc94-b011d0e8f184",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ab056bb3-68d3-4567-96eb-e6197837116b"
        },
        "item": {
          "id": "5b5fc89c-9daf-4be5-b3f8-0b9eb915db9f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "72017135-575d-43c2-8df9-0ac4792f2195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46087613-3186-4e5d-8d60-a2c3964738e0",
        "cursor": {
          "ref": "7e8340dc-70c2-4747-add9-2577074e6c8a",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a76640ac-fcba-4e99-adb9-6e4f23706663"
        },
        "item": {
          "id": "46087613-3186-4e5d-8d60-a2c3964738e0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c3bf9515-cfd3-4b75-902d-fc65e81a2bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21418f9e-2dc6-42c1-8382-a2337c5ca8cc",
        "cursor": {
          "ref": "b4b4f8d4-8a48-4608-bea7-913e741ecdfa",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "23b77883-dc32-42be-a673-f529ac724f11"
        },
        "item": {
          "id": "21418f9e-2dc6-42c1-8382-a2337c5ca8cc",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "422a44a2-1691-4b16-be44-c109801fb736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4f5c72-b686-4ef2-a7ee-a3990a6ae417",
        "cursor": {
          "ref": "b4dcb286-75c8-4e05-8b80-6926a025da75",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3cb2b3b5-f77e-43e2-bfac-e5ba0430e8d8"
        },
        "item": {
          "id": "8a4f5c72-b686-4ef2-a7ee-a3990a6ae417",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "de04ad81-f656-4a6c-9532-324d59d66219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aee948d-073a-4184-8bb1-a2f7b36c37c0",
        "cursor": {
          "ref": "f6a5f8df-a4da-4a65-acf9-624ff9d296a2",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "640a57e4-df45-4b39-92d4-e35b10ea4156"
        },
        "item": {
          "id": "2aee948d-073a-4184-8bb1-a2f7b36c37c0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d4e29021-c2ba-4815-b5c6-85e06bc94a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3989871-1489-487a-853b-c26c885c877d",
        "cursor": {
          "ref": "92dbdfc9-c3a2-4f1b-a411-3a85963e8721",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9fb3dff3-9c13-4511-b106-72dc344257cf"
        },
        "item": {
          "id": "a3989871-1489-487a-853b-c26c885c877d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "aec581f6-bf64-4190-8586-eb25b48528e7",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c7d2009e-12df-416c-8e14-a6ed74d1f7e2",
        "cursor": {
          "ref": "27314264-05d7-4e80-8162-003a1d3ed168",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4a4066d1-6a45-4d3c-811b-c46460076e74"
        },
        "item": {
          "id": "c7d2009e-12df-416c-8e14-a6ed74d1f7e2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "aa7edec4-a31a-4941-bdbc-7fb28dff6a53",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e3c06d0c-80c0-477e-85d2-67d18f905c1e",
        "cursor": {
          "ref": "3b1a627a-1e93-4c4f-ab98-5c8fbd966494",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a7020c02-58d7-463d-bf0f-ad051c845765"
        },
        "item": {
          "id": "e3c06d0c-80c0-477e-85d2-67d18f905c1e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "007068e8-bb22-4ff2-80a4-d301b658275e",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "6d474265-c8b5-4cf5-950b-c21d76063605",
        "cursor": {
          "ref": "5b3da2dd-fd25-4932-9dad-da40f7892220",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4c76b0d8-b59a-49c7-bb1d-b37225728ac0"
        },
        "item": {
          "id": "6d474265-c8b5-4cf5-950b-c21d76063605",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d1126744-866d-40b9-ad25-8436446ca1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32431ce2-a75f-4c52-b541-f6f75d3ae03f",
        "cursor": {
          "ref": "07f47d23-9d9d-4b23-ba3d-6453c833680d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7f766e02-7f3d-47ab-9c95-8b0d1e1bfdee"
        },
        "item": {
          "id": "32431ce2-a75f-4c52-b541-f6f75d3ae03f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f8ced60f-b58f-4e8d-b8d8-1ff8ce0f1f22",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "950299db-a66e-4d51-8d3d-ba12da0397bb",
        "cursor": {
          "ref": "99e95d74-5426-446c-9643-0aa1fdf95bf5",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "210a05f9-96de-4589-a6f5-8d79722d0cc3"
        },
        "item": {
          "id": "950299db-a66e-4d51-8d3d-ba12da0397bb",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5a12dbd6-ce32-4d5a-a9ca-38ed3182e29d",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5c8b836d-4d5c-4643-8907-d6481f224214",
        "cursor": {
          "ref": "3b39acb1-19af-44b4-bf90-b03fe4944e33",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "edc774e7-bf8d-4284-b380-4d4c7e86961f"
        },
        "item": {
          "id": "5c8b836d-4d5c-4643-8907-d6481f224214",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c84ed36f-7d4e-419a-8a9b-e8f0aeb9de95",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "25f80140-3697-4a18-aba5-8d34b83e6486",
        "cursor": {
          "ref": "fd6cc142-4373-482d-9513-274124e324ac",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "81c0e8ac-282c-46f2-8e8c-504dc1bf36e0"
        },
        "item": {
          "id": "25f80140-3697-4a18-aba5-8d34b83e6486",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c932eb69-4193-40c5-9012-290ed896c00d",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "771ad6b8-f91c-43f5-b509-8322e89a3973",
        "cursor": {
          "ref": "4e8551e1-8549-465c-80eb-a7e2faafca6a",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2adc384b-acf6-4ce7-8fee-06ca0dbc5555"
        },
        "item": {
          "id": "771ad6b8-f91c-43f5-b509-8322e89a3973",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "19950cd9-91b6-46d0-a101-71f5b2eee68d",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "8ba198c5-7bbc-4fac-a56b-b6c26ef1cada",
        "cursor": {
          "ref": "bac2c15c-cc32-4081-8e84-b5f6ddaae271",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "39cd6114-f062-44b7-9560-6a2c98f4f466"
        },
        "item": {
          "id": "8ba198c5-7bbc-4fac-a56b-b6c26ef1cada",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cef54bcc-8958-4a50-aa9a-95ae34459bad",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "7ebd6af3-293c-4fe6-95ec-ae4c6e9a5146",
        "cursor": {
          "ref": "26a76967-c0bb-49f8-87a3-27d216a32eca",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "04ae57f5-7308-47b0-928c-ec17b4cce560"
        },
        "item": {
          "id": "7ebd6af3-293c-4fe6-95ec-ae4c6e9a5146",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "db8733fe-420d-4063-bf1d-89d533f8ff49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4084469d-3f6c-499e-91ba-dbbab30d5b77",
        "cursor": {
          "ref": "ec33fe44-aceb-4d66-9b38-adeb8e13e5ae",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4c9ade33-e198-437b-aa28-2e424e93c0ed"
        },
        "item": {
          "id": "4084469d-3f6c-499e-91ba-dbbab30d5b77",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "37f1679c-d36b-45f5-85f5-c262f92c820b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfcee8f-4df1-49c3-ba3c-eb282f5b112b",
        "cursor": {
          "ref": "69d8b5fb-67f2-42cf-9514-b910a96ec034",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "dfee80af-830b-4f35-ad8f-c1826328b831"
        },
        "item": {
          "id": "dbfcee8f-4df1-49c3-ba3c-eb282f5b112b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d07ba9c3-1358-4362-a886-dabe53575415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca887fa2-3a40-49f8-a972-23952b23f022",
        "cursor": {
          "ref": "431faeab-ac8f-4e22-b10a-5dc4a7901d66",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cdafc440-6621-402a-becd-bbcca8f8ef00"
        },
        "item": {
          "id": "ca887fa2-3a40-49f8-a972-23952b23f022",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "944f2baf-f44d-4372-a15b-2ae8f648eb04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e58f88e-2958-410f-8e22-91d3545a10e6",
        "cursor": {
          "ref": "0be6e5db-2bf5-435b-ab02-78d9c26f2fec",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e1847fbd-12dc-4d49-ad89-c8d3e9bf5f86"
        },
        "item": {
          "id": "2e58f88e-2958-410f-8e22-91d3545a10e6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ba2d7c50-dfa3-4eea-91b2-d12a5585b5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88328d49-7f04-4c9a-ad4b-193fa6454d1c",
        "cursor": {
          "ref": "bc9331cb-f820-473c-b4ad-bcc0d66d5d51",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cc1741e9-51c7-459c-b47a-516362738ebf"
        },
        "item": {
          "id": "88328d49-7f04-4c9a-ad4b-193fa6454d1c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "783fdfc0-81bd-4d33-8999-b5d21bf89141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf99203d-0a67-47a1-a585-79789dc32b4b",
        "cursor": {
          "ref": "c5860209-e816-4714-a1de-78bb51257294",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "74934f4d-a8ec-4612-b029-894b1c31ead3"
        },
        "item": {
          "id": "bf99203d-0a67-47a1-a585-79789dc32b4b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d3b0aa1e-6302-4121-b521-f259bb78c412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad0ad3d-2487-4ac2-b172-3cfb83bf30da",
        "cursor": {
          "ref": "ffd7d83a-5660-4fb4-82fe-c658300cad46",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4d3ee7eb-64ab-47fd-96e9-0fead20d7095"
        },
        "item": {
          "id": "fad0ad3d-2487-4ac2-b172-3cfb83bf30da",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c73dde3a-1b52-41bd-a596-ba61b2e8c93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c2daa7-4c61-46d3-9f6e-87f5420e5c65",
        "cursor": {
          "ref": "22cf0913-cdf3-44f5-914c-d9e5e75ff3d0",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5d752ecc-4e14-4118-b0c7-c4765e940dc6"
        },
        "item": {
          "id": "81c2daa7-4c61-46d3-9f6e-87f5420e5c65",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5ac1c341-c55c-4100-b881-a6966da3ab5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10b165a-c073-4085-a343-60118ca65075",
        "cursor": {
          "ref": "7d57d623-71ea-4019-90df-1e6e1cbe4eff",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "03b5e655-22a5-45bf-afbc-647091d04172"
        },
        "item": {
          "id": "b10b165a-c073-4085-a343-60118ca65075",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "580d956f-92c9-44a5-9488-5e315d12c64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80461e26-97de-4aa5-871c-6f282114e63a",
        "cursor": {
          "ref": "c17a7547-1efb-45dd-8b50-74e8a2d0676a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "eface6f5-471f-4755-88ca-80d017f0a2ca"
        },
        "item": {
          "id": "80461e26-97de-4aa5-871c-6f282114e63a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7798aa52-c01d-4063-98e3-c3d30fc612b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3536702d-11ec-466b-9957-fbc5e8fe3538",
        "cursor": {
          "ref": "c63730bb-d07c-4fb5-a4a6-336f7aaad421",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "42c0d506-cbed-456f-ab9c-7271a5370eae"
        },
        "item": {
          "id": "3536702d-11ec-466b-9957-fbc5e8fe3538",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a44479a6-018f-4c99-afc8-396a4049c8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac03b10-e84b-4e86-a6c4-7563043ee803",
        "cursor": {
          "ref": "016705b3-de3c-4b8c-891d-11d3a3cb1dc7",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c241e587-9f4d-46aa-b219-c53bff3c4bdb"
        },
        "item": {
          "id": "2ac03b10-e84b-4e86-a6c4-7563043ee803",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c3690e88-cfef-45d4-afff-a67da25d6eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3e51a1-eac0-4a65-b904-095fae69e5e1",
        "cursor": {
          "ref": "66f24a60-c92d-46af-bd91-30c7293706b1",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4d9c46d5-8c40-4926-8ac0-9d63e914233d"
        },
        "item": {
          "id": "ae3e51a1-eac0-4a65-b904-095fae69e5e1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cfd756c0-abfa-4e6e-b512-259d320d2a4e",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "967c0b84-3a0f-4148-945b-1f807d93f87c",
        "cursor": {
          "ref": "81dcc51e-34f1-4536-96f5-87150059230c",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "84ec8bdd-23f5-4b0c-9dd5-28071d5f2fdf"
        },
        "item": {
          "id": "967c0b84-3a0f-4148-945b-1f807d93f87c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "186d5897-2a51-4ff4-add6-77df4f9b4349",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "689765d1-5ffb-448c-be20-a96e48f5620a",
        "cursor": {
          "ref": "c6ff0fb1-c3f4-4560-bc16-581f567e0bb2",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f0a6ae09-8812-48d9-a6b5-5292ea3acf01"
        },
        "item": {
          "id": "689765d1-5ffb-448c-be20-a96e48f5620a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "28f4d1eb-b3f6-4b38-ab07-cc37bcce14f1",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "df08f83c-0610-49b5-af91-742ecbe0b860",
        "cursor": {
          "ref": "e1744741-bc60-41b8-afa9-775d31cabf0c",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "84d59833-399f-4602-a8d7-82a04d7e2701"
        },
        "item": {
          "id": "df08f83c-0610-49b5-af91-742ecbe0b860",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9ca46fb4-a55b-4979-b12b-b12bb036f880",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f911a7d4-6fce-46f3-8652-511332288b4d",
        "cursor": {
          "ref": "b99995f1-bbe8-463e-8d9e-96a6929e6631",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "968acd62-d09b-4651-b63e-66e01c019143"
        },
        "item": {
          "id": "f911a7d4-6fce-46f3-8652-511332288b4d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ae39d6bd-f6e9-4826-beb7-d122f513af75",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "98ef7d5c-7e71-40f4-8664-017189cee8b5",
        "cursor": {
          "ref": "8d246932-5288-4f7b-badf-476c66347635",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6afdd5d8-560c-4fb3-bbed-161d37883ed2"
        },
        "item": {
          "id": "98ef7d5c-7e71-40f4-8664-017189cee8b5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5f204ac0-899e-4b7e-a151-3c006b71304e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73e64ec-3745-49f7-a04c-f67f1e937636",
        "cursor": {
          "ref": "bbf3bdc8-f4cd-442d-9b5c-77de1450cb09",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "28c430a5-fbbe-4ae3-b995-f1ca277901f6"
        },
        "item": {
          "id": "c73e64ec-3745-49f7-a04c-f67f1e937636",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bbc6b18a-2ce0-49b5-a334-8de121accb48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f26911-dd4b-491d-ab28-d6d996a19ce5",
        "cursor": {
          "ref": "13d52b95-afbf-411b-9b27-d324f16892f8",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6649322b-1ec5-43ce-8bf7-10b22d5a96e6"
        },
        "item": {
          "id": "64f26911-dd4b-491d-ab28-d6d996a19ce5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1271edb0-ed0e-45db-afd4-fcd5dd181874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f357215-ffeb-44fb-8260-ee1861e26de9",
        "cursor": {
          "ref": "8fab0926-7239-424e-ae4f-bf16bdc3bd19",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8922734e-ae8f-4782-b585-0f1541f35489"
        },
        "item": {
          "id": "3f357215-ffeb-44fb-8260-ee1861e26de9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4c104552-365d-4d22-b977-0b7a040c2740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d614c31-5831-40e1-9c9d-a164f6bab839",
        "cursor": {
          "ref": "bb4576e0-ecf5-4a12-813b-cdc3f49b43e2",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "96137809-c7fe-4970-8179-95f99579a437"
        },
        "item": {
          "id": "3d614c31-5831-40e1-9c9d-a164f6bab839",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "51a6ba29-d46a-4256-83a0-9fca24615cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53dfec9a-6e5b-47c0-9cbb-13091de4c77f",
        "cursor": {
          "ref": "5bf30c83-a350-4ea7-8ba5-528fe3fcf983",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5e237dc8-1167-4714-97f1-64736d9f85ee"
        },
        "item": {
          "id": "53dfec9a-6e5b-47c0-9cbb-13091de4c77f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2b3bd1df-a0eb-405f-9970-d5debc24be06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1abfaa-ec08-4600-8bfc-cbfe62677eeb",
        "cursor": {
          "ref": "d8774032-675a-47f1-b91a-ead1d66661af",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fa1fc10f-718d-4775-a49f-e529663f3b84"
        },
        "item": {
          "id": "2d1abfaa-ec08-4600-8bfc-cbfe62677eeb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "315e6928-f9fb-47b8-8f4a-e688dbaa584d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2ad97a-5ee5-4b01-a8a0-0bfcd868f410",
        "cursor": {
          "ref": "763bab5b-f2f2-4061-a766-e802816be7bd",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "887cd85c-edfd-49f1-97d9-f5cf4dd0f485"
        },
        "item": {
          "id": "7f2ad97a-5ee5-4b01-a8a0-0bfcd868f410",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e0c604c0-4a08-4665-8535-c00849f5b310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26162562-9208-4fed-91d1-e2f7587d1f0d",
        "cursor": {
          "ref": "d282872b-31f4-48f1-b13f-223f05c52568",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "02fe59aa-1906-4f6e-a2cd-7ebb674ec365"
        },
        "item": {
          "id": "26162562-9208-4fed-91d1-e2f7587d1f0d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "11357ea5-41c3-4739-839c-8bfd3e8da023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a104d452-c95f-4b4f-8f06-3ee39c9320c8",
        "cursor": {
          "ref": "20b5a24d-919a-4c3b-8377-74786e5c7579",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bd65fd43-3203-42a8-85a5-ebc007e1313b"
        },
        "item": {
          "id": "a104d452-c95f-4b4f-8f06-3ee39c9320c8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "59dec045-468f-4a60-b5f2-d4d1615b1f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6227a391-a5db-46c9-b4a5-c3d3bb51267d",
        "cursor": {
          "ref": "a136bacd-f1f1-4888-9eda-9ba18c576c70",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7fa2c2c8-5bc2-44cd-81b9-3c0210ee97a3"
        },
        "item": {
          "id": "6227a391-a5db-46c9-b4a5-c3d3bb51267d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "16bb9339-62a0-4712-8217-a1670743bc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600892f8-a31d-4778-90ce-d700af0650d3",
        "cursor": {
          "ref": "f0101bb3-1e35-467a-a617-6223ade945ce",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8df6760e-be51-44de-8743-2251dc01124a"
        },
        "item": {
          "id": "600892f8-a31d-4778-90ce-d700af0650d3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2eb4f057-f985-4b5a-908e-a258169ade47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac097c9-6d2c-414a-92e8-6f69e2194eb7",
        "cursor": {
          "ref": "0209ff23-fe98-43ad-9ed6-529e6b0dcae4",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c7266772-6d86-4242-8a10-f94e52cecada"
        },
        "item": {
          "id": "2ac097c9-6d2c-414a-92e8-6f69e2194eb7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8094a791-f2a3-42db-963e-91bf41e15539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d6be59-1b7e-42ad-9b61-9bf880087028",
        "cursor": {
          "ref": "39dd280e-933d-4991-abb2-bf8b799bae18",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "70de460a-d084-4b25-ad7a-169511b23b24"
        },
        "item": {
          "id": "33d6be59-1b7e-42ad-9b61-9bf880087028",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c5e7b55b-3814-40e3-902b-6a2954d755c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4fc43a-412d-4f35-b9e1-bc99f34727fb",
        "cursor": {
          "ref": "c9886f5f-1086-4b05-bbd7-8424154a4aec",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "66a992d8-2352-4171-83b2-7f1476725ff8"
        },
        "item": {
          "id": "9b4fc43a-412d-4f35-b9e1-bc99f34727fb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3c26b351-2c5b-4517-bdee-558c9dd7c9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0293c887-b456-4e4a-8dba-bd54b04f0f49",
        "cursor": {
          "ref": "d23ed546-c8dc-419f-a0aa-1ae56dcdf5a8",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e19c6e71-b4ae-430b-9b9b-7ca17e2384a4"
        },
        "item": {
          "id": "0293c887-b456-4e4a-8dba-bd54b04f0f49",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "660add8b-fcb1-4030-86f0-0af46f1494b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72ee4b9-4b7e-495e-b3a0-694bfb6ef72f",
        "cursor": {
          "ref": "05d7651e-f233-4207-867c-65e11fdab471",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "fdd0534e-f076-40a9-85ab-69f4fa43f371"
        },
        "item": {
          "id": "f72ee4b9-4b7e-495e-b3a0-694bfb6ef72f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "21ceeea7-fb67-4cef-9795-5c9a2b996ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b245c8e-da29-44fd-a0df-4e9f5f6adb51",
        "cursor": {
          "ref": "0f8a298f-6cb4-4115-99f0-0cc03f5d033d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "2969df58-8732-423a-b603-0c4957ead004"
        },
        "item": {
          "id": "1b245c8e-da29-44fd-a0df-4e9f5f6adb51",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "63c875cf-ec1d-4cf6-ab65-9e2df015f3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439d77be-3574-4079-b64a-22149b67fd1b",
        "cursor": {
          "ref": "7a73dbf7-43da-4b16-b847-eda6f5ed861e",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "e087b05a-0d52-4f55-aadf-0986739f679f"
        },
        "item": {
          "id": "439d77be-3574-4079-b64a-22149b67fd1b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5989bcf7-e3c9-4731-99ee-d2ad7107d0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decc48c7-288f-4f40-9f26-eb3b9adacbef",
        "cursor": {
          "ref": "930bd3f3-6f22-47be-9849-7f7e3dba4a45",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f530e01d-85dc-4727-a4de-1f3a6e86f5e2"
        },
        "item": {
          "id": "decc48c7-288f-4f40-9f26-eb3b9adacbef",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "da1d7c6c-d894-4a52-be62-148fea5dcfcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55288ec-2d17-47a1-86d8-bcf88b3618a4",
        "cursor": {
          "ref": "465d3b37-9c1f-4de2-9f7c-783ea2e4b7e4",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "90717d2f-a022-4e00-ad6e-bd7b3a1913d8"
        },
        "item": {
          "id": "d55288ec-2d17-47a1-86d8-bcf88b3618a4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "68aca7a8-0d9c-43b2-9291-b21a88a3e691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628ac908-f67b-4911-bf95-bc3439d0d73f",
        "cursor": {
          "ref": "bdcdc1ca-c8f9-4564-b648-c6889863436b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "42e2c334-a4dd-4b30-a74a-db1ae9714ce4"
        },
        "item": {
          "id": "628ac908-f67b-4911-bf95-bc3439d0d73f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c4c3c8ae-5b7e-4fda-9ccd-a05cf2613a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafb7f27-c8dc-481b-a198-e40c6a51f8e2",
        "cursor": {
          "ref": "721e71a6-b038-4fdb-90b1-59e0afa3f124",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ea3180fb-14bd-4fde-9ee4-053592879392"
        },
        "item": {
          "id": "dafb7f27-c8dc-481b-a198-e40c6a51f8e2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "950aa928-25f7-44da-85c5-7a5b1f02bd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6111c4-79bf-43c0-8ba8-bd5e1426c01a",
        "cursor": {
          "ref": "30730b35-566d-49b1-b78e-b9beb0c3f470",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7316d7cb-4453-4936-ab72-6fa08b734956"
        },
        "item": {
          "id": "4b6111c4-79bf-43c0-8ba8-bd5e1426c01a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "42cc97f1-cc44-43fc-a0ce-9c35da618d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa70761-fd65-477b-aa46-281ce1878bf0",
        "cursor": {
          "ref": "35e22aae-259a-45b9-8ac6-5d008de52fb6",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "95e3f619-ee47-4a13-b2cc-85f455360ab7"
        },
        "item": {
          "id": "4fa70761-fd65-477b-aa46-281ce1878bf0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "aed96043-dcf5-4203-8a06-e1e2d104967a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214a5dbb-18ba-4742-9795-a11384274011",
        "cursor": {
          "ref": "44051add-2318-487f-9fd6-6e2a65cf750d",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "76141f18-4942-4984-8660-f8cde4f7e97d"
        },
        "item": {
          "id": "214a5dbb-18ba-4742-9795-a11384274011",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c03907b7-2cd5-47ff-89b3-0d1ea08956f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a223b8-3f35-406f-aed6-73aace28a308",
        "cursor": {
          "ref": "1d6c05d9-4ea3-47ac-bb1a-1d6868996207",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "4c0187aa-c022-4290-845a-03134e19a232"
        },
        "item": {
          "id": "99a223b8-3f35-406f-aed6-73aace28a308",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bb9b777b-f28a-4f9d-bc31-e9d4d5c9e40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b111bf-91c0-4840-82b5-1c6616edc407",
        "cursor": {
          "ref": "5f805807-0bfd-480b-ae48-f9da8ab3a93a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "054b6d53-f1f6-4d98-8736-17b3e68cc576"
        },
        "item": {
          "id": "85b111bf-91c0-4840-82b5-1c6616edc407",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6f78aa86-2693-49be-9963-fafafa8c5544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd600054-cdc5-4e52-bc14-4ea6f71cfb5b",
        "cursor": {
          "ref": "a5a8193f-2db3-4e49-812c-4db6a288a249",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e99a9589-7df7-403d-b640-f06ea02071f3"
        },
        "item": {
          "id": "fd600054-cdc5-4e52-bc14-4ea6f71cfb5b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "945dd269-73f6-4f74-a7f5-1a15e8d7c0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5ddd00-fc4f-4794-b968-2311877871bb",
        "cursor": {
          "ref": "a114ad29-2cf4-472b-bd98-569d41f5e543",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f986ba90-81f8-4a6d-933d-9fde07a168c6"
        },
        "item": {
          "id": "3a5ddd00-fc4f-4794-b968-2311877871bb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "97b7a6fa-8778-45ac-9a02-226255454d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4639b97d-70c4-4db6-9fb6-3c4ea5f18750",
        "cursor": {
          "ref": "e77ee650-cadf-4143-92b3-af16ebab60e5",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b44611f9-8ded-43ca-a62d-c49e060c44d1"
        },
        "item": {
          "id": "4639b97d-70c4-4db6-9fb6-3c4ea5f18750",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4075b1bc-259a-471c-ada7-ec2ba1ecc22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6853f9-d68c-4a03-a6e5-edb4383ed17d",
        "cursor": {
          "ref": "23787d91-4a75-4162-9ff6-d63dab4dc27b",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "8c84612c-dfe1-4060-8f0f-cfcc4373a1a1"
        },
        "item": {
          "id": "9b6853f9-d68c-4a03-a6e5-edb4383ed17d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "80568e57-95c3-4d4f-83b6-a893eb06e199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bafaf17d-e0ba-4524-8945-d0911cfdc642",
        "cursor": {
          "ref": "69ce7c08-d696-4252-85ac-c601b29b02cc",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2248917f-5bc2-4400-9635-7d853aceeb3d"
        },
        "item": {
          "id": "bafaf17d-e0ba-4524-8945-d0911cfdc642",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9741167b-884d-43a7-9549-e5177cc603c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04df023-1d78-4e7c-b946-a689fe01a85a",
        "cursor": {
          "ref": "f053da42-def1-48a2-a59a-bfc0fed853ce",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f6115bdb-89b9-4aa6-bc7e-d9a656dea142"
        },
        "item": {
          "id": "c04df023-1d78-4e7c-b946-a689fe01a85a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f4787ac7-281c-4a1f-b40b-d23920323290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08164559-ba4f-4887-845f-20030ca5d5dc",
        "cursor": {
          "ref": "f0174811-f778-4a54-8c8c-3d83f398178e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "af8529f4-5d5f-489a-bde0-52735c6273d2"
        },
        "item": {
          "id": "08164559-ba4f-4887-845f-20030ca5d5dc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "58fdf792-2d52-4f00-ac33-381bce0e7d47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a9f5d3-e083-4d95-b34b-0f8c4feddea3",
        "cursor": {
          "ref": "b9735363-1a8f-4320-9dc6-2cdad964b7c8",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8617af2a-e41a-4437-8553-753e4759703c"
        },
        "item": {
          "id": "90a9f5d3-e083-4d95-b34b-0f8c4feddea3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "df29fade-22da-46e0-81bc-f57a0d4691d5",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ca91bcdc-ebef-4abf-bcde-d96eac0f0055",
        "cursor": {
          "ref": "e9a9de79-0b46-485c-8c2f-cbd51318eb7c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4f1a4860-4f8a-4414-b007-33dbd0330e48"
        },
        "item": {
          "id": "ca91bcdc-ebef-4abf-bcde-d96eac0f0055",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d635533b-6da3-4822-bbd9-f13489d89997",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bea917e-8b59-48c5-902c-7035c3f3c7c6",
        "cursor": {
          "ref": "19bb06c5-83b2-47a1-a8c0-35a9a96749ab",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "dbf556b8-bbc2-48dc-8e6c-6f352731d4e6"
        },
        "item": {
          "id": "1bea917e-8b59-48c5-902c-7035c3f3c7c6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d0c9756d-747d-47ae-acd9-4a25c39ce8c5",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7221a0-f144-4130-a241-6c784aeff2dc",
        "cursor": {
          "ref": "e59e8c50-b59e-4628-bffe-8b42bed9b7a6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2051dfc0-50ca-4ded-b4c2-981d5b0003bf"
        },
        "item": {
          "id": "8c7221a0-f144-4130-a241-6c784aeff2dc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9dbc8d78-411b-4dd0-acae-efbd3759a162",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7221a0-f144-4130-a241-6c784aeff2dc",
        "cursor": {
          "ref": "e59e8c50-b59e-4628-bffe-8b42bed9b7a6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2051dfc0-50ca-4ded-b4c2-981d5b0003bf"
        },
        "item": {
          "id": "8c7221a0-f144-4130-a241-6c784aeff2dc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9dbc8d78-411b-4dd0-acae-efbd3759a162",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29194afe-76d9-4f2f-95b9-779fcad9dab7",
        "cursor": {
          "ref": "25c1e02d-46d7-46e0-a8af-cc07b0bc29be",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b65f2511-b00c-4597-acb9-e322ed1cd2d5"
        },
        "item": {
          "id": "29194afe-76d9-4f2f-95b9-779fcad9dab7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9c5d97a3-ec81-4fc4-868c-ce7a3c7bc00a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d837dbb-b84f-4246-bb01-bd77d2311bc8",
        "cursor": {
          "ref": "d16546cb-d87e-45e1-a669-4283dc14e2f6",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "fb16a5d0-86f8-4e97-8958-bf901373ba87"
        },
        "item": {
          "id": "3d837dbb-b84f-4246-bb01-bd77d2311bc8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f5ac50f9-0521-4a3a-bec5-956653f2666c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}