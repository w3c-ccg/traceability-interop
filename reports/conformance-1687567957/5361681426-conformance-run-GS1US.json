{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9598255a-7451-4b61-ac0f-fba3c7faac3e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "59e2a7f4-0793-4eec-94cd-743705dabcb1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e28af02-8411-462e-8edd-8997c35e49fe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cbc9df4d-a85c-46de-a991-4a6e419a1900"
                }
              }
            ]
          },
          {
            "id": "98eaaaaa-d611-4b26-a5d3-4c8e4dabea0b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79dfeece-c55e-4148-8989-84902862d27e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c93e93f4-2f74-49f8-a5fc-dff8fbf13b35"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dc9f66fd-92bd-4cfc-99e6-d9b160d74634",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9d3ac75d-37f2-4f70-9903-a793b1348d8d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06d2767b-361a-4acc-8cda-02f56be7c1d8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b101b9cb-0da5-4c23-a28a-5e5fdb7e237e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95e41118-8d5c-470c-b5d5-f59796cfa039"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8b3ac62b-e48b-4e9f-a584-6aeb564a96ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "214aa9d9-d9f9-4222-903d-fea37b6a3600"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "11e600c3-83f3-4869-80f7-57eccda9f084",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c80b0be4-2d13-4315-aa6d-4f9a33da03bf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "017b3e9c-a4e4-4ec9-a958-e0108119dc90",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f7f968b3-34d7-41a8-b357-917ad06b14eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "557a2076-6c7f-46c4-8d3e-0d0077f8cee0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b2529d6c-b38f-496e-9ec7-3674a8f50437"
            }
          }
        ]
      },
      {
        "id": "bc8c365a-e1fa-47e3-846e-f08319acbda7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "85923ee5-4292-462d-a981-449931e9e205",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a309e5fe-4d77-4395-90e0-5fa36d807395",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "718a04b3-bc44-4f0c-ae02-065fa0a5adfc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036ded6a-48db-49b7-86c9-a983c692cd66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "428fee9c-58e9-4c18-928f-01d4afe5dcf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f687ae-69dc-48ac-8411-e3bc0547d0c1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc610d8-1112-4e95-8aca-09c227717d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f4eee90-e99b-485c-a90a-c126270c7bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2418b85-4861-4b2b-923b-d9b628fe9369",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d71a76-23b6-4691-9839-5daea149e65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39916762-d1a8-4a56-956f-bcdef4888ec1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "34e28b6a-78f7-4544-8f9f-0fa31f5b1248",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e73a422c-6301-4e97-b844-831744ca979f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe6360f-88e2-41e2-a218-658ba7f5d77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85e76f53-44d9-43e5-9bce-660390562b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd6fbcb-70f1-4d63-b959-9be202d252d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f28117f-efba-4e54-af8d-a2f0ecffd4b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f7388289-1329-444d-a229-eb732780f5fe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1f4cb99-fa31-45e5-9ff7-14c19af226fc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8d243ad-9822-484d-8f5a-6904eab2fcad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "65fbbb38-352f-46d1-8817-7f6ff4509b5a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3514d9d-f092-4466-b22f-0e7275b190d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "73a00b31-72bd-4964-9727-a9659a6824d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c3d2bf1-38d5-4b4b-a75d-3a667b2e0270",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b6266f0-ed19-416e-9695-36d252a558a6"
            }
          }
        ]
      },
      {
        "id": "e3d77745-0576-4687-86e8-9bbd7620c4da",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "68eb5068-06ca-4e0e-b593-6c6adbfa54f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee9a4c8c-1302-4720-8e1c-617a8459728d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "279afa85-995e-4e55-8973-10beff593e46",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d37f2f5-e76b-4a49-87a4-cdb02c1d1262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513945d3-7c49-4b8d-b45b-bff8ae9895c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bda0742-3ac2-4054-aa50-ccdb7cb509f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1746ad06-f1f2-42ea-bdb7-a27611faa121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0513f5f9-b954-4346-ab8b-9f20174ada77",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52957ed-2d74-498d-bc64-02521842c20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e48697-b5f1-4b3c-9ac7-0f7ec1ccab4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca492d10-779c-4f38-a250-fbaef55b8522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3749861-4251-4f59-ba8b-16c361302424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e0ed44-e846-4627-945a-cdb014d793e6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3696b234-7341-4dad-bff8-cc626666c4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3431ecdb-4e04-4224-afcf-f007e8638be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4274c14d-d964-4071-b9b7-d5541ee592f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3122f2b4-ada5-4a62-9ed9-b5b43b77f03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1732196c-41e8-4c2c-b566-cd814230e227",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2875241-a8c4-42ac-868c-d6c60809f0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59442727-d0f8-4ecf-9b01-2d0d88d72693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9378c246-587b-44b1-9ffc-5b8fe87ff98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce13ad70-3ac0-4135-8fa0-fd0fdebfbd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f610723f-854d-4ca9-a4f3-8f7284314a4d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15faaf6-0167-402a-8846-effaa14101e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f677f9-c67b-48aa-bc74-ace2cf3d9dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4eb495b-0bea-4d6b-9afa-84570e5c188b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f350120-db18-4f31-aa91-ab106ddacaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94395ac-07b2-410b-972d-580c18f2e44e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6bd215-ac30-4bf7-8844-8cecb15804a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f7804d-7bd3-46b9-a090-e6b5f2826341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951e98fa-c6c3-4dde-8bd0-568292a76803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d8e7da5-a5d6-4455-a0a6-27d33cd087d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393c08b0-0a19-47c2-a398-04c055486497",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e76da9-6fbf-490d-af2b-4bec502dc18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd684c6-31b1-42f6-8d96-c176199ccd78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5841a2-69ff-4579-9643-3911a173af2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98fc6265-510a-4ee9-a670-73d0d743e7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5f67ac-b672-4a28-9164-abc60e43259a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761349ea-c63f-493f-8275-9a902bfc49b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b543f52-55d8-42e6-95e5-fc2acd1941c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04df51ae-de0f-4f66-9ff9-22cd7c5ee135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "673eb8f0-b329-404b-aa5d-3a12e98253d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867aa836-9387-4766-908a-71f7d9c91956",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88331b7-3b4f-4b34-a894-9cfe4029c4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c65778-91df-4f72-a7f3-8363d6c62e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efbebed-ff98-409d-99fe-10732225d8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce433b30-9581-4e12-b31c-32db833d8b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188cce40-f027-4ad2-95d0-07722d9ab950",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0637c2-8db2-498a-afad-d9e461e56d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d43535d-c5ec-436d-8aea-96904fa8eca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8ef2e1-11bf-4356-9736-24e8affcc37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce445a6b-3669-46da-90dd-86cddc61b877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92de137f-e689-4a32-914f-f3bd34bdaeb1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c32a9c8-7766-4998-aede-18bab9991997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ddb5513-8620-4c9c-9781-deb7276284bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3fa922-f5f7-49d0-aede-aae1b93e35e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f884ca7-e433-4dd8-a18c-84c243d8bb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a84ba1e-4910-4a94-8131-2f7dd3a8295a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6456aeb5-1ffb-4e7c-ad66-56552099d2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e8d0a0-794a-4a5d-a0bb-49e97b906ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d646cbee-be62-4d80-87a1-74e5c2746715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d0db564-e9c5-46a9-befb-989ffc094ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c163636-e476-4ed5-8aba-274e42553c5b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8456eb8a-f292-456b-ab87-9a20b1a81795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fffe59ae-fbe1-46c4-a7eb-87dcb681e84c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c090ec9-d484-4040-b0e7-5c09e09cdbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d2b7b68-1c8d-4557-a319-5cbeb3b64a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef41f0db-ae85-4fec-8b5b-0c83105a5ee3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f66fb98-8c86-42cc-8586-d063e755af66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f769ff27-0839-462f-bba5-2517304fc9b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b73c65-8da2-4c94-9aa6-bacc62e267f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62fc02bd-d272-42d9-a2ae-368aa6e1217b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ddd513-41d8-490f-a89b-bb933df1673c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceef73ae-b62c-46f0-b440-8cdfe058ee9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70b6512-d404-440d-bafd-328f07e9ca89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a644929-e435-46db-9514-ecdc2b589cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c5a1a6c-264c-444f-bba9-7497fbc4f246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e16959-16e3-446f-bc43-adae54c0ca0a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca82695-d66f-4d49-bfec-982da08e7f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2431909d-7991-43e3-bdde-a3a6b6541920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a61a9d8-9395-48d7-bbf1-f6d05d9ae474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "820901ca-60fe-4684-bece-5e5e9f3113f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc20c43-ab3b-4e50-b2ee-2fe9c854c1a3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2387f8-6753-45bd-98e1-2116fe4de5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5002caf2-c1aa-4610-9119-3f0fdb5a9df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59a75cf-da81-4f87-ac02-bf7c9b0f5e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19a29fac-efca-46b4-92f2-5dcaca987bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4095060b-ba3f-4223-bbba-8e84292ef330",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf9b520-797d-478c-8d1b-7438e8b1fea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8ddf0e-2046-48e7-875e-c0ca69647fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65df569e-fe26-4580-bda3-4c9ff10e1a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e32ebadc-3e2a-4289-8166-678849d54b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30d042a-6b42-47fd-863a-9cd295f2253a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4706bd18-fca9-4f6a-a7ea-a994d93e0160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97eb9df7-d6bb-4cce-be86-bd2fac3ddf07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de793a39-1c03-4330-aba2-f55da85807d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b8a8b0-2f18-4c8b-9fe6-5558cb874e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1322f4e-63af-4fa7-a674-5a6263396db8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89cefa2-9b6b-4ad5-9dc7-794ab56df32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b28849-67cb-44dd-9cd1-0c0203306258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a093b8-ae65-442b-b7ed-8c5c323bf988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c92f08-7590-4d1b-ad06-f958d0dce7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0f6da1-bade-4b9c-b45d-e3fb5dc58098",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948e63a2-f94a-4d48-b8ff-fea145efa4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87556f4a-2ecf-4a2b-89a5-d3cdb36b9f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d429cc8-a091-44ee-bae3-c58e9fb3dde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62c63e80-f2f2-4f4b-9a5c-fbf6aff8c1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869f36db-55f4-4f8c-baa2-7ebe24f01b42",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a92f497-75af-4a43-8051-bd030e479f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1fcefb5-f6a6-4e84-aa2c-f8fe73bca672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a360637-5e81-4c75-9fcf-2da568e8cfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f81118e6-f800-407c-aac3-9ba5982c6821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caac855c-e8d5-4c82-a255-de5f88122a52",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70fb3c2-f9fe-4a1d-bb00-dd6f65000262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ef99f6-0d67-46f1-8c4d-e215f35e53c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43eaeae-d283-4c4a-973a-ec3dba4096dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "080c75e9-a4dc-4237-8ccc-da450b17d9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593e0882-d98a-4ee0-8ace-eda94894a363",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea324863-4425-40d5-93fd-8b06aae738de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e555da7-efa5-45a6-a364-5fbfeb10457f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79c59bc-a23e-412c-b5d5-b33738ebc240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cae1b3b-e943-462a-ba5c-8f65ebf088c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd079c4c-6755-4cb1-ba93-3364cdcf6d9e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6515fa4-661b-4d2e-9e2a-ad488e37c6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cec0ac1-9be4-4f6d-b014-768ea88f78d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361db310-327a-437a-ac21-ef44d972ad6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8c8788-d2c5-42f8-a781-305974bbe08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2482f799-669c-4696-9676-32077beef2e9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc07134-cf52-42fb-91ef-5f3c1eb8d8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5d7dca-60e9-4d0c-87e0-104fcd91a9b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c240dbad-4ad5-41e1-b8b0-942d9e91e53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "07f11e4c-4b06-4bc4-bd4a-4abad76ecfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc7f673-00d7-4fbe-93b2-044cd656c411",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb22f6f5-ab54-40c3-9d7e-4a19f6dc97f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c683720-d4cf-4075-b47b-eedc2df2e164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dcd66d-0bfd-49b4-afd3-a456080d1759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74e4b026-a34a-4406-ae31-68cc336e362c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecf7223-25c9-4c12-8606-7eb19a981ce1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b6391d-bf14-4945-8c10-13b12cafd6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6484630-9d49-421f-b3cb-d800d9b74957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d8b83e-6a53-49f9-ae14-2a8af4f0aeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c93cd47-359f-4863-942f-2443aba0c2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f86d83a-411a-414b-a325-d6dd67591178",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0730ad87-8c10-4812-ae50-9bc64a80e84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c881f328-3c89-4962-8332-b283bfc0492d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce52398-2388-4201-bb89-b9c9c9796af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea677541-ec41-4ecf-82ba-2d95c10ead04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72c1b56-1617-41cb-98d5-f0db66cbce95",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f6b2bd-d1ce-4045-9339-25c8a8301864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2e3bb2-d679-4190-8ea3-32819221502e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c6b2ff-8285-40a0-8833-21dbc2bbf2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d917495f-78e5-43c6-9b7b-71639228cae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d1cd87-68c7-4ff2-8306-506fd02c3720",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbe3d5a-a82d-4c20-8fb9-e37985ce8045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92826c5-7efc-47a4-a6b2-c6d5553d9900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45801293-0d99-409b-beaa-bacfd31e5f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "11d6151a-f900-4c7e-a531-b3e49deeb2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03eecdc6-9f4c-41a8-a2ba-8788c3122971",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8211a8da-6d33-4226-af51-7c761c06cfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "262ef5e5-b0a6-4f93-bcb2-eeed8f3b6e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85106c1a-ec9d-47f8-84e0-e8153c4a1bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5bac45c-6434-4a61-93fb-8a30a2127d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0e4262-b8f3-4404-8879-9af56c900065",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007d1572-560d-44d3-9985-6b92f6cbe1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f3456e-5c8d-4676-9e69-bd7ab46a31d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0520f92-7aa4-4d8c-bde3-7623f3e451f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f61f31-9eb0-4245-a998-727fe19ebbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4650d239-d38a-4efb-a6ce-cc822ee69b42",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b55469-0f7e-4a53-9acf-8f41bb83c7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053a9356-3b9e-4495-8577-ea146d82c20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e6c525-2e64-4179-9878-09083ae5655c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "646843c9-d221-4695-8295-969536b948c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2df4f4-e15f-40c8-9bf6-58d0218bafb8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4658cc03-24ac-4d84-8cc9-22eccfa44955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138dc1d5-c69b-4aa6-ad63-2fd886198b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e35d305-9349-4df4-8bc4-d9455cfe90cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5b0bd62f-94b9-4b08-820c-04d2b72656d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45df51c8-024a-4d40-893b-7a68b77657ea",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6452c926-a527-40e3-8625-d6cc2541a38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e24dff07-8a44-44cf-8907-725f4eb7f5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e4c420-147c-4e09-b4c2-7d8a8e9ccddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a49337a-690c-444a-9dc6-8a174d0a3e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d9bfe6-29e2-40d2-97e5-b547d9f94eff",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca685d55-422f-4a9e-bdaa-5e79f31a8623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dabfa20-80b1-42bb-9edd-97c4d22986ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249ad568-6164-4a95-b845-2d6b8d0cca32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50f75f75-909e-4a27-bfda-3e985b230bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569e3bbc-9226-4347-b7a7-8b5cddb0ed49",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b89174-ab5d-478e-8ba7-4edfb9ef9b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980bae76-2759-4c2b-9770-1aa767e0ecb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9263198e-25bb-4131-98e7-f7b2be598433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7aeac38-28ac-43e5-83af-a7542c60e5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc84953f-3ca9-4967-ae00-421de987fb86",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e4c790-8fe3-4a67-9451-0202615b456b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be36596f-46ba-47ef-8db0-6a95e3a2e461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a543acaa-f565-4478-9606-6275b03c0eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3302b03b-1948-44c8-a233-967114eb6a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333b9f8b-5276-471d-9948-c9293b85fd43",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7a5d97-1551-4e0e-aaa1-78558e177422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d914d04b-a19e-4d59-9b34-72dfc9a9ea4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d1cd97-b6a2-4dd5-a3bc-88ea851cc3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd48e67-bcf7-4302-8f05-28ba567771af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56cd1a8-0869-4edd-9070-6484980b14d9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1528ee-2c2d-462d-8581-35fc09bb624c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13cc048-178b-440c-af65-1ac98339d367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c061cd3-9445-46e1-b905-a245f2e65d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "72c5c731-15bd-4395-85e8-b3465484b69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e2e05e-e71f-4e52-ab56-ce6031da2d66",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f0448b-2bc6-4b82-ba44-b45041fc777f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9a467e-a43e-4c5e-bea5-dd70bd1576d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622e71ce-cf08-4a1a-888b-388a08079557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "463693d2-730c-4e57-8719-ec5fc404fa1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99fa59d-7463-4be7-8067-477391b94dfe",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c253e25-16b4-46ca-98a0-c1c91e6be389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66043f2-7610-4719-8054-91b0a026e103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3d8b09-4957-48be-a4b2-75438423dd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7adaaf3c-b565-4fee-8ecb-4c0c6b1a3346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e78961-df94-4108-935b-95ba59f04259",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "061b79eb-df89-4320-82d6-5d1056a822bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77040359-c35a-4ed5-ac96-7e60956166fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c400bb-9134-4445-b54b-f6a76ec583f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f69833c-7acd-40da-8c6b-612d4b508787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62922b5-7d7c-4453-a896-f938c1713d0e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5d3a76-be3a-4473-bf8f-5a4ce350c174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd00b1bf-3366-475f-92ae-2b69caff8401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c33e7c-68e5-4e72-819a-82779a3b97b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "02d2dd7e-ae9f-4454-8ba4-721ffbb77b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4979179b-1ce8-49cf-8517-007620520942",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b188689-a4bc-4f8f-a7b9-a6ca79862d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8048daf2-67b8-4bbc-a7e6-92c43e023517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4a44a2-66c3-40f8-98ce-eb749e875e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "099442e2-6764-4edc-b166-16cf380b270d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abba033b-f2e0-4ecf-b7d8-02f7df01b028",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5d56d2-1aea-41b4-8dbf-de47f8116be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef92e90-f22d-43b6-890c-c3b1ab08133b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12fca28-155a-4dbc-976c-e281a23e4c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82593c2b-73b8-437c-a037-bcad369835ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38452403-1e5c-4a95-a7aa-a48739f84d26",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f13447-bdb6-4f91-a20f-f88708f53f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9a473f-ee20-46a0-a4a1-68812455123b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3793897-c7bd-4231-ac6d-80f44911a7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d5f4ba-b29a-461a-a59c-23d53cb9d24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab8a8f3-b92d-43b0-a588-c40dd6615523",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822eb451-dc8b-4e72-b63c-8c557c76d368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c837c6-1732-4ca2-9066-d7ef1b45d867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d74482-f429-461d-9ddf-3d06d2668dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5763dc09-bbdc-41eb-9dc2-14bf656891c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b682cbcc-73c2-4753-93a7-75adfe7cb22e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b333dc16-05f9-4a33-8224-5e43ffe5bff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235c0c73-9554-4c7e-a018-6a0f3f4d92bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a5f58b-d46f-4498-8fe9-2e8dfb1d16b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02235d42-2f2a-4c1e-a8a2-1c63c46621f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db14ad94-076d-4741-81ee-7bfb05143df0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb30728-8756-4cd1-9419-49329004e5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b920133-e82b-4557-800c-717ae8cc0744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17f6df5-5370-42fd-9810-bc66bdd069a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7094d717-1795-494c-b769-1a6f475843a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be65d60-e2c3-4fce-bdc6-f5e1a9e90709",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f36084-6ec2-4563-b32b-c0188124c637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb7cc6b5-7734-4d7c-b550-3d14b758367a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43f0425-9553-439c-a7ba-04f820e3519f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b259a85-c662-4044-a677-0a7f20798db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1282f0c9-8620-4beb-830b-287166e7d55f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f4d9d2-30e6-4547-ad75-88e6ee8b352b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c02bb62-231d-4d2e-a5f7-b390817b487a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f086fea-8232-4ffa-ad72-4b23aabb56b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef7d8ff-e981-4f44-aae4-6bebee0112b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366b6840-8dd1-4206-a0ee-ba4c5a672296",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f292dd-ec15-439b-9c6f-333dc812c393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0e84c8-f390-4121-ad95-e9ed93ff9370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bc92de-7d85-4b83-bd08-d5ab9c70870e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c021dc78-df27-40d6-9294-3fc4c5bb9c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68e9d34-a821-44ac-98ee-d98bbaad8371",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c716c0d-f59e-42f7-a336-6a80e17dda14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74669580-2401-492a-9658-a1621c472d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e25bc3-a0b3-4c86-864f-51bc81ca10f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f969f60-23c7-44f5-a377-0ff1dd2044d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10687bfe-bd5a-4b9a-b119-2338a7991c18",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1980be-29ed-49a6-bf58-dec1bd8d03d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f71ff6d-f144-40f1-86f5-5920d3d3fc3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c01086c-f9e5-4ab3-81c4-1a1937a25d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "38897bac-0d33-4e4d-87cf-aaaf75836ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b567a244-e5fe-4582-8cdf-9e35c67f514c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7be7a6e-93ab-44a5-8146-6e048344c9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73113d93-c012-4b7c-b8e3-358875bff63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c9f6dd-b67d-48ad-9df8-db594d48ea2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa661c6e-b61e-4084-8020-cc16c4dbf38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fab5b70-7dfd-4609-b613-c0a8d84913db",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f1e492-4504-42ef-ac5c-a752b76dd664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31950a25-c4fc-49ff-b4eb-44a7424308c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6bbc64-8e9d-4674-9ee0-1316dcc9204f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba780cbf-67ce-4698-b88b-23ff20a7d801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507ccfb3-0e4b-4d7a-b550-e5b377fd0e66",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d743d1b2-62d5-4fd0-9cb4-185d607ab6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1e6e0e-aeb2-4f4d-817f-c4a85c39d522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613bbf0d-827c-4041-be7c-32e7d8b40b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1dcecf9b-6135-4b4a-8732-ba0e77a483a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830b19d3-6a48-42ba-a566-691e940603fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893dea23-1c1e-4a39-a506-90e69ff79f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb3fe1e-5a4f-496b-98b8-f7929719f766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922a708b-ff70-46b8-ada6-dd2a98c8e23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc58be0-7ce6-415d-aea7-c06469718608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defdbb7f-d5cc-4002-ae3e-ff3072263b3f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1351f7dc-642c-426d-8570-01a3495a5c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d5d576-9815-44cb-a814-4e3b651a64f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138ae125-91c2-4e63-b310-7abaf77e9208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c26afa-cfd2-4d85-b375-baabf5b16760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c44590f-d599-406c-8a38-c27c0c749372",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4164d581-38c3-4b99-b9e2-f61c42c84760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01b4325b-e8ed-4b73-9018-c29f621c6a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c09b62-8908-4fba-95f7-e1b5543434de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6af89b-c080-4d87-8d30-768ebaf81a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcd5c4c-bae9-488f-813c-e3e9ef9ea090",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3857e6-4754-4273-bd2e-af06f03e5883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe738a0-ea27-43ed-b7c8-a505ac642336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b16ca6-3360-429a-b254-905ba2c4efbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b1a696-426f-40e1-b653-cc6d735f9920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465a94c1-fa48-4846-ab2b-d5f05d6123f0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "727a2435-dade-45cc-9e04-95a7856cf614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352a6147-8bed-4dd8-bb92-645d591ddb53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315b0345-057e-48af-b0e0-35966bdb57f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fbf760c-a06b-4687-bb5d-26ac27d70cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886d22e0-91fb-4b3c-abf0-869dc2a75953",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2682e44-7842-4d99-abb5-270754b3fe1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0955e2-b637-411b-a10d-d4c4c6b845a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cceff1-0d84-4826-98e3-a7981af25cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6cb43d9-d3ff-4f34-a976-dd67be5cbc77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ef5d6b-d909-4d67-be82-8b7611e3cf7d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a980647b-f966-4d97-b49f-c1b68ff7bc6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be84cdd2-d490-418a-be49-81958d472f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9975a807-04bd-4ba9-9833-133875a525a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c8c8769-5407-430f-8c5f-10f5f524a923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a8cb0a-b8ba-4d02-b47c-723267e3a2fd",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03612be-c4fb-481d-9c4d-78b8872fe095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d799d7-4c72-4ca1-a716-5a7ffd52ab80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0219f44-467d-46d6-8203-c2f359a2ab09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2f6d5f-6954-46de-9b6e-bd551c0a1862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c477397-6544-45d3-ab2a-53ec7196ebed",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca0fbab-20fe-4a1b-85ea-682a85dd3d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c4b71b-06eb-42cf-8312-08c8c1cc4958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0770c679-8b87-437b-9f63-aed6e0b202d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e992641-9162-4490-ae11-e3b988a452f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc0face-5a1c-4296-bfca-f56a476b39e3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef02ccd7-383e-44c6-8759-cb06c7080c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375f83e1-176d-4f10-975b-a10e0a1a5dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b11796-834c-43a8-94f6-e8fb28850f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "14823f31-bfcc-4894-987a-a78d10795bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbd2f75-4765-4208-807f-1921e874e1b3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3209a2e1-4b43-4e7d-a92b-cdbfc631b55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad081a4-feeb-4ab9-9238-554e25d2397f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf8510b-4cc5-4705-9704-fb035ed085c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45c9d7df-2261-471c-9f59-dc0896e36213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc706ba-5110-4bfb-9904-4fc0d72d9637",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a79353-df8a-4c80-b676-c8ea3ee06054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616bcf02-91e8-4dd8-a8b3-b00a23ae2d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bb52bd-3091-4b94-842f-782a9e5febc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f00189e0-2910-4053-a953-087d261bbb11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee522504-2dcd-48cc-9bc1-7657e5068de9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f17ba5-6e0a-41a5-83ae-d3b7f96f0c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d56fd9d0-e893-4b61-9f79-dce071fffba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfa81f2-606f-4ab6-955c-fcdfe938a07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aac8b07-4f0f-4d63-b843-25d5e5e2588a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe170253-5942-45aa-bf4e-a0982bcce2ba",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543c56cd-72a4-4d22-86c4-d7100c878900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1c8690-374f-4de3-988a-530c92048560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6be7807-b0f6-481e-9d31-ee9764aea684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eefbcc2b-d5c6-4a5e-962b-440ccdd35999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979ae095-2b9d-4c63-9ff8-55217446e7e5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c352a37c-37e1-4e2a-9eb9-e2e658db2b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99dc5a59-69b6-4434-8822-7753f146d015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf044ee-454a-4c2c-919a-806487138f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "76b499e4-e07a-48d1-a80e-9e45e91cb79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0d018c-a27b-4aae-8195-8e49379d6db7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b985152b-9b29-4b7b-bd04-1084ef854964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f11a20-2753-4225-a8ff-263aa1b7d1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dde53b-31c9-469b-8333-ff3244b8ee10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0bc82c5-e8d3-42d5-82eb-aa9cbd3f62cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2c9e5f-4e2c-4e7a-8236-42c431d03edd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1eb3f1-252d-4700-a0ae-0eef3729163e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098f9288-193b-40d2-9bc3-d6feaa989628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1881db-27f0-4922-a48e-f2e162ef867e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77c08412-5da1-4c53-9623-34ba9ec5e03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399d8e97-5433-439f-b927-60de0d8fe867",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16983f79-7d2e-484b-bb0a-aa76b9f524ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f26b46-f894-436e-a90b-c34418a683db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066aa315-70df-4eef-afaa-1e5add5f6dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1fbe7e1-42cf-4a30-af57-89c213a09acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbb8bc7-444d-4156-aead-0f441d5be1fd",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666238c3-8639-4bff-90e5-9ba1a671bad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0dfb392-a414-4f74-bd04-bfad9ee866ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2c85b2-6771-4769-a683-7fb64135d5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b742c1d-4a36-4fc6-9ff9-785a13d33ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8830b2-de67-4bad-9307-2f211b6345c6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb46bb3-b095-4161-bc48-442b23590b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408f0f26-a5f8-4895-8ad1-b487110e1c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5120e4-68c5-48cc-8438-627aa000ac16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e76dc0d-e52d-488b-ab8b-40373543f933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6f4eba-9927-4e8a-b953-4825ed7a0ee1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5137bbd5-4025-477c-92e8-b0c7c8bfebac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb10075-7071-40cc-8abb-37b8f36b2328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91413da2-cff2-4991-9294-48e176be5287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9442a60b-5c19-46c0-9145-4a505b068443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d491d0b-3071-47b8-a06b-d96591fa4037",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacc7fd5-913f-4ec3-b98e-4ce16e48b5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5232ed37-d409-4d5c-8aef-7c0b7682378e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2b820c-dd7e-490c-b8c5-f6b10c3f54f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "81a87292-21bb-442a-98e8-bb1ed3406f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb8201b-c18a-4136-ab51-6b5223b82c9f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b454d7-e49d-48ef-bd47-a4fe9b16377c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1926ca62-440e-463a-959b-73bcc3d7c3e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b75faaa-a6ac-48dd-8d28-befa8c427b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ccef1e8-f507-4cda-b731-7b3943d06941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1417538e-54be-4f15-8b93-5671b62fac60",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f068b6-a1be-4080-b6c7-cb6ff8fd18f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39962170-c46f-4857-81ae-62ecc1287dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecb6a11-4b86-4215-9f75-f623df108c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92795246-3c94-49d8-bf0f-3c9366ad8881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bff8972-b8cf-4884-aa68-b25d276e52a3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7065309a-0e41-49dd-b687-a55c9afc93ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457ea621-5fa2-4090-a229-a83582a4b13a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a48826-e37c-4be3-914a-11ecb10cfcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2755af-39f4-4c42-8d86-2468cfbcb519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1e6161-8154-46de-8738-8f50387d4dbe",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8551a680-0ba7-46c3-a522-7ef445a05aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d7fa9e-ddee-4981-8dd4-7eed55364079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a724138-30d0-43a8-a561-ae57b4829428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "768879a6-5c5c-4da3-8c15-ca206a04331e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4ad88d-7b73-4ae0-9a1a-7e41bef48d61",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3a87a1-5d11-4a7d-aac4-e699b9f0c72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2417e1-f2ad-4dfa-9d29-ed30fd5bcffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd14e2c-119d-48d2-bf28-f766d89beea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd401d2d-3204-4f3a-b8de-8b02c822c686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da08592-e115-47ee-a2b3-4a8c2107f3f5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "568dac93-3b5e-45fb-98a5-0417a63e2d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de66f60-4daf-4bfc-aa08-0f3a11364657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e36fda4-0f02-4e07-9a47-48f1d3f78909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cafe732d-4612-4ffe-9827-b9e5b8ee7314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07002c32-ec6e-4c2b-8cf7-e5c93c4227f9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b858f08c-15f3-4f1f-950b-a599c6ed2a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc45f27-dc52-4f9f-956d-2dc2d2307d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d9a2f0-e670-484a-a140-32c632b2415a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d23100-110b-48da-a292-777eb723e34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f91416-9f2b-43b3-931c-3f72f719c527",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ea97e3-ab04-4ac2-b975-dc4073b27450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ce92e2-cfea-43e9-8432-8e2903997f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e72638d-0b0a-45aa-aa52-ef567b18c8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "11209e56-2178-4263-ba39-30230b7cff42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ab5396-6d37-4823-9c64-626b0ac4d056",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b7c413-7c23-44b8-9bf1-fba20b0a7186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a521b5-495a-4b6d-afda-857dabdbc8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f404450-8951-4969-b5d9-e047de3e5b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b27f4166-bdbb-4183-bc01-c21606835139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fcb3f0-2fa5-4e65-beb9-85932f514499",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28762350-999f-4e15-b0c5-d5c2f7aeb7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2755b8fd-c0f7-4d90-bb7e-2edfd873ad1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b45a6d-4582-4603-96f3-a4649b1c403e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "617e59e0-bdd8-44dc-b2f9-04bf9d9cfe94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaeb7e9-89e6-400d-9124-f92270d128be",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd03d7a-5f89-4b94-94e4-e4b395f183c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "912242aa-ffe2-4956-9f52-958bbcf6cdf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7cd0e9-0094-467c-8bf5-5514f84708e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9eff73fe-7d5f-4dce-901b-99beb52cb35e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5630d68f-46d0-46a0-bb7d-f23d70e6bd7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d823c1c-2409-4f42-b74f-5f2e393b93bb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0668ce90-b344-4287-92a1-a9134577a26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5b967c9-8f05-47c3-a9ad-7d08b3b49aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b880fc84-70f9-4b84-b0d4-6d0745a0a7be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cceac68-edf2-4db9-a4e5-93f21a2bc17e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c495973d-be9b-4fff-868a-1f4fd0e9d81b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ce1fff0-792a-4277-85bb-540381faa070"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f822fdfa-7629-4d39-93cd-cef04f82d807",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc455aae-7477-41c0-b81e-4792ddaf0d70"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "72127e0b-2885-4ea2-a83c-6f85d56a1daa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "171cf89d-cfc5-4860-a48b-fd1cf581f29b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d11fb34f-1435-4e4d-a61e-b89a8f3d7a8a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f93b7e3c-0c5a-47d0-8a23-88cd7a7e88db"
                }
              }
            ]
          },
          {
            "id": "135936d6-bc11-416d-aae6-3caf94e6e547",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c93a8375-2369-475d-9801-261c43467e86",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e16a3398-a142-44ae-8b43-c5b0000115bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "caf8a912-1a54-40c9-8e5b-f769c68fe408"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c2046ca-2688-44ed-8c44-14cb87a6f98f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cbc40ad6-36e3-44a4-85c6-c92c24c575f0"
                    }
                  }
                ]
              },
              {
                "id": "c8e9112e-ee18-42cf-ae65-eda24c68e9f5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f668b61-b6bf-4f21-830a-459b2d3b0ae8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97329361-fc5b-4c51-927a-885da6a2dde1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cecd80e9-4c79-416c-814c-20cc77cad363",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "12998dbd-3c8c-4511-9e14-5508cc7ce4a2"
                    }
                  }
                ]
              },
              {
                "id": "411003e3-8cec-40d5-8534-fa25ddb9335c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ed6688b-bef9-4064-b23b-7db543cee37c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "742bde8d-4124-4e2b-9b6b-eba52d4df8c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "627dc862-78c1-4ebc-8425-4e8495b6a4c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "df033b8d-a4fe-4c0a-b994-d9ce1fc06366"
                    }
                  }
                ]
              },
              {
                "id": "82eee05a-7592-4971-988c-53815556a3b9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc605c10-58bb-4663-96c1-423cfd2c0e3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "daa0f741-9a28-49ae-86fd-40866ae8cac5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59445a86-9616-44a1-a1a8-664f21b3c340",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b093bd26-809d-49d4-89e4-a93775afa853"
                    }
                  }
                ]
              },
              {
                "id": "92f424dc-4409-4986-98cb-a0aa13337989",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f39357c8-e17f-45a6-8f7f-f11c30bd9661",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4461c9e5-4776-4032-8432-5ad5f0e51aea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15af3fe4-c397-436c-ba71-a1f4607d8001",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c42fd29a-81cb-4526-bd6f-66a026fddfe5"
                    }
                  }
                ]
              },
              {
                "id": "c25513ab-6b4f-4d44-89c8-954d12989188",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd58e2ed-a18f-4752-8d9f-2bc2913b87e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "711bfebb-1d89-4d89-9090-65bb7ad86fde"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ac86f98-b5db-4b8b-9154-3b23b3ef8157",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "42125a51-0f39-492e-bdc3-a11cb274a31d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "be83f44a-1310-4257-9ab6-2f5a98f6426a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ffca8fcb-5c37-4f31-9b73-6051100c7082"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "14a6693b-6109-4839-b7a6-cf8805f74c4f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "779f7008-799b-492e-ad51-af0a5d849929"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37a376eb-4bf4-4ccf-856f-350459afaf8c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9325b295-6f2c-4b08-943f-5620a32c397b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99a8a8e5-881a-44a9-a8f6-b3d2c416df82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49c5ad0c-a5e5-44f2-b48b-535a4a2c4dae"
            }
          }
        ]
      },
      {
        "id": "bce6ef0c-27b0-4aea-8afb-d894a929b1aa",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "309ebeaa-a60f-4a73-9419-0fa1ad0efbfc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6aa2f968-a6db-4cb3-ad7f-c2774a830211",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "518831d7-2cc3-43db-862b-3e597eecf652",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda0c30c-2bfb-4d4f-82f2-e59a075c601a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de4ab94-fc39-4ebf-8839-89f45e6e73ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16084e68-06e0-4378-9749-281a57b720dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cdf9b87-adf4-4836-880b-3dc56e67623e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b428d7b-e674-456b-aa93-c141513b07e4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ef3080-a174-4b66-921c-311097376952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4ef579-fac6-4b28-a9fb-c1d25d5e7853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc36ce9e-ea63-4469-94ca-ffaeeb13d05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ad30f8-39c4-43dc-8cc4-6f521e03e5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242e6a0f-fee4-4f1f-8d11-f61c04fa834e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33b5e12-1691-451d-959f-2ed0f5ba9d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe18d40-f393-42bb-a7ad-c6ceffa1e89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8bbab0-33e0-4dd9-8397-5dc780a30c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08235c2e-4d08-4b2f-a056-1a570d0d736c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3aadc1-7526-4e62-ba3c-b83f13a32b82",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de8d7e4-605c-4ad6-9832-7598c4fec09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f8475d-0201-44bb-ad95-66d36e97959b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5d0da4-31c9-431c-949c-3a104d1f772e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7bbcb22-3409-4243-91a7-38b819c9c4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1310a23b-29f6-42eb-bd21-d60f4613159d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bcb961-0347-4b3e-a595-97aa65f90145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde6804b-106a-4581-9c0d-389fa66e962e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12ea24c-ab4d-4aa0-8fc3-20e9a9289b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98c1d2e1-d450-4448-af8d-c7e70a41ef8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d3990c-dac1-4ef9-bdae-c3be56cd1b98",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17129439-4730-4bcf-a0b8-3a78239b380b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c0391a-1cdd-4caa-8938-20e526496448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1215a7db-e2bb-4545-894c-cce209288c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a6ef62-c48d-465e-a9a3-f2a5a57f7a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebbe740-3285-4af7-ad76-5ad6db690e1c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36becc50-aaf7-4869-b78d-3f7480f736ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12ad60e-43b7-4f24-8f62-585c9e98251f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8b4bca-eb34-4404-bf20-c4893c22e953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc8e810-95c5-43b8-a812-ce6d0c4589c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cfe14c-0c1c-40b4-acf7-0dffca5959f6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a949c61b-6c5e-417a-a654-2b80e7f05e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b63d567-dd91-4d5c-969c-0a5e40bef2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf29fc45-eb2e-4c2a-9cef-0a85e052b391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12433ccb-558c-4d8e-b7cc-568882227345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862c169b-5926-4873-9e0f-95ccf0d40957",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a52f2f8-def3-4441-a9a2-c78a007cdfca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67044b3-2634-4621-a0ec-09ef27668b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e63742d-4718-4f65-9aa9-f08ce6e07928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f792779-9275-4ce3-bff9-a199aa04e5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f176a5d-5bae-404f-a706-37d27fcf030c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6a90f0-adec-41ad-b668-98dd2da3bea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc4eeac-844d-4c96-b614-6cd51affdb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc02221d-bb3e-47ec-b1b3-3bb5496a58a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97c4a3e4-28a6-4a10-8f6f-c533c1d5356d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42aa9dff-4ab2-4a6c-b665-aa98374923d1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274c5631-95e3-4adf-b64b-b630acf418e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40c0789-1a8f-4784-9f9f-ad0946ebc285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2361f2ca-6632-4db5-92e3-8799c33ec6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c3603f-726e-4721-8558-9ac56fe3224a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1814aab3-6941-4cda-aa8e-90dd169bd20d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860507ed-ad24-4a2c-b71d-6a5d5c8d3e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297af703-1108-4274-b611-76af5a001a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78df242-d6d9-4d51-9856-089648067725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da5fd077-ba35-43a5-ac88-0a3afb14980b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8a7cf4-c669-4e2e-96e9-cf656d847897",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea075bb6-2761-406b-ba2f-8873e8cb8e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd427cb-67e6-4e8d-9852-bf444bf49227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f4a028-741b-46ef-95dd-f5993fc66758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21c72aa5-0892-4c37-8d8c-9426ed2001a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb9e404-b224-46ae-ae85-4a802aa558f2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e918c9-3799-43bf-bf84-1ff10482fa3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d83e9e-4bed-4acc-8d33-0ad10d208778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c4cea6-32a0-4032-9acd-ac9cacd57fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a13ee8fc-caf6-4384-abcc-ad16fa74c088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881f8585-ff58-4acf-af31-67c26e48f6a5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1150c91a-54af-45e3-860c-c4fe8ba62ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b788bcb9-91e5-400e-999f-4a0a5b54ea8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751487db-9ae5-4033-ab3d-54d00990fbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "30b65d8b-48af-4f50-9e78-3f956922d347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9346d3-9bde-4a5c-beb1-8c8d814494bc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de06bd8a-4cc4-4970-8858-0658fa837b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84abf235-c850-4fd2-af53-09e5c564fbb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df714960-e1e1-421b-a1be-6862bd2d253c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9029a9b7-f534-40c8-828f-942afdfff503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5badce-832d-48d7-9d82-982cd8c3590f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "418e4cac-ba56-41c3-a8bb-9e08a5ab0f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c71e2f-afbe-40ec-869f-5b459a698737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b20d2f0-9737-4cce-8537-0393c7091bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "76b9c63b-c1aa-41ed-84ad-9df26bc0e45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854b64c1-d5a8-4872-ab16-50581db0d25d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9a2cf4-eb4a-44cc-9c4a-3346da60216b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a500b56-87b6-4a14-ad40-040534691ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3492c1f-ceb7-41ff-963a-f18905319938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d72f1985-4314-447b-bcaf-97cdb2bc5566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2217d420-494e-43fd-b4a9-96a26c1453c0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97295fc-77cb-472e-aacb-e219c9f670aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437df89a-a982-47bd-817e-cb8bc6e6335f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09d7b96-a7ea-46f3-bdbb-1678da79467a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff43da2-26ee-4f56-aff6-f55e9971612a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7f219d-1a0f-4872-a86b-10e42921e0ad",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931ca4cd-82ce-48d6-9ea4-990c749b086b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782d6593-af76-4797-883b-5983316b0b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabf6c37-5139-4938-b927-15523bcd2ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb3122e-9f3e-48bf-9bbd-3ebfea1d4988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e37ed67-8c12-49cb-bdf8-b20334fa943d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ab1ee8-6610-4f76-9653-a9c85c14e8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c07384-d104-4abc-bfb6-431d40beb202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c2270e-69fc-4a30-b67d-6f1455c7bf57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad1c800-eb51-4374-b2cb-04aee8a1471f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1473b409-bc8e-4a8b-bb86-dc8c13946a20",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d840de-1efb-4662-b034-d3f46c3966b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f63df01-3779-4080-9d9c-db0b06cbba50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a9ac67-3cd5-4d9f-a159-650f4f7f9e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9e3c86-6b73-4c9f-9d9c-b178843b7f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef470c98-7eb9-4b47-82ae-6ef8b8647a8c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0b98f0-3fef-4c47-9df6-7a4bc2ec32f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32a3ee1-24b1-4753-8f3c-dd11a23eaa8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d859f7-64ba-4905-9be6-db69ad9d821b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8555b258-81e3-44d2-a1bd-0f8a35d78fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b3860b-7ec3-4746-8d15-dad3b553405c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5d2d96-db21-431e-a018-be596ae7ba00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8243583-dc94-41b4-87fc-dc0cffccbbfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2de200-244e-49dd-b752-f75852f4a2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eab3b5e7-3ee5-489f-a66e-b82d0e7ae440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226c08d1-ac39-4891-ba07-db4880de3b9a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4411f81-1904-4365-9e01-ed7789aefe56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f1e9a4-0e58-49f7-b682-cc0fd6e02d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8be4c5-35e1-4192-9233-ed592f4b0915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "850de628-8913-43e8-b5c6-315d97d9db5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffaebcf-61bc-442a-9dc3-d6a4da071354",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6937ce-7a34-440d-a828-9f16ac21b541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca3ce8d-f319-4fca-ba08-e5cfa02dd2b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f906a9-852a-4fee-8f60-cdadada36512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a71365a7-e6ff-4d2a-bdbe-ba63063b36e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961bd4e8-38db-4289-b424-1dc46b2cb179",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb94401-7385-4fee-9c9d-fbd085731451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adac7663-3d0a-4d77-8a0c-2108ed7ee03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c853e1a-0d6b-4dc3-ba3b-45f91521d2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16c82e64-9a2e-41f2-8a10-0846b0679d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735bf74e-067d-4b7f-b5aa-74fe495e9180",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa4aab1-c774-4554-a49e-259eae92055e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c90ea6a-74f6-401b-b546-1e2bc3ba717e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6dcb93-e91c-4f90-b94b-744243f8779c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e699d3d-60eb-4c85-a88d-c0aa891dc626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16f6ef7-fa51-4e61-9043-addf9221708f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16317de8-9a7f-4242-8373-eba39890d83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79acbc8b-e023-44c6-accf-c08e9721cab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51780177-3611-4d0a-97de-4d3079b56148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "deae8dc2-9d28-4ada-b707-36ed430b4c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9c4fed-0b95-4e02-8ac6-29489859e365",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b208c5bb-7e58-430e-a1c4-e2308ecc5300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf76657-4611-4a1c-8175-d0adb5393ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0707d6d2-870e-4e5c-96aa-76055efad552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e524242-f817-4275-937a-9722c733b6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7848f815-8755-480d-b8a9-00f57353c27c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0cd583-4c6e-4718-a376-41c69979f002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c33b6b-f0b2-47c6-99cf-07ff482271b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2406b0c-5ef8-46f8-a59c-4f16f43fb97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46d51dd6-605e-4b25-9a65-87b03f23233e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415de9c3-10c8-46b0-9f85-994a95b10a45",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bfd7df-f56c-4998-81e3-e55814904ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6366691-996f-4f82-81c8-43f85e22f062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f6f875-03f0-44af-9ce3-5de82c17843b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84cc34bc-f4d6-468d-b562-93d4fd66d6ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "82f79576-d6c8-4220-b3ef-369a015b7ee5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a63e561-2e40-4409-9510-03062570cd83",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89a4d6e-b80d-4e0e-9a4b-8156eb70bf09",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3464a601-b17a-4e1d-a3e1-fde988ae339b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd76c862-2230-47b8-8043-f939c48664b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "778c7d5a-0da6-4a12-836f-220336957a18"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b387b7e-0b99-4904-a626-0c26a4ff0ca7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d495a82d-a529-4c3e-a886-82b1c3098f93"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b5ac641-b334-4c46-9d86-165e7ddc5252",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77a9e1c2-7a76-4628-b5ab-6d48505e7a79"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "793dd073-c9bd-4966-acc9-7396feaf085f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "264c469d-2f79-418a-ac4c-b8e02c476080"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce0f57ff-8726-4842-9731-68c4fbf2c514",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa33a98b-57dd-4dd5-8739-af09c627ab43"
            }
          }
        ]
      },
      {
        "id": "74da2c56-cc94-44f3-8e8f-35bd6d66f6a4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "37146f11-71a9-46c8-9093-4d9eb0cae6cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70bef3f5-94e4-44f9-9004-598d32cd51cd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "71458feb-796f-4af2-903d-18f6de5a6f43",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d1bc7f-5a80-48fd-b3b5-8ed33531942e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14bb4808-062e-43f3-a749-cfd687b58958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6decc280-c85e-45a5-a2b4-47f3bd0b5cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1d345b-7dee-402b-93fd-aaab7abae0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47da78b-7e3c-4365-82cd-a8bf4e195931",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb733dc0-95d3-4047-a3b8-60f8994614f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e07394-2e41-4edf-8e7b-0ff37b34e6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c2ea80-7c79-4a98-b96d-916e00f2bc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6691a611-63d9-4e69-b48d-6cd43fca0209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4042f9-73ea-4f4c-af98-a71538219a36",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8988ba23-3152-4320-8d28-6a2e837892b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf854b8-b6b4-4acb-9cb6-2d468df98b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ca8c16-9998-459a-a25c-29a524941580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8af56b3f-7070-4b8b-8567-42a18d234f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824d12a3-d83e-4ebe-ba79-62760e5a9bcb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84d22e9-5428-4679-be86-d2ed6a54759f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b62c78-636f-4db6-918a-237f7dcfdce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2687d021-5e80-4566-a05c-9be84f1f485f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e347aac1-53f8-4e56-a491-f31ebf19ab86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8871d0b-098c-4d75-80a9-c89ac47a3ca0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396ad15f-ed18-41c1-ae83-bbf22ce1fe53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ccf4a7-9ecb-4b14-8d10-8af3e751cf95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9f6f54-81a1-4867-b954-763b816a7560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "13693ce8-f74b-48cd-b07d-1b77a6f8e325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c279aa3-4a3b-4dff-a010-ea2755ff42e7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf64b01-bc82-4c7a-b191-5b257cf7f5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2da9beb-86df-4573-88ea-4fc5cf157283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c7a383-2628-443f-98ea-92683055f9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6de9c18-7ebc-4ea4-9a95-777958381777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cb1240-bf78-4198-bb7e-1b8f6fc12101",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6936f673-1703-4150-9b08-52971994f6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40178e29-b2f7-42dd-8277-331b3b1cbfc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e714762-7c05-40ca-9e15-1ca74551fe5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "be8ad921-5a33-4c76-b33e-5f2ae27f0ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a016c3-b0c2-45c9-b921-8ab53526abcf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed58e0e1-3f70-43d3-aec7-a7567d0c3b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff467e89-a33a-4ad5-beb4-3120a82a1580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac29bd31-c580-4192-9cc3-0eb973c03809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55b43fc6-237e-43d1-b4aa-0d754d9dd80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9a2fb5-95c6-4863-857a-046ac67a5df7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc94055a-ad61-4a4f-b55e-fc8257b7536e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb8ba26-5c55-412e-b9df-44b529a1e9a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b007662f-ddd4-4987-ad9b-891c9d53c761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d20b0a3a-93d2-450e-a5cf-1a220d36eae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2ac15d-eec0-49a3-a19c-f2281f8febb2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b174ce1-f0df-4598-893c-fe97f0526a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91a5b60-af6a-4dfd-8cf2-f6189d62400d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e0dcbc-a22a-4708-9263-c411882547a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbcf398e-9482-4796-9816-1be5db0cc147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900d63d9-4553-4221-9680-08a0df948c47",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bcc1e4-e453-4cfb-b764-9ff948d97680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8586367-e10a-4961-a0c7-2bb179e7fd5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d44690-0a79-4c63-aae2-b8044d6b262f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "77318979-3735-4f3b-a467-e72c451e599b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025891c9-12b3-4781-b733-3fee9710acc6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7e4000-4be4-4516-b1e8-d17909dd6ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6becd5-739c-4d20-adde-921cf0e4892b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbadfe8-46d6-4e52-8076-f0c9570f7a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19ed301f-7f75-47e3-b998-18b9bf51c373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa59156-e8e7-49b5-840d-f0d0373dd394",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce4bff8-d14d-4bb9-9411-ba6a32f49595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf152058-2775-468c-a1e1-d210c5eb7a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e3007b-9089-45c4-9815-d1f497be64e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf92a71-8540-4b6a-a920-c1cc8d98c7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898fe034-1189-410f-a1dd-ca206d86e36e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d72adf1-f140-4c2b-8228-fc47a11238ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e9a56c-f06b-405d-bd31-21782c5c55e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a07c3ec-9d76-4721-bf59-0ccab5ff7114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "71e6c4eb-e320-4749-abbb-90a4cfc3eb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a259a234-7983-485c-8512-2c188f750f04",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162c8340-343d-4d7a-875d-0e3f9a658097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa8cf05c-9915-418b-ada2-c5fdb3c5a945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e29786-b5c9-4013-8c10-fc940ccbff31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "249fa065-ee67-46c1-815a-f8ffed79f8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb41d44a-f650-4be7-859b-3afc1b30fed4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6307f602-4626-4cfc-93f4-a6b6a1b2ddf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "115958e3-5a60-4146-90b9-ff1eb8da494e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1263f56c-e0a7-495e-a8d1-60a8ec1de6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7136392d-1dfe-49af-bc56-051d70591d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c979829-ec6f-485b-9bef-ee5220b361c3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f02b33-4903-4824-af73-af2fdd45f422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f38a462-ac5f-438d-a03f-4886dd8c3ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41581478-b896-45f5-ab36-d519c39418ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "35804f7a-4cfd-4d63-9b6d-5733d7dbe865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95985bf-33ec-40dc-b949-57eb44f3c084",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f015dd1-0326-4749-b5a5-cb2e511a49fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ddd31ca-4a65-4f53-869b-4380cf11b382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cce874-3054-4aa0-93a0-3bb1f043563e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee44cfb9-7b63-41cb-ac2e-87ab96d686cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0617eaf-33d5-4c12-8682-56b894ba004a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2c2a3d-3c4c-4be1-97d0-fe979ad6afb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8a0560-b5a7-4ec2-9856-c5929dfd2f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51ed9bd-cc85-446c-9413-a22fd3e93116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69863e8b-1576-42e6-8c98-04b2ba06bbf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ed7b28-d143-4599-a658-ec4f0267712d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf06c3f7-4c04-4d6f-b826-a985d876c887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec48e75-2ebe-4790-ab80-b9518420b453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b447a53a-cdcc-4253-89ad-a82941bb871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31359cd0-1591-4159-ad13-7d44a93c5cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39747e63-b3fe-4515-8b38-d68f416999a2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384cbb74-e346-4c72-a8fd-28d99c93a340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e214c56-cb50-4bb7-98e7-354ba4c02078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5b6279-2e07-47f8-a0eb-d03cf3a88eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f226bba7-9575-4d39-a889-711c5f2639ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c78fa1-aaa1-4f1d-af6c-a85cbda571a5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525b031a-82a4-4ce5-837b-01b725cbe973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957f2e63-05b0-4a6b-a56a-e72d1206da96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f72493-8943-4bf4-84d7-babe0824dfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "984d6357-3e44-4ce9-8086-96d0b6a51e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d7e40c-4bcb-4960-bd3e-fe3f5c5302ca",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6a2468-a17f-447d-bb6c-40beaa762d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6d99cd-2a1d-473e-9d45-c02d0fbff7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c59cc15-6226-4c4c-9b49-603e2b7dbb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3937265-c984-405c-9525-c5f46886695f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9b41af-efc1-4dc3-a747-38dbba8b7c23",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a756dc-5fc2-4676-be45-6171419d0933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4607cd10-3693-4368-997a-7e50793b0370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa693857-245a-4be3-8686-9230f876c1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba0b28b-ac8d-44cc-8b39-4d024af45fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003d7413-1688-473b-82ca-8e1b9c8690fe",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4780cb77-e78a-4325-b4ce-6311e489111c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752fead9-ba62-4695-a874-58db96e1531a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dbdd53-50e9-4c0c-96dd-186592a10db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd64136-c64d-4036-befa-883a35cc4e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19eadd96-71d8-4130-b3b5-6a63f4002fe5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b11900-f2a2-4358-8760-a512f1425018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2eccc0-7f82-46d9-91b2-b109a6c90720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38366ded-c31d-47ae-a8a7-a70858ba14ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48908804-a690-479d-85e8-e08e6791cc26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994b1b62-f68b-4443-8115-110d3408d4b7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3391b10-4902-46ef-bd27-456cd1e6be9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15615bd8-a6ba-4c26-909a-eb394779b0ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c657633f-994e-456c-ac6f-a55adc1f2631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76978015-6158-49e8-8db8-f491ea245325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327f6f1d-0f25-44ee-a4f7-98ea15e9cbae",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c52ff38-d153-41a7-b505-18dc07751937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27651cfb-e7d0-4957-b0cb-6c09ec5861dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0b97f2-c67a-4615-8a5d-ecf16fdfcb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c23d2451-4d34-4d16-bdb5-48fd57d86752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1496853-8648-4b36-aec7-40a263829ca9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecaae56-2436-42c9-985c-a80353b0da98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf25cd3-62a7-4fa3-8fcf-e91a17ee4a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99380b3-95be-4d94-a13d-61df169db7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dde0a907-b736-4a57-9369-5a22a31b9ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ec0910-4561-4ee1-8f1d-effeef0778d6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5334c939-ec05-4de5-ae10-cb54e4099ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cccc4e6c-dd27-4ade-9cd1-18c461215d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78040a9-85f1-4b76-96ea-873af5683317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f07da750-ebf8-46c1-9599-0a399923876a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e94370f-d9e8-4c27-8a5d-96e88546e130",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a17c2aa-fb1d-499a-8c22-b1cdcb50ee33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d867c9ea-e0eb-4dab-ac41-49ce86ff50b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15937f18-2b5b-4aeb-af7b-603ce1e47ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75b806cb-503c-47b4-a26c-d1838520c2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc91f0a-67cb-4837-93e1-ae666379c466",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d373226e-41f4-49cb-b593-1b061ea74906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857119d0-4248-4629-a397-a46930d3b96e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5eb1f2-b15a-4122-8d9f-56a8f6b539f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72bf318e-52a5-452d-b2ad-2851cf13ebad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a2ac93-6dcd-476b-aaed-ffc0f9ab1d99",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15673d65-7211-4af8-8645-3a0238af2991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebce17f3-4e9f-4c0e-b556-faea3abdf553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e41f87f-feaa-4672-860b-c53485c98c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f77acb4-b65c-4b08-a280-3c5f6d43db89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24e8b5d-e9de-40df-a03b-4689d82e132e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc81af7-4f0c-4ad7-8c83-64ca1613925c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade703b4-8642-4b38-88b0-133cf71bf6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083a8977-cbd7-404e-9537-5ad6b62beac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75a6b7f0-eb84-47ca-a0e0-e35098551d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5e1bca-fb9a-4b49-b940-1423b1f5c81c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc0bfa9-4c61-4c4f-a2c9-48d8914d82b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e055e2ef-3409-41c4-bd0c-a7c4ec63e35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5279458d-4952-438a-8672-c36ace5d9ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccebd310-2808-4164-b6ff-17978efc3716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a245af-89d2-4d15-907c-788808ba3af1",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafb86bb-9462-40cf-8ddc-9893fdf087ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f561e95-73f6-45b0-b593-21707ec7d5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54267c74-d389-471f-8dcb-a9100cbb5071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "537d4354-10ca-462c-9d4c-336f6234c73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0f3d4f-677c-413d-8ee6-c0c05ccd05a1",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd0f066-c742-454b-8abe-16d5ce43c204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d49b4c-a8a6-4428-bf29-861d96d935c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c8609d-605d-426f-b776-4195c54b1bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff7a87f-15c2-4cf2-a3d2-d84db847ffd5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db1e8eab-8509-4f66-9a10-c121c7d437af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67fca8ca-45a1-4cfe-a2d0-0b57d7f7b1e2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a1b4e7-0972-4917-be7a-0478a9f11630",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e5471ee2-ccc8-407c-af83-b671962f3567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f9293c-1de5-4d34-bde7-eb30ff8b7a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4b391aa-00c1-4e5f-93c5-1750c2acf8a2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df6f5101-7d03-4bb4-be3a-40bc3cb6153e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddccde70-11da-44c0-86b4-4f8c54396427"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31b42860-c307-4653-94ac-f7fd97497fd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55fb1402-f7a4-4ec5-865b-aa77c5034b9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "caaf7526-d2e1-424e-a408-ee4b1aef2ef9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "434c15de-2bad-430c-aea8-f699efd692a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "532b023d-839a-4be7-9ef0-95299fd68b3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a437928c-1066-41d1-ac24-75b9bb184021"
            }
          }
        ]
      },
      {
        "id": "2cb845e5-d5f3-451b-88e4-73cb213fb033",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "dfb4a7f2-0e7b-491b-8f4c-c86668a06821",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11d7b458-9287-4056-a5ea-de91d5723cbc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "30cce08e-742d-4d30-a971-648e5a6cf841",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327e7908-0c65-40d1-8bbd-6a1fea86076f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8903de03-fbe6-4929-b5b0-f6324087688a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9653fe-da50-442a-8e74-6701f6381a8a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469eb901-5962-4d1c-bc75-afe0f0376fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31944da1-afe5-4e35-90a6-989ad8acd595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b59f897-7dd1-45c4-8a8e-f0cb74dabd5f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a946aaa3-25f8-450c-9a89-f3f39a46fa0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885443fe-3716-4f1c-9f5d-1425ec7c11e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda9292e-16cf-4847-b8c7-7d096f07c04c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87fc483-d482-4f39-a31b-4458c666e3b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd20bf7-d415-429f-baa3-34ad25776f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0ab6df-a57f-457e-80f5-be0b214b55f4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7730b257-8f90-43f2-ad23-5fef5932a263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b3d619-ffb6-4725-a9b6-27a85c296401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cb5c98-ea99-498f-85c1-6c7970d204ca",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64d5638-50fa-478b-904c-32c42c5464ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f654a999-3fbe-4437-a9e9-00a43fc349e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b77b73-ccc6-489e-be9e-fc40d0370576",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4633c85-71d9-493f-a2b9-6281cfd8fb5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7533bd-9333-45cc-8008-095542bb1e1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "624077ea-4125-4daa-bdd8-175c8327db93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5196b8a6-c534-4a17-a251-aa2a9cf72664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a091a78a-50dd-409d-b6cc-93d34e7896ee",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8682ba20-3720-48ae-96f3-d9f544c43024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cc95841-0663-464e-a1ad-57856e4c38c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9656420a-fbfd-48de-a046-e6362b41b129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fd00f7-cb88-4871-975b-d96d0ac90de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c88db74-1b77-4f39-9bfc-63ccae36884c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee47b27-099a-4a41-b50c-20da4357e6a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e3f5545-ae50-43af-904b-14432d1fec3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c92af6c-06e0-494e-ab1f-64c55cfc482c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "570c79dc-faaf-498f-9950-a0b348391c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f9ab8c-0199-41b0-b80f-5bbde0719468",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8340709-d5b3-4984-ab63-8505c83aa35d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f7d0f9c-568c-41cf-afb3-2bbf2a66cbfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5c1d28-4715-4c9b-b0b8-4351a98af660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb13ea0f-165c-4bfe-9aa0-cdef5d724390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1bbd3b-b5f0-4193-90f4-1a4941ab1682",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f39a1b-8d73-4e10-879a-ebb94b43a414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3863a8a-3a6e-4365-a769-c8749b901c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dc3a05-383e-45e6-89c7-4350320d8d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd6789d3-02e4-489e-8fcd-d7e0f1b83076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df98b23-5784-43b5-a8c5-552d13e14d36",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975e24bd-743a-489c-9a1b-f2e6cdc22a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0696e663-216a-4708-87a2-ff0ec4f8eeab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0997be50-0cb0-4cfe-ae08-2698f97c2fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db4e2ab7-4630-436b-9c85-bd2dccd634b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75d910f-efb6-4247-8ed2-7d3c1e948d50",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a09179e-c5f6-4184-9be3-afbc4a53fc02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56c63161-7011-4d09-900f-de24f80fd26c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f8d6d0-f879-4830-8075-67280b931f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd132fa1-d977-4995-887b-17ecd5b203a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d060dc85-43be-4e26-9a55-c9c5f3b358c9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf17b974-4349-4c76-850b-aff646ec4ee0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc15dcc9-302e-48d3-8dc2-05e1d55e85df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066470f8-1842-42b8-8a64-eff15be8fb67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146751cb-31f1-4c7e-a59f-922b07b9982b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdf4b04-befc-4511-9cd3-c4a23091e265",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf51574-823d-40fa-b3bb-0fb58d0f5a38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce93810d-de13-4f8b-ac77-81c9249ef478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22ff64f-dab1-40f2-8bd8-b1059d3e6860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59175926-9ae6-460d-b0b9-9ddafd01b2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85069b1c-366d-4b38-9f1d-6ec584c41f9f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441945d8-a51c-47c0-82ca-9876722be121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dea6c3a5-3679-4772-bd93-75f302e36dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f26bda-1e2e-4a24-be45-5669e3cecad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4ab37a-675e-436f-88a3-089da83bc936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d210af29-f2c5-4821-adab-4bb4094a2e0f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbedc17e-d591-41f4-9352-f6752372cbf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c880f1-7ed5-4161-8915-6cea156c37ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860b5967-9733-4242-b9e8-abdfba78b927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af3b1d0-3ed0-4827-9b11-3b088f7b4e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f886b5-d0db-4399-bc37-0b0e6364bff7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315bdbce-5727-46aa-9db7-aa7cfdd8f4e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f01b537-ecf2-4299-82be-78b14e80ac33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1378066a-a4a9-4284-8bf9-7121190d7536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ea4720-4736-4e1e-ba49-ea8b2f8b2e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5962b1de-bf54-42bf-a7a2-bfda4a1f9c81",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3baf864-b363-4e2d-8801-d248b50ed39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c7214e-e4d1-450e-a296-7c6ad6a97117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2a40b9-6030-4f90-a7d4-b503b418c290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9795f1ca-7443-4c05-9905-a42b527dd98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4babb1dd-7280-43ed-a33f-80921902ac7e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0e5cdd-a57d-4eb0-a74b-aa2e5b00746a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ba1882-6739-480a-89d5-6fe8638ec48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e63535-9a31-4867-b1f5-e7dda26c4e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e477e09c-9b89-439e-ae43-0847813ab164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40742afd-fe7a-4cc1-8319-c99cffa5f488",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00320932-82b1-4dad-9d9e-589aab9ca7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3246d366-f447-4409-9f9b-b2ec1ae4abd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984f0bb0-7aae-4a80-ae37-9bd2f5841d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68fbf3cb-7174-4be1-8476-d88669a9f7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654a1c56-a2bc-4716-baf8-604065e84923",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e3533c-778a-48d5-94c0-cb39e9207a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64734331-b925-43b3-beef-47a0b2c07ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b221ed-8151-4122-9e67-07bd1b4b0f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82514865-80d9-4cad-a107-cb7d303def80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4063d392-c0a6-41c1-a0a3-5acac54c2bc0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04049d94-9a93-4983-8fc7-7fd7ae8ea05a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0345bf-8115-4dd1-9f2e-d671549db3d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fba369-3584-4004-9009-a45c1908e2b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543f83bd-01b7-4a0e-84df-3ea7138c4c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2988cb-4841-40b1-9ab8-f7bd3472ae6d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5534de26-eff4-4b35-8092-bfc0a3129eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c9f6f8-250c-4d58-b92f-02fbc93db9d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26299a0-b3b4-4f27-8c12-27de96f2a0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618f094c-de92-454f-97a9-88829616bf71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffe2b0c-94c5-4c34-8c9f-af1f852c9f5e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f99a3c9-d204-40de-a94e-7249fcb841b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38f3466a-e56f-4cbe-905f-666f3c84c1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd4ba3d-6fb9-44a3-96dc-edf7ab3773a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e88e09-647b-4c2a-80c7-4f10a749e30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7cf73d-5cb1-4d21-88d3-57fcaf7affdf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef20ea9-042c-46da-9ab3-706f607bc57d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dccd0537-bf3d-4418-b47b-c502a801a9ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df5aba5-973d-43b0-bc79-3cb562fd6fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88185f86-a2af-4c40-9266-ea1df770c7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d7fd10-2253-49e2-8266-9f16de58c961",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a71d07-9498-4767-8d6c-dcf9a795a600",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32272c85-7732-481d-8504-6f820c47ccb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9241b91f-4cad-4435-bc72-8d3a1b720feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d908c6e7-5861-4383-b2ab-43d700da9018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb5a2a4-ea59-4d15-8f3e-4d1467abd7ed",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfba7fb9-f156-4083-8f0a-31e8325ea48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4825e3d6-1379-420d-9d7c-9ff19b687ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393db91f-f014-4b7d-8a06-aa0c32352091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41083f7a-80d5-4aff-9320-e74f4d1a7685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5891523-4c1c-4bae-8055-ade0a174e958",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20795f35-4cdc-44b1-a13c-8fdaae471882",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47bacb88-52de-48a8-bf83-c12be3434935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d989e1d-5f2a-4c72-b5bf-96dd706910c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a82735-1ae1-4403-bd9d-1074486fd2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aeadb94-02a2-4fd3-9568-e16baa9a9d64",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f5d433-ee19-4057-8b12-bcc77f6a795b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0a3b83b-8088-4758-be21-b93879857111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a20141-606c-4381-ac41-34962c6647e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad3bb69-44c9-4d7f-9780-9a2e3fb9b498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e948cc7-7d7f-48c1-80b3-b03052558fb7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b379f3c8-7325-4d48-9c5d-9d48b5a2ec32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e03ef01-38ac-4082-aec7-e8c465e6dcbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd8d88b-dfcd-428a-8e8a-6ab3524e0862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d1a3b50-c4c9-425f-b721-ef54f1cd5342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51ddd9b-da53-4b2b-a7c9-3193529bf04d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225bd876-9215-498b-9a0a-59686ed691eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afa5d49-0f6b-42ff-a6f0-d8d4be5b2fc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4fc56d-ccde-4571-86f4-85f172436817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba5c953-1028-461e-a697-410c097aad7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8415943a-cb6e-4d9c-bc70-124120a14c49",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de8e8db-2338-4029-9cc6-4760aaea79de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76f1736e-11a2-42cd-a910-fdd86a000000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ae7548-728c-406d-814d-f634143693eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d96e09-af99-4d8c-b318-60d6b4d3b920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9db16d2-0462-455e-bff8-37a5062e00ce",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24a3d35-9505-41a0-8892-948a97073184",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "567b42e6-2366-4cec-91e8-2d107003a7ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b79e80-60b3-4fcc-b933-769841d9fa49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cea6aff-cfe5-4bf5-bc14-041806722fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f25045-e4be-4a60-a746-3c8b7a384eb6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194fc3dc-e1ea-418d-aee3-98cc1a1386a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3ef04a-3707-4b66-896c-dd4c53726cce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0db93f-0717-4397-9170-16823e525b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48fed6a2-2eb5-49ee-855f-7f95f9524c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6fae19-e74c-4306-ade9-fa6d79e05312",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9409c9-1e8b-4069-a95c-8a5999f4ae87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6806ea-c345-4248-9580-d7b571c4f05d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc67c45-2f34-44b6-8b9e-f857dd1c9bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05bfdfaa-23f8-4b11-bbbe-93e1a79081d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0082bc-c9ba-41d2-880f-a7a7f4271a48",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5f273e-168a-446f-846c-0b00a450f56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa119ebc-59c4-48c5-9a85-7ba30caee967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642f90fe-273c-4c6b-a85d-cc7a11d9aebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62cec94-7b00-4e25-977d-3fa02f220a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b65ebb5-e783-4760-b2c3-8dabd30ffba6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7c9d5f-40bf-45ab-94de-ab081d91519a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888d6c7d-4061-41d0-89ad-e67198353a01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9f3958-340f-4a97-80c7-5c14f2f4de61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d1cde9-c7db-4d2e-8e51-669402532dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98dcf255-26bc-4cd9-b6b3-618b01c78466",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d6e3e9-6458-418c-a3f4-dd5ac6d1ba9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e072ffc5-f6f1-4b56-9824-f4db83190317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4a8cc3-2c43-4e29-a505-13e707f1bfd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09ce8ce-8693-49d7-b54f-4731ce26ddff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72c2dcc-5547-43c4-b167-f54c4d0a657a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36befc4d-3b6a-4cdd-a0b9-b673f87a0860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d569cd46-5041-42b8-9063-cceb06f81e52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c1a94b-84ed-42bb-9ba1-da20d247f2be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6511178-3ca8-4bc2-b016-f8407597bcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27caed24-73a0-417d-8c5a-40538763b267",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6dfeb40-91a3-462e-ada1-8cb621984c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5dd3c5-888b-44ae-829f-c43b94f4bbf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab7ef38-8a03-491f-9316-db4b3662dc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d9c6b2-e693-4a4a-b451-6825601d64fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e409e03a-8426-425e-a960-370d4112145b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd93c606-f84a-4248-bb52-b70024830c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73b233a-8389-47ac-bf80-a83d9f21ca05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54894178-de49-4f5f-b48b-d01c85309442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae3a981-16d2-430b-b074-6cfba2dd904a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ff71f4-775f-4f28-bef7-1ab73450203d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58a249c-0bd0-45b6-9fbc-afd9dd4351f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7375686-1a4f-44e3-bcc9-6a2ed9efe87a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b7ed6b-baa8-49aa-a433-3f8d0dab79a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72729e9-6f35-42ef-9327-cd11de1334c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f4841b-258a-476f-ab80-be24f0f47fdd",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3708f43b-450a-40be-9e0d-434159d53cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79cb1b81-cd6b-4405-98c2-3f977c811b79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1b8ddc-e5f9-4597-a7f3-0a7c69be0590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a284489-eb83-43ee-97ea-4da276d5d8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7112ae7-8626-4a05-8745-d5b33ff6a817",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d965ee41-4d62-44eb-a523-106a893365f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8597efc8-ce76-4ee1-8159-6f7809774f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31999a72-8c77-43b8-96f6-50bd4404b36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06806293-ad2a-4a84-bfdc-2e5ec1afdcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f6c9c9-bb8d-4d83-9a3b-4de5b8beba02",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48d3b20-ff46-4177-b88a-95ec9e13e032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130c3513-6e04-42e3-b87b-e17106e5eff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a2ec15-563e-4c94-8667-d3258ec7329e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ada0332-3483-4877-83b5-6ac7d9468ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84366fff-5dda-49b1-ba1a-2feb2a278506",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837a8aab-62ec-4daf-8cdc-19e4135fefe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d1d60e-0f77-4d43-b87a-d19c93668c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40fcd54-c026-4473-a66d-783dc3da8cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c510de6-2f56-4209-901b-164f244a2705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2788c657-e22f-49e3-8d55-6f1f712ca07b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a4476f-a30f-4baa-b643-6b5d3d5579ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5e9022-73f7-4cd1-92af-43dcee70efe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfbc246-6744-4f9d-9f46-a66005e3da90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d17e1f-cfba-461f-be81-64a2b98fb82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d5c658-4a01-4ec5-ac39-ee64c16fc86d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c270f387-b0fb-4f8d-9af7-4875071c1845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53fdae84-b932-43e3-bfb7-3e482e8437ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab91366f-9461-4c25-824d-475ac339c487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1336309d-ba47-4455-84b8-72cb3eed777c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da263db-286b-4fe2-9491-eec1ca91d6a4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd20a7d-3f76-45ee-87ba-3a052dfd10e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547cd365-bc1b-4b81-8e9a-260277fa422e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4095c761-2a2b-446b-8c98-c1b1dc275114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d55a4c-c149-4ef5-8178-bed906dfc4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2351d2ef-f4d4-415c-8840-9a336233aec0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eae6416-251b-42c9-b632-708e8c1b984c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf024454-8421-4422-a695-a7f3465feaa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2964571-2438-467b-8979-16e104862d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1803858e-0365-4375-b495-b0416802c6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d67600f-6524-4f2b-a404-630dae63024a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc4eb23-228b-472c-b6b9-966fa4e46f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1712c6-0334-4e9b-8d3f-ed579a687208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6896bd9b-98bf-4001-9fd0-4de6b87e39ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b25b756-9ef6-4cdd-9c76-99004bce108e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1723e62-aee3-487d-9dcf-f3804d58f6b0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c0a209-bdb3-43c2-8ba5-c6e2ac4ddcc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201f1b54-25e5-4f94-b3b8-eb45a04c78e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f73d52-e789-4775-944c-bc1a17b2e02e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0fbe5f-783d-4f35-b353-38bef82a8bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7260f29c-e7d6-423e-bc1e-c539b2b459a8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e06798d-bf1f-4fd4-ba04-e291e8fdadd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c28c72d-1075-43e9-bbe7-426aa0198ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1e0384-e306-4f0a-be8c-b49ea1558d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e60319-25d5-4d9f-9049-5f1f28bc63fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1651ba3-8afd-48a3-95f0-f65bff7af9b6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b6d4be-3b41-4ee0-b82c-f8349e1331ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc5adb9-6056-4931-8ff8-6770b1712dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bfe5ff-7594-4a66-9be1-0f9d377d52bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1198cc8a-9bc7-4771-9c29-bbe437e30087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d69848-b799-4f44-a480-588d5f96e2b6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bfb961-b512-48f4-8d2a-f98d583f8a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4e61c5-51eb-4fdc-8216-d71a5922ba3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a9050c-021d-4b73-92c9-160f0de5c7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9955409-4e61-452f-9e38-73e5b70be37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45af94b5-8cb8-47e5-9b89-5e29d8c8287d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00288b92-9fb5-4168-90f5-be1da2b6933a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178b1db0-e16b-430b-b19c-35c7e806b69a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d664086-f233-41b0-9f53-99b55b4a8aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e5a513-394b-4bb1-8155-0b55ff4457d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97de8f5f-fd8d-4319-89b7-0d29f79e8101",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a971aa1-8fb9-4a43-a25f-7069d96c925c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cdccb88-3f6e-42d4-8263-14950e51f373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85614ab7-9be6-4c95-bec2-341617b7cbe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b3445a-7678-4fb1-902d-222075cd6b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c19a16-63a9-4400-b333-675dd688811f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a110ac1a-131a-4d3d-8b92-7f1e2d6643b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e974e257-3046-4256-89d8-39982df97d8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c924ef-25df-4537-a7f2-2599721bac22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f216ae-d556-493b-88c4-c4ec7ec9d208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d848f3fe-d1b7-4c12-ba12-6a83bdcd7182",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd09f289-b26c-44d0-8951-210a01994be5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c0869f-567a-478f-85d3-efe1b2e3295a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1a08fd-b6b8-44df-b3f3-cd7b414e071d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a832cf-805c-44b6-a88a-c83b71f780f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abf259a-c639-4bd5-ba50-4567f3df2e9d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadfc790-eabe-4cbf-a4c1-4273ae9bb357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc359889-0f55-4a88-a558-9d2d71281628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01834bb0-312f-427e-aaab-9be0074ed9fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0788657-2fb2-4000-9bfb-02f3cd65160d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d103cdab-bae4-408c-af62-71745f71f9e5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271dd9b8-326e-44e0-bdfa-f0334b7b05a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe3a5e2-ab30-4265-9ffc-af22651dea3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2143643f-9698-469b-8340-8df543bd0272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d40ff0c-edb6-40e9-aa2e-7e2d6976bc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1732a7c8-7c99-423c-93fc-b606d1832810",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e707e885-bed2-4956-8274-bf6332aaefd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbea86bf-2703-4b93-90c1-33fb6098515d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d57e9d-464d-4782-884d-ee02912fc903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5e9411-aabe-428c-9786-bb0a60c2cbe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dbe562-f1b6-4b2b-82cd-c148dee4391e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6895c1-c81f-4dc5-86a5-c9a7ab014c96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2a5e8cc-a21d-4e09-bdbe-2ac2faa9abed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d8b7cc-3662-41f5-a347-4fc05de843cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f31206-397b-4362-b2a0-73be2189e937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ac5cea-a710-415c-bd35-b1200c6d3cb8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2618c515-8fd8-450d-b717-599b65698453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ea15ced-1dba-440a-affa-bd32325752f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b93f4b7-44ed-43b4-b8ee-f3e406e419dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc1243d-3332-4fae-bfa0-c4a92d95efe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70741026-ed50-459f-80c3-a46d3d375ffe",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07f6628-efd6-46ba-b256-1316eddb691d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3797728-6450-4385-a842-eb1def5091c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c7d0a6-e69b-4809-af15-3f14172c4f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da97a22f-8aa2-4e8a-8a0c-56f804fa8a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ebc93b-4c12-454b-9a89-8b8a34b6cf0b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1117187f-644c-4d2e-90f1-1797a855fe11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bcb74d6-ceb8-4e7e-aacd-8c9a6222b63c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19ff047-9b73-4780-b754-393ebd45da68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3cb135-2739-4953-8c89-cee602fb47d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2e541f-fdb5-4a47-94f0-792b8169e43a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e226aa38-64ae-419c-a01d-3465f2a841d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52f94eb1-3fea-455e-8fa4-c6f2913a8341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed4f45f-d6c4-4f72-9f26-afbf06af4505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc3fe78-ea3c-487b-9715-c7566bd2ca34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b186622f-89b5-43b1-b955-a021d8d7a1d5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1e4a6d-bc16-4235-96fb-328138485834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6bb0257-4c49-4f76-a5e7-ef07c20fc970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f366867f-2298-4e04-b9ed-70d4136500a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca4d8f7-de85-47e7-8d25-e1e479492ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e365a37-bd97-454a-b848-3c7eddeda34f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eeb32a5-5994-4f28-bb7c-f2f012a2035f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f60df80d-a574-457d-a173-78f9a2a5af74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c084a1-b469-44a6-b716-4d6d9589550e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6767e6fc-d3e8-42b0-9ddf-31e034a0d91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679a07f0-2391-483d-ab77-6542a56a08a3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2482046d-30a3-410e-8935-d1ad94529f2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b852bae-a272-4ca4-a24d-778d691be294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25999541-4692-4e0d-87e9-bc1a8269abdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452f61ba-4ef7-4291-8d24-3ade363abeb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909621e9-ef1d-4b71-8eb0-6b2afc53f045",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0342fef0-9f85-4515-8d3d-d09b27d44378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ed0ac8b-77cd-4c77-9388-227f0b8e05c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ac7272-e374-4758-9921-e00c784464ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "820d5fbd-0114-40e2-bf5d-167f3bfa8d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5da3bd-8ae8-4e08-af90-cad89d9c57c4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9851437f-71af-4ca7-993f-399794f0b7a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b51925d4-c405-4a41-b2b8-41f94a9e02d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fa1b18-2031-4dff-8d2c-2884043de857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1526b009-ddfe-40c9-8dc7-8afcd5b05e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121d0f0a-0785-4141-836f-a430c1679c9f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e124c44a-38b2-42bb-9b37-e57e27217862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10c58738-4ae2-4731-b66c-b2d116e633ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2840c17b-fdc9-44d7-948c-d6ad0886c8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeb8d6cb-1e2f-4465-a328-a1a5d1f1bb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5719c348-b8bb-4597-967d-a0f4e92b3e03",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0609cb4b-265c-4f5c-8d1b-78faeb3b1634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b43e788d-6449-464f-bb87-e7f164c0387c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e47076-7a3d-4ded-9be7-6885119d518d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d13390-f8e1-4f1e-9c4f-8ff2281b6ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a527c3-bbc2-4c24-a941-49b718d3a098",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70dad6c1-bb3b-4027-9f02-62c86f5d3d54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a78cdae-6b70-423e-a027-41784d1896ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce48f38-2b99-4f75-8949-16a636f91d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf4c5d8-3e71-446f-9fef-ed85bab0a0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c49f3c-9f5a-4e68-8272-17f492a5c773",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5824fb91-fe0f-4ac0-861b-476d0e8c8085",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85735a21-c27d-412a-856f-25d580733bf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ee3c96-39e9-4de5-a8a0-7fade3c4d9aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3129872-4bef-4f8f-821c-33590a0bb721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec5508d-e914-4915-ab14-96c2d237225a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b879a8-81ed-4ea8-b76d-8f07a7c268bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7c1eb14-6d6f-4984-8bf2-c2deb3cdf49a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "517b8fda-a154-4a1e-b61b-ef94570821f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17545fb-4018-4636-b14b-7ad8e7bb498f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9a4571-a08b-4358-9bfc-eac63263f91e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ab76ff-adb5-4863-b4ca-ee25a8a96f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0acd576-4ba2-4689-8c2e-512920ccca5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea3141e-a188-4d96-aa66-2ff499a2732c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2710f58c-62dc-4b92-a3e8-1131be9e5aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984adca3-456d-4146-8e82-41f748deab85",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453d7d2d-2a6a-4408-accf-63751aca07c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8ab1b03-5d40-42c0-a95d-3bc5175a3c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "620e0cbe-8f90-4fae-af4d-52cae5d0a53e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05723262-2b1a-404d-813f-cdb1e1256d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3a291a-dcde-4c12-a0a0-56a23cdac777",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4466258b-c71e-490d-aaf2-620cb013493d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce85f9f-6242-4c6f-9f83-c42c130c2188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f64c2f7-9d8b-4d2d-8dbe-89069dc99322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800de3e4-f462-4fad-9460-1a0b3952d825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d672d2-4262-4930-979a-307a89e328a7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052bec63-2fe0-407c-a863-ce51208b58bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1241c411-f291-4e61-bdd6-3f1fd9d038e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642e61ea-d339-4b25-a216-0077150d74df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "227ad683-62c5-4d90-a247-2d5161a99caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0409ba73-3a41-4355-8862-b288965e7935",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c26aa8-6d04-4cb0-825d-4f5203f08ebc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a50b934e-ac6a-4a05-a889-49b737482274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6beb644d-3724-41d6-a4ff-1f50e851fbb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ce8e96-5432-4edf-bb73-0a24e7ba0f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d29d11-f3ec-41bd-92ff-a1714d0002b5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4889b32c-13e1-4048-b29a-35c20f6911af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22609517-5c39-4e33-a5b7-4dd26f92fad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6957f8-f37c-4cbc-9a74-9fbb0fdfb37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c8e09af-5e2b-49ef-9460-14a44db93a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43344092-7d41-438e-ba24-b83c50a7099a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1334d5f-697c-4b0b-b568-4de5d64b398b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "994b0071-0203-43c3-8438-41465a545633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfa5a3a-8db5-4db0-b9d8-d2ea3f6658d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d473ae-d9f7-4a7b-889a-688439368ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c3b5a1-6f03-4c1e-a551-fc07de546b7a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23aa6670-6aa5-4064-9284-84f0529defce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac44788f-709c-4b87-95da-2178c6d6a93f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb52e2ee-f93f-42f0-abb5-71b0afd95977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc470ae-4bb8-4a46-b2dd-8d786dbb0834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b899460d-5e40-4a48-b1cd-3260ed516e2a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4b0c6b-9454-41a8-9e1a-72d9a6b890d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b18f558b-ec06-4c61-91fc-087dfa8c3e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d49108-f72f-40d7-8101-caac7ef0cbf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "997dca0a-a735-4f99-8853-06fecafc31f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1584f54-2283-4793-9a96-67d677b9a71d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dd925d-f81e-4f87-b946-a1a5a774dd4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d93a546a-ac2a-4f2b-af6b-f03ba1c40df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bdcfba6-8928-485a-b0c5-79316070668b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04e878e-26dc-46ed-9ce9-4858072e2c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287000eb-5c96-44d4-a6f8-da1287960511",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476e9fc4-94d3-4c70-a1a1-cd4f6f122c99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2ca816b-3aba-4e20-80c8-ee9cee6b4633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfd1123-8ac2-4c46-a43f-fc9ddc2a37aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7123f06c-39da-40d1-83f9-dc5a180966d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b7401a-7ab0-48ae-b74c-e7132cb047c7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c8d0a9-8656-4407-9111-e5f32cc05f22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b1e6825-1ab3-4a13-9023-dcdfd405e1c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99e8186-2d83-4ced-8925-a4241b20a0be",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3986fb94-820c-4655-a8dd-5dfce0f45598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede5f5aa-e6a6-4c86-8dd7-60fc5bf42abc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6190bc91-1c77-4584-8fad-8b26a4dc0f55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ed99ac0-540b-46cb-b667-86f049f94b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493bae18-b881-4012-ac8b-89389d20edbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83fcba6f-4257-4e6f-920b-6d9f19dbcf07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5702a048-5c06-4ac1-a038-53aaec9e3071",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac4afd5-7d74-40a2-9c07-4294ffd0b14e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf5dd107-9ead-4d0b-98c7-bdc2aa716493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d067d7-6415-4903-a18c-73b054be16d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb1dc9d-783c-4d47-b6ed-995f74e64b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b49d5ce-9628-4ff8-bb62-d1fb35b3a1dc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8c9bf0-c87a-4bd1-ba8a-da48a15fa2e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f09c417-4d21-4781-bcd7-b3a4dd34b492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b6bc9a-4b21-4910-9386-bbcb0b8d37da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076213d5-9efd-4ead-8698-1122d60ef359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a32b65-f0a6-4571-963a-32c9840805c0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307b3810-27ee-49e7-9d9d-299adddbf9f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1c8690a-c15c-4d6e-89f9-3016cf5d6cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0f5eb9-7fc0-4f50-adb9-6093cd0eade8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b4c0f6-856c-4431-bb5b-6677b8cd004f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52b94a3-ae5c-476d-b46d-45e6f711b6c0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5beac3-41e8-423c-99b6-b36b9eedf1d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba5f9389-f688-4e5c-924a-fd3eb1b00685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8811161-5562-410e-aeb8-2994490d077b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc4359c-401a-4008-bae2-197e74e450b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27bae51-a6dc-4ff4-92bc-4a459cee8599",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7f306c-63ba-4d9a-90fb-5aeb1b9a043e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dee48e2b-71c6-4090-bb09-3f0c3ab20a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdac635a-7b04-44da-bd16-14e69a4f0b15",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b56e65-735e-4fd0-aa44-ca350b7b92b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a623a2-fa8c-473b-ad41-6ab359e4b0b5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264cc667-6a00-44eb-829e-5e3e768b3b69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e0025cb-8c47-4cbb-931f-bf7389856260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96699be-2e22-4c19-924b-104367adf848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5a9f09-4812-48e3-bd49-43d9f2dbb9d4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24b5d96b-1302-4ce7-8c74-40c22ce9387b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "716b1c6d-5910-4e36-8776-bbb86fc76bc2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ca5d3b1-b61a-4ac1-90e5-cd5f8059d93a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4ca3947-0859-44f2-829e-7300330285c8"
                    }
                  }
                ]
              },
              {
                "id": "261ac672-8dea-42f1-9f6c-6d3a71af4341",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9012366-3c2e-4f41-b58b-3e6bbfd0cf7e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa45bed-8d2b-48f2-8826-515948ef763c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1a1e412d-87b1-4964-a874-579cbbc44887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6760239e-2fd0-4994-8399-75835ec295a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d577ace0-19e3-4689-a51a-80549fb65dbc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3daf7c8b-fc00-4789-9ca6-1d05b1029925",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5510aa79-f3a6-409e-8af1-76eb476ffad6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c5b0bd7-4204-4fe6-8a85-b8a87e95dded",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a7349a8-da54-4edb-b744-42835e39e91b"
                    }
                  }
                ]
              },
              {
                "id": "da3486d5-4c0d-4e50-96fd-44f1debdb496",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2d2693f2-ff84-482f-a608-ec7651524ee4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9219d0af-60a6-43d3-ad04-7f0f81af38ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "32ec1d88-6c0f-4eab-8de3-5c9703a16bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab41bf6e-7ba8-43d2-a81a-0bb9f5f0cab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0561b0-a9ec-4d8e-88f2-b855714d1f31"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "58a46fa3-d17d-4c9c-9b8b-7a25f69d147a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "786304e8-df3d-4392-b063-ab9d2593cf8c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6346b922-c56c-4bdb-80ce-04475f172d84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f7a3a1b8-d649-4f7e-8e20-4208fecc73cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e42654c1-8a6b-446d-a713-1d8d937d07a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be71ff27-54c3-4782-8be4-9144aa43355d"
                    }
                  }
                ]
              },
              {
                "id": "19efd597-7f40-4441-8242-c2e00b532f56",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f55769f-e23d-45fb-85b5-e0ba99237958",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bf8cc9b9-2169-4002-aefd-ff3044853972"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "733ffeec-e080-4231-b23f-40666c3e8ae6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c34e5d68-6e54-4798-84a0-504405ab0037"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53f16bd9-167b-4c30-86a6-9c1a5859b3d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e7d1ea3f-9e58-4449-89d5-82168c7b9c2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3331bad3-7218-4417-9455-8c3142f7186e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ab0ede9-3da0-4c44-b44c-68b892ddf739"
            }
          }
        ]
      },
      {
        "id": "6dfdff5f-2077-4ac2-883c-f3d59e9fa9b2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0c2f4147-0107-4389-b498-64fac7098a9d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8f2a541-ebbc-4345-bc0b-2b57ae543a70",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4fc6d781-6cb0-454c-80bd-fc1b9a3ff7a3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5484a3d9-33bf-4b34-b5d3-93141ee278d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cfd9e465-b843-4391-8eba-a1b4492362e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae320d1-6b1c-45d1-b64f-8dfa3f179a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5be2680a-4bd9-451c-9996-6a8f00726264"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a029152d-1019-419e-87e8-8ab93730c30c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5afa586f-898d-4605-ba45-8a00d09963d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "421ef70b-df4e-40d8-8fb6-1375569a76fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2618168-9d13-4c12-94c0-4b77c3100a4a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59c99b58-32ef-40d4-9a84-a08af294be1e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0a41c1f7-60a6-4ffe-87ef-497eaad1377d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2888b81a-8df2-4500-8232-2a2975ead7f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26f7d54a-7fe4-47fe-96db-0201a67da5e9"
            }
          }
        ]
      },
      {
        "id": "897b8f23-72e2-4f7b-a39c-85a48acf1907",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9bed4e2a-a8a5-4860-997e-05adfdbb2d24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3db8ac45-7197-4780-b9e6-7969d07dd26e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c52ed771-0edc-447a-8a08-12f6f6a4ef27",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c558d70d-6475-43f1-8434-e969424ad187",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1922c655-2420-442d-8684-1ad34563fdd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b0b60c-4af1-45fe-ac35-f0884bae3b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48738dd2-b798-4b3b-a900-fa76e11c0dca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a0c0c43-5a35-4739-85ba-a90cef613e8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7826265c-bd96-4169-922f-d533904b2f94"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e326452-3579-490c-b2e7-f58afacea72c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c03b85b-71bd-4479-bf80-6cf56532b8f7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5b61fb9-992a-4b95-a3e2-2922c848d965",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f1f5843c-c453-435f-89ca-6428c8c27490"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7e41956-7b0b-48b6-b171-cd55b1028775",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b511246-cbe3-4aca-a99a-79c84c15fecc"
            }
          }
        ]
      },
      {
        "id": "b8726d96-ea6e-4a01-9094-8629af7a2062",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4814e4aa-1cbf-4380-bcd4-9bf44d37fe49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "498a948b-039f-4f38-b0a1-5bbf9257c3aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "599949fa-ef8e-4665-a2c7-905e5343f518",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efe66ea-aef8-4aed-98f7-6c6444d5dbae",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91128f0e-650f-4002-9f90-cb4d30f3fb59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c219937c-1d48-431a-be83-21346af83033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7873916c-2230-4e40-b250-47021d295713"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f4267fb-d21a-4143-95e6-fcd9c9128c52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9ae8fb5-25b8-46b4-b6ad-e4b5e51f08d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "edb9e55d-bb2f-42de-909f-59391678b3d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a6fd39c-d77b-4173-838e-46f17c930113"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f1d7acc-f7d4-425c-ac25-2dce8566b5c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4b5424af-155f-4489-a509-bb3ae9c6d7fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc1aa27c-21d7-45d0-8993-0ec2206db435",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a666c67a-6cb6-4bfc-9f3a-1092594fbd34"
            }
          }
        ]
      },
      {
        "id": "de8ee927-a9ec-436a-8f7a-4bd7ff88c70b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cb97c18-ce7e-4871-b75b-ef744531cb22",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55e5f0c1-e66d-4626-847c-add67b5dbdfe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "fcb83f11-3e7d-416f-b4b5-f4a6f362f3bf",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "576c537c-808e-4d7e-ab00-fd0cdcf9826d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5935b0ad-a0ae-4c56-8665-7064c127aaa6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 258.14084507042253,
      "responseMin": 12,
      "responseMax": 7978,
      "responseSd": 977.212888504057,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687567579366,
      "completed": 1687567664834
    },
    "executions": [
      {
        "id": "59e2a7f4-0793-4eec-94cd-743705dabcb1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e3084785-79cb-40d9-8844-af1f4c247d43",
          "httpRequestId": "637bb584-adbc-4299-a521-9b9d7e1fa18a"
        },
        "item": {
          "id": "59e2a7f4-0793-4eec-94cd-743705dabcb1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c3a47a6e-35bf-4a75-92b0-80004e24f216",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 0
        }
      },
      {
        "id": "98eaaaaa-d611-4b26-a5d3-4c8e4dabea0b",
        "cursor": {
          "ref": "17748a64-d677-47dc-8d74-d66b32455ae6",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e26306b3-646f-4248-87d0-5b593989a9d8"
        },
        "item": {
          "id": "98eaaaaa-d611-4b26-a5d3-4c8e4dabea0b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "148dfef3-8a9a-4344-b36f-26edc9a430f7",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "06d2767b-361a-4acc-8cda-02f56be7c1d8",
        "cursor": {
          "ref": "564c09c6-354c-4933-b9e4-4d6ad90583ba",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "20ac474d-cfdd-4a15-8917-4220b3025613"
        },
        "item": {
          "id": "06d2767b-361a-4acc-8cda-02f56be7c1d8",
          "name": "did_json"
        },
        "response": {
          "id": "4dfac899-386f-4b02-bdaa-90dad5aadac1",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718a04b3-bc44-4f0c-ae02-065fa0a5adfc",
        "cursor": {
          "ref": "886c9cd0-bc4d-4c2b-98c7-ba33375d6f50",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "29f1c6fb-228f-4817-a4e0-23d244f4597d"
        },
        "item": {
          "id": "718a04b3-bc44-4f0c-ae02-065fa0a5adfc",
          "name": "did:invalid"
        },
        "response": {
          "id": "b0d984e3-1d51-4b96-a1b4-7a21629a8a88",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2193,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "718a04b3-bc44-4f0c-ae02-065fa0a5adfc",
        "cursor": {
          "ref": "886c9cd0-bc4d-4c2b-98c7-ba33375d6f50",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "29f1c6fb-228f-4817-a4e0-23d244f4597d"
        },
        "item": {
          "id": "718a04b3-bc44-4f0c-ae02-065fa0a5adfc",
          "name": "did:invalid"
        },
        "response": {
          "id": "b0d984e3-1d51-4b96-a1b4-7a21629a8a88",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2193,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "55f687ae-69dc-48ac-8411-e3bc0547d0c1",
        "cursor": {
          "ref": "d30ca1e9-55a0-43c6-acff-480579341446",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8ba5c13e-063d-42e4-8661-88fe3d8c253f"
        },
        "item": {
          "id": "55f687ae-69dc-48ac-8411-e3bc0547d0c1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d2c23fef-b229-4de7-8850-e92858d8b3ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2418b85-4861-4b2b-923b-d9b628fe9369",
        "cursor": {
          "ref": "3d33c826-7b8b-4c92-b3db-1146ae95977f",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e1f06d0f-a190-4eb5-a1eb-c215619882f7"
        },
        "item": {
          "id": "b2418b85-4861-4b2b-923b-d9b628fe9369",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5ec95bcf-6390-4776-acad-d6ef40ea3181",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73a422c-6301-4e97-b844-831744ca979f",
        "cursor": {
          "ref": "17e784b4-2245-4a06-8152-7b3d4410d0e5",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "36aadcee-6ed5-4b30-84a3-99d2b2bc4994"
        },
        "item": {
          "id": "e73a422c-6301-4e97-b844-831744ca979f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "80c3cc27-b4b2-43db-a198-5d7540754473",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e1f4cb99-fa31-45e5-9ff7-14c19af226fc",
        "cursor": {
          "ref": "fa845f2b-8e9b-41be-a1c4-8c506e1f504b",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f7a0cb88-0560-4cf7-9fc1-2dae42e6bd50"
        },
        "item": {
          "id": "e1f4cb99-fa31-45e5-9ff7-14c19af226fc",
          "name": "identifiers"
        },
        "response": {
          "id": "21a896ce-83ca-4b04-817d-500a4cad438b",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279afa85-995e-4e55-8973-10beff593e46",
        "cursor": {
          "ref": "3a99452a-f765-4fbf-9230-4d4a2df35042",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a262bfb1-be2d-4632-b12c-bdc9d8d4a4b2"
        },
        "item": {
          "id": "279afa85-995e-4e55-8973-10beff593e46",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7a8f299a-126f-48e1-a560-9929fd9bd1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0513f5f9-b954-4346-ab8b-9f20174ada77",
        "cursor": {
          "ref": "bd3c6a17-4366-4b8f-a6c7-d40b92a29f59",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5d3e7455-b063-4a50-9a5d-b3d0d9d329c0"
        },
        "item": {
          "id": "0513f5f9-b954-4346-ab8b-9f20174ada77",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6d0d0e05-991a-4948-a18a-532faf406533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e0ed44-e846-4627-945a-cdb014d793e6",
        "cursor": {
          "ref": "0f64a756-ff97-4ed4-98ec-0a53537cb586",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2109140b-1f84-4f0c-823c-52a7485dcc43"
        },
        "item": {
          "id": "67e0ed44-e846-4627-945a-cdb014d793e6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "68408316-1aaf-430c-8226-50f37513854a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 351,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1732196c-41e8-4c2c-b566-cd814230e227",
        "cursor": {
          "ref": "31764424-0535-4504-9616-165c0cf509d1",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c7305377-7077-4877-b716-fd57bd928f15"
        },
        "item": {
          "id": "1732196c-41e8-4c2c-b566-cd814230e227",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cbdbdb6f-4357-4cdc-9a07-4a191c32c6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f610723f-854d-4ca9-a4f3-8f7284314a4d",
        "cursor": {
          "ref": "1cf28e18-9cf7-442d-88ed-468e902c10f0",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "22f98158-2a31-484c-a369-524b02d0f2b3"
        },
        "item": {
          "id": "f610723f-854d-4ca9-a4f3-8f7284314a4d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7a06671e-93f4-451e-907b-54063e3a46a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94395ac-07b2-410b-972d-580c18f2e44e",
        "cursor": {
          "ref": "38dd30ef-aabd-470a-bee1-796c82a8de9a",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dd607149-b4c5-43e1-b577-532aeeda1f47"
        },
        "item": {
          "id": "b94395ac-07b2-410b-972d-580c18f2e44e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "914e9663-81fc-446d-82e1-aa15484d5d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393c08b0-0a19-47c2-a398-04c055486497",
        "cursor": {
          "ref": "3987515b-99e9-42a2-b297-dcf21addbc92",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6d5a0d31-c758-4531-ac9c-b38decf91c6c"
        },
        "item": {
          "id": "393c08b0-0a19-47c2-a398-04c055486497",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "84578483-ac69-4ee4-9b73-5b73575d162d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5f67ac-b672-4a28-9164-abc60e43259a",
        "cursor": {
          "ref": "69702864-267a-49f5-a580-42c42e375831",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "537c439a-4613-4cbf-8c7d-01d45b901cb1"
        },
        "item": {
          "id": "6a5f67ac-b672-4a28-9164-abc60e43259a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c1f03ff2-f764-4766-9f53-c1f1ef8dff40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867aa836-9387-4766-908a-71f7d9c91956",
        "cursor": {
          "ref": "07622c4f-1848-4a83-bcbf-b5d61e1edefe",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9d2fca7f-df04-4898-a5a4-603f73aaf642"
        },
        "item": {
          "id": "867aa836-9387-4766-908a-71f7d9c91956",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ff7b3dfa-73b6-4579-b77f-c3fd88efb28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188cce40-f027-4ad2-95d0-07722d9ab950",
        "cursor": {
          "ref": "9559a31a-b135-4e35-a55c-cf73a2b8e101",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cbb9bb62-e882-42b3-93bc-84b707a1559d"
        },
        "item": {
          "id": "188cce40-f027-4ad2-95d0-07722d9ab950",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b6978f57-7a3c-4bb2-ac1b-106200edfd79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92de137f-e689-4a32-914f-f3bd34bdaeb1",
        "cursor": {
          "ref": "aa99a91e-fab5-4b58-b7a2-28781dd4843a",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c3cff1cd-a173-4059-ac2c-eff6bfc2e8cb"
        },
        "item": {
          "id": "92de137f-e689-4a32-914f-f3bd34bdaeb1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b6a27f83-8d4b-4e74-bcf8-07808b3e0900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a84ba1e-4910-4a94-8131-2f7dd3a8295a",
        "cursor": {
          "ref": "680cb61b-8b60-4d02-a27a-70eaabab79d6",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9b0eb74c-451b-4079-82b1-0fcb113ccaf2"
        },
        "item": {
          "id": "3a84ba1e-4910-4a94-8131-2f7dd3a8295a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "50969392-543c-4a6a-8b68-77598f1eb098",
          "status": "Created",
          "code": 201,
          "responseTime": 1010,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "6c163636-e476-4ed5-8aba-274e42553c5b",
        "cursor": {
          "ref": "5138d3c8-9ded-4eb8-b83e-b47851ecb75b",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "45c970a7-adb6-48a6-8ec5-21c274fca379"
        },
        "item": {
          "id": "6c163636-e476-4ed5-8aba-274e42553c5b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a148c7f0-a80d-43ce-9a06-eeb35482b068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef41f0db-ae85-4fec-8b5b-0c83105a5ee3",
        "cursor": {
          "ref": "00998de3-485f-41da-b18d-244d6f43c415",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5697248b-a166-4ff8-ab81-a929f9e58634"
        },
        "item": {
          "id": "ef41f0db-ae85-4fec-8b5b-0c83105a5ee3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "89f1c667-5cb0-4642-9cc1-7392dcaed810",
          "status": "Created",
          "code": 201,
          "responseTime": 6890,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "48ddd513-41d8-490f-a89b-bb933df1673c",
        "cursor": {
          "ref": "c8a2333a-aa09-469b-8885-0ed4fba008e5",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9ac84f9c-911e-4c9f-a747-73891f5f5718"
        },
        "item": {
          "id": "48ddd513-41d8-490f-a89b-bb933df1673c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "75ae4a7b-a1ac-42d0-b7c6-908b1fb8250b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e16959-16e3-446f-bc43-adae54c0ca0a",
        "cursor": {
          "ref": "acd54697-a8ab-4003-bdd0-66e06f255208",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e9b37cfb-4b13-4b94-9fe1-141a425934a8"
        },
        "item": {
          "id": "51e16959-16e3-446f-bc43-adae54c0ca0a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "acee5d97-e1d4-4e92-871c-087f42a6e3a1",
          "status": "Created",
          "code": 201,
          "responseTime": 6261,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "efc20c43-ab3b-4e50-b2ee-2fe9c854c1a3",
        "cursor": {
          "ref": "e5d4f8d8-2fde-492b-a261-991063b70a79",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "12d92b81-31b2-439c-9c5c-9b41795470c7"
        },
        "item": {
          "id": "efc20c43-ab3b-4e50-b2ee-2fe9c854c1a3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e6c89ad4-6c2e-433b-8da2-a7eed68c79ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4095060b-ba3f-4223-bbba-8e84292ef330",
        "cursor": {
          "ref": "f082e48e-24d1-437b-affa-9558bc780432",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bf588f33-04fa-4fa8-9f04-177b9bbd57c0"
        },
        "item": {
          "id": "4095060b-ba3f-4223-bbba-8e84292ef330",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6b22159c-cd91-4f26-9878-4656d99156ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30d042a-6b42-47fd-863a-9cd295f2253a",
        "cursor": {
          "ref": "d60cead2-8c5c-4e44-8183-321413fc452b",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "811884b3-02d5-46ff-90ad-d6214ea57224"
        },
        "item": {
          "id": "a30d042a-6b42-47fd-863a-9cd295f2253a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2a1cf0a8-8d23-4841-bf1f-9ab2ebca51fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1322f4e-63af-4fa7-a674-5a6263396db8",
        "cursor": {
          "ref": "ff56bfe4-7c7b-461e-85da-536c81e6418c",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9f2cc10e-5040-48a9-86df-26856ae809ac"
        },
        "item": {
          "id": "f1322f4e-63af-4fa7-a674-5a6263396db8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "305a1777-92c5-4f7a-80e6-963883da3ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0f6da1-bade-4b9c-b45d-e3fb5dc58098",
        "cursor": {
          "ref": "da2f70eb-6983-4b0b-97c4-842a4e98c8f3",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "40992747-196f-417c-a2bd-fdb0b31db4fd"
        },
        "item": {
          "id": "4c0f6da1-bade-4b9c-b45d-e3fb5dc58098",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "02dbd6fc-6e3e-407d-9d4a-4c22040d2713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869f36db-55f4-4f8c-baa2-7ebe24f01b42",
        "cursor": {
          "ref": "be979310-9bf0-46ae-adb0-e1f600ab6e67",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0d85982d-303e-42a1-a6b9-7fe686acbdd1"
        },
        "item": {
          "id": "869f36db-55f4-4f8c-baa2-7ebe24f01b42",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "006af2f4-d7d2-4034-880c-fa56d31a3b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caac855c-e8d5-4c82-a255-de5f88122a52",
        "cursor": {
          "ref": "5e904a2f-c527-483e-bd1a-be37a6ddc56b",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "25dc32eb-ebb5-40a0-b2e6-ac74860a19f7"
        },
        "item": {
          "id": "caac855c-e8d5-4c82-a255-de5f88122a52",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e14253eb-bffc-4f20-b8c3-f8b50b9aeb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593e0882-d98a-4ee0-8ace-eda94894a363",
        "cursor": {
          "ref": "6d9ecda0-3e63-4d6c-b24f-d74200d803d7",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "17040782-fd22-4afd-85a2-d1ce6d131198"
        },
        "item": {
          "id": "593e0882-d98a-4ee0-8ace-eda94894a363",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2798d6c5-28bc-4353-bb3b-389cfbc4295f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd079c4c-6755-4cb1-ba93-3364cdcf6d9e",
        "cursor": {
          "ref": "0b9363f6-4da3-40ef-8e99-82e1f4de936d",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dd4e2147-080a-4ac8-bb74-01cec2a54e47"
        },
        "item": {
          "id": "fd079c4c-6755-4cb1-ba93-3364cdcf6d9e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f64b1e5c-7bb6-416f-9dac-4fbb4b779532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2482f799-669c-4696-9676-32077beef2e9",
        "cursor": {
          "ref": "ccc9ae33-ac63-418d-ab46-5a5464c78410",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e2883786-79eb-4822-a04d-f5da7fff678e"
        },
        "item": {
          "id": "2482f799-669c-4696-9676-32077beef2e9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "86140e30-2fef-4096-9840-4f7ad851c05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc7f673-00d7-4fbe-93b2-044cd656c411",
        "cursor": {
          "ref": "99432233-53dc-496b-88cb-0d42f280aa67",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c2399aef-88da-4ec3-9789-2bc34649ba37"
        },
        "item": {
          "id": "6bc7f673-00d7-4fbe-93b2-044cd656c411",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d28e1da8-5eab-4b96-8048-fc9511df4957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecf7223-25c9-4c12-8606-7eb19a981ce1",
        "cursor": {
          "ref": "3c6e7879-18b6-47db-aad0-ee0c86a61efb",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0b98fef9-0459-4151-aa89-4ff6e2f201ae"
        },
        "item": {
          "id": "fecf7223-25c9-4c12-8606-7eb19a981ce1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3ef66d14-bb57-41d6-ba6e-a7b676afd22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 585,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f86d83a-411a-414b-a325-d6dd67591178",
        "cursor": {
          "ref": "3c955f92-ba1a-44ea-b5bc-43b1e6d3d2e6",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3c2c84bf-b906-422b-a7a3-a54410e93be4"
        },
        "item": {
          "id": "5f86d83a-411a-414b-a325-d6dd67591178",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cb797b3b-7c76-4cec-815a-35c966260623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72c1b56-1617-41cb-98d5-f0db66cbce95",
        "cursor": {
          "ref": "8b5545c3-d86e-424b-b3cb-a723024e851f",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ed5ef58c-3850-4a8a-9c56-0a6b5e9f2df5"
        },
        "item": {
          "id": "e72c1b56-1617-41cb-98d5-f0db66cbce95",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8c809627-a7fa-4ae8-91f2-5e841a39a426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d1cd87-68c7-4ff2-8306-506fd02c3720",
        "cursor": {
          "ref": "064f55b0-4716-43c7-ae41-43433402fd9d",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b64dc861-b95b-42fd-ac2f-d25e6ff47605"
        },
        "item": {
          "id": "16d1cd87-68c7-4ff2-8306-506fd02c3720",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "baa98d97-7db3-4eec-8d77-2de291940800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03eecdc6-9f4c-41a8-a2ba-8788c3122971",
        "cursor": {
          "ref": "c76ef461-6e48-4c93-a1d4-5175cbe86cf5",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "318cabe9-6ee0-4aaf-9427-4ebadb691821"
        },
        "item": {
          "id": "03eecdc6-9f4c-41a8-a2ba-8788c3122971",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fdbca286-79b4-42a7-9078-8da090fa0725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0e4262-b8f3-4404-8879-9af56c900065",
        "cursor": {
          "ref": "a4f25629-aed4-4c93-bf7c-11b56a0ba22f",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0782da70-9776-4f06-a184-919433b2b07e"
        },
        "item": {
          "id": "df0e4262-b8f3-4404-8879-9af56c900065",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "34880da4-477d-4851-8985-a67210441108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4650d239-d38a-4efb-a6ce-cc822ee69b42",
        "cursor": {
          "ref": "e41bafe8-e9d6-4ee7-8103-8c257d3ee76d",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "efeb6b45-4888-4f66-9265-a64330fc7d5b"
        },
        "item": {
          "id": "4650d239-d38a-4efb-a6ce-cc822ee69b42",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7f876413-b6b1-43e8-81a9-653f0d36c2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2df4f4-e15f-40c8-9bf6-58d0218bafb8",
        "cursor": {
          "ref": "61e008ac-c8d3-4f14-b4b3-f7d639e676e3",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a47b0721-72d9-4822-a6ea-18d782f671a0"
        },
        "item": {
          "id": "7a2df4f4-e15f-40c8-9bf6-58d0218bafb8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bad2b522-78df-433a-a818-50403f40bb53",
          "status": "Created",
          "code": 201,
          "responseTime": 2908,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "45df51c8-024a-4d40-893b-7a68b77657ea",
        "cursor": {
          "ref": "5171ea54-3cb9-480f-b008-8fe143d838f2",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e022497a-9018-4eb0-baeb-b794cdaa2161"
        },
        "item": {
          "id": "45df51c8-024a-4d40-893b-7a68b77657ea",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "38bcfee0-03ac-4a8a-b950-9c832a32c558",
          "status": "Created",
          "code": 201,
          "responseTime": 2480,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "92d9bfe6-29e2-40d2-97e5-b547d9f94eff",
        "cursor": {
          "ref": "07ee7400-70b4-4cb3-bd21-a933bca1d990",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c3ec2004-8015-4013-b01c-9b254307322c"
        },
        "item": {
          "id": "92d9bfe6-29e2-40d2-97e5-b547d9f94eff",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3fd6d65d-d24f-420f-b27f-4bf8be5d8a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569e3bbc-9226-4347-b7a7-8b5cddb0ed49",
        "cursor": {
          "ref": "db024124-a6b9-4313-bab3-9ce4e014056c",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c2af428a-a736-4109-94a7-b7def942d7fb"
        },
        "item": {
          "id": "569e3bbc-9226-4347-b7a7-8b5cddb0ed49",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7e2714fa-3292-4049-91aa-8fc6fb8a879b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc84953f-3ca9-4967-ae00-421de987fb86",
        "cursor": {
          "ref": "6eec1a76-d6e0-41fb-88fc-27ecb02229c1",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5aa68d48-104c-48a8-999a-5b40f4332d12"
        },
        "item": {
          "id": "fc84953f-3ca9-4967-ae00-421de987fb86",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7a92fb2c-0940-40c7-8df9-42c01b965a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333b9f8b-5276-471d-9948-c9293b85fd43",
        "cursor": {
          "ref": "b56c810a-06f4-4d3c-80d4-c9c634e83dc1",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9b1dc694-917a-4191-a9de-5617c65034bb"
        },
        "item": {
          "id": "333b9f8b-5276-471d-9948-c9293b85fd43",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f8390b13-cbf3-4c61-9f59-e173801336b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56cd1a8-0869-4edd-9070-6484980b14d9",
        "cursor": {
          "ref": "9557bb03-c666-4f57-a598-c5b88b803aa1",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c54bf982-d0e1-4b34-99a3-3ecba7842ac1"
        },
        "item": {
          "id": "b56cd1a8-0869-4edd-9070-6484980b14d9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3b30e3aa-7e81-4963-afae-6ed6359fd3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e2e05e-e71f-4e52-ab56-ce6031da2d66",
        "cursor": {
          "ref": "5e0e4c8a-5634-414b-9503-328c6e94b95f",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c46ccf63-0c65-4212-b2ae-44e986dfe969"
        },
        "item": {
          "id": "d5e2e05e-e71f-4e52-ab56-ce6031da2d66",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2386050c-7763-4e45-927e-2c45c8212798",
          "status": "Created",
          "code": 201,
          "responseTime": 2647,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d99fa59d-7463-4be7-8067-477391b94dfe",
        "cursor": {
          "ref": "6ea59b46-1cc9-4d56-b420-1030ef3278f3",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "158d7504-b466-46b8-b19e-ceb06e89cfaa"
        },
        "item": {
          "id": "d99fa59d-7463-4be7-8067-477391b94dfe",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2654479a-f3b7-47e9-9f2a-3a8a261a00d8",
          "status": "Created",
          "code": 201,
          "responseTime": 2486,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "44e78961-df94-4108-935b-95ba59f04259",
        "cursor": {
          "ref": "6343ab50-0ced-48af-9e6f-22597f762ca0",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "15a2fdc2-da31-4f2c-a944-8470be410b8b"
        },
        "item": {
          "id": "44e78961-df94-4108-935b-95ba59f04259",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b413320c-7002-4503-b711-cf1adead52ff",
          "status": "Created",
          "code": 201,
          "responseTime": 2231,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e62922b5-7d7c-4453-a896-f938c1713d0e",
        "cursor": {
          "ref": "44d9a71d-af53-4321-ad11-801ab88fbab7",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5351c7ae-b76b-4406-80d1-d7e7e951ee9c"
        },
        "item": {
          "id": "e62922b5-7d7c-4453-a896-f938c1713d0e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e00998ce-206e-4cc6-8af5-11bcd3b7a3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4979179b-1ce8-49cf-8517-007620520942",
        "cursor": {
          "ref": "20852670-e771-4f24-9f3f-6542a93de8a4",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f57abd7e-ee97-4a75-9b40-480a46fed31c"
        },
        "item": {
          "id": "4979179b-1ce8-49cf-8517-007620520942",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b3ab70c8-5647-4b1e-9233-ba96b142fb38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abba033b-f2e0-4ecf-b7d8-02f7df01b028",
        "cursor": {
          "ref": "f9bc89a2-226c-4c05-8e50-3fb482861fe2",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6d13ab49-d95c-4bff-a16e-3257984b10a3"
        },
        "item": {
          "id": "abba033b-f2e0-4ecf-b7d8-02f7df01b028",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bd61f57a-ea38-4814-8a23-34eba6fbf823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38452403-1e5c-4a95-a7aa-a48739f84d26",
        "cursor": {
          "ref": "60bfd4f5-89db-48c4-9add-2b9660d56b2f",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7c5e5242-e2fa-4332-9256-a543499bc99a"
        },
        "item": {
          "id": "38452403-1e5c-4a95-a7aa-a48739f84d26",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "00aa4655-f243-44b0-855d-18a28a119231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab8a8f3-b92d-43b0-a588-c40dd6615523",
        "cursor": {
          "ref": "c59c7b22-e09f-421a-aab0-464de7c404de",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f32819c5-1e92-4488-bd7b-a7aeb0bc8c43"
        },
        "item": {
          "id": "bab8a8f3-b92d-43b0-a588-c40dd6615523",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b7e42c53-24d1-46ed-a1b9-0ccd396fcbe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b682cbcc-73c2-4753-93a7-75adfe7cb22e",
        "cursor": {
          "ref": "9b3edb9c-a36f-49f3-b080-3d8e289fa8cc",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "77a0c1c2-4d8f-460c-9161-f2ec046ae6d5"
        },
        "item": {
          "id": "b682cbcc-73c2-4753-93a7-75adfe7cb22e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "31801cdc-1ac9-411e-b0d9-7c4bf71a03fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db14ad94-076d-4741-81ee-7bfb05143df0",
        "cursor": {
          "ref": "3345fecd-8e71-40a5-8d3f-61b5a0f38b5d",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "082b4cd2-4de3-4791-b55d-b0d48ad43254"
        },
        "item": {
          "id": "db14ad94-076d-4741-81ee-7bfb05143df0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "598af79b-25ae-4521-8df9-0f351fd6a4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be65d60-e2c3-4fce-bdc6-f5e1a9e90709",
        "cursor": {
          "ref": "647c890e-05e5-406f-acf7-5f303a218bc2",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dddf5448-6ad2-450f-86af-caf30a050103"
        },
        "item": {
          "id": "4be65d60-e2c3-4fce-bdc6-f5e1a9e90709",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7b05b838-0242-407e-95a4-db317ee78cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1282f0c9-8620-4beb-830b-287166e7d55f",
        "cursor": {
          "ref": "f02eb7de-14bd-47b4-8d8a-99bc97edd8ac",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0f86b92e-6d01-474f-aaf5-538a9df40bdf"
        },
        "item": {
          "id": "1282f0c9-8620-4beb-830b-287166e7d55f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e4a51d8c-4cde-44e1-b942-ffe56dd822f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366b6840-8dd1-4206-a0ee-ba4c5a672296",
        "cursor": {
          "ref": "4d7f4e40-0fc7-4e42-9f61-d61eee09d09d",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4da8ed99-81f3-42d5-89cf-6511fc0ce9b9"
        },
        "item": {
          "id": "366b6840-8dd1-4206-a0ee-ba4c5a672296",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "89d2500a-ef40-417f-8549-031b5cd8b254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68e9d34-a821-44ac-98ee-d98bbaad8371",
        "cursor": {
          "ref": "4375bb7f-0e01-4e97-bc13-2dc5fce6fea5",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3707d1fd-2bb9-45c2-b504-3f6256c3bbda"
        },
        "item": {
          "id": "f68e9d34-a821-44ac-98ee-d98bbaad8371",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ed792963-5f64-48bf-a3fb-a1c11cb3186a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10687bfe-bd5a-4b9a-b119-2338a7991c18",
        "cursor": {
          "ref": "427392f8-c2f7-4f2e-bca3-db84ba985069",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b594c64f-ac34-4ac2-8085-a42dd4dc2ddd"
        },
        "item": {
          "id": "10687bfe-bd5a-4b9a-b119-2338a7991c18",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b25cca1c-0227-4021-a053-38a399b5c61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b567a244-e5fe-4582-8cdf-9e35c67f514c",
        "cursor": {
          "ref": "e4d9445a-b05f-4768-96f8-dfe3a716259f",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "45e43df3-ad57-48ac-af23-d996fe74592e"
        },
        "item": {
          "id": "b567a244-e5fe-4582-8cdf-9e35c67f514c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f9832f4d-ea03-4296-bd2e-7e28aafb1c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fab5b70-7dfd-4609-b613-c0a8d84913db",
        "cursor": {
          "ref": "f6f018fd-45d6-49a8-80b2-cb2f02c4c31b",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "270157e1-8187-40e7-acf9-3274f20eef52"
        },
        "item": {
          "id": "6fab5b70-7dfd-4609-b613-c0a8d84913db",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2be0fd2e-0834-40c5-af3c-b95261387d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507ccfb3-0e4b-4d7a-b550-e5b377fd0e66",
        "cursor": {
          "ref": "86ff5d71-e5ce-4260-8e4a-9abea4de2ff1",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "05bb9319-5e28-4441-bdfa-f268301fd527"
        },
        "item": {
          "id": "507ccfb3-0e4b-4d7a-b550-e5b377fd0e66",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dfa78779-ef09-4792-ac0a-2f63b5e92376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830b19d3-6a48-42ba-a566-691e940603fa",
        "cursor": {
          "ref": "ac9cbb4c-d590-4cef-9dc6-a5936146e0ec",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "37aa1e93-0573-4807-8827-016f17497fa0"
        },
        "item": {
          "id": "830b19d3-6a48-42ba-a566-691e940603fa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ff06cbc5-b472-4809-9852-9bcdae2f6549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defdbb7f-d5cc-4002-ae3e-ff3072263b3f",
        "cursor": {
          "ref": "8dae40ee-0423-49c8-bc63-176cd2db6471",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c133bc3c-bdb8-4135-900e-1a3c411f25e9"
        },
        "item": {
          "id": "defdbb7f-d5cc-4002-ae3e-ff3072263b3f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fa31f1d4-9ea2-42c1-8f5e-ae1d257a185b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c44590f-d599-406c-8a38-c27c0c749372",
        "cursor": {
          "ref": "6f100695-2508-4f0c-9a2f-1fe9d5084899",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d35cbf54-4cdb-415e-856b-36b0725d68f0"
        },
        "item": {
          "id": "6c44590f-d599-406c-8a38-c27c0c749372",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "937c59c0-3bdb-46eb-94b3-beaafa7c0194",
          "status": "Created",
          "code": 201,
          "responseTime": 2973,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "afcd5c4c-bae9-488f-813c-e3e9ef9ea090",
        "cursor": {
          "ref": "979c68b4-3f00-426a-aada-72138e727d77",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d8d11139-3c71-4ab6-9a1f-7ecb9931561e"
        },
        "item": {
          "id": "afcd5c4c-bae9-488f-813c-e3e9ef9ea090",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5ea8e2b5-4ba9-4739-a324-dfb861d162bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465a94c1-fa48-4846-ab2b-d5f05d6123f0",
        "cursor": {
          "ref": "b7d2ea65-8373-4c64-9af0-c0255903e8fe",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1cd79d36-29ca-4993-ad12-ada54bf9ecc6"
        },
        "item": {
          "id": "465a94c1-fa48-4846-ab2b-d5f05d6123f0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d7315d76-3eaf-40ad-82af-bc5aaff560db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886d22e0-91fb-4b3c-abf0-869dc2a75953",
        "cursor": {
          "ref": "104c6d53-7a6e-4fbb-ae32-7ed912f05181",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a8f0fdad-8e5c-4dc4-a67b-c9318937413e"
        },
        "item": {
          "id": "886d22e0-91fb-4b3c-abf0-869dc2a75953",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8a84d8d3-3a4f-4020-8562-69dd5d463e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ef5d6b-d909-4d67-be82-8b7611e3cf7d",
        "cursor": {
          "ref": "5cbc6a8f-f1fd-4c33-9089-ced7abea58d9",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5541a150-5c6e-4e3e-b5ef-d6850a8f85b5"
        },
        "item": {
          "id": "d3ef5d6b-d909-4d67-be82-8b7611e3cf7d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cf6fb6da-956d-48c1-b21a-c3d139aa1b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a8cb0a-b8ba-4d02-b47c-723267e3a2fd",
        "cursor": {
          "ref": "dd7ec5ae-963a-4b1a-b06d-3ebf2925ffad",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "236f3f89-55ee-4f2c-a694-2efedb4259b7"
        },
        "item": {
          "id": "a6a8cb0a-b8ba-4d02-b47c-723267e3a2fd",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "035db676-0d1d-4187-b468-a1eedc25af8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c477397-6544-45d3-ab2a-53ec7196ebed",
        "cursor": {
          "ref": "264f65c2-29ae-4e3f-986b-0c61dbfb6668",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bb633791-cec3-4ec3-8d17-c5ddc45f5210"
        },
        "item": {
          "id": "2c477397-6544-45d3-ab2a-53ec7196ebed",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1cd12c70-c098-4876-8e66-cb27a6614110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc0face-5a1c-4296-bfca-f56a476b39e3",
        "cursor": {
          "ref": "011fa832-768a-4a53-aa81-6cb2bb5b579e",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "31f4a0c6-3de0-48aa-b7ee-6fe3d0abeaeb"
        },
        "item": {
          "id": "2fc0face-5a1c-4296-bfca-f56a476b39e3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "27ca4531-62f1-457b-a5af-afc9a7aa078e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dbd2f75-4765-4208-807f-1921e874e1b3",
        "cursor": {
          "ref": "03e1ca10-262a-4acd-89e7-c533a4666e5c",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9effb06d-cb35-458a-aab6-8a9291f506c1"
        },
        "item": {
          "id": "8dbd2f75-4765-4208-807f-1921e874e1b3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ff74e322-3a72-4620-99a8-cac619501bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc706ba-5110-4bfb-9904-4fc0d72d9637",
        "cursor": {
          "ref": "93c9c711-d55f-434f-8b13-bdca74ba3bc7",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3e2d97c4-2658-487e-ae56-51ef4d9bc20a"
        },
        "item": {
          "id": "7fc706ba-5110-4bfb-9904-4fc0d72d9637",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7c1044b1-6e22-4579-a29e-64b3373dad79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee522504-2dcd-48cc-9bc1-7657e5068de9",
        "cursor": {
          "ref": "9463a34e-1dad-4f4c-81eb-e140c0915bf5",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6f6dccb1-09ed-46e2-858b-3a526b45cb19"
        },
        "item": {
          "id": "ee522504-2dcd-48cc-9bc1-7657e5068de9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4a06acfb-0fcf-481a-8640-621abe0175b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe170253-5942-45aa-bf4e-a0982bcce2ba",
        "cursor": {
          "ref": "37900ddb-e3d7-4779-ab34-1a433dba7342",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ce5efc94-b87a-48b2-950b-c9603db676cc"
        },
        "item": {
          "id": "fe170253-5942-45aa-bf4e-a0982bcce2ba",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "76dbfac3-9a4b-4a51-ad59-76f3c3c05cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979ae095-2b9d-4c63-9ff8-55217446e7e5",
        "cursor": {
          "ref": "77de54bd-8073-4517-a4c5-dbd027e90d24",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ee7ad45f-c804-40e0-a68d-fdd15f96416b"
        },
        "item": {
          "id": "979ae095-2b9d-4c63-9ff8-55217446e7e5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cbe9ecf9-1144-419f-bf48-69b71618522e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0d018c-a27b-4aae-8195-8e49379d6db7",
        "cursor": {
          "ref": "f00d675d-5143-4e1d-ac7a-901c18d11ee9",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d1142c52-0888-4513-bfa5-e15bdc2d131e"
        },
        "item": {
          "id": "af0d018c-a27b-4aae-8195-8e49379d6db7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ea960fa4-717c-4b16-9e26-ee1bfb08d97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2c9e5f-4e2c-4e7a-8236-42c431d03edd",
        "cursor": {
          "ref": "8ba72cdd-d754-44d1-b66a-c82b9cd5656e",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ee2be996-3f0b-462e-8dc5-a78d4be87aa1"
        },
        "item": {
          "id": "fc2c9e5f-4e2c-4e7a-8236-42c431d03edd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2df10f96-d0ef-4d8f-94e0-5adbd84a2cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399d8e97-5433-439f-b927-60de0d8fe867",
        "cursor": {
          "ref": "925e5619-5223-4e97-a993-2d7ae0462787",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "73688b39-ee01-4f47-bf26-35cde3334377"
        },
        "item": {
          "id": "399d8e97-5433-439f-b927-60de0d8fe867",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a867fd64-958d-4f5c-be2b-073214f53294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbb8bc7-444d-4156-aead-0f441d5be1fd",
        "cursor": {
          "ref": "cb8a54ca-4fc7-4d3c-a60b-d8f1cd436f87",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "24b55a28-ab97-49a1-8423-28e76330aa6d"
        },
        "item": {
          "id": "3bbb8bc7-444d-4156-aead-0f441d5be1fd",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e0cbce00-e2ed-417a-9035-4bfd7a226b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8830b2-de67-4bad-9307-2f211b6345c6",
        "cursor": {
          "ref": "f7dbfac6-cec1-4c42-947c-10b8e5831cb1",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f96bc10f-9e12-4614-9bef-447c2e79da87"
        },
        "item": {
          "id": "0a8830b2-de67-4bad-9307-2f211b6345c6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b044180b-6571-41ed-a12b-326148c9a63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6f4eba-9927-4e8a-b953-4825ed7a0ee1",
        "cursor": {
          "ref": "6d3504a9-a031-49ef-a460-ef3ef9f8aaa9",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "41d83d70-6463-4a20-9fd0-f5fb9403ba7a"
        },
        "item": {
          "id": "0c6f4eba-9927-4e8a-b953-4825ed7a0ee1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "94a725a3-e173-4138-b6cc-ea8b752eb6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d491d0b-3071-47b8-a06b-d96591fa4037",
        "cursor": {
          "ref": "02648a54-bb61-40a5-a837-5024d268e125",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "063217c2-f9f9-425a-b094-d8cf23de9721"
        },
        "item": {
          "id": "0d491d0b-3071-47b8-a06b-d96591fa4037",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "33c0e462-de65-4598-ab09-b1c9897cef0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb8201b-c18a-4136-ab51-6b5223b82c9f",
        "cursor": {
          "ref": "1dd8dce8-21a2-4c1e-9eb0-2c8570332185",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cc850ed2-c2db-49d6-aa79-787742cd1acf"
        },
        "item": {
          "id": "ccb8201b-c18a-4136-ab51-6b5223b82c9f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a2cd8112-f3cc-47ae-8c8a-da6b259dbaa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1417538e-54be-4f15-8b93-5671b62fac60",
        "cursor": {
          "ref": "9906cc6f-a499-4892-beed-28aa9e3d001b",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ab8aae76-cc97-47ee-9ae5-038bb6809475"
        },
        "item": {
          "id": "1417538e-54be-4f15-8b93-5671b62fac60",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "aa193b06-dbfb-4945-ad83-d42b0f0442ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bff8972-b8cf-4884-aa68-b25d276e52a3",
        "cursor": {
          "ref": "8d2fa0cd-d794-4199-81d4-14f50c7a701a",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "737e0383-2d8f-4042-90d8-8c13052dc1ca"
        },
        "item": {
          "id": "3bff8972-b8cf-4884-aa68-b25d276e52a3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3f677bd8-69ee-4bf4-9a0a-e0c423e7026e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1e6161-8154-46de-8738-8f50387d4dbe",
        "cursor": {
          "ref": "72689ffb-1e6f-4337-b5ab-98727ac03c15",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d10ec51f-cbab-4d4f-b1c5-ecacc15d7b21"
        },
        "item": {
          "id": "bc1e6161-8154-46de-8738-8f50387d4dbe",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "78d568af-080e-4799-904c-d366c3c3ed05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4ad88d-7b73-4ae0-9a1a-7e41bef48d61",
        "cursor": {
          "ref": "bc6cf304-a148-42f8-83c7-b7d88309bd09",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1105de8f-a914-42f8-a713-1850755a3bbd"
        },
        "item": {
          "id": "de4ad88d-7b73-4ae0-9a1a-7e41bef48d61",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "516ee395-28ad-4c28-a63f-56351c548796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da08592-e115-47ee-a2b3-4a8c2107f3f5",
        "cursor": {
          "ref": "134601ae-5cc4-40b6-ab61-42ebeb702766",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "40e9b4b0-3f14-491a-8a73-bac3822cbe40"
        },
        "item": {
          "id": "7da08592-e115-47ee-a2b3-4a8c2107f3f5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3233d4d2-fb47-4521-8d4f-7bd01075453b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07002c32-ec6e-4c2b-8cf7-e5c93c4227f9",
        "cursor": {
          "ref": "8cca0ea5-e9ff-46ec-88de-700e0b96902d",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5890a5cc-2169-4d64-9059-ebbbbaa9bf68"
        },
        "item": {
          "id": "07002c32-ec6e-4c2b-8cf7-e5c93c4227f9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8b649cf7-fb92-4681-a8a5-03f078834dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f91416-9f2b-43b3-931c-3f72f719c527",
        "cursor": {
          "ref": "0c815001-c9af-41a2-9c3b-2642d273fc23",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "16094430-f297-457b-b8e3-5e4d008d8794"
        },
        "item": {
          "id": "72f91416-9f2b-43b3-931c-3f72f719c527",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4f68dd9b-31fe-447c-9d23-cb8c95ce236a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ab5396-6d37-4823-9c64-626b0ac4d056",
        "cursor": {
          "ref": "49d62b82-df80-4f7e-b294-d6a96fb81173",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9da11e9e-7b9c-4a11-9ad2-b892a7f9ceae"
        },
        "item": {
          "id": "73ab5396-6d37-4823-9c64-626b0ac4d056",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c0baf6e9-fcea-4c87-8733-8fa94e458e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fcb3f0-2fa5-4e65-beb9-85932f514499",
        "cursor": {
          "ref": "186cf9da-ff99-4e49-94ed-c1fb929b7a1a",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ff4b19fa-6960-4f3b-8fd7-271f9f06f31d"
        },
        "item": {
          "id": "44fcb3f0-2fa5-4e65-beb9-85932f514499",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "768a3293-e738-4da2-8a31-3a3095560e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edaeb7e9-89e6-400d-9124-f92270d128be",
        "cursor": {
          "ref": "8b1e6485-438e-462e-8bbb-ae9d8e93a7a4",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c7c04776-2466-4384-ac57-eac7b7bb4812"
        },
        "item": {
          "id": "edaeb7e9-89e6-400d-9124-f92270d128be",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6f9702e8-e3b2-43ac-a4f2-737ba9c86bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d823c1c-2409-4f42-b74f-5f2e393b93bb",
        "cursor": {
          "ref": "04be103c-8644-4f41-8f59-4f50dc5c8300",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4896c3f0-d7cd-4f40-8035-47d100bd1ee7"
        },
        "item": {
          "id": "5d823c1c-2409-4f42-b74f-5f2e393b93bb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1f705cde-d016-4432-880a-6e8f966c07e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "c93a8375-2369-475d-9801-261c43467e86",
        "cursor": {
          "ref": "180c6638-00e4-4f1a-8608-8b1f03349c54",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c4e81c5b-d6ba-4757-a41a-5a39953301d7"
        },
        "item": {
          "id": "c93a8375-2369-475d-9801-261c43467e86",
          "name": "credentials_issue"
        },
        "response": {
          "id": "227aaeb6-c528-48c5-835b-eb4f8298b108",
          "status": "Created",
          "code": 201,
          "responseTime": 2193,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e9112e-ee18-42cf-ae65-eda24c68e9f5",
        "cursor": {
          "ref": "442091ee-f68b-4c57-b2fc-75b2897c32d3",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "411e9b20-5f8d-4785-a740-f624127a504b"
        },
        "item": {
          "id": "c8e9112e-ee18-42cf-ae65-eda24c68e9f5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "baddfb0d-4439-4768-a081-fe58547a2fd5",
          "status": "Created",
          "code": 201,
          "responseTime": 2836,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "411003e3-8cec-40d5-8534-fa25ddb9335c",
        "cursor": {
          "ref": "288634a4-5ed1-48a3-9e4e-4c97022c9c5d",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bef00482-5485-4a4a-b780-d3d9814dd7ca"
        },
        "item": {
          "id": "411003e3-8cec-40d5-8534-fa25ddb9335c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bafe450a-db34-4789-9d76-7a26db192be1",
          "status": "Created",
          "code": 201,
          "responseTime": 4803,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "82eee05a-7592-4971-988c-53815556a3b9",
        "cursor": {
          "ref": "4733d6ed-0d66-48f3-aefa-00cc8d015831",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8895dbc7-4d58-4e48-8448-7e2d91cd21be"
        },
        "item": {
          "id": "82eee05a-7592-4971-988c-53815556a3b9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bce487a7-2e24-46f5-bc26-a31ae5cc4c7b",
          "status": "Created",
          "code": 201,
          "responseTime": 7978,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f424dc-4409-4986-98cb-a0aa13337989",
        "cursor": {
          "ref": "33331105-2af9-48da-8e2e-763fc86628ca",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "917a453b-e36b-4c79-97d7-1ff911a82d3a"
        },
        "item": {
          "id": "92f424dc-4409-4986-98cb-a0aa13337989",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6aef9a77-55b5-49e4-9473-52fbea9aa452",
          "status": "Created",
          "code": 201,
          "responseTime": 6411,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-24T00:47:24Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-24T00:47:24Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "c25513ab-6b4f-4d44-89c8-954d12989188",
        "cursor": {
          "ref": "4c1e73a9-cd16-4d1f-b8d7-39241fad5f53",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "af2b5af8-37ed-4a7e-a81b-f5739a24a0c4"
        },
        "item": {
          "id": "c25513ab-6b4f-4d44-89c8-954d12989188",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b517a77d-d6b3-477a-80f7-0d9dfb5a246f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "518831d7-2cc3-43db-862b-3e597eecf652",
        "cursor": {
          "ref": "4272937a-1efc-4c40-8b73-3abcaeab2487",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "218e533a-e8dd-4be6-bfc4-813e864b7dd4"
        },
        "item": {
          "id": "518831d7-2cc3-43db-862b-3e597eecf652",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f703ef27-362a-4db8-81ec-2dc879a0b66c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b428d7b-e674-456b-aa93-c141513b07e4",
        "cursor": {
          "ref": "217bb141-c9ee-4299-949e-92e8214904f0",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "adc10970-d065-4204-834d-06905f6e621e"
        },
        "item": {
          "id": "9b428d7b-e674-456b-aa93-c141513b07e4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5cd864f8-63d0-4e97-8253-e755dcb610ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242e6a0f-fee4-4f1f-8d11-f61c04fa834e",
        "cursor": {
          "ref": "2dbfc3bd-6569-4a23-a6c5-e8722ee72423",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1acf9684-89df-454f-a8d1-e9db6a9b3481"
        },
        "item": {
          "id": "242e6a0f-fee4-4f1f-8d11-f61c04fa834e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c5cdf78d-66f2-407f-81c3-c7f6f7884e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3aadc1-7526-4e62-ba3c-b83f13a32b82",
        "cursor": {
          "ref": "8f830fa3-15d4-4757-9d04-b3069a04b3d2",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "98426227-68cb-40d6-8cf2-9edfcf26ba2f"
        },
        "item": {
          "id": "5c3aadc1-7526-4e62-ba3c-b83f13a32b82",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fc0ab76f-062b-494a-96a5-b7dac617f176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1310a23b-29f6-42eb-bd21-d60f4613159d",
        "cursor": {
          "ref": "94f0cf67-d00f-4c97-a886-ac79be65039e",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dc7b0e3b-215d-42bd-b4e9-7b8b7da3b38c"
        },
        "item": {
          "id": "1310a23b-29f6-42eb-bd21-d60f4613159d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "05fa7a58-6b40-450e-9f62-bc48ee910358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d3990c-dac1-4ef9-bdae-c3be56cd1b98",
        "cursor": {
          "ref": "f1b90ab9-6b4a-4fd0-8ba4-20d561b79ea3",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8a86fefc-2ab4-4168-b099-1f12d48f0fcc"
        },
        "item": {
          "id": "69d3990c-dac1-4ef9-bdae-c3be56cd1b98",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "973c8001-ddca-4dd1-986f-b8dc544c1dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebbe740-3285-4af7-ad76-5ad6db690e1c",
        "cursor": {
          "ref": "15e7b716-3b24-4034-9f73-5d05c37a0c7f",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d562042c-a1a1-4567-9552-ce6f78662641"
        },
        "item": {
          "id": "aebbe740-3285-4af7-ad76-5ad6db690e1c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f17f635e-e2fc-4c66-ac56-5b3deed6594a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cfe14c-0c1c-40b4-acf7-0dffca5959f6",
        "cursor": {
          "ref": "0197f827-2211-40eb-9d24-b74770a6a2bb",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d65bd22f-0e9c-4220-9408-962cfc632780"
        },
        "item": {
          "id": "79cfe14c-0c1c-40b4-acf7-0dffca5959f6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "107907d5-2fb0-4f6d-9459-2215a0e364e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862c169b-5926-4873-9e0f-95ccf0d40957",
        "cursor": {
          "ref": "a658be7e-7935-4499-a9d9-eaba32351f55",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1aebe294-77eb-4e8d-b2d4-eaa2e7c633ac"
        },
        "item": {
          "id": "862c169b-5926-4873-9e0f-95ccf0d40957",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2ebba54a-2e22-4b9f-b477-fb4629baa8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f176a5d-5bae-404f-a706-37d27fcf030c",
        "cursor": {
          "ref": "5a444258-2c80-43c1-b02c-d434ad869147",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a56e64fc-d3fa-4e61-bb98-a856363f8ea7"
        },
        "item": {
          "id": "5f176a5d-5bae-404f-a706-37d27fcf030c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "67f4b637-7b14-4a98-8ff4-2d9ac64b1e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42aa9dff-4ab2-4a6c-b665-aa98374923d1",
        "cursor": {
          "ref": "559dddc8-8908-4985-9205-cf98c980c983",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d0feaed3-66ce-4efd-9b20-da0985c9389b"
        },
        "item": {
          "id": "42aa9dff-4ab2-4a6c-b665-aa98374923d1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4db06488-f170-4cb6-9d81-7eecab4c4a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1814aab3-6941-4cda-aa8e-90dd169bd20d",
        "cursor": {
          "ref": "d838abab-8d2d-4f74-9f8b-2e2280bb4958",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "09e6cdd7-e459-4da0-8dce-c77d7d721b73"
        },
        "item": {
          "id": "1814aab3-6941-4cda-aa8e-90dd169bd20d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "42d6b029-39eb-4199-9dab-0eb100ad6d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8a7cf4-c669-4e2e-96e9-cf656d847897",
        "cursor": {
          "ref": "842b0565-8413-4e78-a672-97ae50e26aa8",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "584c460c-1c45-4d16-9732-89d544fab6de"
        },
        "item": {
          "id": "ef8a7cf4-c669-4e2e-96e9-cf656d847897",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8d8aae1c-b835-4bcf-b9d8-12e233a2eef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb9e404-b224-46ae-ae85-4a802aa558f2",
        "cursor": {
          "ref": "ee64ff00-372d-4544-bdd5-282e0d379280",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "417561ac-576d-4f04-9766-3517b2711102"
        },
        "item": {
          "id": "3fb9e404-b224-46ae-ae85-4a802aa558f2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a3c9b90f-88f8-448a-8515-e3d9e201d436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881f8585-ff58-4acf-af31-67c26e48f6a5",
        "cursor": {
          "ref": "52a21f45-31e5-43e0-875d-62a0aa976347",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4d1a349f-c330-4c23-aaf8-01a8eba29746"
        },
        "item": {
          "id": "881f8585-ff58-4acf-af31-67c26e48f6a5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2a0a1e57-2f70-449b-a946-33d607799931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9346d3-9bde-4a5c-beb1-8c8d814494bc",
        "cursor": {
          "ref": "d42d5952-d67a-421e-b668-83bdd88b4257",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4e36cc3a-2aee-4be6-b677-15ba184ed14b"
        },
        "item": {
          "id": "8b9346d3-9bde-4a5c-beb1-8c8d814494bc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "548fc0e6-3737-42b0-a461-28fd22183766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5badce-832d-48d7-9d82-982cd8c3590f",
        "cursor": {
          "ref": "a783b64b-741e-4617-a3eb-e644b98b32d8",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f72a8ca7-7189-46b2-a81c-27493562d088"
        },
        "item": {
          "id": "9d5badce-832d-48d7-9d82-982cd8c3590f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "05d530f4-3be7-431b-8443-0ae5e0cf19d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854b64c1-d5a8-4872-ab16-50581db0d25d",
        "cursor": {
          "ref": "b1346aba-e3eb-46aa-96a2-119a5736df10",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "748b6589-31e9-465d-a907-2c791af51a5e"
        },
        "item": {
          "id": "854b64c1-d5a8-4872-ab16-50581db0d25d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cc991cbd-b97f-42f3-acbd-f3aa5649bd65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2217d420-494e-43fd-b4a9-96a26c1453c0",
        "cursor": {
          "ref": "91094110-b2cf-4527-b930-40e2ef94cf9a",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b5b92e89-1959-4f39-a839-45cad9dd5646"
        },
        "item": {
          "id": "2217d420-494e-43fd-b4a9-96a26c1453c0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "81af13ab-dc13-4875-b4be-a881583c55a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7f219d-1a0f-4872-a86b-10e42921e0ad",
        "cursor": {
          "ref": "8f5bb960-847d-4285-9afb-13df3d90fe8c",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f8764824-99d3-4f65-8652-3d900864d086"
        },
        "item": {
          "id": "1a7f219d-1a0f-4872-a86b-10e42921e0ad",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1475c840-a804-42a3-8caf-b17ffa6f134f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e37ed67-8c12-49cb-bdf8-b20334fa943d",
        "cursor": {
          "ref": "24bc393d-c1fa-4e53-8940-ea63a64b833e",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b46dac73-a25b-45c0-b8ed-e8e5de6080e7"
        },
        "item": {
          "id": "1e37ed67-8c12-49cb-bdf8-b20334fa943d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b6154773-fa0b-46ff-851c-66a82aa53da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1473b409-bc8e-4a8b-bb86-dc8c13946a20",
        "cursor": {
          "ref": "4a3422d7-5131-4162-91ec-ae2916fe0a03",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "faf25bd7-0dee-4f6d-941f-b2f06e7c8b01"
        },
        "item": {
          "id": "1473b409-bc8e-4a8b-bb86-dc8c13946a20",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "deb31107-8b7b-4ce1-9c40-52efb221d7cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef470c98-7eb9-4b47-82ae-6ef8b8647a8c",
        "cursor": {
          "ref": "9c4e0de3-6d51-41c2-833e-81c3468caf65",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "869172d4-7d91-4542-a81f-c4c84510087e"
        },
        "item": {
          "id": "ef470c98-7eb9-4b47-82ae-6ef8b8647a8c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "81858e43-7e35-4730-8fc1-8c502694fc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b3860b-7ec3-4746-8d15-dad3b553405c",
        "cursor": {
          "ref": "e063e5f6-5998-4cb4-ac4f-d7db7a658cf3",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6fba4385-6a62-4be8-8a6c-8ad79ad58ae3"
        },
        "item": {
          "id": "c4b3860b-7ec3-4746-8d15-dad3b553405c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8bc33bcc-e0c5-4805-b37e-3a79b8062366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226c08d1-ac39-4891-ba07-db4880de3b9a",
        "cursor": {
          "ref": "5bb0b5b0-f669-47df-a3bc-e8f88a9a5f3e",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e767d984-583f-4923-8e5f-e54cea0db296"
        },
        "item": {
          "id": "226c08d1-ac39-4891-ba07-db4880de3b9a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0cb07ce8-7236-49b0-b9dd-c612c8ef0ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffaebcf-61bc-442a-9dc3-d6a4da071354",
        "cursor": {
          "ref": "521caf53-55db-4711-a0db-31a81e800fd3",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "01a3a9a5-4bd5-4d4b-8962-69e43f0e9f12"
        },
        "item": {
          "id": "3ffaebcf-61bc-442a-9dc3-d6a4da071354",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cd35401e-dad5-4143-85a4-658ece55983a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961bd4e8-38db-4289-b424-1dc46b2cb179",
        "cursor": {
          "ref": "d35e3194-a74e-4cfd-8d42-dd4e3b359b93",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "766ba8c0-f161-42d6-bc58-60bac91bd8cd"
        },
        "item": {
          "id": "961bd4e8-38db-4289-b424-1dc46b2cb179",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dd80131b-3ed0-4aa5-9b2a-eaacb1d8a31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735bf74e-067d-4b7f-b5aa-74fe495e9180",
        "cursor": {
          "ref": "9c3d4174-1f25-4a2e-804c-fe9d1393fc3d",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b2c73d91-77ca-4da6-8677-1d5ee9cc2c1b"
        },
        "item": {
          "id": "735bf74e-067d-4b7f-b5aa-74fe495e9180",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a611c5af-9ee3-490a-b518-0dfd5e31e394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16f6ef7-fa51-4e61-9043-addf9221708f",
        "cursor": {
          "ref": "a1548058-6d73-44a1-b667-d76b7724e842",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f681887b-4565-4edf-9dc4-cb7453c84037"
        },
        "item": {
          "id": "a16f6ef7-fa51-4e61-9043-addf9221708f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c0ffd5e6-b2e5-468f-8fb0-855d37082749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9c4fed-0b95-4e02-8ac6-29489859e365",
        "cursor": {
          "ref": "f536507d-9c80-45c0-a082-97b3eb94fdba",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fb44067b-e390-40c8-beb9-6fed006e4452"
        },
        "item": {
          "id": "0a9c4fed-0b95-4e02-8ac6-29489859e365",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9bcaab29-fbcb-4000-b170-81a7e5f93300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7848f815-8755-480d-b8a9-00f57353c27c",
        "cursor": {
          "ref": "2a71cf82-67a8-482f-ad38-e2e0f3427171",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f5034ca7-ab93-4b8f-8ae9-b244509ec140"
        },
        "item": {
          "id": "7848f815-8755-480d-b8a9-00f57353c27c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f50f7400-6109-45d1-a86f-7914b6583764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415de9c3-10c8-46b0-9f85-994a95b10a45",
        "cursor": {
          "ref": "8e0427f2-9c3b-403f-9451-22c20b5aad66",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "010083d0-b421-4c7d-a631-61496b1d92e6"
        },
        "item": {
          "id": "415de9c3-10c8-46b0-9f85-994a95b10a45",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8fa5c5a3-c67e-41d7-9ce1-515e74b46c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a63e561-2e40-4409-9510-03062570cd83",
        "cursor": {
          "ref": "5e3327e7-abcf-41cc-b166-f4adbc70bfe4",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bdc3fa07-6a67-4aae-bc11-d2ec59cee336"
        },
        "item": {
          "id": "2a63e561-2e40-4409-9510-03062570cd83",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8b31d2e2-5e5f-4121-90ba-06c98b22d6d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "71458feb-796f-4af2-903d-18f6de5a6f43",
        "cursor": {
          "ref": "a932fe42-ba16-4cae-9812-3f0a5d25e79b",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f07b6fa1-72b3-46a4-bd3a-e2279a179652"
        },
        "item": {
          "id": "71458feb-796f-4af2-903d-18f6de5a6f43",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "888899d3-556e-434f-82c6-04b364a7aba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47da78b-7e3c-4365-82cd-a8bf4e195931",
        "cursor": {
          "ref": "1125830d-256c-49d2-9f52-1e5aa38759ba",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "eeeaab99-de9e-4c75-b091-44dfa5270a93"
        },
        "item": {
          "id": "b47da78b-7e3c-4365-82cd-a8bf4e195931",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "74283f79-325b-4c20-820b-5fd606c98eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4042f9-73ea-4f4c-af98-a71538219a36",
        "cursor": {
          "ref": "8be094c2-73d7-4318-baa9-20663312a274",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ec57ff6e-9fae-42e1-bc1f-d6af87e7bf98"
        },
        "item": {
          "id": "cc4042f9-73ea-4f4c-af98-a71538219a36",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1b710347-4333-4689-9365-8f06aa052e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824d12a3-d83e-4ebe-ba79-62760e5a9bcb",
        "cursor": {
          "ref": "2def0524-01c0-44f7-afc7-babf0427f190",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4883ce86-a5c0-451c-a479-7916164c3dec"
        },
        "item": {
          "id": "824d12a3-d83e-4ebe-ba79-62760e5a9bcb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "589549a6-8bed-45ba-a81a-e4f014aa334e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8871d0b-098c-4d75-80a9-c89ac47a3ca0",
        "cursor": {
          "ref": "90f2a628-edf8-4b5c-a4f5-350c8dbfcacd",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "60196f04-6b8d-497b-9d79-1483863a467f"
        },
        "item": {
          "id": "b8871d0b-098c-4d75-80a9-c89ac47a3ca0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "07d793f3-9616-4767-838c-5cf83d029210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c279aa3-4a3b-4dff-a010-ea2755ff42e7",
        "cursor": {
          "ref": "ca2291e8-d94f-4044-b198-1ea9c82f67a3",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "aba2a21b-3277-4254-a829-b78061405630"
        },
        "item": {
          "id": "5c279aa3-4a3b-4dff-a010-ea2755ff42e7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5955cbf7-0198-4501-87cc-28ef385c5479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cb1240-bf78-4198-bb7e-1b8f6fc12101",
        "cursor": {
          "ref": "894dd424-3ad2-47a4-a8ed-5958968afed4",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5031df39-b426-4c8c-8cd2-a7246571358f"
        },
        "item": {
          "id": "36cb1240-bf78-4198-bb7e-1b8f6fc12101",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4b7a36bd-08ea-45d0-8d2a-94fe48942a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a016c3-b0c2-45c9-b921-8ab53526abcf",
        "cursor": {
          "ref": "1a4601a4-a951-4ea5-b3f5-74d9cd4e3f4b",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4a0ca515-39b2-43e8-94a5-454436f68330"
        },
        "item": {
          "id": "24a016c3-b0c2-45c9-b921-8ab53526abcf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "25846121-d6d4-4f34-b1aa-01f6e56574a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c9a2fb5-95c6-4863-857a-046ac67a5df7",
        "cursor": {
          "ref": "4f11fcf5-37a7-42ca-baa2-d1ba1650bb64",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9baab11d-6a95-424b-83a2-0135b6e0f4b5"
        },
        "item": {
          "id": "0c9a2fb5-95c6-4863-857a-046ac67a5df7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4201bfce-1829-450d-8c19-bbdf8b80a561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2ac15d-eec0-49a3-a19c-f2281f8febb2",
        "cursor": {
          "ref": "37181d83-2c8b-419f-ada7-8c044accb2de",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2fbe14c0-54c6-492d-b43d-3a1af7e08bb3"
        },
        "item": {
          "id": "6b2ac15d-eec0-49a3-a19c-f2281f8febb2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "08cafa8a-67be-4a94-872d-e300fba22187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900d63d9-4553-4221-9680-08a0df948c47",
        "cursor": {
          "ref": "5dbe3df5-3de5-4c69-b945-7c96ed1b50d5",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "55f50f05-83cd-483b-a724-6873fe4e31a0"
        },
        "item": {
          "id": "900d63d9-4553-4221-9680-08a0df948c47",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f21dd5da-b82f-411d-8200-780050f4ae2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025891c9-12b3-4781-b733-3fee9710acc6",
        "cursor": {
          "ref": "2460f232-da64-48d6-9200-b4938b71d68c",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1ac6be1d-14e7-4210-b5f1-bf8f86ff28bd"
        },
        "item": {
          "id": "025891c9-12b3-4781-b733-3fee9710acc6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1ff95e27-8f78-4323-ab59-82aeb48cf0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa59156-e8e7-49b5-840d-f0d0373dd394",
        "cursor": {
          "ref": "e8a53d30-ccf6-4f09-ac01-7a16e3576122",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5683f056-2764-48bc-acb7-df460c434cd1"
        },
        "item": {
          "id": "efa59156-e8e7-49b5-840d-f0d0373dd394",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4600199b-3116-4d6f-b28a-5cfc587f6a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898fe034-1189-410f-a1dd-ca206d86e36e",
        "cursor": {
          "ref": "f1532e38-5b14-4e39-a9fa-6d3edbb0f52b",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d9c35fc0-1e3d-42a3-a275-becba11276a1"
        },
        "item": {
          "id": "898fe034-1189-410f-a1dd-ca206d86e36e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a75ebd3a-7e36-445a-bf87-b4b4987c6ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a259a234-7983-485c-8512-2c188f750f04",
        "cursor": {
          "ref": "59233871-74e3-46ad-9b64-b41032200d2f",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "afdc9ce4-e946-4ba7-b68d-252b564c449e"
        },
        "item": {
          "id": "a259a234-7983-485c-8512-2c188f750f04",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "17cad8ee-a4f5-476d-8753-6891b7fff816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb41d44a-f650-4be7-859b-3afc1b30fed4",
        "cursor": {
          "ref": "183f8784-7b62-46e2-ab08-418ea9581839",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c5cc5f74-1576-4fb9-add9-44df2ee0bd46"
        },
        "item": {
          "id": "eb41d44a-f650-4be7-859b-3afc1b30fed4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3d3cd376-69ba-4a47-b0b1-644b0ad3d06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c979829-ec6f-485b-9bef-ee5220b361c3",
        "cursor": {
          "ref": "a6c843b7-601e-4ba1-b678-387537025c0c",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "175a4a3d-92e6-407c-9852-068cf4b29aac"
        },
        "item": {
          "id": "5c979829-ec6f-485b-9bef-ee5220b361c3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bb19e04d-18ed-4d80-8b6c-f5076994c9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95985bf-33ec-40dc-b949-57eb44f3c084",
        "cursor": {
          "ref": "40f01ce3-ec27-4013-9f92-766b2f26b8d6",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e84b0d3a-001c-438b-b64c-3a11d088c288"
        },
        "item": {
          "id": "f95985bf-33ec-40dc-b949-57eb44f3c084",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "110498e7-ae35-4b79-ac7d-6bec068b507d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0617eaf-33d5-4c12-8682-56b894ba004a",
        "cursor": {
          "ref": "717dfb38-6fdf-44a0-84a6-69b4e2e0426b",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ce14283e-f3d7-462a-b732-a1a270542c4c"
        },
        "item": {
          "id": "d0617eaf-33d5-4c12-8682-56b894ba004a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a81be942-cecc-4a16-913a-b66d65a866ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ed7b28-d143-4599-a658-ec4f0267712d",
        "cursor": {
          "ref": "8b843e70-bdd7-4388-b57d-8db0d1b15400",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1208e3fa-7807-4e44-be2d-9029499ba42a"
        },
        "item": {
          "id": "e2ed7b28-d143-4599-a658-ec4f0267712d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8a3408ef-1398-4541-8702-aef933aa8c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39747e63-b3fe-4515-8b38-d68f416999a2",
        "cursor": {
          "ref": "47485434-5582-4026-83bf-f14f47c4a29e",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fe5596f7-5aea-4ae5-8742-99485db14949"
        },
        "item": {
          "id": "39747e63-b3fe-4515-8b38-d68f416999a2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7e7dfdb1-586c-4cd5-8335-31390a5f9e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c78fa1-aaa1-4f1d-af6c-a85cbda571a5",
        "cursor": {
          "ref": "bbfbbfa6-12a8-47f3-a8be-60061026bb66",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e0e70787-41dc-4b4a-8b82-a3b5c09ed98c"
        },
        "item": {
          "id": "85c78fa1-aaa1-4f1d-af6c-a85cbda571a5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "870a0730-ef13-4ebb-bf9d-23553f01e003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d7e40c-4bcb-4960-bd3e-fe3f5c5302ca",
        "cursor": {
          "ref": "a951ae0c-d140-46f8-82f7-856ed990a8de",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "74d583e3-79ee-40a8-8736-1d68ad3385e3"
        },
        "item": {
          "id": "70d7e40c-4bcb-4960-bd3e-fe3f5c5302ca",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "02852e03-e50d-4146-9e78-ba73b2dc88f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9b41af-efc1-4dc3-a747-38dbba8b7c23",
        "cursor": {
          "ref": "4a787151-ea6d-45f1-be12-ee706a7b9ca1",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "aed2b7c6-1056-4428-bade-288716c68064"
        },
        "item": {
          "id": "3c9b41af-efc1-4dc3-a747-38dbba8b7c23",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "322f5d63-de32-4c49-a066-18f8cf942e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003d7413-1688-473b-82ca-8e1b9c8690fe",
        "cursor": {
          "ref": "d638b5fa-b65f-44df-bdf6-4d8c7c89c364",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3ed6456a-6c8a-4f3e-81ce-b5bc679f0700"
        },
        "item": {
          "id": "003d7413-1688-473b-82ca-8e1b9c8690fe",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d71afbf0-135f-4f14-9eb3-a0c7f2c6a113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19eadd96-71d8-4130-b3b5-6a63f4002fe5",
        "cursor": {
          "ref": "c229eb72-2e1a-4fb9-ac93-06f237b1b535",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ec34bcb1-669f-4f15-97da-c4f7264faf3f"
        },
        "item": {
          "id": "19eadd96-71d8-4130-b3b5-6a63f4002fe5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "79f859fc-05a7-4fae-97c7-82a60c59b36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994b1b62-f68b-4443-8115-110d3408d4b7",
        "cursor": {
          "ref": "85cc7b6c-8477-4f15-9dd7-a6a18bce5ad4",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d51714c1-ee53-4b22-a220-f31a2a8d5b24"
        },
        "item": {
          "id": "994b1b62-f68b-4443-8115-110d3408d4b7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bd115167-58f7-44dd-9c3d-2fafcd51d513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327f6f1d-0f25-44ee-a4f7-98ea15e9cbae",
        "cursor": {
          "ref": "ebd77b80-a77f-4db3-8217-a718a527f807",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "af49755d-b0c0-426b-80fa-358bef5c8824"
        },
        "item": {
          "id": "327f6f1d-0f25-44ee-a4f7-98ea15e9cbae",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e8b16bdc-61d0-49c9-a988-4da55c1ae2d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1496853-8648-4b36-aec7-40a263829ca9",
        "cursor": {
          "ref": "ecaf3bf2-7cfb-4e7b-bbb2-9f61e98877b0",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dc70bed1-28f8-4a99-afd4-1c414c40f611"
        },
        "item": {
          "id": "d1496853-8648-4b36-aec7-40a263829ca9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "84c340c4-8e99-493f-8a75-d9061675d7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ec0910-4561-4ee1-8f1d-effeef0778d6",
        "cursor": {
          "ref": "f30617f3-f243-4a7a-9b4e-0094e1e7d996",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "feb204eb-1592-493c-9fda-5071e921ab44"
        },
        "item": {
          "id": "c8ec0910-4561-4ee1-8f1d-effeef0778d6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e6e72d49-f6e9-4773-b100-cb4f9b9cdde2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e94370f-d9e8-4c27-8a5d-96e88546e130",
        "cursor": {
          "ref": "3d77fa8a-1004-4612-9100-ddea56a46f40",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d535e18b-08a2-4455-9ad8-ef4165486128"
        },
        "item": {
          "id": "7e94370f-d9e8-4c27-8a5d-96e88546e130",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a2b981d5-df96-4d98-8e6c-f845a4468418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc91f0a-67cb-4837-93e1-ae666379c466",
        "cursor": {
          "ref": "febb1162-b16a-45e8-81a9-7df3b45d0ee2",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1c2883ea-cd9c-4ff5-8438-a891f08e9a43"
        },
        "item": {
          "id": "abc91f0a-67cb-4837-93e1-ae666379c466",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "fad62d59-2dbe-45b5-8f29-206e498f44b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a2ac93-6dcd-476b-aaed-ffc0f9ab1d99",
        "cursor": {
          "ref": "9bc5bfe3-fcd5-4ccf-aa52-042f8e9d4ef6",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0ad93687-7260-4071-a240-1235408ac4f8"
        },
        "item": {
          "id": "44a2ac93-6dcd-476b-aaed-ffc0f9ab1d99",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1f7a733b-8a9a-4207-8439-60a47f502107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24e8b5d-e9de-40df-a03b-4689d82e132e",
        "cursor": {
          "ref": "11b7ffab-8378-4b09-a6fe-1c64629dab9d",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5b92b184-c75d-418b-80bd-27697c0491cf"
        },
        "item": {
          "id": "f24e8b5d-e9de-40df-a03b-4689d82e132e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "1c08b7f8-c3cd-4f62-a986-96cd52662289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5e1bca-fb9a-4b49-b940-1423b1f5c81c",
        "cursor": {
          "ref": "2aecb254-28f0-44ff-8700-5cf1cb1b67d4",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f9b0f595-5c8e-4486-85d4-a5f211a6a341"
        },
        "item": {
          "id": "dc5e1bca-fb9a-4b49-b940-1423b1f5c81c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ce9f7864-b7ce-48eb-af87-578e05053f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a245af-89d2-4d15-907c-788808ba3af1",
        "cursor": {
          "ref": "03690fe3-5f62-4710-9570-a9d2847e02b2",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "44185415-cd9a-43f0-b7cf-cddab66703ac"
        },
        "item": {
          "id": "b3a245af-89d2-4d15-907c-788808ba3af1",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "56e2f0f3-2334-4b74-9899-3ff0ddc043a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0f3d4f-677c-413d-8ee6-c0c05ccd05a1",
        "cursor": {
          "ref": "4a486db8-87b1-40ba-8189-56b6feac026f",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a2d9b483-fdef-4d7b-876a-5ac40036e378"
        },
        "item": {
          "id": "0b0f3d4f-677c-413d-8ee6-c0c05ccd05a1",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5863c83f-0c47-4d72-a0e3-b3aa9af6ab60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67fca8ca-45a1-4cfe-a2d0-0b57d7f7b1e2",
        "cursor": {
          "ref": "b6db7d16-7bac-4217-a8c0-77758feda255",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f7f04977-371d-4765-bbf3-0a4e3590e5a8"
        },
        "item": {
          "id": "67fca8ca-45a1-4cfe-a2d0-0b57d7f7b1e2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a11abb61-3f4e-4a9c-8541-5ebd8eae7df5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "30cce08e-742d-4d30-a971-648e5a6cf841",
        "cursor": {
          "ref": "57e68e86-25b1-4087-98ed-b9747d937101",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "44fe5a32-6b86-4bd1-ada6-9b5481b5b737"
        },
        "item": {
          "id": "30cce08e-742d-4d30-a971-648e5a6cf841",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c9d48743-f435-4a7d-bcc3-f9dd9cd875ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9653fe-da50-442a-8e74-6701f6381a8a",
        "cursor": {
          "ref": "9f16d3f5-5d43-43e3-b206-4cc3ce432523",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9ff811ee-d749-42ec-a155-49bddec624ba"
        },
        "item": {
          "id": "df9653fe-da50-442a-8e74-6701f6381a8a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "78e2f0a9-367d-48d9-936d-66339afa433f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b59f897-7dd1-45c4-8a8e-f0cb74dabd5f",
        "cursor": {
          "ref": "79dcc19f-fe89-4926-8b55-b3b987bef9eb",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1bf75169-d6a2-4fcd-b77c-b6e4b7bbea1f"
        },
        "item": {
          "id": "5b59f897-7dd1-45c4-8a8e-f0cb74dabd5f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e6be2221-be02-438c-96df-b9196bc3d8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda9292e-16cf-4847-b8c7-7d096f07c04c",
        "cursor": {
          "ref": "63ff3942-b44f-4a83-8025-656b742fc31b",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c12aede2-9d62-4431-8d57-c666b1e32326"
        },
        "item": {
          "id": "cda9292e-16cf-4847-b8c7-7d096f07c04c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "11882906-2c5e-414b-8d0d-6c53633d1ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0ab6df-a57f-457e-80f5-be0b214b55f4",
        "cursor": {
          "ref": "16de507c-ad31-410d-b953-199dda4458c8",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "44ea7b14-9f8d-4134-a99e-b94ee050fcde"
        },
        "item": {
          "id": "8b0ab6df-a57f-457e-80f5-be0b214b55f4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "19a7ddaa-bbdd-494a-b763-8f4eb0219f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cb5c98-ea99-498f-85c1-6c7970d204ca",
        "cursor": {
          "ref": "4b1b15a4-2e42-4abe-bfe4-f2e47c7f2dab",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bab6488c-49e0-4bda-9933-7bba96197480"
        },
        "item": {
          "id": "91cb5c98-ea99-498f-85c1-6c7970d204ca",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4a853cb7-991f-4eb3-91fb-434ad586127e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b77b73-ccc6-489e-be9e-fc40d0370576",
        "cursor": {
          "ref": "12a13350-1a2d-40e4-a584-fe3e8a9bb74d",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c81331eb-18e5-49b2-ae42-5a1faa82dc15"
        },
        "item": {
          "id": "c5b77b73-ccc6-489e-be9e-fc40d0370576",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d3fca2de-ae93-402c-8861-7c88bfc11395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a091a78a-50dd-409d-b6cc-93d34e7896ee",
        "cursor": {
          "ref": "764057db-6748-4cab-8f7d-9ddedfb85664",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7db9df6a-6b42-4b8e-91ab-77e1bb3e265b"
        },
        "item": {
          "id": "a091a78a-50dd-409d-b6cc-93d34e7896ee",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dde9c3e2-2361-44d4-a020-29af11e9702c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c88db74-1b77-4f39-9bfc-63ccae36884c",
        "cursor": {
          "ref": "ab566f6d-850d-49c9-8b3c-5ffca124fff2",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "453496ed-84d8-4f99-886a-effec5bfd10e"
        },
        "item": {
          "id": "8c88db74-1b77-4f39-9bfc-63ccae36884c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f86db763-a695-454f-a02e-1858e014e729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f9ab8c-0199-41b0-b80f-5bbde0719468",
        "cursor": {
          "ref": "c7e9e2df-d0b9-4df6-a4f6-02ef42403c69",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3e0de282-1661-4e27-877e-f755a839bec2"
        },
        "item": {
          "id": "c0f9ab8c-0199-41b0-b80f-5bbde0719468",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "29663f52-d0bb-4639-a13e-f5b3c4c4c87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1bbd3b-b5f0-4193-90f4-1a4941ab1682",
        "cursor": {
          "ref": "cc42cdec-ed5c-4e21-9ff1-fb2df5a5719c",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "29bab24b-0c14-44a6-9d95-c072420efa26"
        },
        "item": {
          "id": "9c1bbd3b-b5f0-4193-90f4-1a4941ab1682",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2d6d6816-e730-4f18-bf1d-305aeeeaab8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df98b23-5784-43b5-a8c5-552d13e14d36",
        "cursor": {
          "ref": "e302e17f-2e80-403c-9f6a-189fc3a07e0b",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "abb9e374-59de-44ff-98b5-59e3be5fba16"
        },
        "item": {
          "id": "9df98b23-5784-43b5-a8c5-552d13e14d36",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "733d9c88-811a-47cc-97a7-ba49d94fada2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75d910f-efb6-4247-8ed2-7d3c1e948d50",
        "cursor": {
          "ref": "e53642f0-6f5c-454f-b872-85bd5a310e02",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2ddcf5e2-42c3-4044-b284-103ed363adef"
        },
        "item": {
          "id": "f75d910f-efb6-4247-8ed2-7d3c1e948d50",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4c4de75c-bd81-4785-a67d-79f636ccb4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d060dc85-43be-4e26-9a55-c9c5f3b358c9",
        "cursor": {
          "ref": "84c45b66-7a72-4ae3-8807-b7abcd45022a",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c4e5d3db-e00b-4bfb-840b-a943a3500954"
        },
        "item": {
          "id": "d060dc85-43be-4e26-9a55-c9c5f3b358c9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "73ed33f3-d74a-433e-a3ab-d5df115fe063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdf4b04-befc-4511-9cd3-c4a23091e265",
        "cursor": {
          "ref": "832ab8cb-89e4-4ae1-ace3-e62c03b04e3b",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "63f70cd0-05d1-41a8-b263-fbf4dec88d83"
        },
        "item": {
          "id": "bfdf4b04-befc-4511-9cd3-c4a23091e265",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "30abf5d9-784d-47af-8421-50bf16df52da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85069b1c-366d-4b38-9f1d-6ec584c41f9f",
        "cursor": {
          "ref": "0e130982-600f-460f-8d75-6c295e5330c5",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8f8eda5d-1c20-4a96-8da4-98818d98772c"
        },
        "item": {
          "id": "85069b1c-366d-4b38-9f1d-6ec584c41f9f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2f3527b7-86b8-4f08-beb9-add2ecdfaad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d210af29-f2c5-4821-adab-4bb4094a2e0f",
        "cursor": {
          "ref": "16c755b3-9a38-4100-b487-7929a8eb8743",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "670ea16e-151b-4736-a8d1-179e4acd392a"
        },
        "item": {
          "id": "d210af29-f2c5-4821-adab-4bb4094a2e0f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b81491f0-4444-4e07-a8ae-bf33f3ee5df2",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "89f886b5-d0db-4399-bc37-0b0e6364bff7",
        "cursor": {
          "ref": "26b72c81-69a3-48f7-8216-51dee52cedcc",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c5287666-3412-41d5-86ca-9f24985ecf63"
        },
        "item": {
          "id": "89f886b5-d0db-4399-bc37-0b0e6364bff7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8e091dac-14c4-43ff-8ab6-10ce00da1f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5962b1de-bf54-42bf-a7a2-bfda4a1f9c81",
        "cursor": {
          "ref": "dc5821a0-7d51-4524-a6a6-b0739857a4af",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "340e0548-f856-455e-a129-53cfdf812bbc"
        },
        "item": {
          "id": "5962b1de-bf54-42bf-a7a2-bfda4a1f9c81",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d1b3d444-52ac-41e8-bf5d-fa12bd43c803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4babb1dd-7280-43ed-a33f-80921902ac7e",
        "cursor": {
          "ref": "67097440-b273-4a69-89ed-fc4290e85b62",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a64211b9-2278-4b82-a948-c63130cb7874"
        },
        "item": {
          "id": "4babb1dd-7280-43ed-a33f-80921902ac7e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6e82eea8-181b-4c7a-87a4-94ed0888ac65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40742afd-fe7a-4cc1-8319-c99cffa5f488",
        "cursor": {
          "ref": "3a3673f5-2bbe-4759-ab5e-54dfe569b8c0",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0d12b3eb-7c1e-41d7-a149-de18a25ebda3"
        },
        "item": {
          "id": "40742afd-fe7a-4cc1-8319-c99cffa5f488",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "df7fac4e-bcc6-4977-ba38-2f65c474f7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654a1c56-a2bc-4716-baf8-604065e84923",
        "cursor": {
          "ref": "7e7880ea-8400-4f3b-90e5-f35b4b49f1a7",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "622127ed-fd33-40d2-8012-9aad4428c9db"
        },
        "item": {
          "id": "654a1c56-a2bc-4716-baf8-604065e84923",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cdda06cc-22ad-4e07-bd4d-71f53585a981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4063d392-c0a6-41c1-a0a3-5acac54c2bc0",
        "cursor": {
          "ref": "9ede2ca0-3c25-425b-a857-4a2a688662ac",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fd53b768-69bb-4600-b945-cae3cc3bc39e"
        },
        "item": {
          "id": "4063d392-c0a6-41c1-a0a3-5acac54c2bc0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3c7975d4-4aca-415b-921c-eaafe5bc120e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2988cb-4841-40b1-9ab8-f7bd3472ae6d",
        "cursor": {
          "ref": "0f9ce244-985c-45fb-bf3d-5703878d8eff",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5523538e-f7e9-4c6c-bc93-54a54578d692"
        },
        "item": {
          "id": "7c2988cb-4841-40b1-9ab8-f7bd3472ae6d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9108f344-6dfd-47ef-940f-dcfdb17578e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ffe2b0c-94c5-4c34-8c9f-af1f852c9f5e",
        "cursor": {
          "ref": "799ae5b1-87f7-4359-9647-178d7fcc6a26",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b460f68a-ca3b-44ba-af6b-8273c88fbea9"
        },
        "item": {
          "id": "1ffe2b0c-94c5-4c34-8c9f-af1f852c9f5e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4b7a293c-77fb-43d5-8fdf-2d8b9d2d50bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7cf73d-5cb1-4d21-88d3-57fcaf7affdf",
        "cursor": {
          "ref": "1ab149a7-fd2d-472a-bb62-72f5754e741b",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e5690558-e0d3-4a49-af79-03f94253d8bc"
        },
        "item": {
          "id": "6a7cf73d-5cb1-4d21-88d3-57fcaf7affdf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "614ca919-0058-4b21-8e97-0eaa76653ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d7fd10-2253-49e2-8266-9f16de58c961",
        "cursor": {
          "ref": "d6a084d7-850b-40ae-9daa-339049540c22",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c4dbaee8-a593-4128-9ebb-0b3612841d87"
        },
        "item": {
          "id": "93d7fd10-2253-49e2-8266-9f16de58c961",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9c5e60a1-7fff-49a5-9287-28c1f854ea0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb5a2a4-ea59-4d15-8f3e-4d1467abd7ed",
        "cursor": {
          "ref": "aea297a4-772c-4487-bb9f-fa6450b8f3ec",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0eae3705-6c43-4352-aa22-f1e89a2a755f"
        },
        "item": {
          "id": "dcb5a2a4-ea59-4d15-8f3e-4d1467abd7ed",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "88935202-52fe-48e4-954f-76e9d948c775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5891523-4c1c-4bae-8055-ade0a174e958",
        "cursor": {
          "ref": "4d54ece0-f57e-48fe-996e-1c3aa38e7a14",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8dea0ed5-e35d-4790-a4cf-388ba09e7eb7"
        },
        "item": {
          "id": "f5891523-4c1c-4bae-8055-ade0a174e958",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8f9e46c8-667b-46fc-90ed-853571828376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aeadb94-02a2-4fd3-9568-e16baa9a9d64",
        "cursor": {
          "ref": "037d291d-a01d-40b0-9319-cc10124e9114",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2127a861-5e96-4344-947b-f7d9606807cf"
        },
        "item": {
          "id": "7aeadb94-02a2-4fd3-9568-e16baa9a9d64",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a172a838-1eeb-45ef-8dbc-84559a029674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e948cc7-7d7f-48c1-80b3-b03052558fb7",
        "cursor": {
          "ref": "ba5e2042-8106-4e27-9885-f03fa82dd326",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "acc1eb23-4998-4331-9e94-78a4f9edaab8"
        },
        "item": {
          "id": "2e948cc7-7d7f-48c1-80b3-b03052558fb7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2fe1ab6f-abb2-4078-ba21-2d77d0285c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51ddd9b-da53-4b2b-a7c9-3193529bf04d",
        "cursor": {
          "ref": "a39eb2c1-c7ea-4551-b658-19e40feb294f",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6ace3057-a7fe-48e7-9b13-04a39c1f0ecf"
        },
        "item": {
          "id": "b51ddd9b-da53-4b2b-a7c9-3193529bf04d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9b12e38c-c5f3-41c0-87da-79d691f431b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8415943a-cb6e-4d9c-bc70-124120a14c49",
        "cursor": {
          "ref": "1a229fb1-b748-434e-93ab-2b5b25def26e",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "12bb2ad1-bb51-4033-a10f-1d07d671c61a"
        },
        "item": {
          "id": "8415943a-cb6e-4d9c-bc70-124120a14c49",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6698a5af-b3f8-4b05-bf51-7aa6af066089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9db16d2-0462-455e-bff8-37a5062e00ce",
        "cursor": {
          "ref": "433ffcd7-4326-4757-88a3-99495a0bddaf",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0986c511-4e82-4423-900e-093d8c49d96a"
        },
        "item": {
          "id": "c9db16d2-0462-455e-bff8-37a5062e00ce",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "db05df69-2def-426b-a410-500923047929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f25045-e4be-4a60-a746-3c8b7a384eb6",
        "cursor": {
          "ref": "ba29a8ad-6208-45d6-bf18-34a66609d67c",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "932230ce-42bb-47a0-ab47-74c681e1d286"
        },
        "item": {
          "id": "43f25045-e4be-4a60-a746-3c8b7a384eb6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9ab75da6-421d-4bcd-85fe-822fd1b6c1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6fae19-e74c-4306-ade9-fa6d79e05312",
        "cursor": {
          "ref": "1d1e4a9f-e1cb-4456-94c4-bc308deed7ac",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8ff0f7e3-c728-41d8-89df-33cd08464d77"
        },
        "item": {
          "id": "ec6fae19-e74c-4306-ade9-fa6d79e05312",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b175bc5b-b18e-4ed5-857e-8dbf65d1f2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0082bc-c9ba-41d2-880f-a7a7f4271a48",
        "cursor": {
          "ref": "ab94518e-00c0-4106-8110-5172aa781a49",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0fdb10d9-90b3-4199-bd8e-124d1ae541f3"
        },
        "item": {
          "id": "3d0082bc-c9ba-41d2-880f-a7a7f4271a48",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "59b9ad57-cd2c-4e5b-be85-46552bea907e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b65ebb5-e783-4760-b2c3-8dabd30ffba6",
        "cursor": {
          "ref": "57d4fa75-54c1-40b2-9c2f-4d6d84c42d74",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0f925872-63f0-4d27-9da1-4b4bd5cb8664"
        },
        "item": {
          "id": "0b65ebb5-e783-4760-b2c3-8dabd30ffba6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "624c4d96-d584-4341-a3e4-6641a5a104dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98dcf255-26bc-4cd9-b6b3-618b01c78466",
        "cursor": {
          "ref": "51151d23-c28c-48cc-a03a-425e60ae6651",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b063d8de-69b5-4d07-94e5-5a7abfafa0c6"
        },
        "item": {
          "id": "98dcf255-26bc-4cd9-b6b3-618b01c78466",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9341f076-57a0-4c90-95be-4d8dd6c94f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72c2dcc-5547-43c4-b167-f54c4d0a657a",
        "cursor": {
          "ref": "007c4509-97b5-4147-bc44-fd54151b412d",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "438855b7-b44e-41c3-87ab-0839f7ef64d1"
        },
        "item": {
          "id": "a72c2dcc-5547-43c4-b167-f54c4d0a657a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "af52d3ef-72fb-45b7-88ec-7455251dd4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27caed24-73a0-417d-8c5a-40538763b267",
        "cursor": {
          "ref": "f3e33a12-dbec-498d-85be-1f0811b742e9",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8af70685-297e-42d6-ab6d-d24419b4da8b"
        },
        "item": {
          "id": "27caed24-73a0-417d-8c5a-40538763b267",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7f83c877-05cb-4bf4-a370-10f4aec4abf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e409e03a-8426-425e-a960-370d4112145b",
        "cursor": {
          "ref": "3bb368c6-9f4d-4651-a507-2190565994d9",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "88f6799c-4442-41ea-bba6-e90fd5b0b236"
        },
        "item": {
          "id": "e409e03a-8426-425e-a960-370d4112145b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4acc6374-c62f-4ad4-8be8-20971763f705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ff71f4-775f-4f28-bef7-1ab73450203d",
        "cursor": {
          "ref": "a2cf8df0-10f9-4d1c-99d7-1a69465c9189",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a949b09f-81b7-4dab-9b91-fbbb0249c7cf"
        },
        "item": {
          "id": "63ff71f4-775f-4f28-bef7-1ab73450203d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f7af01f1-75a4-4d41-9e60-08b4e4119c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f4841b-258a-476f-ab80-be24f0f47fdd",
        "cursor": {
          "ref": "3fb55c3c-0fce-49dc-b503-f1b474aacb75",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "21a131b0-d03b-4164-8804-efc3580332c4"
        },
        "item": {
          "id": "77f4841b-258a-476f-ab80-be24f0f47fdd",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8936f441-9ea8-4c27-90e6-64d69a2eea99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7112ae7-8626-4a05-8745-d5b33ff6a817",
        "cursor": {
          "ref": "336245df-35ef-43ad-8c4e-af36b2ea314a",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "40b46d1a-eaed-4dee-9033-071a3931c5f2"
        },
        "item": {
          "id": "b7112ae7-8626-4a05-8745-d5b33ff6a817",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1fb82bcd-d524-4628-87ca-0a4602101b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f6c9c9-bb8d-4d83-9a3b-4de5b8beba02",
        "cursor": {
          "ref": "16c268e7-d540-4a94-87ac-312e12d8f350",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6c699a68-4eb2-4e15-b649-57dec4342262"
        },
        "item": {
          "id": "26f6c9c9-bb8d-4d83-9a3b-4de5b8beba02",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cca33685-602c-4218-8089-5d795543b5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84366fff-5dda-49b1-ba1a-2feb2a278506",
        "cursor": {
          "ref": "2510d630-5e7c-41a3-8321-f268d3208dac",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "261c02de-617f-46d4-bd05-87f001224b84"
        },
        "item": {
          "id": "84366fff-5dda-49b1-ba1a-2feb2a278506",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "276215fe-ff83-4555-adab-77699fdce68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2788c657-e22f-49e3-8d55-6f1f712ca07b",
        "cursor": {
          "ref": "4d05d6d0-f3df-4951-afe5-d48d621ba14a",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c7c0fbdc-b5ff-4aaf-b579-9de911954f2a"
        },
        "item": {
          "id": "2788c657-e22f-49e3-8d55-6f1f712ca07b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c3a3287a-3213-4829-b6c4-b9edd15e6850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d5c658-4a01-4ec5-ac39-ee64c16fc86d",
        "cursor": {
          "ref": "2e10f378-1cae-45b8-9269-dbc25fbc68ac",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "42e77798-18fc-46aa-9edc-38f3c1402eca"
        },
        "item": {
          "id": "f8d5c658-4a01-4ec5-ac39-ee64c16fc86d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "94e4e866-0714-4956-a4c3-34bd37b0bfdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da263db-286b-4fe2-9491-eec1ca91d6a4",
        "cursor": {
          "ref": "f7295e1f-770a-4573-a496-3818f3dd8e42",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f4cf0723-271f-47fa-afe5-92c2a23415bc"
        },
        "item": {
          "id": "5da263db-286b-4fe2-9491-eec1ca91d6a4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "390e701c-9dcd-43e2-885c-411a78453861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2351d2ef-f4d4-415c-8840-9a336233aec0",
        "cursor": {
          "ref": "7f8680b0-95e0-4414-bb86-91528c0ab5bb",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a6a3284e-b1db-4b2d-8847-32ffb0847441"
        },
        "item": {
          "id": "2351d2ef-f4d4-415c-8840-9a336233aec0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "00a74ff9-ec3b-4ced-a796-e3a7b1adda64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d67600f-6524-4f2b-a404-630dae63024a",
        "cursor": {
          "ref": "54eaaabf-d4e0-4bde-8f7b-c2457499d5e5",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d8915119-294c-42bc-95c7-281956f64116"
        },
        "item": {
          "id": "0d67600f-6524-4f2b-a404-630dae63024a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8d1dee12-bf74-47d2-9ccc-5bb03a33bca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1723e62-aee3-487d-9dcf-f3804d58f6b0",
        "cursor": {
          "ref": "de07a8bc-fbc4-4b91-9a58-5c0882f7f869",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a8469d84-f23c-4082-a4c7-36f59d42ce95"
        },
        "item": {
          "id": "d1723e62-aee3-487d-9dcf-f3804d58f6b0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0758f2c4-9810-45e0-8f3c-7d6ac1d27501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7260f29c-e7d6-423e-bc1e-c539b2b459a8",
        "cursor": {
          "ref": "b9c86dbb-3906-4186-a891-6454f5123011",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9ed79e6f-6165-4eec-9cfb-68e3d842fc4d"
        },
        "item": {
          "id": "7260f29c-e7d6-423e-bc1e-c539b2b459a8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "21e2335a-3112-4dd2-a541-1ee76dbf85c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1651ba3-8afd-48a3-95f0-f65bff7af9b6",
        "cursor": {
          "ref": "76aaee2e-304b-44cc-a443-af4ed068e3c1",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5a28b03f-1897-4d8c-9400-2bf419f847e9"
        },
        "item": {
          "id": "c1651ba3-8afd-48a3-95f0-f65bff7af9b6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7b374fdb-10c9-41cc-88f5-d1ff442743d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d69848-b799-4f44-a480-588d5f96e2b6",
        "cursor": {
          "ref": "54a8641e-3684-42fb-b584-d779ffa5b37e",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9e9074dd-af19-4033-b50e-1551d0f3face"
        },
        "item": {
          "id": "16d69848-b799-4f44-a480-588d5f96e2b6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "494d79fd-75e7-455e-8af9-2032f056cfe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45af94b5-8cb8-47e5-9b89-5e29d8c8287d",
        "cursor": {
          "ref": "6348648e-cc3c-48b8-9169-05828563613a",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "81da628d-d89f-4100-b17a-8fd792d06372"
        },
        "item": {
          "id": "45af94b5-8cb8-47e5-9b89-5e29d8c8287d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8c263307-5d0f-4abc-b894-bca55ad509cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97de8f5f-fd8d-4319-89b7-0d29f79e8101",
        "cursor": {
          "ref": "615ee69a-2543-45b2-9948-45d40628c34e",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ba0a7c95-5acf-4298-b226-24fb3926770e"
        },
        "item": {
          "id": "97de8f5f-fd8d-4319-89b7-0d29f79e8101",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2e855022-b6a0-4163-8ab6-719b13f98b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c19a16-63a9-4400-b333-675dd688811f",
        "cursor": {
          "ref": "e4376bcc-3083-4888-9e46-37eb7dd6db33",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0a8ff969-7602-487b-aac5-66b1732906d9"
        },
        "item": {
          "id": "75c19a16-63a9-4400-b333-675dd688811f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "aaad1cbc-4155-4622-9418-144197348f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d848f3fe-d1b7-4c12-ba12-6a83bdcd7182",
        "cursor": {
          "ref": "1d4a6962-0ca9-426e-8d5b-ffffcdb45163",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "42ac935d-bca3-49d9-9730-3d7741d203f9"
        },
        "item": {
          "id": "d848f3fe-d1b7-4c12-ba12-6a83bdcd7182",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9d190191-bbfb-4f3f-8539-b2f7fab845da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abf259a-c639-4bd5-ba50-4567f3df2e9d",
        "cursor": {
          "ref": "7be59587-e0cb-4faa-b180-058be299f576",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bfad26ef-ff14-4915-bc22-b0914ee9e263"
        },
        "item": {
          "id": "8abf259a-c639-4bd5-ba50-4567f3df2e9d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "be9f918e-e0b1-49a0-b547-32f269ac6c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d103cdab-bae4-408c-af62-71745f71f9e5",
        "cursor": {
          "ref": "4182d42d-7ca8-4299-bd48-2e8cc87095cf",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "69909425-9770-4d23-bc41-7814940eb7ff"
        },
        "item": {
          "id": "d103cdab-bae4-408c-af62-71745f71f9e5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "664f8884-7458-4e84-a566-1b228ba8a855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1732a7c8-7c99-423c-93fc-b606d1832810",
        "cursor": {
          "ref": "410b222a-d9e3-4580-884d-066a10b44f4b",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e50b090c-c16d-4919-913d-56b8d80596e0"
        },
        "item": {
          "id": "1732a7c8-7c99-423c-93fc-b606d1832810",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0bb97501-36d2-4bd8-9706-82182b8688ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dbe562-f1b6-4b2b-82cd-c148dee4391e",
        "cursor": {
          "ref": "08001ce1-bfd7-455d-aff9-665a7131c6aa",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "93e96f4f-dd89-428a-a708-e32a3a0b1831"
        },
        "item": {
          "id": "c8dbe562-f1b6-4b2b-82cd-c148dee4391e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "abee82b3-74f9-4894-819f-4c0df9f6d4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ac5cea-a710-415c-bd35-b1200c6d3cb8",
        "cursor": {
          "ref": "833bf4e8-c037-4d5b-aa0e-2f476c3dc0e7",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a6cfc9db-cc0e-4c9c-b924-a4290746be2b"
        },
        "item": {
          "id": "72ac5cea-a710-415c-bd35-b1200c6d3cb8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "91d1303d-cd09-400f-870e-52de28a64ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70741026-ed50-459f-80c3-a46d3d375ffe",
        "cursor": {
          "ref": "bd091dac-b320-44f2-842a-a7f9ac9205a8",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8baed84c-7b46-4247-90c0-24250085bb0b"
        },
        "item": {
          "id": "70741026-ed50-459f-80c3-a46d3d375ffe",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ec79ee2c-3b30-423c-b1f0-3fdbbc5141b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ebc93b-4c12-454b-9a89-8b8a34b6cf0b",
        "cursor": {
          "ref": "ca013413-5b7a-4667-87bf-3f929906f5a2",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "78bb6059-e179-4de9-b0c0-bb98e312a882"
        },
        "item": {
          "id": "b9ebc93b-4c12-454b-9a89-8b8a34b6cf0b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6e73cf1b-7635-48b4-b9fc-94c4050eb9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2e541f-fdb5-4a47-94f0-792b8169e43a",
        "cursor": {
          "ref": "669309e8-3c78-43ae-bdb5-81a9c876f5bd",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "eacb0707-7259-49c0-a0e5-358df4855ff5"
        },
        "item": {
          "id": "ee2e541f-fdb5-4a47-94f0-792b8169e43a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "65bb08f0-6f39-4e02-9db9-7af7509cfaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b186622f-89b5-43b1-b955-a021d8d7a1d5",
        "cursor": {
          "ref": "aab8813e-be48-45b9-97fe-e26c6e6e86ba",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9c37ec3a-cc6f-4636-b4fe-e63fa86d5363"
        },
        "item": {
          "id": "b186622f-89b5-43b1-b955-a021d8d7a1d5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3d4d6a5a-27ba-4c30-8b63-8a9772cfd809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e365a37-bd97-454a-b848-3c7eddeda34f",
        "cursor": {
          "ref": "7fd74ff6-dcc9-4f0d-a79d-6deefbb41bab",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b4585273-d15c-46e4-bbad-6f4d001196b4"
        },
        "item": {
          "id": "2e365a37-bd97-454a-b848-3c7eddeda34f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5ba23b52-0619-4778-bdae-d498086b9a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679a07f0-2391-483d-ab77-6542a56a08a3",
        "cursor": {
          "ref": "513da26d-ac11-4612-93b6-538f98a345d9",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8958cc3b-ec22-4b0e-b3e2-cd4f1b320425"
        },
        "item": {
          "id": "679a07f0-2391-483d-ab77-6542a56a08a3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0eb961d4-f039-43d6-aeb6-ec71dbf9e4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909621e9-ef1d-4b71-8eb0-6b2afc53f045",
        "cursor": {
          "ref": "c551bef2-100c-4627-933c-62a3707f3c5a",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "59cecc9b-02af-435a-92de-35ad325761de"
        },
        "item": {
          "id": "909621e9-ef1d-4b71-8eb0-6b2afc53f045",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "856009df-c5a2-40b0-859c-1d2177a4e2f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5da3bd-8ae8-4e08-af90-cad89d9c57c4",
        "cursor": {
          "ref": "2de2cad6-0f91-4769-9c64-4ca66f5c867f",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3919872e-b4d5-4a7e-9018-2b95881089b3"
        },
        "item": {
          "id": "aa5da3bd-8ae8-4e08-af90-cad89d9c57c4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3a1c7232-3cc8-4319-8174-edfaa0b6f4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121d0f0a-0785-4141-836f-a430c1679c9f",
        "cursor": {
          "ref": "ba9914ed-75de-4d56-a40f-895b189a05f9",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "860ea55e-ba2d-4e96-bf9c-15b77dc69b66"
        },
        "item": {
          "id": "121d0f0a-0785-4141-836f-a430c1679c9f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "eed60678-593e-4628-b3e4-7b562a116993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5719c348-b8bb-4597-967d-a0f4e92b3e03",
        "cursor": {
          "ref": "ac4d7d31-f6c5-4d66-a7ec-65a0d9f94ba5",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "93dee139-a00b-424d-a469-8eff475cdd10"
        },
        "item": {
          "id": "5719c348-b8bb-4597-967d-a0f4e92b3e03",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9b3fd5e9-c143-46bb-b2a7-ed0bfa2e0005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a527c3-bbc2-4c24-a941-49b718d3a098",
        "cursor": {
          "ref": "569da76a-bdb2-4f6c-9ad4-422523f32bfc",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e07807fa-6eab-46be-b36c-f1f8f7d21ce5"
        },
        "item": {
          "id": "d0a527c3-bbc2-4c24-a941-49b718d3a098",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3b3f0736-2b3f-4327-b16a-42c12f461e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c49f3c-9f5a-4e68-8272-17f492a5c773",
        "cursor": {
          "ref": "a165b282-f336-414c-a22a-2cd0fc5f88fc",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "0e6a9597-9804-477b-856c-83201dbb3997"
        },
        "item": {
          "id": "66c49f3c-9f5a-4e68-8272-17f492a5c773",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9ff3cabe-a14b-4dde-b811-db4af601bc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec5508d-e914-4915-ab14-96c2d237225a",
        "cursor": {
          "ref": "997e448b-e6a3-4503-8662-b5445085191b",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "223eaf7a-707b-4dd5-b9c9-253ec828c342"
        },
        "item": {
          "id": "cec5508d-e914-4915-ab14-96c2d237225a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f4e2f84c-8ccb-456c-aded-3749c8f40fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9a4571-a08b-4358-9bfc-eac63263f91e",
        "cursor": {
          "ref": "131cfcf4-c39b-46da-8c91-8612840d7f40",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b5285400-c3c2-4a2e-bab1-a0a49403af81"
        },
        "item": {
          "id": "7d9a4571-a08b-4358-9bfc-eac63263f91e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5c1da9dc-410b-4c70-86b1-b7a634587431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984adca3-456d-4146-8e82-41f748deab85",
        "cursor": {
          "ref": "7ddde4f0-3718-49b1-87ce-534368a99ea4",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "741df6d7-33f0-4b71-aae2-9073175cf7d5"
        },
        "item": {
          "id": "984adca3-456d-4146-8e82-41f748deab85",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3459914a-77f5-4d77-bdad-350d6f7f0bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3a291a-dcde-4c12-a0a0-56a23cdac777",
        "cursor": {
          "ref": "36f6e9b3-c6fb-4033-8a24-abdd72a54c2e",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3df10761-edab-4699-83c4-4d868011105e"
        },
        "item": {
          "id": "9f3a291a-dcde-4c12-a0a0-56a23cdac777",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "48ba6b80-ad3e-4d2b-af94-66e548255598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d672d2-4262-4930-979a-307a89e328a7",
        "cursor": {
          "ref": "85de52e2-dfb7-4999-8e14-28a50c0275ea",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "bc4a36dd-b164-4a3f-848a-6fe24f5a3780"
        },
        "item": {
          "id": "a1d672d2-4262-4930-979a-307a89e328a7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0a79da0f-8217-4a89-be06-4af9d9dfb94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0409ba73-3a41-4355-8862-b288965e7935",
        "cursor": {
          "ref": "7360f37f-9ef6-4171-8d14-5c26f7e31883",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1cb2323e-cb44-4e34-a053-39e2fe12932e"
        },
        "item": {
          "id": "0409ba73-3a41-4355-8862-b288965e7935",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4d6dee95-9aa8-41e1-baaf-f5954789ea85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d29d11-f3ec-41bd-92ff-a1714d0002b5",
        "cursor": {
          "ref": "8584c789-0647-4bad-aef7-f66e1897575f",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4b40f58f-74d2-40e2-8eae-3aa68a62b8b2"
        },
        "item": {
          "id": "38d29d11-f3ec-41bd-92ff-a1714d0002b5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "da612202-95a4-4ecc-a7f8-e740e97f649f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43344092-7d41-438e-ba24-b83c50a7099a",
        "cursor": {
          "ref": "1f2309fc-4c5a-4cdb-86eb-656bd8a988e0",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ac5e50b2-8179-41c8-8047-30c90e426a24"
        },
        "item": {
          "id": "43344092-7d41-438e-ba24-b83c50a7099a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2cb8f48b-73c8-4008-aa9c-f908ae0d0627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c3b5a1-6f03-4c1e-a551-fc07de546b7a",
        "cursor": {
          "ref": "c0d10942-53b9-4273-9219-607519658262",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "41e79ec0-69ff-4ede-a2fa-ba6504c3de54"
        },
        "item": {
          "id": "d9c3b5a1-6f03-4c1e-a551-fc07de546b7a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "73b68ba5-8611-41d2-a98a-b967089e133a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b899460d-5e40-4a48-b1cd-3260ed516e2a",
        "cursor": {
          "ref": "b906cb08-b6f7-423c-80fc-a71e4911d757",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "5822b93d-dd64-47f1-be54-c13081a6ddb5"
        },
        "item": {
          "id": "b899460d-5e40-4a48-b1cd-3260ed516e2a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f387f9ce-885c-4338-806a-72f0f5814940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1584f54-2283-4793-9a96-67d677b9a71d",
        "cursor": {
          "ref": "9b88ce73-86ad-47e7-82bf-07d547f8d206",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9e8e910d-3c80-4308-ad75-8601cee2372e"
        },
        "item": {
          "id": "c1584f54-2283-4793-9a96-67d677b9a71d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a4364b47-302f-495b-bbd4-8cf2f8700147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287000eb-5c96-44d4-a6f8-da1287960511",
        "cursor": {
          "ref": "40412988-6e19-42ac-ae7e-dae51b3c5e69",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "dc17ab73-0b2b-4135-aa0b-d91fe035586c"
        },
        "item": {
          "id": "287000eb-5c96-44d4-a6f8-da1287960511",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "48bb286d-e93f-443f-b573-a02948d1bb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b7401a-7ab0-48ae-b74c-e7132cb047c7",
        "cursor": {
          "ref": "9a7fdbec-2ac3-4a91-9a73-317d1a155cd4",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "305750db-bde2-40af-a6a5-48f95f72bafb"
        },
        "item": {
          "id": "a0b7401a-7ab0-48ae-b74c-e7132cb047c7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0a931f13-9375-485f-9326-a655ca49d629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede5f5aa-e6a6-4c86-8dd7-60fc5bf42abc",
        "cursor": {
          "ref": "109e52fd-6203-4faf-89b8-54f888eaf7fe",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "0a803982-460f-4770-99ca-e928d6f9d820"
        },
        "item": {
          "id": "ede5f5aa-e6a6-4c86-8dd7-60fc5bf42abc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "dc64b502-db93-4b02-8bf2-2479485931d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5702a048-5c06-4ac1-a038-53aaec9e3071",
        "cursor": {
          "ref": "b2256b65-0944-4fcf-9e38-9e4a6e497618",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1e1727c6-cdaa-449c-aebb-333d3ec78141"
        },
        "item": {
          "id": "5702a048-5c06-4ac1-a038-53aaec9e3071",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1667a878-71a6-4cb4-b7b5-1ba6add0fe24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b49d5ce-9628-4ff8-bb62-d1fb35b3a1dc",
        "cursor": {
          "ref": "2383cb1e-2adb-4ded-883f-9ae7012374b9",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "67bd0dd8-c072-43f2-9245-6109aa3cb98c"
        },
        "item": {
          "id": "9b49d5ce-9628-4ff8-bb62-d1fb35b3a1dc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d176910f-cbac-44c0-838f-e17aed18aab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a32b65-f0a6-4571-963a-32c9840805c0",
        "cursor": {
          "ref": "ea342e71-a28f-436c-ae54-57808f5e4213",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "fe991c06-ccdf-4d5f-9cae-82ab451708f5"
        },
        "item": {
          "id": "19a32b65-f0a6-4571-963a-32c9840805c0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "73651aaf-5d55-4cab-85a9-1e4a99343f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52b94a3-ae5c-476d-b46d-45e6f711b6c0",
        "cursor": {
          "ref": "c9f459e6-e599-43b7-a9e1-bc26a7895684",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "3eef79d4-cd0b-4084-b222-ae1532c0cb52"
        },
        "item": {
          "id": "f52b94a3-ae5c-476d-b46d-45e6f711b6c0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "28372b2e-3b30-4316-9fba-406d4548392d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27bae51-a6dc-4ff4-92bc-4a459cee8599",
        "cursor": {
          "ref": "be862be5-9ba9-4989-a608-78ae73979154",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "6b7ff0df-956b-42ac-a474-e3d1f6f460f5"
        },
        "item": {
          "id": "c27bae51-a6dc-4ff4-92bc-4a459cee8599",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d7a12d5b-bc4d-4e24-8980-bda60e6b2b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a623a2-fa8c-473b-ad41-6ab359e4b0b5",
        "cursor": {
          "ref": "efe4fdb0-8699-4c41-b48f-f191c10777dd",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0526b3d6-2931-47a8-b026-140ad8592a1b"
        },
        "item": {
          "id": "e1a623a2-fa8c-473b-ad41-6ab359e4b0b5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d130c17a-0f89-43c1-b0e9-272230f66dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9012366-3c2e-4f41-b58b-3e6bbfd0cf7e",
        "cursor": {
          "ref": "539ec3e3-7f85-400b-befc-1c6f0321dd81",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5bc8d39b-490a-4f90-8946-ff0a535b4af8"
        },
        "item": {
          "id": "b9012366-3c2e-4f41-b58b-3e6bbfd0cf7e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "58467a50-44fc-41f9-bde0-cb69d9011cb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "2d2693f2-ff84-482f-a608-ec7651524ee4",
        "cursor": {
          "ref": "34052341-86b1-46df-81ab-8bcfc00d1643",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ebfca7ed-c32c-4b1a-ba67-ec0c8656846a"
        },
        "item": {
          "id": "2d2693f2-ff84-482f-a608-ec7651524ee4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "81c2cac9-cf6b-46fc-b4d7-74f9f3776bfe",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "786304e8-df3d-4392-b063-ab9d2593cf8c",
        "cursor": {
          "ref": "4ec4ea04-1536-4694-8cf5-0aedbcb51465",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "aa3bda80-5068-49ce-90fb-1688b6fbfc39"
        },
        "item": {
          "id": "786304e8-df3d-4392-b063-ab9d2593cf8c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "571cf3f3-a925-4254-8eae-1968402731ae",
          "status": "OK",
          "code": 200,
          "responseTime": 1990,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "19efd597-7f40-4441-8242-c2e00b532f56",
        "cursor": {
          "ref": "9c7b7d3e-3d0c-4d67-8582-fa4b8f8aacfc",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d1dce299-78a8-47cc-8bde-c6950e3a1a22"
        },
        "item": {
          "id": "19efd597-7f40-4441-8242-c2e00b532f56",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5ef8f7d6-1ef2-4be8-be56-17927973f919",
          "status": "OK",
          "code": 200,
          "responseTime": 2606,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc6d781-6cb0-454c-80bd-fc1b9a3ff7a3",
        "cursor": {
          "ref": "7856ad9a-787a-4fc1-af11-162b48ac4901",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a09b2ffb-e83d-4597-a014-60a11903cb8c"
        },
        "item": {
          "id": "4fc6d781-6cb0-454c-80bd-fc1b9a3ff7a3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "62cd042d-effd-453f-8933-ef26f20f2133",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "4fc6d781-6cb0-454c-80bd-fc1b9a3ff7a3",
        "cursor": {
          "ref": "7856ad9a-787a-4fc1-af11-162b48ac4901",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a09b2ffb-e83d-4597-a014-60a11903cb8c"
        },
        "item": {
          "id": "4fc6d781-6cb0-454c-80bd-fc1b9a3ff7a3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "62cd042d-effd-453f-8933-ef26f20f2133",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "c52ed771-0edc-447a-8a08-12f6f6a4ef27",
        "cursor": {
          "ref": "9d551d8a-53a7-4ff3-a44a-8146544832c5",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a759c4b5-50f6-4848-9266-ce76f5931a24"
        },
        "item": {
          "id": "c52ed771-0edc-447a-8a08-12f6f6a4ef27",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "93286342-2d62-4767-9bd6-35775ff8b719",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "599949fa-ef8e-4665-a2c7-905e5343f518",
        "cursor": {
          "ref": "3f6094e3-6f44-4d4e-997f-6e4dd293acc6",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "4502b9d7-ff62-49a6-92a5-ca143c812c76"
        },
        "item": {
          "id": "599949fa-ef8e-4665-a2c7-905e5343f518",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8bfd76e0-ba4a-42db-b483-ff1ed558c8f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}