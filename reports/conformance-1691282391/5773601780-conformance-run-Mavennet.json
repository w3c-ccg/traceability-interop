{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b92b0ae4-b383-4dc3-8b2f-7decbb4f64c2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "54d5cd2a-0bc8-4492-a4b4-e9eca6af6d4a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fda3ba5c-6524-4956-b40e-3588d994a330",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "40c17bfb-df92-4ecd-8b2d-733666f0cc63"
                }
              }
            ]
          },
          {
            "id": "99773af7-975c-4833-8e1c-08169ee9a45b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30988941-8e54-4462-9020-7ad234bc0de3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cd63b2c3-31d4-4a0f-b93c-20b52e221138"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b6b0e143-89bd-40a9-b997-450463ff3f91",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "63c40a84-5933-4983-ae2b-f2019be89a92",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bae67b5c-6d91-404a-881b-d1dea0c960c3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "441a5423-df06-4670-8f52-df266c320b32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41b3287c-b538-4bc5-a470-31c142b66a28"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7526d06f-eb01-40b1-987d-3e3b8e2f1620",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac2bc0ea-f789-431e-80e5-77a33ccf18fd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "af5474ad-c9a4-4a33-918d-5a0575205016",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "083afa7c-b80f-4f05-aa96-8d7bea0c67fe"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf377021-4e8d-4ced-bef6-931747214e3b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bb957c31-9d43-46c1-abce-526b30527daf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce5bae23-5b9a-4dfd-8984-8a660c192a6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74cc8aa9-61d2-4e88-81b8-5e0b64449b1d"
            }
          }
        ]
      },
      {
        "id": "2be57a38-8cfc-4b03-998b-02f6a40f2f3f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "737bdaf9-ee19-42af-aefe-223274871c8c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5f71193-4fc6-468c-8982-940d4465f5f8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "50501790-b5b0-44f9-bfd7-01c35ab83d65",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09176dc-ffa0-4a5f-ae8d-210970296c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c4988c4-a02c-4633-8e91-60d1d05a1410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3bf214-1665-4712-9b34-fa5e9a28cb7b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08eb8ee2-3dd0-4993-8275-f698e2a5ec6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "534eb6cf-45e0-478f-8976-adb16f2447a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f568b9f-b164-46c1-af1b-c9df6a6d1dd6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bfd39e-bd92-4b97-8336-aed41f47093e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26ff6923-7289-42c4-b26f-3b2a9820caa6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "77d06f54-d702-4126-a626-5471dcc90930",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4034f035-d11e-4d91-a17b-6643b3c41ce9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37583a7a-0fd6-4bfe-a03d-0c776916cf5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e71719af-5023-4422-9793-3c20a8607472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720d7a55-31d0-4db6-82f3-7db328140db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b27508-9490-4ae4-83e4-4cffbd804a27"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6c0a6ff4-a409-4a70-bceb-03470db84f21",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e8a4d3c-526d-47c9-89f6-876fd6661c87",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3b3aab7-6608-48a3-9c17-37f53adb9a34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "90a01482-15cb-4c54-8a11-38140f7b7565"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3472f83-5ee6-48cd-85b6-59ac3e8b16c2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "bc41f629-835f-4fb8-826a-bdcc06965085"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05004384-cda3-4178-81a5-7498ce853272",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5213983c-02a8-4552-97f0-33912898d5a5"
            }
          }
        ]
      },
      {
        "id": "847bccd1-67e0-443f-801b-edfc1a27953b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "152a9b0b-ae0c-4acc-9235-82c0c5120735",
            "name": "Negative Testing",
            "item": [
              {
                "id": "903bbc5f-5bdb-4284-b14c-40ee4b2a8bf8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a85c7766-d91b-4c2e-b8cc-ff43eed941ef",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39fb68c-bbe9-4bf3-b3cd-485d7cbb3769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e401a847-dad8-44bd-b5e8-fa3dfdeed2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9732e9a2-49ad-447a-b037-cafb7ed798fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fc87257-6a9d-4625-9981-c8774c145b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acae6d2-675a-4f23-bf15-30f6f9f9d16b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b222cb64-c59d-46b5-85d2-42b82cb4156e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "718f3bdb-ae75-4871-980d-38d0b945e873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b55167d-61b2-4d95-ab6b-51afe6b607c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8989eeac-ef51-47fc-9011-e0bbca063e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb895d8-2d01-43d8-b2f7-47fb875024fa",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb125fc-b9cc-4d76-9b95-31837ad1b07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45916b96-c3fb-42c1-8271-bfe963e6884a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57ddd3f-9ae6-4960-9bd4-8f065459faec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97492d04-f60c-45a0-9f0f-bd4f2a73fcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc67f17e-5292-4f6c-b7b2-6ab78e8f7ea4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3317c21e-f288-42bb-afe3-bdaa2c6a04fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfcd3527-5cb4-4652-8fb2-9e8a847ad8e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb8bf14-7c0f-45ba-abd1-7907d610b3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9d3245e-ad76-4c73-a90d-208ad7ae88bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab2ae22-41c3-4dd9-8b8c-ae66978484bc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd21abd-86c5-42cd-a5fc-65cdb0261df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef462a64-06ab-46cf-bdbe-f55d7b84f119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0f96f5-93e7-4ffd-907b-58730acf9854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4bbe9ea-8e59-45d6-a2c6-706806d12a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bcaa045-a45d-41a4-813e-105e5862da57",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e2f680-ac9f-4cdc-b6cb-7a1a5adf193b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1412b29a-6877-4064-ae61-6a3d7dc3b289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7e3f73-b456-4fdc-b027-02d80ddae12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27701bf9-46be-4ecc-916d-854c6ae9c1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7101f2-a683-4252-b162-837b43149ff1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d83ef44-6097-40d7-a603-4c51be227dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0923a223-c0d8-4019-8cb9-6f5736721f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b7f61a-ce48-4086-92ea-0bf2389ee3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11248610-421c-4ce8-ac6b-a92eaa7bc192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e306c86-775c-4234-a534-9d237c524d0a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc70c5d6-a141-4747-b6a3-8ccc5ca4ec42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0bec87-4368-409f-ab20-418a418d8f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a1e415-bc1f-4b00-91ed-093352a48a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d38fd01-0a88-48ca-b830-89f000a8bc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01dd6bed-3999-42fe-a3a3-03b151f3bf34",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe1e4fe-95de-4c4a-9f84-05b4c27861a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1096b1c8-cd5f-40f5-aae2-bda8febfe132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7937b2-c264-4d3b-87f5-6970568252a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "270d132f-a953-4807-b49b-f9cae0e5ae3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2264a98-955d-44d7-9296-9e25bc3c2b41",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b79200f-17b2-4590-8e31-8872691e3ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2bfde8-511e-4bef-bccb-903d9447e5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756f9615-efca-482a-a54d-7e6ebbc99edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49b0d806-2452-4e76-87f3-121d6e86e2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362ac44a-3ce1-4c1a-a57b-6c67955480e5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4529efe7-0f77-4e74-abad-80a960ca5471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72636d1a-9987-4284-bd66-f558be4cd061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0585b963-d231-4847-9e7d-8f57f0a6ee18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a132dec-b50b-40e3-8cde-668745781dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f7d103-7a10-42e7-9ca1-5856ee28d6ab",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d288107-2691-4e37-a754-a814b42375d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a58b433-1911-4436-8387-b5f957b601f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45277626-989b-4936-98c0-7173525a615f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42826fa2-ac69-4394-bd1f-1f239323f0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb966c3e-09dd-40b5-bbe1-3c44c13f2422",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41b9a0a-c85e-4dab-a80e-435055d1f786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5bf8da4-2272-46f3-b03e-33fb955f413f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e6550a-58ca-4484-8b6f-ac4aefbea7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "160c04a3-8352-462a-8104-737281f26bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d2d7d3-5508-4c64-a9ed-12053516a98a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ede7f7-f11a-4b86-8761-922d918f657f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1a5117-6ad8-4eed-874f-da725e7aaefb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdea7d59-a0ba-46d9-8c0d-00234b697ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebb988fe-bde9-4ec9-ac25-724b0fd49e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44dc43ea-43b9-43f9-af18-2eae31b45b57",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34874bd7-ce5d-482c-9eb7-88a1094b27f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98da8294-2456-4a48-8d8c-f5d7dc61d61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9aee7a-f17e-417e-bd4f-89a4439359b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9eee4cae-e3c2-487b-a94f-97011ee655fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b76164-9246-49f9-a94c-d6896da6b9a0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2b52c3-c974-4e9f-8dbd-086e335bdadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4987abdf-77a0-4528-828f-49faa145cde5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780c1f5f-f8b2-489f-91bf-4e540a681ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "045e5440-3a7c-43d7-9124-6aa913f285a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc21f7a-76d4-4a38-b10f-2b191f7aa03e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258f6574-2566-4d93-88dc-1e1b5f62c3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d716c13b-4fbb-4cd5-973b-b84c1462e442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6d93ce-7289-47e6-b753-a27a338a9de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2356f46-1ba2-4cb8-88ff-c4682b91b186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bbd0e8-fd98-4623-a548-04fef590f507",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442454fa-028a-46ad-aa7d-e4e5403bf829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41560990-c152-44ba-b87b-4098fcd4217d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2a18af-7573-4152-b131-c6da64cd9847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0969429a-15c0-4386-a323-b604fbf7accc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6c51f9-0f76-4080-9c91-6c310cca3221",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b75817-a016-4c53-8601-2038d482486e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27715337-626d-4cb5-b34b-2fa8077915b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8ca184-4053-4b22-8fd5-002ca8da9d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f859f5bb-3d0b-4661-a7e5-de7187e1a71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0341219-0590-439f-9708-34433eba5129",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd65f29-3099-45cb-953d-350f321b5bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7cba34e-e502-425e-8bd8-d6a153740d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d23e06f-6eb5-4859-93d6-5ce06f505768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27ab5f59-9eb8-4ea9-91ad-e4feb76504eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f783bfd3-e554-47d0-a5a2-dabfb392c75d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e7850d-4d65-4069-aeb7-442e601de1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52cf226a-1432-455a-9d92-1172f47f0087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452edccb-feb8-4883-9618-b18f0112f69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4829c0df-1e8e-496e-8cc8-7d9dd15f952d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24906c81-299b-4099-a57a-6954112535b3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f73ba36-1c1e-4802-bef7-630b2ff1c8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10bbdbf4-2926-4fe8-acab-42e26a49e3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508371f0-97f4-4a8c-bb5d-562c5c318c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c02e5e14-45e0-45a1-9cf4-6cd260951abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ff6e2c-df59-4839-a766-5ccbce3a5cc3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac847991-6124-4c88-a1d6-9345c5f39474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736454c2-c731-477a-abba-7af66bfe1687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1b4937-4500-4316-8759-b0648823bbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a77e9682-d780-45d9-9c27-4ca53d8077de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7ac97d-3882-4f1a-b665-7fa95c8b401a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b97c6e3-1580-4d3b-aa4d-2add4f23f6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0eaefe8-57e2-4246-bf85-b204118c02f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0be10d4-45ff-40fa-b3db-92cf1ad1f46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bfd5bd4-7338-415a-b713-956f7e27f3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe718a9-13b5-464b-a069-a0ac7bb65e3e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69cce0d-7d01-4d0c-b34f-d50230017f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ad1087-4a22-499b-9c85-c8bf3974a12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f974c5d8-ac9c-4923-a390-690efe27940e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "49ae80f1-5ce8-4cb1-ab10-6dc5630fb098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9683c87f-fb11-4d9b-b905-0e7f9b1f8600",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05203e4a-0362-4ce8-81f7-7ccaec09d258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4175accc-20d6-4225-9583-55091388f948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47009f7-be60-459b-927b-8eda7a6e9d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9485730a-b413-44d2-8ab8-f639cf5aed8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef171ec-3467-4999-b978-12c5fb3c0a24",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd59748-cab3-4393-98e7-d9fe191ff43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d37a31-866b-4f3b-8801-a0ed475e777c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9976d8-60d0-4391-b37b-3393aa46a8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61ad9bb8-b649-451c-b53a-0b0f4a7b1e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4be8d5-1f27-4fcc-a1f9-305e0207656a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f1bd56-23d4-4349-9d12-126d749aaaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90444931-ef24-4026-8d7e-f0e586a2f41b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb18bd8-e41d-4986-928c-9ea2fc37a831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "01fb0a1e-b4c2-447c-9e8e-35e4720be9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d5ec3b-3fbe-4026-8a7a-9500f7ead2a5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d57bf7c-b988-4ab5-8ca0-b0188056047b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec877d5-c27a-4595-9223-3fde7bd63a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d69a2ce-d89b-4990-b9a3-81f44af3b35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a67365c6-19ce-48eb-a8b1-4f5091d525a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f480cc2-ee1a-4ab1-bd19-e54ea18db6fc",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed8bb94-d67f-49e6-bfe0-c06767cdf5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63e4e92-3317-48bc-9a65-34981d015fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb04843d-8990-475a-8ae9-f772cf558230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c291f5c-5dfc-4555-9336-49fe5a5feac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d84db14-5fe3-4976-9adb-affe7beec930",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ef0796-5456-413e-a562-07a337e90c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3879b1-885e-4614-aa01-b73ce10d22dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1a0979-5c80-4a0f-8c8e-03e13756cd00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10452251-e7f0-4855-bed8-31cf68cbcf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affd4080-16f0-422f-8411-e31eb1707192",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d3bd58-24ca-42c7-9ca8-b86131b31543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bdfb73-538d-4e63-a1ab-2db8cea4b6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2928ad8-4b5e-4d09-8112-89881c62587e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f64cdbd-3aad-4842-93ea-af71c6d5edc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4036344-4adb-40fc-8bb8-c5ffc758a391",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80c6b8f-11ef-42c6-97bc-1a18e39b67c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3153ce7-6b7e-493f-bd23-c880afc60580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3282e0e9-db04-403d-aa75-ac9496def086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f29a6604-e30e-40fd-aa4b-4d4dd3754f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08068d8-7d05-429f-a7bc-6ec2ce50d96e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1950ffee-fa28-4b96-89be-ccd1e9e2544a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711c9e55-d7d2-4221-b6ac-4b6f064ac6c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea923070-ca75-4d41-bae5-a72c72d80ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96709e5c-c291-47f0-a92e-efa82837a58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4085faa0-63c4-401e-adcb-339d4b3df9a6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7522e4a-208a-4681-980b-c963502e2aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2252f5fe-4ec9-4ba8-882b-6b4a6a8d3882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f9c767-7e38-4ef7-adb5-c89ced3cab07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e99b52ef-7102-4230-9d95-7c1e3f64240f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8570a32b-ae2b-4554-af14-0a50ac5e0e2c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da501b0-2714-4f39-a5cb-34bd83563d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b5cbad9-69de-4b32-a53a-bc158558a2c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162d0f9a-5501-43e1-9910-d489891dfdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7079a804-c1cb-4916-8cb7-2c5e99791f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b89a0c9-0a40-4eae-b278-b1080550782b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4d8ceb-fc03-472d-97b3-917830b57442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3311568-44b3-40b1-bd8f-6cad82545ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee872a6-4f53-483a-8cf4-a937bcdf0b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7969d2cb-41e1-4012-9cae-08f8b752296b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7b2c5f-d82b-44b9-b070-14c0bd6c1850",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c752280b-f62a-47a7-ae2b-1a67007c6b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bbd1a7-8ad2-4b6b-957c-d96f1d4884d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38a6c06-6ca9-46e1-acf5-857d7b5cdd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cea2241-2bea-44dd-8a04-cd3427f59cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a414173-14ed-4e21-a636-01909a65c34b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e492ee8f-8c6e-4f9e-a928-6fb19488f85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc461d2a-462e-4143-a7d1-05e968f3c6b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3821b620-e3f1-403d-a33c-1372e6d09bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "04073681-ddba-443e-9ee2-f2b48da622f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacd6b54-40c5-403d-8bd0-08caa139cf7f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63e1e59-7f8b-432b-ab0b-391775380710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6cade0-1dbc-4a60-97cc-38d2ea6841a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1493c4e7-5782-4e1a-a483-471e9e4f3ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba8c6123-22bf-425f-82ca-30a7ac64f323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cff6d0e-6e15-4bc1-9769-d154e9ab518d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6628b0-2d21-4fa5-962a-819f921b819e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a54bd4d4-06b9-434c-b420-d41ad53ddf7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660d818a-54c1-463f-8f39-eb14c4ce2fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "279e6efb-e6c5-4e6b-9e60-bbca8ce7d5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20f38e4-9f9c-4bba-a276-28f888545e5b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fb9c9c-0725-4fae-a943-8087c04b0479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e5a45b-667e-4798-a690-b39820d0a569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c80f62b-17b5-4778-9e16-a2e12a4411ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b54ab8-97a1-400a-ae76-7d19d471da4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8880a0-28d5-4139-b4df-0a15f8bd0c66",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881fd561-0427-4a4c-8514-025516fe8680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f667b3da-b6e9-4030-b3e1-ade810b56a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30390f0-e06e-4f66-98fc-51d1eeced94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec1ac443-2a47-41bb-9bea-281decc9078a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e672e7-6434-4c0f-bbe5-f09037cb1362",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012de136-98e7-47b2-a714-38c028da6c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a3f055-4784-47b1-9fc7-0636864869a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a9d9ae-0a05-41bb-8974-3586c01be237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c332d3a6-ff69-47e4-b71e-37ee47901869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4759bb-ca55-4263-9b61-71b7e3c2bae5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8c3be6-1069-42d9-870a-4bd16a75aefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5f04d4-ca4d-4ed2-8a96-47ba5389dda9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91361cc-3705-40cc-ba6a-14c797e887d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a09b5c25-68f0-43c5-bdfb-3b0e5499cf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ee8d43-a0f8-4004-9857-87a255d44b22",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9d2669-7437-4675-8cb2-edc0db7fc5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db67e3f9-575a-4537-8718-d95d23aa539e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66101a29-eb15-4183-9e60-118c08580ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c6e1fa-fec5-407b-8237-19d3ec75af23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb1b55e-d07b-44c8-9878-b9f76b35de3a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b23a22-dadc-4328-913f-1c5ac2a5d90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38824eca-32a0-4af9-9fdc-506d6ab8761a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc87abc-d9df-4d2f-b0e2-c8948718a353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "468737a4-856b-46b4-a266-a3ad61d854bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66d4572-e08c-46ec-9a25-65cf7fc6cc97",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e243be28-5011-4501-a94c-0431331889e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2892e914-f4c7-458f-97a6-e197ab537da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818cefb0-dcb7-4b9c-ad39-05cfd753b589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d11cc39c-2fcc-4106-95c9-e40b52510de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e09dba-0670-4f82-a6d8-cf3d889e5e5a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d91c10-9895-4292-b0ff-bb87f9fa2e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bd057d-a043-44b0-8796-e3a9002af62c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f377415-c0a2-4207-b2ee-11e3192ffb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3be2d0c9-f4bc-4fcb-9727-026abd273380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5a2cf7-0e92-422d-ae45-ee2b66db7624",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8a91a6-b353-4a98-857c-f8cfdfde82ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3479c1b4-f74a-4a39-97c8-fc90a2d5d0dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bbba5c-abb2-4c04-96f7-68ab50bb73ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "173fb21c-ff13-45c1-aaec-40a9dde51b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7603df28-5556-48e9-8d50-81c6e670fa25",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79543aef-bc68-44c1-be30-7c16e62df2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6621a891-4b74-44c7-93e8-14ea4844ada4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca92c852-dd68-4b83-ad63-9c82359cc20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0296e388-b8a5-4d54-acc9-0383189392b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683830f4-a1b0-417e-98ac-b4138d87f73d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771d8d6a-86e1-4928-869b-4207354cef87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1ac8a0-78ed-4a7a-90b5-a49a6894579f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50834c12-bf48-460a-ab52-8d687873f035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "922cd3aa-6d02-414d-a4cf-9458181fe122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c61d76c-2aaf-4528-9a22-c4bb8f81b4af",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467f2a47-387f-435e-bcb5-066c5ad24ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4abb16c-d021-4aac-8b5b-b37768eabb25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac787f3-6e3a-4ab1-a2b9-94c6d28db65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb935a1-ac2c-4e8f-b2a7-a4c9dc6d6e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44500777-40a4-4a04-8c53-438be15603dd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7dc04a2-03c2-4a42-96db-1d5aa34c24b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba7adc1-cab8-4e98-be69-87f538f1c058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d68a73-9ad8-4f6b-96f7-e9abd7850fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7520865c-9646-40c3-97ca-23fc0820189e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c840a8b0-3170-44d0-982f-8b729b90ce39",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf19ffc-bdb1-4b59-a9fb-dddb802bdf28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9533692d-7bde-4efa-9d78-64042f345497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902f7343-89f1-4980-86ff-abdd7ba1c395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e56e4ad-68f2-4bfa-9028-a368a23c51f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f89abbe-9d77-4c73-b98e-5de125d289bf",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a845e0-9ee5-404c-98dd-3342d3dee3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824e9243-a412-490e-ae06-aefc9a493136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454d727f-f20b-4790-814a-54b69321754a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e5051e-4ea5-4161-80df-ae5041e63406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2319892-3135-48f5-a8c3-7b944eb9b997",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861e118c-9a7e-47c7-a6e0-8280a31d12e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89b1c91-e565-46d4-8dd6-1f36a53a2532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772f68bb-73fe-4788-a368-66bb22cbf516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d26e2a2-8c85-4a89-8312-0d99e02113f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc73b04d-0491-443d-81cf-020cf936711e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b0da81-3313-4535-b2e7-208afbaa8d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d013d0d-f93c-4b00-8ffc-b936ff760659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7589d8-b3ac-44e2-9bba-fc38d87e1363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa70a4da-1924-4fe6-919e-ac3d2192a175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600c0f7f-6cab-413e-93fd-f1075a3d6151",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c4e581-e4c5-4174-8747-481d65c774d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f727a6b2-a1a3-413f-a79a-9960f8e84c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b49ddd-076b-4dfd-acc2-bd730c717ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd4c3e02-db29-4691-9102-6c76305718b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba196555-82d2-4807-8e1c-b5dd5e909c50",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a11933-8bf6-475d-be51-748aaa1eb8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4615b1b4-e050-43ae-a508-a6a680814cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1cee933-813e-4ad5-abca-07649796006c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c48f84a-31b9-49df-973a-c877f0b84632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfeb272e-1263-4bfb-b66e-13f40d17ea72",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3af48c2-a197-4222-a8f9-bcad0c2d22d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7937c1d2-bc1c-403c-b998-6dff8522a2a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52698a48-4196-41e1-b47e-9012b1cc4d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e48853e-1c7f-498f-a22c-9acd99b603fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44498ce7-b664-47c1-accb-359ca3c52626",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c14b6bb-552e-424f-a4ba-4ebf366f6d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ef8acd-c660-4a46-93ee-246b3da0c92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec0a1c3-c558-42fb-ab08-fc895f7f2325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "db3d281f-f974-472e-aca3-3f474920c889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2ea02c-e0ae-4323-af3b-6bd7e769f27a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d3f095-520d-4322-85c0-642a1025271d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20faf454-e6bf-40cf-a9c1-e9766dc4a008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6053621b-d6c9-4e9f-8952-907f4fecc9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6897dc6-3bbd-48d1-b8a4-f3c2cbdd116f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67304e5-46b2-4ea5-9b10-479b5f211731",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe74bab-b0f4-452a-8447-2c077b321c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8f302d-0d3c-4be6-b3c0-fe0d9649922e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5406f7-fd5e-4207-aebe-0ae95d959c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "580883e2-4405-4901-b079-16f77ff01bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51f26aa-a131-437d-a253-5faf34df673d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2593b4b-0ddf-47ea-9bfd-a9f63a22d43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4d4d4b-c683-4613-addc-6fe3ba8786b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f67ee2-f78a-4e39-8307-5cf7e5957c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86684cf8-0803-46b2-9d69-3c04ab69ab42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2128b7-7de3-4fdc-91b9-1611b53505e4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6674226-97b7-4e49-91fb-c2dbbe14a107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "177edf0e-3bac-4a60-baa6-24fdaf794776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b79be43-647c-470a-a332-7de4b343503f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b34bf9e2-388f-42a9-8006-b2c243befa8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e914bb7c-332b-4fcc-9eda-bbba6880d4dd",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8059533-08e1-4d7b-b61f-5a3188b6d65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03b0114-87dc-4b15-b5b2-834dd260c49d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cdc019-4b11-4bff-88b6-75415c3d6dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a381a3cc-0fe1-47d2-b48f-671276978c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff3e729-648f-4174-b219-c9e2ac8c2c3a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e39b97-b946-49a2-9df8-d5c584d402d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46126fe3-df13-4350-bfd5-f9be691734a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce4b74e-ff5e-4ec5-be97-6e89170cdb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b975161-6a8e-4ef7-9c2a-f717debad453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e900b5c-eab0-4b12-b3b2-390dd4cd4c87",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f2a397-53cc-4da7-abd4-cf3710a51b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8145288-eaa0-4163-a77f-19b1526cab10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa4d5d3-b92a-4401-b6ca-bd3e64ac354e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "637216e9-6b3c-4126-b87c-33bd2d368857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8125f979-b9ec-4ecb-9720-00e4b66a239c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a776f87-ba9c-4666-b0c3-ea986ecc2f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7968d8b3-c080-45e6-88d1-ba9c07e9cacd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca280ad-5671-4d15-bf21-93c3f6063305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e4312c-fcea-44af-a148-744bb80fe587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9141d82-720f-4b0b-a9f0-77f5b82ec8d6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d052ed6-3da7-432e-bfe2-1a9108cc8b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "232e1e8f-4d63-4c97-b6cf-db5b0f07aedc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5631a7b7-096b-4936-b59a-e1a247d2b53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36e1c406-a827-4197-9ddd-76b5b58ab782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb907088-7a05-4ea8-b9cd-c25c9208c01a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48a4ea2-d6b8-4518-8c75-1709e9dbb0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8438d3-3331-4446-9ced-ff11833523fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b09e35d-4851-471d-97c7-2b5432f1d09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe45fadd-b68f-4097-9745-198361e99421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c04ad2-c597-42d1-a2da-9b9ef1b339dd",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927cf5dd-bc34-4058-8cf5-2723789a6b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3ed753-20c2-4072-8d61-f6801b8a686a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34dda69a-e604-48cc-bf26-6487e3d0e3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8560a2fc-3ebc-4d94-98f5-85df89cd22fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd36e02-8f5b-48b2-bec1-225566e78099",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30010e25-89aa-4654-a74d-a76be5f6e5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4617bcca-93c8-4165-89aa-52d23b2e73dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe0a882-b532-468a-b855-985720cb83b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a43ac120-1734-4f99-9bfe-63e802c22fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc65fcb-9b91-4ca0-a8f2-e08605f4a689",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d43d69d-5db8-445f-8576-8638468bd90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907067df-aba6-427b-9053-5468df70c144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4497bfe0-a1a5-40f7-babb-5fa2667914f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7ca755-9102-4849-8727-01212fd678f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0b7056-3431-4154-a9c6-f7dd385f0662",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87d3246-ea1b-4a8b-94de-a4d43e19e8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd257bfe-65a3-4021-af7b-9eb2bd0444c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009e86cc-b8e4-4bca-a40d-b94bf317cd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a81fab-57ce-4486-9ba9-7c9209951985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce7ca22-256e-48c2-997c-2350d8cfa29c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833619c8-7d70-4580-84df-160053493003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c792c33b-e123-4551-9aba-4678d0b178ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55d96ab-2bf1-4782-b5ee-9423d147b9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01d8f4da-2a5d-46d1-bec9-9917fd6b393f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64339e0-0a2e-4700-b3a9-a4c7cab6bca7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4652bd-c3f3-4d4e-af1c-5984159105c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b6f89e-71bd-49f4-beec-1e167a9c4725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5729e535-c014-4780-ad58-36bd8096f7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d897a91f-943a-4483-84f9-bab8925aa418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd027729-8708-47c0-9a70-88dd4b72cbea",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be40f3d-34c9-4b91-9ab6-aa2a2fbebda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68896076-47af-4d36-a105-33b4f567b4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5627b835-b3b6-412d-ae07-dcac7f4f4c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb83e99-3552-427b-8ce7-90b2885eec3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ace0365-962b-4462-8dcf-d4edfa850f8f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0362516b-658e-4e7f-94da-392b9d2e09c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e40c0a-0d28-47b6-9a12-ef66e7b8a192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71dfbb8-cd71-4a91-a0f8-4c7649708937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ddb9e73-2508-441a-a1cc-1ef913c8a9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2f0b57-b3c3-4ce1-9978-523e589026f8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019534b8-0ef3-4607-92a2-d19aa0d166ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea4dc18-f495-4abe-86f6-e9eebda80a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67dfd04-763b-4929-8428-bc2cb05b2c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5855f5-8400-4cf8-8145-d8d125183192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e03ce4d-8145-4925-ac50-f97582d778da",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3106cf52-0e3a-4096-a064-7b5739b689f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa75dee-19d2-49f3-9798-3f94e9210615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99961d78-8eaf-43c2-a64f-d56984e6b1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1ed759-65f7-4fdc-9ce2-442732ef863b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9987c2d3-baac-4a05-b218-56d3f81bd7f8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804b20d8-077c-41d9-8947-5c9ad4b08155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67738c52-59bc-4f3d-8da3-15367479fc5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81aecc3-1266-4905-b5eb-c35b90231957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e162fc34-8392-4e94-a826-f0f5b3e95e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6814813-883b-4468-a245-71f89be60fdd",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b031f22d-3740-49d4-ba03-cde80b25aaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17479b86-3965-4c7d-8c26-32c67856e97d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3fb231-97ee-4e57-8528-7eb6b634d8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea932ce-886c-4d2e-b2d2-177adddae4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca0872d-8178-4025-929e-86d49004828c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45f6f8c-0bf1-4792-8cb8-ddc694d697c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1de20dfd-783b-44a8-aea4-c79e671e45b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340bdd86-0548-40b0-ab04-a5e82172afa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9bb75d5-e414-4fb0-9975-67d21c049749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4146b157-4ba6-4614-854f-9010ef08b7ff",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee00ec4-06e0-4bbc-b98b-8d0f54b971d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e42f86-3978-4da6-9368-92a1a48a007c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e4d2e8-1869-44c9-a290-3eb2d8bfa0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8623ebfb-4596-4955-8cc1-643e165ea556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072ca7ae-ead2-4d3b-a3da-e117d1eed8f7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e403ef-1b3c-49f2-96bc-eb0f3301a6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943d81e4-d46e-4bc7-b29f-17b99710715a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050cbeca-89c2-4e59-aa12-a3af7adf5b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "51c06d57-3850-4e93-b0c7-857a38d40191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4418bc-1dfa-4a0d-a9b6-ed0905129af1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcd3ced-690e-448b-8af6-5743fae919c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1fd13f-0567-4f97-869b-eccd93b9a5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b2f8b30-bc72-4523-a4db-3b6f175d8072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6fcc130-d883-4bff-91e5-34364756451d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e332d47e-de5a-43a9-970b-6612abfd0176",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42ebdcd-d92e-431e-b8df-5b4d38a737c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f53f462-d173-4c01-844c-64b2830b0e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf3b1a0-457a-4fa4-8c5e-b647b61eca1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "15f588ea-1074-49d3-8218-7b8625356234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8def967f-860c-4651-9b01-55daec19248d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280013b2-8af3-40ef-946f-fc5209c04d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7dca11-f101-49ff-a44c-44ed5478ef27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f848fcf8-dd1b-4747-9372-d82a293d5ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c16c606-9c8a-4230-9788-27ef8b060d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231c11f2-1b53-4186-996e-801a7058e4d8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91fbd4a-c00f-40e4-9537-22f3ac7b4960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4fd267-fcbf-49da-93cb-0b75fd2b95b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2233254e-84ea-4d5d-ba57-79a4e38c5677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "262ce16b-a1a7-4eed-a3af-b8118c40c4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdde2baf-7b37-4aba-a7c8-07c110e42c8f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdb07aa-cc83-4546-acb8-60b32ccb86cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d5e5ef52-f809-4b2b-97b4-47cac051d8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82bc4d3-947a-4e62-90d0-6e1778d8627a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "754fd2e7-66d2-4a62-83a0-ef0dfe5fabe9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4495a871-aa04-426f-bc64-cd14befb481e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0e1a1fa-6069-4c66-a069-ba3af4b9db4c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751059ca-abaf-49cc-91fd-e69cd685e151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "432b239a-6b83-4bb6-bb56-1c32d1ebeb32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7aab8e8-e277-4db4-bc7b-e9b018f48b93",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b58494e5-2bf8-4fdb-8671-aabd878592fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b1cd9e1-bfa3-426d-8ab4-0b9d584a2783",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d1c384b-2d23-49a2-8163-e0ca0b353383"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80fc64e0-2283-4aa2-a6cc-a0c7b485c0e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd8a10a8-9828-41ed-881c-d3ac63fd89eb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67c44c8f-bc0e-41fb-bfe1-a4661c93299f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1e2ca78-2c41-4a9f-8ccb-ac1b0eb434fc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e388a1fb-530f-467a-bfa2-0a573d0a6efc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86180d1c-fd37-4c57-916d-d673635bf95d"
                }
              }
            ]
          },
          {
            "id": "4bba265e-d2ce-46d8-91eb-e7502a8e681b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1b59b126-ad86-4b98-acdc-7ee11da8c31f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "337e9b1c-e36a-40d2-83c7-de5928ce50ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2168ffa3-f10e-418b-adb9-16f4be4bcacd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d722c66-ad90-4dcf-839b-5971ac366c68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "71aff4a3-9a3f-4c47-8dc9-f4e7534b11e4"
                    }
                  }
                ]
              },
              {
                "id": "59bdece0-429e-44c7-aac3-ae47ae4efbd6",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9aeec8c8-12e1-41ed-ae1e-7c9ddaa70ce3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c45a350-3a2e-42d5-8290-b400c3650cb0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e825ede-d99a-4fe7-9408-c2e4969758d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "353cbe0c-f680-4ced-bac0-185a6ac67300"
                    }
                  }
                ]
              },
              {
                "id": "60ee6f36-8a91-4d49-8cca-c1abcada2f74",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23c6f04c-309f-46f6-a523-0b87d5d7cd13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2c23b0f-dca2-4d60-bac7-270fb01e1f17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d09a71e-12f4-49ad-b0c2-0e349709e039",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5e147c60-ba58-451d-96ac-435f7b54c99d"
                    }
                  }
                ]
              },
              {
                "id": "30dfe8f8-7c71-4cb8-a27f-2166c3ac546b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3b409c4-a2b4-4b06-9142-c1aeca2dda00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a60d8676-7c51-4964-ad96-fba4aacc68e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67ab8d30-3087-460d-b938-4c97a36d29a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2b235bf1-acfd-4da9-8165-ad67bdd8e776"
                    }
                  }
                ]
              },
              {
                "id": "a5ace56b-fc04-4e10-aca9-bf41be29a131",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a52377ba-d1fd-47e2-8821-380986501a1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af78dded-8974-4317-bbb5-f6cfc87f4fc0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd5c7a36-678f-4cdc-8811-b4abdc50ccec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ca43166d-6508-408c-b047-918fbfff412e"
                    }
                  }
                ]
              },
              {
                "id": "fd9ae72f-1c21-4147-9e70-95cd28607e61",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d29de176-e58b-4f6e-94da-f6fc7aeab788",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59dda562-41ec-4795-9cb0-13d4e4d9840f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97ef6899-5a2b-4ae4-89f4-d03bdbbdbd44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d63eaf43-a00d-49e8-a344-a47eec8c77c3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "86d654ab-2832-4ab2-87bd-896c92d659d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6506426f-6cf9-4cce-ac57-f12814c06f6c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7b732d66-e336-477b-9a40-90bcb74297b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c49b114-2dc0-4020-a6ae-814c4fd32be5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cfea572e-92ab-4bec-81ea-2f1d3acdb550",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "07a969a5-72ad-48ca-adf6-76d957c36fbb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e364767-00c9-4291-8a4e-604d57b416d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92dfe27c-b363-4894-ac8f-e7d0a8d7bd45"
            }
          }
        ]
      },
      {
        "id": "5a4c6a97-7ef6-422a-8227-724659c9178e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a3f4721c-ac67-442f-9112-aa287450becc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2e8f0c7-b7dc-453e-b48c-c29d2afd7e6e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3e09f690-a4c3-47c6-8bf8-642ecc49ef51",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6b396b-feec-41ea-965b-5a0046043c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8fb8f0-5fb5-40ee-8e86-6f9e6b57955b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e75fbc0-f2a7-49c7-8f21-b30becd18f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd811d7-21bb-4e94-a71e-99caed825e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910cac01-d2c7-49c5-8334-2890323176b1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6852b9-2a54-43bd-ba0a-7dbc21fb1d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927b69c6-c9fa-439f-9cf5-40e7608d3c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b7bbcb-b59e-4588-ac27-e5b02681b090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "85b47d21-80fb-4576-8340-8442e46e7320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0605a8bf-2f5f-4a40-8162-5ba06c346d13",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e7fcba-2b89-41d3-bb44-2cf0ff772aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64925122-ae80-404d-ac14-49acc03d78e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd92eccd-e8dc-42d0-b1be-52a77042baf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fae93c92-0fbd-4f27-9379-02729fd299cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89204f64-1aaa-48c3-9e67-1077fdf34f05",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e56076-03e5-4544-aeb4-23add12e4091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2cb54c5-77bf-4754-a976-3ca05f3dc6c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9215822f-0b87-4885-a413-62be1eb6e2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2776f7c1-4094-43f3-ab51-89b2d9e072d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c04bff-b07b-4d9c-8fc7-d788ed0a1cc8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72a9151-bdd3-4f4a-ae04-b61404bce6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598c7b40-ddcf-44aa-9f23-761ba78a36b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b629c6ed-87ad-4cc5-8a10-d261893ae2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5fb225e-4ebe-47c4-8b38-7facd396798b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006a0bcd-3738-4b0c-a33f-04c9607c614b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7608bfda-ec55-42c3-9702-6d3c841b4382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b93380-d8aa-459d-941b-a76956d7e204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25441c6b-46fc-494d-9811-6579b1535a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aba26855-ea3f-4e2b-bd01-131a91dfddef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd9f71f-5ce8-445b-9ed4-acb9fa98260e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56eca45-1dc2-400b-9a24-91fa619859e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15aeccf6-a4ae-436d-820c-cdd6f985267a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390d45c7-89ca-4d89-a6b1-0479eecf23c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "162d8fb7-4cf0-4622-9dad-f23325e4a91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250e79a2-88e4-4ea5-9070-5287d70841b2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e69fff-dde4-438f-834d-8ee32eb87938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b26b0e0-f74b-4e1a-b90e-d247ba047d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa9ca81-ca2d-47c2-95f3-d92b9da90832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1bebc0-6671-4e77-ab8b-fb801c289edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f722db02-0173-4348-88ef-635fec2c1836",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50431c77-cd70-4187-8c36-4df13d9b95ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c540374e-673a-41c7-8a96-6db99c46f7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b17bb7e-4bcb-4840-8fa5-bd974e46e89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "062fe204-d13e-482c-9ba0-004b8eeaf5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511fc860-c9b1-43a4-ab65-07357f4973c5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd341b5d-be75-4377-936d-d43bc533e24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7289e77-6aca-4516-bebc-e00ba2e96ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6721af-5fa8-4afb-b344-3fba87a50799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb760e6-203e-41aa-94cd-023289beafca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2660b0d3-d760-46f7-8ea9-73c630fb3436",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3caeeff8-bf06-4947-8f91-68dce4aaf707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e33864-35c1-4b15-b162-29ca62e94293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5ba376-8500-4993-bcae-4ce078c298e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f96679a6-9366-485b-bde9-c3834a835256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cbfad3-2647-4fe4-835e-d5a20f99f148",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d99f178-114e-4ffd-b93e-e34a33cb5a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbac7b2e-5586-453f-a2d1-c5dbe78ab3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661d1c26-aca9-47bb-932f-88959a016dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4df859ac-aece-47fc-8e66-83c9b19c866d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049f7cf9-8242-4f12-b677-a8d1c66dd61d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31000624-72da-4320-aaf7-22953c77fcae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49da66c7-116f-417a-bf0d-b0b63f6e2728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9b0ca4-99db-40bb-81c1-8f420b7be601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb0fd1c-ad0d-4201-aaff-f60bcc1054e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c12633-6882-4809-91fc-db9662efa159",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a06d55c-a456-457d-9a9c-5c82cae62fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a8b2ce2-fc97-48d5-8c10-05b46b4dcd1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e80082-ac19-4c5a-bb8f-a548772b14ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7a3bf4-30bb-4c14-a7bf-c73e9eb62399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883eb4ab-4fb8-4c02-bcc0-4f3e55e0e34e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88ec1e8-f3ba-471f-a0e0-2f1094d7d067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07fcd280-0538-4e81-874c-2d876e9db2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7345b4b7-9d24-46eb-a060-8ebff6945743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "761d7c8e-aa85-4eca-8d1b-43f87a293703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7185789-5fe0-4713-b76f-e9390d471711",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6127626d-af33-4a77-a330-107ebbd75a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ffdf8c-bb06-4525-bc0c-227175e21c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a486ab3-dc28-4deb-b5c2-3b7c86a7adda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6785ff9e-3ce8-44f7-9de5-3002972cd1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488b46f4-4ca8-44a7-b72c-66083c8c6ea3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f111dd7-883b-48cb-9cb2-9f2d6c1dcca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa9b1f3f-d08a-4c45-8065-e70d821df388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4a626f-bb23-496f-884b-51cbf146acd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "12fa7a6b-133e-4a2c-be8d-85e9b403a03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8163d3f-5d4f-4d0d-8a6e-975326e94e4d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aba2cf0-f3f8-4c8b-9932-4a0c89e3b3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d5f60e-4dd2-459e-b603-a78a488c2fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2816722-3f48-45eb-b5d9-beb90ad740ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8deb36a-031d-4fc0-9eaa-1ece1f02257e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfd491c-a117-414a-bb49-a08572c3116a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd22328-83c9-4913-a5e3-da5031252f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653389ea-6610-4eef-a02e-0d3734defc15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5d5552-34bb-439c-9ee2-376c0199d5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d5dd53b-53f5-4584-82aa-4c9072d26dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf254ab9-23a7-4c94-83a8-05bc10515b8d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734d3e38-5651-47ed-873a-29b4911742e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06dadfda-effe-4b83-a25b-86f4a167d934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a11b05-cfff-4985-931e-69cce67e50f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f4fca0-7fb7-4df0-abea-4da7cf35a85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcbfae06-8e59-4b03-a9ee-fec28cbcddeb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e002f9a-c8bc-419b-9a7e-186b4a21b59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a64e42-2cdf-43f5-9c08-2d1871d38476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ac1a57-0b96-4898-acf0-677efcc2138b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f25175f-a68c-4e2f-9cfb-053f9510f5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e30de0d-f6ca-4f25-8537-74eb1416cbaa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccdc683-a06c-4a8e-9aaa-861024290fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080de442-999b-441e-b3e1-fca898cf2324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84135d63-a708-4332-b321-3a40f50ecad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbcbe034-383f-4d9e-819b-ab80bf733b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8e0e56-283f-4911-99eb-d2b993fb96f8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c39823-b1c9-4860-844e-724f14e4b1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa40699-aee3-415a-a35f-16dd50ffbfc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ee97a0-1acd-40a6-8dc6-695cc7fd7c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb945da-e7a8-4800-8620-bdf6dfb54eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d177c008-107c-4951-80fb-0d45afc0f895",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bfc987-6976-4f9c-922f-ab2020f10a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3827074e-aaa0-42e8-b996-ec32d77543d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28efa847-0eab-41d0-94d6-f622c6444d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c0e4c6-bf7f-4043-a7b0-64f0111c7ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343b2a42-3608-4a81-a65f-9dd3b225ad63",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42362a6d-eef2-4796-a892-bc8c9b00ddf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee8da24-3181-4859-902f-42de4e4ded41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d650a12-510c-4afb-9301-2924de9076b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc43511-72b9-4629-8f7c-045a07583677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0b3559-8f05-44e4-93c1-dfb79947bfe8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9280a53-02d4-457b-9402-99b19f885e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475b6845-1ae5-4025-8c0e-1a0847c1ad1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbee9496-ff9a-4d84-a7ca-fb53284cf3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4cf073a-ac59-4a71-92cd-a9d05dbcb343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad0e901-505e-4995-a196-17477fd09f4e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe1216a-2a12-44ed-84e0-a014075183a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac990c06-939c-416a-8707-40bcbd13e2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7e650f-df9f-4614-a040-52dc676f3d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c29af9-8958-4eac-970d-5e81ec144167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4b9b3b-c1cc-4ffc-a448-8cd254e098a5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f6c21e-c106-4f6b-b194-2ad907825174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7bd0c7-0176-4587-88c5-269f7cb391cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc2fc26-d5c1-4af5-a0d1-f7c217820fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f1bbd0-6ea0-42b4-ac2f-84b06ac9ffc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc6f7bb-947e-4440-988f-263fa6bce42d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e649d0bb-30bc-4cdb-9dd4-ce8a63cdf431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fc45c0-dca3-4332-9009-54da8490dd2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776495fa-fc5a-4943-981b-41486464b7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "608a93b8-1890-455e-94ca-545c0af4e586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5591920-1bc0-4469-b529-c56112a355e5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f075ac10-3954-410a-accc-74edf18a9a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62b05ef-2a8a-4bfc-b367-49a5bebb5bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88332504-2af6-4af8-968b-6375d2628a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38577b8e-c2fe-44d9-bd20-6a537e76dfd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebac4582-5bd6-443a-8968-927a7a800cb0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d070eb-7d6f-4b95-a7e5-1c631b322844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "badf6317-8fd4-4936-9cc5-546063a915e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab59af2-be5e-4a1a-a070-a1a9e97a2be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc34365d-f76b-4157-bb29-c24e16cb6255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef92dc35-ac5c-48ea-a3b0-342011c57e15",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b10609-4f6d-48ff-b034-e1ccc3febfed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6916f6e-be67-482c-a0e2-6f670dbb4484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a56c0c-7fe3-49f6-83d3-c44f754705d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9157c664-6b4b-47ba-a523-a3c4ab590c8d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9437a044-bf19-4746-9111-ab6d92aa0eb4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77500a34-62ca-4b2b-9eb5-58c03c287026",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33748fb-6cbe-498d-8ddf-c99bc9d673a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "371fdf1e-b395-4d3b-9cb5-e43c57a0dc6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c29c21-cbda-4230-ac64-59f4022e5bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01ebe860-8f09-4550-ac8f-d3397cbccfa0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c70ee3c2-3416-4716-9372-a4621ed3a570",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3956cff-6399-4547-b35f-9572432c1327"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f75f13ca-dd8b-491e-9929-607bd986151b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f282937-3c1f-439e-a608-8efb9d7a9112"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91ca19c1-7d9d-454b-bab4-e6bfe798c83d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "05432a00-fd5b-4c6c-9de1-2ba2f1d18b14"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb223ff2-acdd-447c-812e-fe1c4e417a2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "21ad45b0-ef57-4363-8a9c-85a013c201c9"
            }
          }
        ]
      },
      {
        "id": "c59c922e-4fe1-48bf-88dd-37bd9caa5241",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1a6ec434-8c29-4e0b-8dd4-761d8459b06b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c7b8745-2909-4a4d-b9d3-93b55b22f59d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "df6a210c-21c2-41db-b628-e0b05d94af41",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129c799a-fc09-48c4-8c85-44133d03b843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371a1732-bdb5-47ce-b189-2f6fdd6d2738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee552bc-4bd5-44eb-bfe1-3d1b73344f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca3d79d-6892-4b33-b9a3-83f4261a274d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039d539a-0156-47ed-ae4a-cbbbc7008678",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c6dced-6e42-4047-9718-22eded2ca6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79267eb5-0779-4f0d-8b39-f983db584104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3fd94f-7e05-431a-bb60-0c0994f239f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5ec1013-8811-4a20-9d29-208734661a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce76bbe7-209f-40ef-ab8c-4b6eacba9655",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea46464c-d1d6-49f2-a4bf-5916987aa770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4166ea5-b1ed-4c67-8b95-58c4fc86d366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f581f9c4-d39e-4079-badf-1d8b35a422b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a13fef1-719d-4f20-ba39-c1beb68d443d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb33564-7fef-47a9-8fd4-24c078cdd2aa",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "190fe7cb-b97d-4acc-b19d-72e31947aea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031363a1-5a8f-4c6b-8c5c-fd19a552b219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06c581f-f776-46bb-9177-a6d81bc3bac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "105d9896-aaf2-404f-a1a9-79c32c0fa8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4300d261-aea5-46de-8baa-fc5f2e41b4e7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0912a959-dcd4-4b60-b643-f4426222d63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34c560a-af36-4443-8024-493dc483ed6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04c200e-d647-4abc-9bd7-6219e322d663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25abb9e2-0a31-42f3-8103-30542820fc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca453c7-d4be-4391-8c15-971c568e966f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2984fccc-3cc1-4e8b-8368-816fcbdc971c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f17e08-0bd9-42b5-99a4-129397bef5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9572d38-08fa-4f03-983e-c70da3c95248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89d7e5f8-7df0-4b11-abb5-c7a14f2f3380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9669ff7-e243-41d5-81cd-b5427bf63f61",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e36670-f58d-490f-904a-4bd36c9dcaa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ca9694-8707-4627-acf4-b718a9b3a38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869a1f4e-2082-41ea-a58a-0433c1d50be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "512d74b4-4f2a-46e7-93e4-6e6ef6e25dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c39b17-46f2-44dd-b716-26cec9202e3c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78425db3-1b62-4cf0-aeba-a920a1bf7d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01825d56-60f2-4b74-9356-b60d0df969b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23a7512-a549-4d3e-93fa-c23a75831104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff6904d3-9b55-4659-8825-089bc0816666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68593f64-cc17-4c70-9ce0-5515d42a96bf",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033c2eef-98cc-43f9-9e99-39b5f3dd9783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797caabc-4b0f-4bf2-b97d-9a0c63938514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc89e43-5417-427f-a11a-61ee719fcf69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd22b188-661b-477b-8d0d-0f3b7f5e639e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c340f7-c556-475d-b5a1-cef614785e03",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af491dd-c699-42c7-b445-9cb2b68296e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1198848c-ca9c-4e6f-a560-85dade041c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88cdf115-2b6c-418f-a1f0-d316873d9ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7270018-6e6b-480a-8ad5-8c69ca3e2e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e7017d-f676-4b8b-b32f-cb19d2105f69",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f984e038-dcf4-478e-b71e-9deb0a2d0cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64e5770-ff0d-422a-9308-adab469cad1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e9ab18-b2a7-4b41-9e4d-4ebad02e963d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a6dcb6ee-e48f-455c-8576-027b949dbe09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b8e2e0-036e-4de5-8904-06d2ebeeec5c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff89e93-fb1c-493d-b5a7-11ce7fe7dd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf8d874-70c2-4536-a0c1-e99cc05ab589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a25e72ec-c597-4fd2-a776-3de8c4b6b00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b74028a5-a71f-4eec-a714-94f22cf38f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd11f22f-0439-4fea-bd7c-b0e47013347d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf1a880-4b26-4848-a51c-5e002eae0572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cbf8055-8626-4ff9-92f1-69cd5e3c2e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8402ab41-4bcb-4b26-9244-e7c7530fb650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a234da4-0bd0-4aad-a695-f14b0d5be5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8749e76-2b5e-41f5-9cdc-8129af6531c7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3de494-0106-41f2-a533-874140bec4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1f6ba4-1cd5-48da-89b6-68269cee511d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9a8504-8ea1-45d1-ba72-255d2772a52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbca8abc-36a6-461b-9a01-1a3dbccfcf8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acea726-b8e5-47e4-aef6-66ddc7e66b13",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837d1417-f535-496a-a8da-50687d5bcedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9edfe78f-4c60-444a-aba9-0d20bd3ca75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8628b6-aae0-4216-9358-455a8b05eaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b3855a9-f5d0-4dcd-a589-c1be0e66fce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6494050d-4c3f-4cd7-a8f7-dfcd675604fd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ae5c88-f402-48fa-8d2d-ee7fb8b42d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821a3de7-76a0-455b-8a19-2a9e6dbd0f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7b689c-a897-4052-941b-a9e4078f36ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ca1ab8-91fa-4740-8451-6175e6c9f3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076323f3-6ca3-42c5-a179-6167a04748b1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a882cb-d378-4c03-bdf8-c5a320919885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a82a6e-58ac-49d7-a423-4e0e64ccf159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12106967-fc07-474d-b936-5a67aed5f02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "81509d8e-3811-4aab-877d-068b147d6437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3689953f-0b01-4681-8907-44bace90c276",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccaf92e-c19f-4592-b486-dd29bf341c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b737752-0748-4f91-8ebf-855be7ba61ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fc7506-6934-4623-ba0c-c3f2ff1bac41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "904a9799-e904-4f81-b778-b3a25156b5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c0a63f-a31b-4abe-980e-8f2431a6cced",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e1677d-abe5-4b1a-a3fb-344897d02355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedbf885-f5b4-45d5-ad80-820eb5125b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f437d044-e054-4264-9f1d-cf80b9aab046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "528b73e3-106a-4f49-9138-22233068b228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08d153d-6268-4774-bfcc-4eedf71f19ff",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130c1ee0-8209-446f-9905-7d7d8f7058c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b366222-e77b-4b79-918d-53edf4a005aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fc7b47-54c3-493e-a4df-55568d2ea692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7819f8e-05cc-4556-91cd-0e8fdb54ed72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d29a56-f93a-47dc-ab18-099f0a112ce2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9935ab98-ce4c-4953-a0fd-917c405e635f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b474769-5173-407a-958c-b27bca662cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07a7e7b-4472-4668-af07-f8a1072370c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa47f65-fde3-44b8-9b8f-5c423ca1c5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc31d2e-c82f-4a1a-8820-93976e333e48",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc73dc9f-60e7-4629-8811-f74489c6509a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3319e25b-2469-4ce0-8909-ee953ca05c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5e5050-9092-4fc7-ab77-88c6f02ca35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f559d6e-3286-489b-bde1-2547a1da28df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3144daec-3ee2-462b-a12f-450ae462667b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f291e630-e98e-4dfd-84f0-faf824de2c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0177f8-1abc-4bb0-ab75-bf3ca06119d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80015d29-00ff-4fb1-9dcf-2f21fe62c63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b81dc4c6-4efc-4ee5-9e86-8cfc285a1642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81550f37-b791-403a-8c00-18117e051849",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc567e9-5221-4c23-bf71-9d44d81d3ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8790f1-1b88-4a75-b2f0-1f2030b13e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc8fd6c-3cca-438c-8d88-3e5733326f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d36ef2b-ac6f-4621-b681-d82f5bea825c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe7f97f-b431-4872-b23a-b82471907c65",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffc4fc4-0bdd-4a00-94d0-72b1ee1dcd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b581f3f5-7ab7-46c1-a999-0b9ccc4e6901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61407292-e246-4264-9a75-4a16adb9160e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33d515fa-b1f3-4f89-ab93-acee3de6eb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0309e0-2742-4df1-9940-a4036942c8cf",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "185d1905-3617-4b7b-88d8-6a1a8e2da270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a45c8f9-bb7c-485d-bbd6-152fa53bd78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c010a8a-29a6-4f99-9900-038a3f71a24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "726bcc6d-d2c8-4ca3-8730-ceaf824a2c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4525e286-2552-4980-8587-9ddd1b1ce162",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad1a59f-0d1d-4641-8627-52b2db959ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa0d174-6000-44f3-b888-6fc0dadda063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b3ccaf-07c9-40fc-ad5a-d6c8677702cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6bd48f-180c-4515-9c04-41c37322995a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef46b927-dc0d-4b3d-8677-3e93af16a135",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eaa3aba-b915-4902-a75b-814053db1d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0cde711-e1a4-44f4-86e3-b2c7d1d9dbff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fc7474-6f49-4591-b521-007923648a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "249b42e4-2c65-4e7e-90ec-02612bfb5852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e956becb-342e-4552-a920-66118d4b5889",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76641551-d880-42d5-b4c4-8da688950710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8e0359-db95-4836-a649-3e4db2341d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3106ff7b-878c-457b-be1c-f73dea3148cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e73c246-87d5-4753-a745-1bd329f5be0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8ac5ee-4903-41ee-82bd-604f3de381ad",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e3958a-9b3a-4c6c-be98-0a5c3a2263dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7079d1e8-fddb-4bca-b7fb-6cba1f5fe8e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e1418a-6dc3-4756-a0eb-c198bea7723e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c80c96f-eabb-443c-9906-26a1c57d866a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce05780-8b80-4aa5-8c01-29f4c7d92446",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab26ac1a-16dc-437c-abb1-d6808373e6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40331e62-8dd7-4b10-a69d-f09f9d4c86c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93095e4-6332-4a1c-b5f2-b995f8fd3548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13dd82f9-3584-4356-b464-58b13844c8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146524ea-b33d-4a8b-a79c-c685c6f96bfc",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627a68d1-eba4-44c5-af36-1e3242cd29f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bee2ca4-fc2b-4b6a-b1d0-53674ff2cefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a81f19-4490-43cf-ac91-e6cf13e5facd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1fb559-979d-4d71-af14-7f0b67e40a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0c0dc5-35a2-4cba-b7ec-13d5d39808d8",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86d3315-baef-4cf3-a48d-2bd9880fa353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54b9b79-176c-469d-92c3-4bac7ba6af67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f36eaa6-5006-4e3c-b69a-e5c4c965bc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c65f3ad-0b9c-45ef-abd8-0c2271a0a039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e6f6b2-90bf-4405-80b2-6eaccaebd0f9",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2562709-ba3f-44c0-9a62-08af30fdf6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc453b3-b1af-43cf-8dd3-96578ec3a6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99fd809-43a1-48e1-9583-058abf1d2aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af86d65d-93ae-4fa8-b0f5-81824f39ec44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4061af2-1bad-47ca-97b6-a0acc9e8c04f",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f4582b-f9d8-4fb3-86bc-e470136ab856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808fb600-b0e4-49c8-930f-03b817fc889d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645fb87e-4a62-47e0-9cbb-bc8ce0586f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b36362-cbf4-4566-835b-3f841f01f1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f313e015-8459-4056-9753-1a8bf191d40c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214e9ed8-73b5-4f45-9e51-9b4c3cc1ab85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64dbc0c0-c53d-419e-b635-f0406046b832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be32bd86-8aa7-48e3-a8f8-af5109583976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c005eacd-1a37-41d0-852f-432f472687fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee04bc3b-87cc-4cbe-946c-1fef93e8c392",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f767c04-a67a-497a-8eff-8ba7c93932f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8725ffa9-552f-4fab-ac08-1a230ccc829a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16264c17-17e1-4cfc-8066-2dde7f5b61c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd94f7e-dbcb-465c-8107-ade7e6706c72"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f4e0934d-cf44-4008-af12-3aa100110ca4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "391ab315-55cc-482f-b09e-877f4909ad1e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1614373f-a5c2-4876-b5da-30f21385cd0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe3201f-d947-4ae0-be62-86f1eb571ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66ae65f-d5a9-4cb0-8f7e-0e14e6c7f285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6b4fb6c-941e-4684-b23c-2eeac2a44bbc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba87eaf4-f3f2-42d1-9e8f-254936334a8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "420aa870-52b8-48a5-a2f2-9d6b2c2841b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df5273a0-8108-463a-a6d7-f7ee7c764e43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed5e8e69-56f5-4966-b331-0519e0b68cdf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10f9cb62-5727-46a2-80f9-8a510dab3820",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac5aba90-5aca-423a-810c-3ebe0e4f7d1f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e06af82d-78de-491f-97f9-33fa63dce005",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87f94375-8685-4d8d-8e7a-692781b8e812"
            }
          }
        ]
      },
      {
        "id": "83418d83-a720-4f1a-89cd-e38ba6b6ff1f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "423003b4-b19f-44a0-9119-81d95e7eff0b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e49db678-b343-4ded-bcf7-c42b75c6e135",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6606085a-e4fe-4887-972a-59519d159042",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733e770a-8c39-4ecd-a304-0e2c2c887cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5660e5-c312-465a-a71b-fe9ed1047902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23782d49-1465-411e-a7c5-d8e3104f2dc6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5caecd4d-6ac8-4252-9cd4-4deddd500a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1bed11b-11a9-4c77-9ac6-7f75d4a8c748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184e895f-763c-4021-a0ef-3a819300f4ce",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6a1461-4a4f-4de2-b957-bc1c18878605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e26198a0-ccbe-49a4-8957-075fdbedd6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4244b9-7a9d-43a5-ae73-eb5a11324c7e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf5686e-b330-4588-88cf-4ad6b70bae20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffe65e0-7d4e-48fb-b0ed-dde6e43cdf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d9b1cc-40ff-4e0c-a726-35d805bd2258",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6930e50-8241-4ec8-8653-4807c1034f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1648b6c-0197-4a11-b6fe-4b2fd35756e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8ed040-0a87-4b22-b943-d38f384e258d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71046671-6ac4-47e3-a796-afedbb99170f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2ecd912-58c7-4cee-aac9-6f4012c0c556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b64f8fc-fad9-49b7-8b4a-f90f65d87b7d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48dd524e-eb37-4a5f-9354-9b7dcd514959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ba638c-b69d-4126-9346-b06fc6daa1aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c8c1e0-fb0b-47e8-95ba-fd8d8cd90638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "330aa3d2-de00-4a0f-8cb1-76e1c789d0e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf9f2a4-e3d5-4fcc-b73f-8dccfe463209",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3cbc87-6306-4032-a2d6-fa87b55c3af5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9414596e-83a5-4dd1-a799-6bdf7233aad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a74a74-51f3-4042-b01f-6836baa20366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2170a45-ee32-45c4-aa11-10f0447a90e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93da101a-6cd3-4b74-9006-98dca740ba80",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6f4680-bbbc-464e-8ff1-d227a026566e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fcc6da4-0226-4529-ba3c-b0610859dfba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cfe04e-c21d-48bb-8c2d-726e275ce9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6297853f-0944-4b59-acee-2b210792ca6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a399b79-8ca2-4e6e-affe-8a4ef35cc913",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34284d12-05fd-44ec-8068-25721ab83ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16234096-84f3-4fab-b5cd-11a85c369e22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1330c8-bbbf-4ec8-a575-998539928faf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c38a02-5ea6-4209-bf73-43c647932cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bea9e2-4bf2-40ff-9f97-bb3a98768b2f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3c97a9-d7de-40d7-affd-fd1740d0ee59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792cd8b0-865a-4f07-a2d3-a24a0a4e8669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdd10d8-d449-4efc-bf7d-1314b4375e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5361de1-4ade-47db-8c28-ac19739ea1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2758e428-81a2-4525-b0af-144cd9352705",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47964e8c-e73d-4feb-99c7-dcdc4105cae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89a6507-6e8a-4e4c-8006-ef60c057af8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1918e5-c050-470d-a5e0-14ebe83e93a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fb64e4-738f-4199-9419-cdd452341092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be942a2-5717-4c54-ba0b-53e5e5f01b95",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3a698f-9a5e-48d6-b0c1-09bb363d2e35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a05e4b68-3ba9-4ccd-8464-9d66efef9293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45294ec8-699d-4360-a491-6b0223e6d967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f6b030b-ae4b-4f84-8472-58cbb902128a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44086b7-39e0-4a6c-89c6-42536ab3459b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d93e7ff-2be2-4f12-b9ea-26c7abb88fe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6a295c2-2fa4-476f-9721-9df83183dc8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de4c801-27e6-4e1f-bdd5-9731f2c7ecba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10107af-6d1e-4635-94fd-6988e4920248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9fcc11-e9de-47ec-8d66-66f79d4d4857",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91ca9d6-05cc-4901-9490-335a2ccfa2cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08007914-8b2d-41f1-85aa-b9e958001139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21bf7fa-3677-40fc-b22d-2877538acd85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c3f5bbd-484d-4959-b9d3-4a6377be81c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e83b095-4c11-41f8-a613-60ca4c14763d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830face5-03e9-4db6-ab6e-70bd4755012d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc3aa7ce-cc5f-43de-ac56-c7ba15a75ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cf6d7a-01a7-4124-8288-67c4693bba49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc5debc-719a-47ed-ac2e-bc8c5616b569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350e4dd0-f79b-4c1c-81a3-cb22b6ff5bf4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571aad41-4992-4cb2-9def-108daa6beb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f660934-61cc-4cf4-b4dd-4722700cb42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ae19f8-f4c1-4921-a28e-775f54ea0b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd83dc2d-2b10-44e4-8a6c-8a7ef0de92b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162ac63f-a050-4f50-9811-19d8a664851b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a583912-302a-449c-9819-86a37af842a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b55799f-848d-41f4-a395-62842316fb45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea89f29-16cd-47d0-928f-1cb7da22cef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ce854a-fa0f-431e-9d0e-cb4dd54788ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44066bd-71d8-49eb-a1ca-5c57f1de95f6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d3fefc-b567-4926-9209-363b794bcac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec8bcfc-fd0b-4cf4-976a-591436774eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d10fbb-f3f3-4f2f-934d-17950bfae1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7592f129-5604-4dd1-9f68-31bf971cdc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1437aa7b-1be3-4380-9cbb-ea2f4147c9a7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3b08a2-5402-43b1-9c8c-d3323ecc8355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbb6333-aa17-4c4e-b6f2-18a91247856e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd9bad1-4411-44aa-92e2-604a4d94116c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3584a1-564c-4ca7-9ed5-ed41883eca70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160be669-a494-4574-80f8-0dc067efa24b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30802cb1-aaec-4504-b5ec-ce4ca57e6ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793e803e-ba62-4a7a-9984-53959c717aeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63de1e74-a839-4888-8510-828cbcdf1079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "070da609-d0f8-44be-90ad-2411cd78bbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da38d0b5-0bd6-4aba-bb4c-5c474b7af8a4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e9a29d-2167-4404-8982-397e701516d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e47ff18-47d7-41e8-a7eb-02188e88ca1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78caa00a-7c08-4c50-b726-98a5af8a3d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecbea3d8-d6a7-4dbb-ac54-5e3fc208882a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc925fa5-7b12-445f-ae46-0585d58c67b5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f007affd-4004-495e-8db9-41c5e5224864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b77f1d-d0d8-4e06-89db-d6537c7510f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "991792aa-8fa1-42f0-bcb7-bd8bda81dc92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b897e736-1d27-465f-93e9-94ddf0fd04a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867a13c6-a0c7-4775-b4cb-8a22919434b1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d865aca-48f3-41b0-ae28-a92c9fbcc40e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6605043-fbac-4ffd-a949-88f1d523d38f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb45c6b-4335-4f5f-9824-1028d183aa91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a365aac-e100-49d4-bad9-6290af55ff90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d43da57-61f8-45ab-980e-9118067d13a4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472ef811-a294-404d-b7e1-cdb99ff7853e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d996026f-a363-467a-9288-c1548bdced3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51418e34-9b27-447d-a8b6-8fc46bd64390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a2096a-f91a-4da2-9a4d-6e7a2fa51067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2891062b-9788-44bc-a195-d19be63fa836",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231409db-0c17-4a33-91e2-83aa1ecfeca1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16f19227-9727-4bf4-aa3c-bf528f06cc46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6227635d-5758-445c-9590-ab395e10fb4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c28d9e6d-88a6-412c-a42b-50b05614bc3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923bf05d-92bf-490a-aa9a-ae90a0ab4504",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37c96b8-fd1d-4304-9790-5ef7ab147069",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c1b61bc-0e4e-4d9d-ac15-93a0c68e9ae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a5bf10-73c9-4e08-98b8-c665625ef23d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1447d1-2c71-4d4c-9c42-74f5c7a07079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598296e6-73f5-4399-b8ff-154930fce6a0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c854b6c-1e0a-4d53-a1b0-4928156caa87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "817e105a-922f-4c81-a330-48c6fbe95888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b09dd7-02dd-40a3-9ead-062b2f75249d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a080f357-d94f-4c6c-8141-83e6780a2b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9102eb6c-ee96-413d-b5b9-8b1a932623ed",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db258ef2-8e58-4be0-8829-84e470e0ca8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45c66d80-1dc5-4c02-a76e-d0a2c3b25b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d788d389-cd4b-46e0-8f05-1d829805c547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "592a087a-68fb-4229-b426-87a4c727b343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e83dcf5-8b8c-45ad-b07f-db99d5ba3261",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312624c9-6ffd-4dcf-b8ed-59be49bfc6d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a63ee3c-8b54-454d-ac11-19f5bb5fab58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13023d7-a65f-4fc0-a020-76ec181bb29c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0964f5-397e-4d35-a828-f3d641be62ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cbca04-e2c6-4b5c-b8a8-c363e26175af",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9afaca96-d136-4680-9ee3-7108789d1179",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acf22703-ad93-4c3a-abca-7e65b3e52c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e526f629-3c5b-42e3-b0a7-656b19d5b2be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17cc9b60-1e3d-4c2c-8bab-c2ba0f331315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fa3799-cb56-4628-907f-88abfb1d9505",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e6b770-4cd7-4c1b-8d91-a9fc60f3149c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc232843-274a-434d-991e-562971c5613c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ab1e88-53ba-4765-a631-d59943c0fd30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460768b5-e3b7-4185-9880-87fefc840d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da95955-a473-4cd2-8c5a-3b02cd11dc3c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be349649-7806-43ab-8c6e-0c3bd88bfada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4264f6ae-913b-44cb-917b-9bda22d5efc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a786a59f-67f2-439b-be49-2f6f73dcbdf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a638d97-d8ba-4502-a944-a24f74871cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b04442-c6fb-48a0-bbaf-a63af36e934f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934111d4-6331-4f6f-bf9a-bdf8ad3ca03c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b62df7cf-b6ee-4f29-9d74-cde6808e956d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9619af-6ba3-45ec-a5ac-9d2dbb23e720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb24cb7-2d42-4b41-81ba-6688bcdd321e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115f0c11-d3c3-4fee-9ce7-c601e9cc66c8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9229cc23-c8ec-45d2-abaf-11700f32d285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60a390e-a169-4d6f-a737-8d07d44deddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6d04c3-15a5-4108-9c01-d8d83a9359d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1c5a34-aee0-4a25-8928-eee5b26a5327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f40bf0e-adb2-48da-bf40-261dbe05ce80",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4deefab0-aa49-4efb-8c5b-40d38d4da5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a72d14a-b318-4ad2-a83c-286a56357683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3db5e3-864f-471a-8fbf-fa129be7ce04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f8be86-cd2a-4008-a773-2d3c636cef88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cc2c6e-8abc-43f3-853b-8a9bb45707d4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f3bbaa-7fd2-49f0-9407-6c828a3bce2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b1a863c-2a07-4362-863f-37f77066ac60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c540d6-46db-427d-881c-f95831a2910f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc386826-d4c8-4ab2-90ee-b1e608f1dfc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b603020-149f-4472-a1eb-7fcd94a1b911",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be7930d-4fe3-4664-8f4e-f50d3fb3b0b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4aeb59c-6eab-4470-997b-9c954e7f113a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da02ab2-e031-4b66-900f-f28848956a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7e3c81-4078-43c4-8e90-20aa5a4d2e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f48190-7fec-4a2b-8b49-a8fa26c35125",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ce1a6c-e955-4039-a2e9-db6601543819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c17a216-2edb-485e-9285-1b4738a3cd77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3fd6dad-ed92-4cce-9f79-d0f2aec1ba6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a407ad-de94-4e19-ad95-8acde513c6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c608d1c-0221-439b-8342-ed82394af85f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb05cb5f-961e-4d73-a1af-e7a17e1e266e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35afc42-fdf6-4ab2-a34c-4eb17e02a502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84910f5-4671-4ffd-98ff-9bae7fd27335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbc1b91-f1d9-4a51-ae67-7d7ad48a7776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085fcd57-dfc7-4a38-86aa-8fbe0682dc86",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f4b0b8-4c9b-4bee-9adc-8447c6ead251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1585a70a-13a5-4eb3-8781-3264b8bbf856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2df69ac-4fb9-4c34-8840-94c91a1e3e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55def01b-54f3-4fe2-81b2-9989d6460680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d5a09b-0463-43e6-9dc3-fcc6227de744",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27162446-300c-42ef-98a5-a7a23e68e4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bbcf5a3-2abb-44b2-a564-e05a0e879a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d9def7-7fe5-4901-911c-4fc351075533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9fb17f2-30ca-4d05-aac0-e823e7d93de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cca894-12b9-466f-b2d0-3907415d6243",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb91c843-92df-463a-9b10-2480992e1dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91dcdfb5-617a-4f7d-b08c-2d8a4f89e73e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e78bedd-9d46-4c81-8aa2-d89b2d400f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "518a880f-8229-4645-b931-b080a655cde5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d1a8ac-440d-4f9c-98ab-38f7bb63276f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bcdcc0-ed79-4cb3-8fea-5ae26b99c194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0befdda2-5111-432c-88ec-77acb5be942c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b316bd-a002-4575-86f7-b9fbd1c986f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7aba7b-f6fc-41ab-96db-7b0b6df23914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8b0017-5668-4e40-b031-97a443e6b14f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5219b748-10f5-4edf-8760-8256c719267b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e3fe8c1-fbd4-42b0-856d-fb38b628870c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cec1d7f-34d6-45db-8946-b57570043558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d47cfe-2b8e-4e80-b8b1-539c0606ff1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2e4fce-b102-4bb7-9479-0fa1d97b291e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748c294e-1c96-496d-b377-afc5d0ae2632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5540dcb6-5d1e-4554-b9f9-5763aa827ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3c9a93-13d0-4d76-a614-71dc03e4ec6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a076de-7d88-4a60-9434-513e0556f9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bd3e6f-820d-4486-b26d-d6013238984b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf835eb-d9fd-47f2-ba83-0892c8e5a1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa009875-d883-4145-bda8-a0a274538d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcba2cf-de9a-447d-b95b-00f0dffa8485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd1abed-8637-4216-9d11-34d06e5a611b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695112ce-ef8e-48bc-a456-dab049554851",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53922a2a-5751-434e-a7d3-0206a89a1703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1ddc7b-8096-4338-ac6c-075473238e55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d2387f-4208-44a4-9bf4-439b7d76ad0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "660c4db1-f49d-4b62-83b3-3b457acab15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4df5fd-c489-4450-9fd5-1be35bc59835",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2b55c2-6fa5-4c0d-b042-c36fc9db2334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50375fa-0733-4a15-9a6a-ab9053f84265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c62ae55-b585-4e3d-8150-c34171bd848e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e38be17d-1477-4855-a84a-fb889f6d1617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff5bd2e-d03b-40e7-9244-3f30951c7067",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e518d3ec-314e-469b-9689-eabc8b641e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4487fd31-fee8-4874-8f8d-a820233d50eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c239fa3-e45e-40e4-aff2-28f74c457d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e520de-953a-4232-bd5a-c825c84fee37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b25647-43a1-465d-b4c8-1080a1e968a3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c2caea-b7a6-4ff5-80d5-77336d25dd7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "304c3e21-1b29-45ef-8f27-7bf483d34b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b48e3ee-c203-4260-950b-d82dbd2888f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a166c69e-6f88-4ea6-8a71-be70770e4817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adbdd9d-2b0c-4c84-944c-2ac76078600b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a961ca6b-0f54-4b64-88d5-d5d6e431af99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9704b756-dc42-463d-8ef6-64ce2f3bc9db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18db6e9d-bd17-4901-83b0-3dda4294fcfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65264269-c471-47fe-a112-9ebb3d5685d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012123a8-9b10-42d3-9063-775da423db60",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196e3393-560a-4075-a11c-d9c9e230432a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f4c00a7-059b-46b7-9b4e-65becb74813c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3012751b-dd5e-4569-a47d-517b2bbb9fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc7f8da-e184-4e26-a471-6317316890d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4157b3-af0e-4c9b-aed9-93efd4fb9b10",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c4843e-573a-42e3-85ec-83bf923011db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8782f1c-7bda-41c7-8806-2fedbb7cd7d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0015a9-530e-4d44-98e2-00eefd49ffff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965c364e-d827-4172-8207-85381f99d346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66fd628-85ea-4114-b96a-0c73a5fcc7b3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fac995-9e6e-48c6-a39d-876b6eda802e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7fb2df2-77e6-40b5-80e1-9fabf6c7e7bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "710fb53d-9e89-4e87-b696-a2c66265305a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6384eaa3-dce1-433c-a5b0-dadfa994bc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccbfb91-7040-4941-b8d9-ceb32a0f6d0b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00b4517-ef2c-454c-9ce7-3e5624e1b465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6babba3-696e-4ace-a062-e1683535caac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb6b525-723a-4108-b847-7cec0c6612b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f255fc-bd15-4a0b-81b3-4a1eb86683ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffc41b2-de38-4ed1-a4d5-db7ecb426a69",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e5865f-6828-42fd-b479-08af73be8968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c66bbdc-6c11-4570-b046-010cb2fc2153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "473d01f1-eea7-4377-91b0-2c2af371be71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7fc0c54-01bf-4b77-8238-fa7b0045226e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279e2c74-02bf-4b45-9fca-73b70174c5f9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676204ff-c9e2-4e2c-8c72-24efe7d47797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2bf1200-b9e8-43dd-897e-15dc3d18ddb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f43c8a-dc1e-41fb-82a1-18d0ccd181c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd03193-09e3-46da-bddd-bcb856edfaad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55943c4d-b2cc-47c2-bb33-6d9f385c9a47",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e4eaf6-7d77-4a10-9e50-efb3df410ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771f2859-a51b-4fb8-ad7f-16f426dece42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d53b1a-5d99-4f66-8931-5038fa8c42ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7947804-3fca-4486-a3ec-18903529ee32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ee9e8e-356b-4603-8c3a-0d00f25a71df",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155eb286-6662-4d76-ae02-4a7a5d3b9b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fa9b7d-5c7b-45ff-9022-e95011ff6d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a137419c-ed4d-44af-a116-4aef2dd7e971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50adeca-5dac-4d8b-b1fb-75f9b91fb111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19d5280-f609-4055-ad1e-80d94581371a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0eb179b-b0f4-479b-b111-289a7e88c86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3dd69a5-8089-4b93-92fd-f1e01221e071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee4ef1c-947c-461a-86d8-929fb079fc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49d1571-3ba9-469a-91eb-07807bb6b955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9700f76d-008e-4e72-97bf-878d81837579",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8557c596-335c-424e-9c79-832aaf7f97b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6fc22e-eeb8-4180-a2ce-6a9a267a017f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c39ed67-cb83-4ab6-9ca7-937f16a43999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efb23ae-eb04-4a99-97d3-b9e6c4e4337b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20da8e93-3eb9-4920-b3e2-2d0de42c134b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947b5213-94aa-4ac6-a93b-d9f52732f75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d09196c-ab38-430d-94ac-970ed1bfeae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c24bb51-e7f9-48b6-a752-cc6deefd0c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a352f542-121b-4e35-8379-61879e56947b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2adfde-a343-49fb-aa4b-472c2abc0ca3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba482cbc-2834-4ec5-8725-3a790706f9c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5862dab-5194-4931-b1bb-237b1f5a2f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31c3af7-2d44-4f3b-a316-b7fa1fe1e4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6cc7ce6-0b37-4ef9-a04d-a09dc8265c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a48c6e-87fe-451f-848d-bf5fd1559142",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d2e652-f60b-42f7-be25-72c28956caf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b13d0108-db6f-4a2e-bccd-c76ab50cbc58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de58bb4-1d0d-48db-95ee-c878a03f1f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f9fe5c2-8a56-4650-8e41-fd025b586f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229fb2bb-d129-4fe2-9e45-2cab906e1fd8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9010538-60ab-4ed0-a74c-158e93ac2b5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "759540b9-cbad-4ecd-8b0e-3ca8db94d954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec9042e-9767-4f3e-b87b-fea516f59682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171009ed-6e19-4858-8ffa-e659f85f7d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce429a2f-a100-40e5-ae1d-8ac245d9b4ec",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c367b87a-0abe-429c-b039-afbdb4bec3ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "450aa776-32ad-4df9-862c-12fd9d373d9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4dc144-9cd9-4c9e-b8bc-057cb5eb1850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5a8aea-a6d0-4076-b7a5-63c630c701a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85eb281-db72-4453-8ab5-1150dd36ed19",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04443de3-0431-4756-8ad5-594b34c8b538",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18c8be3a-d4a5-4b5c-820b-558324c2b2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd917ac1-949e-489a-8d93-a8797f53d8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de8d9f63-a716-4fc3-930a-6c7ba5ed0f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8481c0a6-d0a7-4f24-943e-56d823ebacca",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f342216f-e7cf-4559-a608-074e3638b8b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c12b6773-2a7f-484e-9174-a18b0082fa46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34c65d6-38dc-41a9-a639-b363e81d0b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf47ecd-3c56-41b6-b852-447a5134162c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc43a8d-d75a-420f-92cc-a124c27fac4a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6252bd8-898b-464f-9dd7-8de46e32333d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67e4ca0e-2548-42ae-9dce-88bb56a77f62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea51752-4f7f-421d-9fb2-0c9f2ff035ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd38add0-7692-4bbe-a07e-08719fbb1dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fa1bc8-a93d-4c3c-89f1-3929a199160f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9a9f18-ee1a-4cca-b8a2-853b7935365c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7afe545e-bee1-4cc1-a593-fb7ccec0fba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdae17cb-0bd9-4873-9787-68f9e90420b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a0f278-e12e-43fc-ac05-b5ef731a4d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babbae77-d873-4840-ba13-fb5cbe5c7ee0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b19ac9-1974-4c14-96e1-566e47826518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1211bf85-9206-4394-a9ea-d8ad6a9998ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5413d0b8-56dd-4388-8c02-cb9364b51756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "458ec23a-8d0a-4c0f-babb-37d1442374ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad19a81-862f-4017-99b2-105d5ff55e5e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7dd9c1-3336-4894-af88-7b0ee7a27acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c6b76ec-1279-4175-9ba2-ab1f3687ac14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79118621-cff5-4aeb-8ddd-dc7ee9dde6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0854b0-6958-43ba-bf00-75d38100ea26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e077cf7-c453-4b4e-85b6-6862c4e7f973",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fa776d-1c30-477b-b5f1-3114f18f915c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ee9234-d37b-46c0-a480-ce98f2488f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f7cb78-2ba3-4e0f-ae68-d09e6645aee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edadb4a4-9326-4c9f-ab11-0b36274624a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aabcd58-5a8e-40c8-ac9f-22596390fb6e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2339cb7-78c4-47cb-a2b4-a39a67da1586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6f2d6e1-73d1-45c3-80f9-26f505c19fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe33cb5-ff81-4a64-9221-c7e629447f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda41520-211d-49a6-bb07-9ab41a3ecbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7be91e-1b19-4369-b536-f1eb86552f55",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae7a100-6685-489f-b7f6-4dfef3063da8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d99601d6-8045-4fa4-a24c-57b46c370a89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb1e833-2915-4648-8951-fe1e2837ce3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a0403b-027b-4779-a779-b752a1505972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d26449-bd36-4275-b735-be2876181c82",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79982517-e33b-4476-9842-f5936437b885",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2819f18f-c1e6-43e3-816b-06aaeb59ecee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7c801c-2cd2-4196-bd9d-8673205db3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7dafc6b-2ce0-4146-8a46-a8e766feb6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d0339c-dff7-45b0-b300-c05b031a1e02",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be758835-1fed-484d-87d9-8cd3c983b2b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6868bf38-2381-4f9a-ac50-b939f9c4b454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "609f0ecb-1967-4761-91ee-2aa9850529a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd56125e-bb6b-453d-966c-3e4bec28ca12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d382896-d655-4ff7-b251-da7d95c3b056",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c2faa0-58e7-4f78-93a3-1e302e5d5460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "754c0906-7726-4908-8a0c-d72197b7e9c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b476a8-062c-4343-a105-2c8796098a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74bd4223-1938-442e-887b-39f499f2e091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fde7f2-1aad-4fa7-a3d1-a7273db26942",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8136d111-7c14-4987-8b37-2f8216c176de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a69af847-6386-4803-80ac-abcf8467e717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "111b925c-b849-4444-80ff-b8edfa213627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196901bc-83ac-479d-8f77-d8051a110e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9870e72c-b4ba-4e08-b15c-c178efed2f1a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb317a5-0740-4aa9-8127-63f50be1dd6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e9a18a4-7328-421e-a968-1afd7cf9c024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcc57b7-9571-4c84-8e83-fb8d2979568e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b8ddb8-425f-4016-b548-7dfd52437b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aed1178-87ad-4a4d-aec3-a9b74ede9c82",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3c7559-7ada-4a4b-af02-18a5c1ac7e42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6c6dbda-9303-43b9-9d07-7f7aaa3a90f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31dec51-4e4d-46e3-a8bb-eb95c313f781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed23cb7-b1f8-44e0-a02e-1f3af0203afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ec8703-05d3-4488-b9c7-31d989c4cabb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08379ccc-e2a2-4081-9a6d-db0324d7027c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb861b39-920d-43ac-88bf-b2236e34c5c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4809aaf-33fa-45fc-8673-9d2d9268c428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c75df99-60c9-4002-8963-cb3d214e84ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be91fef9-e405-486f-a82b-19b5feb85652",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d50e3cf-d3db-4e82-ab75-7451d4d21e5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46a2c38a-36a7-4f57-92c6-d61e6936baeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4548948-f770-44bd-85cc-c0a1b221ef92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a6bc709-9a8c-448d-a624-f146e42a3ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a274ac-ee91-4102-adb1-3f2764119366",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a16db69-bd6e-4f3d-96ea-7baf2e65f233",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5380af1-7acd-4f3f-9fc7-0b38d589237a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f74f2d-82c1-4cd6-9f4f-8a17bba03689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e87767e0-e5bb-4ab3-a5ec-1c2e9b73af4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d99288-6aa1-49b7-a6ba-2c0aaa98126b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de990f50-1214-4e88-829d-41b789e641d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7dd9d8b-7314-46c7-8c27-72222fc42301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7140f8-8827-4c40-aa68-56895ffd20d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4633f9e3-cbdf-4585-9b36-bf8d363666cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4a262d-2c1e-4a04-9ee2-a9d64239c9ee",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c4e01c-3d22-4fb7-ac91-18a05d566ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc5d2f86-47f9-4ca4-97a3-b59a666bf2ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e795d738-5f81-4c5c-bf75-f746f5aed56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5c5ced-8923-4e2a-9d63-77b3df61bdec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b0334a-d65f-4f0b-8f30-89c15c05cfb9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda2a070-a128-4498-b5e0-b82c98100cec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99431d34-2aff-4b76-82a9-c5ed045ca7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a1cd66-0de5-45ba-8a79-823945992263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e040448-8641-41a6-9fce-70f285e1113f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6808c65-d155-450c-be36-38b71f6b897d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2ea3c3-581b-4bd6-ad73-c3612d1240bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5bbbb4c-7f68-4652-8aff-d605397240fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b34862c-06fc-4662-b682-c5536cb20872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4362a739-f829-42d3-a8eb-ea2a3ae94348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51f88b5-5a69-46f8-93ea-d6482ddcedc6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b2d862-395e-46c9-9f7c-2196076b26fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5edf33b2-9ca4-499b-8775-bd871f03edb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2496b3fe-2f1d-47a5-acd6-1f0f7a9540a8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716ffb67-cf86-43b7-abcc-d1c3faf6b6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc342dc-193a-4fb2-83bb-15dea62eda3b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb43b72b-3829-4d94-8851-d9a6d70e2115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7537458-0e24-4be3-bb74-722ce690b16f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "292464b3-2760-40c8-ac82-eab716d1b228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f330610c-6fc6-495e-8697-b685459cbe7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6cc0ee-910c-49ca-8ac1-884c9474f427",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d40c421-b5e0-4852-a566-e8c879773393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4edc5ee5-e886-433c-866f-fb290c56e015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a5fffc-767e-4abc-a9b7-7e3c2b613bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0148090-24e2-4db1-9d1c-eb62e5cb0a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf4e391-2c90-4a3c-bfff-2d4e4091c849",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e6e369-e649-488a-88da-5ca429ba1cf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55110bbb-bde9-4ca0-8e5e-5df88d3de45b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d51fda9-d4e5-4d70-82e7-b0767be80262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d21fd2-7e46-4623-892d-c8e2789e41d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddbb126-7834-452a-a905-b42f8954d6fa",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ede418-13fe-4182-bb4e-7d87268722ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6db9b592-a65c-4198-a6f0-bf085c2a1cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ec65ed-5fca-47ec-a93b-08bc664625e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50932c80-d0ed-49f8-87ed-453012f915f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351cbbb7-e6f6-401d-abbc-64ae64a3e7c2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de82bc97-f30a-4063-b451-d3f142260073",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9560c2b-c8bc-4ee1-9703-6612e2dfa18f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aeb4900-ed00-4bdd-afec-e2b966d6ef78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9762a4b-d38e-4c88-86e2-8eb81d459720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b73614-2746-4244-9f5f-5bc4541d8cb0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc94660-2973-4fc6-ae5c-ec84535693f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ba3188b-ba9e-46d8-81fc-5d46199c4c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06cd85d-0788-4f71-8a5b-4a7e5444eea5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30d573b-9114-4999-9750-f9be0437617f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79439dbf-1c8c-45e7-ab24-88a89e34dbd4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858424d6-4b8d-40d8-8d2a-4749b6d23305",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2308d39-14d8-4dfd-9f08-44f74faa4f53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf3e348-ab11-4c16-89c3-c0f819d1b864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e6d6345-25cc-406c-9799-f256ddc36c4a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdb55931-0914-4ae1-8999-cbbc98d176d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87f0cd8c-df2a-4e78-8a1b-449921dede85"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5d3808e-84b4-4c8e-a66d-b0fa65bb7958",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80cd606f-47d6-42de-ac2e-123ee2081dcd"
                    }
                  }
                ]
              },
              {
                "id": "99c6f64b-65d7-4e6a-8765-929b9508cb99",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d4746ec-1b22-4cbe-9f63-6afead189143",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f55e622-2608-4e4c-b013-e3a5b90c9cdf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8b5d15c0-5596-4da4-9efe-43ce5cd6dd9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2079ffc4-4419-4798-a9f4-7ea98bd998b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b244e64-e41d-4a91-a88c-4f15d27dff94"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48cf8570-b422-4e8d-85cf-0ca85256866c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7032169-7706-4234-8d03-9474588cbd4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6aad222-b66d-41b9-9711-067041212188",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d134e0de-df59-4035-bc6e-8c76612a0ba1"
                    }
                  }
                ]
              },
              {
                "id": "d49a963b-52de-47c8-b28a-6d256eb77f4f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "df743114-bf63-4945-abd7-522d386a455a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41422de-9ea5-4d8b-9697-c8ad6d202708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "38fc400b-6db0-4035-859a-d4461a11d595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cd058f-bec0-4177-beb8-cf4d333928f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0d9103-f4bc-48cb-8710-99072915f27f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1b8c1835-e44b-4f7f-8232-8920b6fd1a7c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7410db0c-ef18-4500-aa15-f96ac53f2292",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d7589c6-da5e-4ac6-a9d1-b9d57c022ac9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d18322de-2eb5-4929-b26d-f967edf04792"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "797b4b58-9bc6-460b-888a-483e78650120",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75c7d2dd-c0b9-4ff4-ae61-b0d961a2b3f3"
                    }
                  }
                ]
              },
              {
                "id": "da52bdd2-93fc-4bfc-8627-4fba98fa483a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78df7eba-fc03-4966-8ee3-f8cc5ff5b7a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6a3e3b92-7a22-4594-8950-fbd73ee41c6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1119f811-5380-4402-8b22-05bd651ed193",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79eab372-7d0d-4667-9cef-01d56e8b397e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1b2585c-14d5-49ea-9f16-dd3ff69d7b44",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "80e50ea2-657e-4a90-9969-738994babaeb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "81acc6d4-fff7-4501-841a-61727e810380",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b2fbf7d-4469-44a3-bae1-62e72c7acdd0"
            }
          }
        ]
      },
      {
        "id": "a1c70c5e-eab7-435a-8951-01d489fc10ee",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d6fd9aeb-e7a7-4d8c-b979-48fa472afa6a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae0faad6-c9c3-4911-b4b1-80d2d5dfcf38",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1b27bb6-f48c-4a69-baae-dfead1bd7eae",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e94d32-d40e-4c44-95fd-2c5b1088c855",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b750f44b-3b8e-4444-95bd-a23655980ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e02894-b169-45de-9524-3b4ee5151794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39d92fb7-34a8-415e-ae53-7d4d99f3a87a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5a8d17e-2601-4f39-ad06-9d36f3747830",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03842b08-6221-423a-a36c-6be33313442b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e61f1b44-e124-4daf-8133-30cbcfbd0ed2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efc6646d-f120-4b1c-b005-333ac55a4f8a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e08507c7-cd5b-41a6-b32f-574fb15604ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ac522bdf-2b40-4eca-8d61-3657aec72ab4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2680e047-dc93-4e3f-a623-ada83724ef52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5293b2b9-91b4-43f8-a91f-591ebbfed351"
            }
          }
        ]
      },
      {
        "id": "3ccd7073-1174-4a8d-99da-2b9d8c622082",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cd75a5fb-1e5a-4ba6-b7a8-075ce139f711",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85ddb26b-ff18-468a-ba6e-596027f005db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90af1abd-8da7-41d2-b3d3-c44084d36ed1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c96aff-da02-4ae6-a851-ceac956d9493",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c760226-b90c-426f-887d-b3fa7f1be523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f3a1e0-ee31-4635-b68f-25a681cadd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18276a71-61c9-4971-9bc6-6db4266f3208"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17b6f55c-f1ee-4df0-b57c-1b26089eefde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4f68052-7d0c-4582-bb45-feacb4551294"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ad7a4e6-09a0-4b43-98a5-15484c111760",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "451eb5c8-6dc7-47f6-bdb8-26b3cdc6e494"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "878c1b15-0bfc-4911-ac10-38b9891d2459",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9f5493ea-9e96-4cd2-89a2-44784374bdf4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67c7247f-42d3-4f18-8af8-01513e55f9fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed7baf1c-4100-461b-bc15-3a37fe8e8296"
            }
          }
        ]
      },
      {
        "id": "9f05992d-9516-4d29-af80-fb62ec718015",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f15c459b-33b6-407f-b31c-c2ecfe369ac7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e64f5a3a-5a4e-4503-af4f-1e54268c3f48",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5496266d-aa57-455e-b5e5-e246c6a57188",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9cfa192-034b-489b-90b1-9987b432586d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec9dbfc5-a7a3-46d4-9ee7-2e251ebd276f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c74f74-1866-4963-9b58-16259422a52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d75a94c3-c2c6-4944-9d62-caec7a67e817"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "914f80a8-bb63-45b1-810a-d0516ee3cd84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aba0ace9-1de6-4485-a784-75310498fd16"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3cf25c6-4ecb-434e-9fa5-147db36b4c8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "610be960-4385-482a-b772-c89046e64718"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c29b9800-d52a-4bbd-8b92-75e626ffdf79",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "21618089-b13e-4053-b3da-3fba0bd3dc15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d99945ac-036e-4bcb-8f1b-4c820bc39f6e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86f0ec37-18c7-442b-8923-cb548478c05c"
            }
          }
        ]
      },
      {
        "id": "9a63ac0e-ebee-4be9-9662-0ba816765cb9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02defcd8-ff49-42e6-bc18-e9fd969f7bc5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4fa30b7-7bcc-496e-b779-057c11b24e60",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "49c5f51c-36e9-473c-a00c-3c2b75d82fa4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70afba2d-bd86-42c3-90b8-27ad2f314ec3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "290e21b1-1998-4643-92ea-c91b5cc52900",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 174.33098591549296,
      "responseMin": 7,
      "responseMax": 2020,
      "responseSd": 277.0933061397883,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691282148779,
      "completed": 1691282211727
    },
    "executions": [
      {
        "id": "54d5cd2a-0bc8-4492-a4b4-e9eca6af6d4a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "40eb857b-8f6c-4a86-863f-bf9556bc033a",
          "httpRequestId": "52d9e029-1c34-4440-9e21-a1c8ecedc0b5"
        },
        "item": {
          "id": "54d5cd2a-0bc8-4492-a4b4-e9eca6af6d4a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1aa95fbc-3811-4869-ae0b-ed46e6ab6fc3",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "99773af7-975c-4833-8e1c-08169ee9a45b",
        "cursor": {
          "ref": "062d0dd4-06ba-470e-9d6c-1eed135dd513",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a33a31b1-36aa-4ec9-92b4-363a1f36aabf"
        },
        "item": {
          "id": "99773af7-975c-4833-8e1c-08169ee9a45b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0d0b5ea0-89a9-4393-a44f-ad8639183739",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "bae67b5c-6d91-404a-881b-d1dea0c960c3",
        "cursor": {
          "ref": "f3ac55c3-0c21-4f35-8dbe-73a200de815f",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1cc0e902-6b50-4b09-8b17-0006479fe509"
        },
        "item": {
          "id": "bae67b5c-6d91-404a-881b-d1dea0c960c3",
          "name": "did_json"
        },
        "response": {
          "id": "53310952-3a1a-4edd-97ad-b91b202dc96e",
          "status": "OK",
          "code": 200,
          "responseTime": 254,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50501790-b5b0-44f9-bfd7-01c35ab83d65",
        "cursor": {
          "ref": "04da012b-7858-4b67-abe3-01f4f0b4b84a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "680fe502-b7d9-4101-bbe3-73f741e53abf"
        },
        "item": {
          "id": "50501790-b5b0-44f9-bfd7-01c35ab83d65",
          "name": "did:invalid"
        },
        "response": {
          "id": "49ef7787-d257-479b-9878-60c251ebd9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50501790-b5b0-44f9-bfd7-01c35ab83d65",
        "cursor": {
          "ref": "04da012b-7858-4b67-abe3-01f4f0b4b84a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "680fe502-b7d9-4101-bbe3-73f741e53abf"
        },
        "item": {
          "id": "50501790-b5b0-44f9-bfd7-01c35ab83d65",
          "name": "did:invalid"
        },
        "response": {
          "id": "49ef7787-d257-479b-9878-60c251ebd9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3bf214-1665-4712-9b34-fa5e9a28cb7b",
        "cursor": {
          "ref": "251f7d30-e5b9-4126-84f7-f3e89617f411",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3d724b97-6feb-49d9-82d4-0c655325e995"
        },
        "item": {
          "id": "5a3bf214-1665-4712-9b34-fa5e9a28cb7b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5ed15fb8-3561-4091-9bf0-45720f409560",
          "status": "Not Found",
          "code": 404,
          "responseTime": 150,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f568b9f-b164-46c1-af1b-c9df6a6d1dd6",
        "cursor": {
          "ref": "9b9379c2-b6dd-4370-abec-6b11affe5a4c",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "02ce088e-e053-44a1-8750-c7216e608684"
        },
        "item": {
          "id": "0f568b9f-b164-46c1-af1b-c9df6a6d1dd6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "acbc2343-e504-4f07-ad9b-4e3b87d2c7e8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4034f035-d11e-4d91-a17b-6643b3c41ce9",
        "cursor": {
          "ref": "a64207b8-7542-4cb2-84e3-5dd4dea4f065",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c51406c0-c968-417d-80d4-55c6efd1181d"
        },
        "item": {
          "id": "4034f035-d11e-4d91-a17b-6643b3c41ce9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "65ddc498-4436-466f-8caa-9733ebc9b02a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8a4d3c-526d-47c9-89f6-876fd6661c87",
        "cursor": {
          "ref": "53d3f69f-ddcf-4336-8b4c-9889f89db920",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "95fc715f-cc08-4f49-8e88-6f6c52ac3634"
        },
        "item": {
          "id": "0e8a4d3c-526d-47c9-89f6-876fd6661c87",
          "name": "identifiers"
        },
        "response": {
          "id": "ccb991a3-a0d4-4241-85c4-556ee8ad40c3",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85c7766-d91b-4c2e-b8cc-ff43eed941ef",
        "cursor": {
          "ref": "39635b1e-0e30-4e73-92ee-dc812f553814",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d4970a7c-f859-4ea5-9596-18c94b1f519e"
        },
        "item": {
          "id": "a85c7766-d91b-4c2e-b8cc-ff43eed941ef",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "87d928e3-220f-4c72-9945-786f25ebf3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acae6d2-675a-4f23-bf15-30f6f9f9d16b",
        "cursor": {
          "ref": "8210079f-fed9-44a6-bfd4-8dc7e8de0e8c",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1457d512-c452-494f-80f1-fc1aa3f6252d"
        },
        "item": {
          "id": "0acae6d2-675a-4f23-bf15-30f6f9f9d16b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "58996bcd-c39b-43ab-a61e-cb413f5da9eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb895d8-2d01-43d8-b2f7-47fb875024fa",
        "cursor": {
          "ref": "d081dd83-d7a7-4739-a3d6-ee46acf647a5",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3b97322c-cfcf-456e-8b3a-d8ead4a0c653"
        },
        "item": {
          "id": "bbb895d8-2d01-43d8-b2f7-47fb875024fa",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f9c1de88-ac48-48cd-8aeb-766ef8ddbdaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc67f17e-5292-4f6c-b7b2-6ab78e8f7ea4",
        "cursor": {
          "ref": "877f245b-ffed-4d42-a8b1-2a361714b202",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4f2d672d-e107-4e17-b70e-a8f1d9b69947"
        },
        "item": {
          "id": "bc67f17e-5292-4f6c-b7b2-6ab78e8f7ea4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "27b4edbe-28ee-4642-b114-7a8b468a881a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab2ae22-41c3-4dd9-8b8c-ae66978484bc",
        "cursor": {
          "ref": "90e83ef8-b9cb-41e1-a52c-76df120c4703",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "87896399-4670-4ad6-aff7-b823584c1848"
        },
        "item": {
          "id": "2ab2ae22-41c3-4dd9-8b8c-ae66978484bc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f9d37a06-199a-4438-8e59-48b447bcf628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bcaa045-a45d-41a4-813e-105e5862da57",
        "cursor": {
          "ref": "fd98ee3d-9fb3-4954-acdc-ada7b040e95f",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "19b952c0-5d21-4a64-9021-c6067e9032a1"
        },
        "item": {
          "id": "7bcaa045-a45d-41a4-813e-105e5862da57",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "08fd8027-87a7-4051-aba8-458edd775ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7101f2-a683-4252-b162-837b43149ff1",
        "cursor": {
          "ref": "9565e1b0-1adf-4644-a800-f00a209dbb66",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d3cb3198-428d-4c75-af35-731fd7a8ca6e"
        },
        "item": {
          "id": "2c7101f2-a683-4252-b162-837b43149ff1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b0e0e108-fc3c-40ce-8703-69581de0ceaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e306c86-775c-4234-a534-9d237c524d0a",
        "cursor": {
          "ref": "e63e1de4-418d-453f-b300-e11dbeb3ddd7",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "17c19577-a895-472c-8158-8b51b7209698"
        },
        "item": {
          "id": "9e306c86-775c-4234-a534-9d237c524d0a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7561b428-67a4-4e15-981f-9848782e6428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01dd6bed-3999-42fe-a3a3-03b151f3bf34",
        "cursor": {
          "ref": "adae5568-7274-4d71-9ee4-c79c9f318bfd",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f1523fb3-6e6d-4835-b1a1-6ab67dea6ede"
        },
        "item": {
          "id": "01dd6bed-3999-42fe-a3a3-03b151f3bf34",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b4eea437-0d91-4482-8b9e-5d3c84c96986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2264a98-955d-44d7-9296-9e25bc3c2b41",
        "cursor": {
          "ref": "1f5bc9ef-008f-4f5e-9b46-c96473ba7a78",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fd3a1c03-f02b-4157-a37c-b61506789dbc"
        },
        "item": {
          "id": "c2264a98-955d-44d7-9296-9e25bc3c2b41",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e8d06054-e60c-47d6-9743-171d9ebe0b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362ac44a-3ce1-4c1a-a57b-6c67955480e5",
        "cursor": {
          "ref": "f6c3cba4-af9d-42c9-9a80-a933c88d093b",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "dd7d46d6-4869-4e76-b711-6d36b6e28eef"
        },
        "item": {
          "id": "362ac44a-3ce1-4c1a-a57b-6c67955480e5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7b9fce89-c053-480b-8d51-267a73dbbfdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f7d103-7a10-42e7-9ca1-5856ee28d6ab",
        "cursor": {
          "ref": "d78f9668-2ddb-4b13-8224-cf89f2f4074d",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "59b8686f-70e8-4798-870a-84fa41e2ea6b"
        },
        "item": {
          "id": "c0f7d103-7a10-42e7-9ca1-5856ee28d6ab",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c05a80ce-e3f7-47a5-9811-a9e67276c8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb966c3e-09dd-40b5-bbe1-3c44c13f2422",
        "cursor": {
          "ref": "54f8e0b9-5891-4660-8a99-b5c2196230ab",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b12e23b5-51ea-47cc-a63d-fc87a39f5a6a"
        },
        "item": {
          "id": "fb966c3e-09dd-40b5-bbe1-3c44c13f2422",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bf1f0799-4e23-4646-9f81-ae8198dc2180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d2d7d3-5508-4c64-a9ed-12053516a98a",
        "cursor": {
          "ref": "514e981d-c079-4477-95de-f709c597eea2",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d394b997-f229-4b9f-b4b8-243a8d603702"
        },
        "item": {
          "id": "b0d2d7d3-5508-4c64-a9ed-12053516a98a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a250dac3-9f17-4653-a3d3-eb98a6e7781c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44dc43ea-43b9-43f9-af18-2eae31b45b57",
        "cursor": {
          "ref": "86c00a19-8987-444f-8409-7cfcd0545ea3",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dff081e4-0d60-45ee-89ee-097d45a42437"
        },
        "item": {
          "id": "44dc43ea-43b9-43f9-af18-2eae31b45b57",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "01659edf-c9dd-4872-8903-40fb3e6921b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b76164-9246-49f9-a94c-d6896da6b9a0",
        "cursor": {
          "ref": "0bdf743a-bbf1-4130-81e9-53d776a0b2c1",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7f323277-78ca-467a-b89a-60b8b102cd17"
        },
        "item": {
          "id": "52b76164-9246-49f9-a94c-d6896da6b9a0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "587cf330-33c6-4aaa-a657-4ba5b3e16514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc21f7a-76d4-4a38-b10f-2b191f7aa03e",
        "cursor": {
          "ref": "e7374063-dba5-41f2-ac61-c4ac99ee4096",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3f457b6f-9ede-412a-9500-af33fee00dae"
        },
        "item": {
          "id": "2dc21f7a-76d4-4a38-b10f-2b191f7aa03e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a79a507e-921a-4028-ad79-99b65fa3e641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bbd0e8-fd98-4623-a548-04fef590f507",
        "cursor": {
          "ref": "a118a93e-0c0c-4437-950f-3133daefb8e9",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c4c0e04c-7913-4a2b-a3a8-cc4b9d91f757"
        },
        "item": {
          "id": "87bbd0e8-fd98-4623-a548-04fef590f507",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8a0070c3-cfcc-453d-89f8-af2c91862aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6c51f9-0f76-4080-9c91-6c310cca3221",
        "cursor": {
          "ref": "65625655-e6b3-4a81-9d95-a8a2602eb3ff",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6398b3dc-beca-49e5-a380-b65bd59d7eb4"
        },
        "item": {
          "id": "ab6c51f9-0f76-4080-9c91-6c310cca3221",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "557aa081-dafe-47d4-a80b-a6ebced2dc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0341219-0590-439f-9708-34433eba5129",
        "cursor": {
          "ref": "d746b2d2-1997-46a0-b0cd-f85319e3a4df",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7ac27f39-6956-46d7-8f4d-2c19c5a70273"
        },
        "item": {
          "id": "d0341219-0590-439f-9708-34433eba5129",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dd2624c9-905f-40d4-9f03-5a6e9df9ca55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f783bfd3-e554-47d0-a5a2-dabfb392c75d",
        "cursor": {
          "ref": "33b8b72e-a444-4184-b2b9-2f36671295eb",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3aee33d6-f81b-4f87-bef2-7dad5ac5ee4d"
        },
        "item": {
          "id": "f783bfd3-e554-47d0-a5a2-dabfb392c75d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8949b1c8-5575-4338-b5cb-95d4408096be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24906c81-299b-4099-a57a-6954112535b3",
        "cursor": {
          "ref": "752211c8-202f-4ca4-9de0-10b41f325a4d",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "578e9c44-57ec-480f-ad29-c422b3c23d9b"
        },
        "item": {
          "id": "24906c81-299b-4099-a57a-6954112535b3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "234f8743-0261-43a0-959d-d4506d87d8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ff6e2c-df59-4839-a766-5ccbce3a5cc3",
        "cursor": {
          "ref": "33b34b36-069d-4797-b71c-bf49c76a8f54",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "790b0775-0e4c-47ce-827c-945c876ef28e"
        },
        "item": {
          "id": "b0ff6e2c-df59-4839-a766-5ccbce3a5cc3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3abff728-badd-49f2-ba45-b005a4bb1c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7ac97d-3882-4f1a-b665-7fa95c8b401a",
        "cursor": {
          "ref": "1f30aa99-2e6e-4576-a018-f9f0f339b3cf",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4c67b646-b6f5-43fc-bc52-89e9d118cb53"
        },
        "item": {
          "id": "5f7ac97d-3882-4f1a-b665-7fa95c8b401a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "20c274ab-28b1-44b1-a0dc-0357a47f9d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe718a9-13b5-464b-a069-a0ac7bb65e3e",
        "cursor": {
          "ref": "c021a12d-f697-4494-b26a-6099517f0de0",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d1324abb-9494-4abf-b884-ca2636922883"
        },
        "item": {
          "id": "fbe718a9-13b5-464b-a069-a0ac7bb65e3e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "45f1114f-82bb-47a1-bcb1-723e0d940a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9683c87f-fb11-4d9b-b905-0e7f9b1f8600",
        "cursor": {
          "ref": "1a3cbdce-966f-4f4d-b2c7-2f3cb37421ff",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2b107f2c-18c1-4ef5-ac26-08079b114764"
        },
        "item": {
          "id": "9683c87f-fb11-4d9b-b905-0e7f9b1f8600",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d3490407-d3a4-4631-8b61-2910d653a3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef171ec-3467-4999-b978-12c5fb3c0a24",
        "cursor": {
          "ref": "9ce57293-21b2-416f-ba98-5102be6fb625",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "834a8ad1-2a53-4f8f-b041-2e9f94106747"
        },
        "item": {
          "id": "9ef171ec-3467-4999-b978-12c5fb3c0a24",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2871d0b0-f0a8-4652-a91b-e66444e9661b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4be8d5-1f27-4fcc-a1f9-305e0207656a",
        "cursor": {
          "ref": "b9c6421c-dd40-47ef-a509-57eb88b33965",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2fe01959-cef0-4cde-bd1f-44fa22184dc6"
        },
        "item": {
          "id": "dc4be8d5-1f27-4fcc-a1f9-305e0207656a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "865ecec0-f084-47f1-a34e-5d43b369fac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d5ec3b-3fbe-4026-8a7a-9500f7ead2a5",
        "cursor": {
          "ref": "fe523135-fb69-423d-acef-a46b692abf0b",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e849312a-5112-44f7-8ac2-446817b04d03"
        },
        "item": {
          "id": "b7d5ec3b-3fbe-4026-8a7a-9500f7ead2a5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "185f5c9c-0f93-4d94-b8d5-34b56a6ff5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f480cc2-ee1a-4ab1-bd19-e54ea18db6fc",
        "cursor": {
          "ref": "e04c456f-d923-4451-b5a5-8f1a97486384",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "780a5c96-9033-43b7-b14a-0a394381f996"
        },
        "item": {
          "id": "0f480cc2-ee1a-4ab1-bd19-e54ea18db6fc",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "002fda35-bc2c-465d-bba3-36dd6d013182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d84db14-5fe3-4976-9adb-affe7beec930",
        "cursor": {
          "ref": "3213c8b9-ddb6-43f8-9208-88fba71cda9c",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6cb64956-356b-457d-a8c5-2b4b93500b08"
        },
        "item": {
          "id": "2d84db14-5fe3-4976-9adb-affe7beec930",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1cdd952f-718d-40c7-bab5-956dcbc2107d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "affd4080-16f0-422f-8411-e31eb1707192",
        "cursor": {
          "ref": "68e03263-f1e6-47a5-bbf1-adb43de42c91",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2040853b-c26e-457f-ba66-70e2463f5eb9"
        },
        "item": {
          "id": "affd4080-16f0-422f-8411-e31eb1707192",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fc75b704-9d3b-424a-8b9b-2d233fe1b8e7",
          "status": "Created",
          "code": 201,
          "responseTime": 2020,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b4036344-4adb-40fc-8bb8-c5ffc758a391",
        "cursor": {
          "ref": "7a12ba9b-4b0a-4fd2-b488-e2234ebba68b",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "28e98ee1-342e-494f-9889-e333157f3459"
        },
        "item": {
          "id": "b4036344-4adb-40fc-8bb8-c5ffc758a391",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f3caff96-d4f7-471e-a014-9df155b47ddb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b08068d8-7d05-429f-a7bc-6ec2ce50d96e",
        "cursor": {
          "ref": "4f6d484f-1eea-4459-9f43-a6231850972b",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4b917878-edaa-4af8-ac94-1f28f5a64669"
        },
        "item": {
          "id": "b08068d8-7d05-429f-a7bc-6ec2ce50d96e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "09608635-47aa-455b-ac31-6275f24a0b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4085faa0-63c4-401e-adcb-339d4b3df9a6",
        "cursor": {
          "ref": "4b0ca3d2-cdd4-4196-963e-3860bdc8a431",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a45bfd14-79e8-4ea6-830e-1148980b8f3a"
        },
        "item": {
          "id": "4085faa0-63c4-401e-adcb-339d4b3df9a6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fdcb2a19-0ca0-4d4e-8971-b0626b134983",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8570a32b-ae2b-4554-af14-0a50ac5e0e2c",
        "cursor": {
          "ref": "7a22a92a-5f0a-4067-a435-2a5b211011f6",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4e0f8d8e-81e0-4bf9-8a17-97acf56d7bca"
        },
        "item": {
          "id": "8570a32b-ae2b-4554-af14-0a50ac5e0e2c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "65773df6-3060-42de-9dc5-0f519506e1ab",
          "status": "Created",
          "code": 201,
          "responseTime": 1498,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8b89a0c9-0a40-4eae-b278-b1080550782b",
        "cursor": {
          "ref": "b4abe333-f783-4a34-9cee-96599d3bc824",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9cc72fce-f542-4db7-be47-77e23e900cb7"
        },
        "item": {
          "id": "8b89a0c9-0a40-4eae-b278-b1080550782b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "af3eca0c-f1e9-478a-9925-42faa442488b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "bc7b2c5f-d82b-44b9-b070-14c0bd6c1850",
        "cursor": {
          "ref": "ab0108e5-e2bb-48d3-8a4e-7efea543f3df",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "472a7477-8242-458b-8a0f-5164211b3329"
        },
        "item": {
          "id": "bc7b2c5f-d82b-44b9-b070-14c0bd6c1850",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6cc53886-c3f1-40b6-ad69-0d8c99528e07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 823,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4a414173-14ed-4e21-a636-01909a65c34b",
        "cursor": {
          "ref": "b3224193-e719-443a-bd56-c82b23876651",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "96b5f811-0ec3-4522-b851-ca8f5a995edb"
        },
        "item": {
          "id": "4a414173-14ed-4e21-a636-01909a65c34b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8e409170-1cb8-46e4-8d42-f99577983c2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "dacd6b54-40c5-403d-8bd0-08caa139cf7f",
        "cursor": {
          "ref": "a7ed1030-6890-48b0-a763-117e77465e59",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0e3a7ef7-feb5-44ca-a079-44873581a976"
        },
        "item": {
          "id": "dacd6b54-40c5-403d-8bd0-08caa139cf7f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4877a682-47af-468e-9a8a-c1c7fa392a8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6cff6d0e-6e15-4bc1-9769-d154e9ab518d",
        "cursor": {
          "ref": "ae13210f-725e-44f0-9946-1514b5f4f148",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bc088ebe-7efa-4ae3-beb5-1dd1f12f94c7"
        },
        "item": {
          "id": "6cff6d0e-6e15-4bc1-9769-d154e9ab518d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "38d6e750-1878-40da-8043-b51e33252a57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d20f38e4-9f9c-4bba-a276-28f888545e5b",
        "cursor": {
          "ref": "0818e655-8e51-40e8-9142-0ac7cc4e35f8",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fab445e1-6ca3-4392-be36-5989cbd5e133"
        },
        "item": {
          "id": "d20f38e4-9f9c-4bba-a276-28f888545e5b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "959c05ea-f1d6-492b-8c57-f5936111856b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 118,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2e8880a0-28d5-4139-b4df-0a15f8bd0c66",
        "cursor": {
          "ref": "60b35bb6-9e76-482c-9c20-42ce3d92e4f4",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "879ca745-b43b-4836-baed-fcee897bb49b"
        },
        "item": {
          "id": "2e8880a0-28d5-4139-b4df-0a15f8bd0c66",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2896234c-716c-4afe-b09a-d48b152691b2",
          "status": "Created",
          "code": 201,
          "responseTime": 1001,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "40e672e7-6434-4c0f-bbe5-f09037cb1362",
        "cursor": {
          "ref": "65c358ad-a86c-41a1-a349-17f48e49f835",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "de32765f-7076-4ac9-8436-d5a52dd6300a"
        },
        "item": {
          "id": "40e672e7-6434-4c0f-bbe5-f09037cb1362",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "279bea0b-911f-4a4e-a928-fff43f47e855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4759bb-ca55-4263-9b61-71b7e3c2bae5",
        "cursor": {
          "ref": "acc5a7d8-fe25-4742-9377-9087687713c3",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "438fcd20-09d1-4d7b-b3f1-9dc55d98695a"
        },
        "item": {
          "id": "3b4759bb-ca55-4263-9b61-71b7e3c2bae5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ecd3d70b-49d2-4591-a1f8-cf829443c3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ee8d43-a0f8-4004-9857-87a255d44b22",
        "cursor": {
          "ref": "776fa1f8-b9a5-4480-89a2-2381e3bfbbc1",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e658aa71-78f2-460f-a560-6b6a6f25e4ce"
        },
        "item": {
          "id": "95ee8d43-a0f8-4004-9857-87a255d44b22",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f1492bb8-2318-49b4-a1a2-e7530fb651c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb1b55e-d07b-44c8-9878-b9f76b35de3a",
        "cursor": {
          "ref": "add653d2-ccc8-4ac2-a990-744f635a2c9c",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d1e539c6-dcdf-411d-a61a-e09778e72265"
        },
        "item": {
          "id": "beb1b55e-d07b-44c8-9878-b9f76b35de3a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fd8caa49-df90-423d-9621-c85c620b62a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66d4572-e08c-46ec-9a25-65cf7fc6cc97",
        "cursor": {
          "ref": "b6405b10-fd51-4622-8320-c8b34e570970",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e8ca7c54-1697-42ea-85e9-d26e83320768"
        },
        "item": {
          "id": "d66d4572-e08c-46ec-9a25-65cf7fc6cc97",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b3a46392-9dc4-4b1a-872e-d3b20b9f2e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e09dba-0670-4f82-a6d8-cf3d889e5e5a",
        "cursor": {
          "ref": "a8e88a9d-6e10-4882-b932-8faaf73fa4d1",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b603d6e5-137e-4f79-8417-46e321cc9d78"
        },
        "item": {
          "id": "93e09dba-0670-4f82-a6d8-cf3d889e5e5a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fcdbc741-895f-4ccb-b750-5e5f93396a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5a2cf7-0e92-422d-ae45-ee2b66db7624",
        "cursor": {
          "ref": "d1e5c080-6594-45cf-8be8-1b5939fa3f0a",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2675d957-3ecd-49ae-bfe5-10a8ab8c348b"
        },
        "item": {
          "id": "6a5a2cf7-0e92-422d-ae45-ee2b66db7624",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fa8b8891-0845-43b3-b755-ac6e4b52842c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7603df28-5556-48e9-8d50-81c6e670fa25",
        "cursor": {
          "ref": "6ffea4f7-7711-4edf-b5d5-2cf0bd0eaa72",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "287cf81a-0f6f-4de1-95f6-66590dcbab8a"
        },
        "item": {
          "id": "7603df28-5556-48e9-8d50-81c6e670fa25",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8252a8b1-a69b-4d9f-b36e-cb8bc71a3bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683830f4-a1b0-417e-98ac-b4138d87f73d",
        "cursor": {
          "ref": "68819a15-e75a-4254-8585-53d89fb4923e",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a3319145-2aee-4041-8384-b240c15e4f97"
        },
        "item": {
          "id": "683830f4-a1b0-417e-98ac-b4138d87f73d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a472ec9e-9ec9-47ff-87b5-cbb5bc5f4e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c61d76c-2aaf-4528-9a22-c4bb8f81b4af",
        "cursor": {
          "ref": "8af2a716-fced-4db4-a92c-9dd5b562b382",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4ee569db-feeb-4aaa-9fb8-acbcdabf7ff2"
        },
        "item": {
          "id": "4c61d76c-2aaf-4528-9a22-c4bb8f81b4af",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4e79dc13-5cf0-4948-8468-10de6b3dbd52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44500777-40a4-4a04-8c53-438be15603dd",
        "cursor": {
          "ref": "11bc4522-6b2a-4be8-a3bc-14c01a76c11e",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "790e0773-6b33-485f-a238-b64ab6bf8afd"
        },
        "item": {
          "id": "44500777-40a4-4a04-8c53-438be15603dd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9673492b-edb5-4743-ad5b-55227d1ea2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c840a8b0-3170-44d0-982f-8b729b90ce39",
        "cursor": {
          "ref": "5d6e40cb-244a-42de-a0f0-3b56bc717b2c",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b63e014d-cd02-4a7c-a0d9-a1ab07ad77ee"
        },
        "item": {
          "id": "c840a8b0-3170-44d0-982f-8b729b90ce39",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "81e1fc28-326b-463a-a30d-1b7a0ba71243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f89abbe-9d77-4c73-b98e-5de125d289bf",
        "cursor": {
          "ref": "8f8f9de8-0aaf-45ff-9172-01aa7df7038c",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "01893588-700a-4b2e-a31b-eb40e806aa70"
        },
        "item": {
          "id": "5f89abbe-9d77-4c73-b98e-5de125d289bf",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e28cc6fd-2c2c-41e2-824b-348e8cf3f281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2319892-3135-48f5-a8c3-7b944eb9b997",
        "cursor": {
          "ref": "e57ac6ca-2592-4b00-bcec-72253d7f63a5",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "35e11c64-74f0-4685-8953-7a56b72d024f"
        },
        "item": {
          "id": "c2319892-3135-48f5-a8c3-7b944eb9b997",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "db0a818b-2d06-4d5f-b8f5-23512f7d0386",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 812,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "dc73b04d-0491-443d-81cf-020cf936711e",
        "cursor": {
          "ref": "6f5a21a8-b987-42b3-834a-655524876e8e",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a40fe135-4fa1-41bb-940b-ebdbe5ea8c01"
        },
        "item": {
          "id": "dc73b04d-0491-443d-81cf-020cf936711e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1e88ebdc-5502-4464-97ee-9251e2e1e85d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 855,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "600c0f7f-6cab-413e-93fd-f1075a3d6151",
        "cursor": {
          "ref": "4df1c740-72c3-4ff6-9ebe-f15acd8e3e7c",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b573464c-2b90-41fd-b5c2-b42b8f4bc225"
        },
        "item": {
          "id": "600c0f7f-6cab-413e-93fd-f1075a3d6151",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "50174de9-5ab3-4da1-8a43-56c24a249b72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ba196555-82d2-4807-8e1c-b5dd5e909c50",
        "cursor": {
          "ref": "2d00b0a2-3cbc-44f7-9857-5bd9f11ea4eb",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "13c733e6-c8f1-436c-a584-7b6a51c5ad89"
        },
        "item": {
          "id": "ba196555-82d2-4807-8e1c-b5dd5e909c50",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1dfaa853-da31-4320-aef1-278ac7458140",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 848,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "dfeb272e-1263-4bfb-b66e-13f40d17ea72",
        "cursor": {
          "ref": "7c36dc18-e5d6-4c98-acad-db9298b6878b",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fb4985b2-8e78-4c73-9134-668cc8562de6"
        },
        "item": {
          "id": "dfeb272e-1263-4bfb-b66e-13f40d17ea72",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cdb7a95d-986b-4c11-88ef-8f0910646c99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "44498ce7-b664-47c1-accb-359ca3c52626",
        "cursor": {
          "ref": "e88a2f94-0afe-4734-96e7-8e571122eae8",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ecc4d036-b22f-4c9f-ba5c-1f5c718302e8"
        },
        "item": {
          "id": "44498ce7-b664-47c1-accb-359ca3c52626",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0e0008e2-e5d9-4efe-bff4-202b99721ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2ea02c-e0ae-4323-af3b-6bd7e769f27a",
        "cursor": {
          "ref": "36d6acc5-0e52-4123-b390-4cd2b98ed78e",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ecd051d1-4571-499f-ad5a-90322847f18b"
        },
        "item": {
          "id": "7d2ea02c-e0ae-4323-af3b-6bd7e769f27a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2569c597-84a7-4859-a5c2-3bebdfc2d19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67304e5-46b2-4ea5-9b10-479b5f211731",
        "cursor": {
          "ref": "d52fc0c1-bb9e-425e-bb7a-21e9815dc5eb",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a7ecc735-40d0-43f0-947b-bb0dff4b8092"
        },
        "item": {
          "id": "a67304e5-46b2-4ea5-9b10-479b5f211731",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1594c667-d018-4e99-bcb4-ce42de1e2d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51f26aa-a131-437d-a253-5faf34df673d",
        "cursor": {
          "ref": "9c06372b-9a49-4bf3-b50c-fdf2d0ec8cb7",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6f1c9b41-6e2d-4146-a375-f2eea04ff32a"
        },
        "item": {
          "id": "c51f26aa-a131-437d-a253-5faf34df673d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e09e7c01-f55c-40f3-8591-7b8282177808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2128b7-7de3-4fdc-91b9-1611b53505e4",
        "cursor": {
          "ref": "bd064424-e7b2-4735-bb59-2dd9a3b956bd",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "dc0df6a6-f5ce-48dd-a63a-9f43c412009d"
        },
        "item": {
          "id": "1c2128b7-7de3-4fdc-91b9-1611b53505e4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "873dd52d-8e0f-4529-87a4-fa53da7ae7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e914bb7c-332b-4fcc-9eda-bbba6880d4dd",
        "cursor": {
          "ref": "f689a684-d409-40df-b666-aba52cfb49d5",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1cc3c09b-00d7-4613-a652-c18f5835d52b"
        },
        "item": {
          "id": "e914bb7c-332b-4fcc-9eda-bbba6880d4dd",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "44e0eb54-f711-4447-97a8-d7d3e65c0125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff3e729-648f-4174-b219-c9e2ac8c2c3a",
        "cursor": {
          "ref": "5014a0a5-1d84-4e40-8c80-527a44cd0ca5",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "af9f4233-4561-4c50-83a4-de409b9ffc18"
        },
        "item": {
          "id": "bff3e729-648f-4174-b219-c9e2ac8c2c3a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "359150de-ad5b-4ebb-8097-9f5a0cf87aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e900b5c-eab0-4b12-b3b2-390dd4cd4c87",
        "cursor": {
          "ref": "d336b60b-29f2-4fd4-b76b-b89d0f68e07e",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8a264a7d-3341-4a9e-aeb9-305ad28acfde"
        },
        "item": {
          "id": "7e900b5c-eab0-4b12-b3b2-390dd4cd4c87",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "df007486-206e-46df-bdb2-c5299d3512de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8125f979-b9ec-4ecb-9720-00e4b66a239c",
        "cursor": {
          "ref": "c65c1518-937a-4482-b50c-8fb221a65030",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "90137446-f1b1-42ba-9bc8-e146dbbdbd40"
        },
        "item": {
          "id": "8125f979-b9ec-4ecb-9720-00e4b66a239c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "775816f1-8835-43b8-ad45-d94721a0faf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9141d82-720f-4b0b-a9f0-77f5b82ec8d6",
        "cursor": {
          "ref": "fef98cbb-fbbc-43e4-a876-9a94dfb01f6f",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "701a4707-8840-40a4-b447-42f1c2eba992"
        },
        "item": {
          "id": "a9141d82-720f-4b0b-a9f0-77f5b82ec8d6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "061064cc-9f6a-4206-83e2-7d6bf8eae18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb907088-7a05-4ea8-b9cd-c25c9208c01a",
        "cursor": {
          "ref": "34166f0d-36e8-4f20-8e2a-268bdf518132",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a8ef3823-8dc4-4c42-b46c-804fa014aa04"
        },
        "item": {
          "id": "cb907088-7a05-4ea8-b9cd-c25c9208c01a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "05439d20-bfc9-412c-b27c-2973a677ecc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c04ad2-c597-42d1-a2da-9b9ef1b339dd",
        "cursor": {
          "ref": "904df4dc-5a7d-4267-9690-1372465caba3",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6def8338-3dbe-44c6-a872-406ed5ad25a0"
        },
        "item": {
          "id": "54c04ad2-c597-42d1-a2da-9b9ef1b339dd",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "04f0c101-d2cd-4d4c-b5da-aca47d9a6a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd36e02-8f5b-48b2-bec1-225566e78099",
        "cursor": {
          "ref": "9363507e-7324-4579-a182-15ce83c26f43",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "adca6580-dd1e-4cbe-af89-7f3d15cf885e"
        },
        "item": {
          "id": "6fd36e02-8f5b-48b2-bec1-225566e78099",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3da793a4-dc2f-43ab-a157-6bf1322d78f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc65fcb-9b91-4ca0-a8f2-e08605f4a689",
        "cursor": {
          "ref": "68d84caf-faaf-4cab-951d-f97f3119e901",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "53300ba5-92f2-4243-9cd4-5a18530cd778"
        },
        "item": {
          "id": "1fc65fcb-9b91-4ca0-a8f2-e08605f4a689",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "902faa9b-b961-40bb-a674-6aeb9c2e7e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0b7056-3431-4154-a9c6-f7dd385f0662",
        "cursor": {
          "ref": "0ffd42e7-0456-49b9-ba22-d566e8585b8a",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "515cb0cf-e1d2-4dd8-b823-7fc9dba43c0e"
        },
        "item": {
          "id": "9d0b7056-3431-4154-a9c6-f7dd385f0662",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0b1ffb7c-1935-4d86-95ee-9e791fc6c096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce7ca22-256e-48c2-997c-2350d8cfa29c",
        "cursor": {
          "ref": "d184698c-baab-4c39-80cb-7fe383dcf7e9",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "20cdef89-1419-4e1e-b283-d56909e0f91c"
        },
        "item": {
          "id": "0ce7ca22-256e-48c2-997c-2350d8cfa29c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bb033a59-6084-4a8d-a179-7844916e1f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64339e0-0a2e-4700-b3a9-a4c7cab6bca7",
        "cursor": {
          "ref": "59e48edc-0a15-451d-805e-df4865670dab",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e8a1ffce-811c-4a91-8fa9-dc5dc834a8e0"
        },
        "item": {
          "id": "f64339e0-0a2e-4700-b3a9-a4c7cab6bca7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1ea1a07d-51b7-49e0-af08-86bd68929fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd027729-8708-47c0-9a70-88dd4b72cbea",
        "cursor": {
          "ref": "05aa248d-c458-42d5-8dd0-5d70449bffaa",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f96bc719-4762-4ab9-9cf3-ecc66e74fdaa"
        },
        "item": {
          "id": "fd027729-8708-47c0-9a70-88dd4b72cbea",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5b354423-bc86-4de0-bcfd-50e876cdc81d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ace0365-962b-4462-8dcf-d4edfa850f8f",
        "cursor": {
          "ref": "2702d02b-ae26-4ab5-b3f2-4e51ddd2c765",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8aab2f12-30a8-46c3-addb-0b518dcf1919"
        },
        "item": {
          "id": "0ace0365-962b-4462-8dcf-d4edfa850f8f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "efc81119-b2e7-4194-acf6-93a293a8d0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2f0b57-b3c3-4ce1-9978-523e589026f8",
        "cursor": {
          "ref": "cb2947ad-059e-4596-bf13-6b08305f081d",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4d638f25-8c7d-4da5-bf97-5c223f895b32"
        },
        "item": {
          "id": "3f2f0b57-b3c3-4ce1-9978-523e589026f8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "06673ce4-aebc-4fc7-ad87-f78c8bf5c5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e03ce4d-8145-4925-ac50-f97582d778da",
        "cursor": {
          "ref": "02e32a1a-012a-498b-8b0c-f010233fc8a9",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bd64d034-9c05-47f5-b3b9-c86136d1e5b2"
        },
        "item": {
          "id": "2e03ce4d-8145-4925-ac50-f97582d778da",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8280512b-f105-4dbf-a76d-446785d9bc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9987c2d3-baac-4a05-b218-56d3f81bd7f8",
        "cursor": {
          "ref": "31a0e8f7-984e-4c1a-900a-ef92dcfb60a8",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ed1347a5-e899-417e-b446-ae2a9bdf7111"
        },
        "item": {
          "id": "9987c2d3-baac-4a05-b218-56d3f81bd7f8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0bc6c0d2-0609-4414-acb1-803596a244f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6814813-883b-4468-a245-71f89be60fdd",
        "cursor": {
          "ref": "7e6e9969-66da-407d-8dc3-23421f4dfed5",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ce56163b-f5dd-4369-9930-349d4d597b58"
        },
        "item": {
          "id": "c6814813-883b-4468-a245-71f89be60fdd",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ddc241ed-a7a1-483b-85a2-59815a6a6433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca0872d-8178-4025-929e-86d49004828c",
        "cursor": {
          "ref": "e868201a-d8dc-4d62-904f-edabd5bc142c",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fa392fc0-2877-4598-b5ec-87d2f9cc1016"
        },
        "item": {
          "id": "3ca0872d-8178-4025-929e-86d49004828c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8ffd6d1f-22e7-4180-bd91-df0688341053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4146b157-4ba6-4614-854f-9010ef08b7ff",
        "cursor": {
          "ref": "bfaea85e-cd33-4dce-9662-0323eb3733eb",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7bca4f9d-6b6b-4ba5-b5ec-b4581569901c"
        },
        "item": {
          "id": "4146b157-4ba6-4614-854f-9010ef08b7ff",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ae48e18a-42e4-4d24-930f-765fefbf4873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072ca7ae-ead2-4d3b-a3da-e117d1eed8f7",
        "cursor": {
          "ref": "0158caa3-3ed6-472a-bc32-4830d1a77966",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "13f8d3d2-72c2-42c5-9954-3d7134a9cd1a"
        },
        "item": {
          "id": "072ca7ae-ead2-4d3b-a3da-e117d1eed8f7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ca82a9c3-a879-4f83-8d7e-f69c76dfd4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4418bc-1dfa-4a0d-a9b6-ed0905129af1",
        "cursor": {
          "ref": "efa01725-d0d3-404d-ade6-bfe07651904a",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "530668d0-52aa-42d9-bc91-8ff6242cbf53"
        },
        "item": {
          "id": "9c4418bc-1dfa-4a0d-a9b6-ed0905129af1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "646fb98a-1fb1-4261-a1b1-ebfb04b89183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e332d47e-de5a-43a9-970b-6612abfd0176",
        "cursor": {
          "ref": "f2aa6bb4-f94d-4128-bde4-b518e583ee0a",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "857cbe45-96d5-4d94-9d32-92d92ce0b13c"
        },
        "item": {
          "id": "e332d47e-de5a-43a9-970b-6612abfd0176",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "16d887f5-448c-442d-add0-881c52ba9bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8def967f-860c-4651-9b01-55daec19248d",
        "cursor": {
          "ref": "786e0ce4-0d19-41fa-a667-dea866bcab89",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "781a6145-b799-4d83-bd2a-bff76a04fad6"
        },
        "item": {
          "id": "8def967f-860c-4651-9b01-55daec19248d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "74556583-e4d9-427d-9d5b-f180e0fde382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231c11f2-1b53-4186-996e-801a7058e4d8",
        "cursor": {
          "ref": "416359ea-90ef-4f2c-a0d2-4094d6d7c097",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "624c2812-f4cc-4b42-acb4-28206fdefa25"
        },
        "item": {
          "id": "231c11f2-1b53-4186-996e-801a7058e4d8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5f48170f-2a8f-4e89-bdb9-ba99e02169b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdde2baf-7b37-4aba-a7c8-07c110e42c8f",
        "cursor": {
          "ref": "c8ab8c80-330e-4d4b-b653-f91ab2474313",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ac102a44-d042-43cb-807c-a6563252f51e"
        },
        "item": {
          "id": "cdde2baf-7b37-4aba-a7c8-07c110e42c8f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8557f223-5a75-46d2-88e2-64c8719303ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e1a1fa-6069-4c66-a069-ba3af4b9db4c",
        "cursor": {
          "ref": "62c7e5e1-751e-48b1-a23e-cece9ab6d862",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "128ee536-0bbc-4639-a2d2-a67405b6ff02"
        },
        "item": {
          "id": "a0e1a1fa-6069-4c66-a069-ba3af4b9db4c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ed6589d9-5c6e-44df-a54b-d9fd4170bb5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b59b126-ad86-4b98-acdc-7ee11da8c31f",
        "cursor": {
          "ref": "7a014e91-9927-46e2-904f-6b9594635efe",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4da04843-85c3-4c3d-9032-68be4651a073"
        },
        "item": {
          "id": "1b59b126-ad86-4b98-acdc-7ee11da8c31f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f0831425-0ec3-48fd-bea0-d696ca1d1d24",
          "status": "Created",
          "code": 201,
          "responseTime": 1553,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bdece0-429e-44c7-aac3-ae47ae4efbd6",
        "cursor": {
          "ref": "d79a50e5-23f6-4241-b79e-5ff207590640",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5d3934f3-ad13-4bcb-8725-0660f08f17ee"
        },
        "item": {
          "id": "59bdece0-429e-44c7-aac3-ae47ae4efbd6",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4e0ec209-4269-4730-8045-340f56ec4a28",
          "status": "Created",
          "code": 201,
          "responseTime": 1030,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ee6f36-8a91-4d49-8cca-c1abcada2f74",
        "cursor": {
          "ref": "b405e9f8-bd89-458a-8730-5c95cec7c826",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "09723251-0f49-4393-95f4-b0f94772b4e2"
        },
        "item": {
          "id": "60ee6f36-8a91-4d49-8cca-c1abcada2f74",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1bd65ad2-4aad-4847-8316-0ae930f54825",
          "status": "Created",
          "code": 201,
          "responseTime": 991,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dfe8f8-7c71-4cb8-a27f-2166c3ac546b",
        "cursor": {
          "ref": "9938261e-289a-44ce-86bc-ef0e4fee9b8c",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "550ccd60-0906-4a99-bfe5-d90dd4cfcb54"
        },
        "item": {
          "id": "30dfe8f8-7c71-4cb8-a27f-2166c3ac546b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5500b685-c6b6-4053-8d25-54ed07567917",
          "status": "Created",
          "code": 201,
          "responseTime": 1002,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ace56b-fc04-4e10-aca9-bf41be29a131",
        "cursor": {
          "ref": "dcde7994-0d83-4818-8df9-d6027c12e10d",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b30cf73c-bc07-489d-9639-edf906952a68"
        },
        "item": {
          "id": "a5ace56b-fc04-4e10-aca9-bf41be29a131",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "34abceeb-e4e0-406d-a0b9-9f8a67d19947",
          "status": "Created",
          "code": 201,
          "responseTime": 1003,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9ae72f-1c21-4147-9e70-95cd28607e61",
        "cursor": {
          "ref": "7f0ea6c7-4a5e-45c9-82d2-9f44087ce438",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5a4231c0-7af8-443f-b095-7b56cf4b0fb2"
        },
        "item": {
          "id": "fd9ae72f-1c21-4147-9e70-95cd28607e61",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "58b49ab6-3365-4c7d-8598-f9352e60ba03",
          "status": "Created",
          "code": 201,
          "responseTime": 1129,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e09f690-a4c3-47c6-8bf8-642ecc49ef51",
        "cursor": {
          "ref": "9a03309d-5795-402a-aa00-d3d6317acc17",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "45ee58ae-8689-4f0f-8852-ef3e1b8422cd"
        },
        "item": {
          "id": "3e09f690-a4c3-47c6-8bf8-642ecc49ef51",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "957fc03a-502e-4182-bcc8-2cd6d1d4bcfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910cac01-d2c7-49c5-8334-2890323176b1",
        "cursor": {
          "ref": "840fc351-9ebd-49db-8bd2-50b8c3d32e09",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5f2fca40-7189-4153-9435-a4d5c19bf25b"
        },
        "item": {
          "id": "910cac01-d2c7-49c5-8334-2890323176b1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f48edf2f-b2b9-4996-9541-a92cbf74760a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0605a8bf-2f5f-4a40-8162-5ba06c346d13",
        "cursor": {
          "ref": "ca8760f5-ed64-4db1-ab75-0337ffc1cf54",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "aef5be8d-b8b3-477a-b5e8-6d74e62402b4"
        },
        "item": {
          "id": "0605a8bf-2f5f-4a40-8162-5ba06c346d13",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8d1359c3-bf5c-4984-9281-72bfb7e65932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89204f64-1aaa-48c3-9e67-1077fdf34f05",
        "cursor": {
          "ref": "aaf44c47-b001-4db3-906a-a72c6da65f1c",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "471ac33e-fc1e-42c6-9a29-a0212ed00f53"
        },
        "item": {
          "id": "89204f64-1aaa-48c3-9e67-1077fdf34f05",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "481eef47-f264-45c0-99ef-c99528d36eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c04bff-b07b-4d9c-8fc7-d788ed0a1cc8",
        "cursor": {
          "ref": "b81a68f9-91ba-44ee-8d20-ee284f0f7aa3",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c14dcaf7-6c68-44ab-ac29-5fe1223b227f"
        },
        "item": {
          "id": "45c04bff-b07b-4d9c-8fc7-d788ed0a1cc8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5c70dc01-a511-4193-85c1-e132686d8623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006a0bcd-3738-4b0c-a33f-04c9607c614b",
        "cursor": {
          "ref": "a02197b2-3224-4081-accc-39c0bc7a9afa",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "781ea387-17b0-405e-913b-e9506fa35c27"
        },
        "item": {
          "id": "006a0bcd-3738-4b0c-a33f-04c9607c614b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7ef254c5-5105-413d-b106-131654ef505d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd9f71f-5ce8-445b-9ed4-acb9fa98260e",
        "cursor": {
          "ref": "39de5488-647b-4ccd-a647-356ca0ff76ed",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4c7fcf4d-0d95-45e3-b074-b9fe751cfec7"
        },
        "item": {
          "id": "dcd9f71f-5ce8-445b-9ed4-acb9fa98260e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5bfc7a23-ac4f-4f8c-9072-009d4ddb9a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250e79a2-88e4-4ea5-9070-5287d70841b2",
        "cursor": {
          "ref": "eb063093-fd23-4f2f-9bdf-7a5d8222ded6",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b581b79b-fcee-48c8-820a-393289f2e715"
        },
        "item": {
          "id": "250e79a2-88e4-4ea5-9070-5287d70841b2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7e0e3c68-b087-4308-8ea8-1b0f6bef2453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f722db02-0173-4348-88ef-635fec2c1836",
        "cursor": {
          "ref": "b7a124d6-d47c-48df-8d9e-3bbd457a5785",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6e6afb87-a674-42b4-b7c8-56c6d31a9388"
        },
        "item": {
          "id": "f722db02-0173-4348-88ef-635fec2c1836",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "db23d0e5-f75b-4b4d-8c89-03a43404babe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511fc860-c9b1-43a4-ab65-07357f4973c5",
        "cursor": {
          "ref": "4a83dcd1-cce0-4e75-a6be-0101ca435fe9",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9cd472a1-0146-4dc0-b591-133f2bc957de"
        },
        "item": {
          "id": "511fc860-c9b1-43a4-ab65-07357f4973c5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e8563def-39d4-4d6f-9b5f-2274dc82a598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2660b0d3-d760-46f7-8ea9-73c630fb3436",
        "cursor": {
          "ref": "e61c7b37-8c2c-45be-a0a8-c6d834ff87c3",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0a5bf787-dce4-480d-bd16-bfc2d088ff6d"
        },
        "item": {
          "id": "2660b0d3-d760-46f7-8ea9-73c630fb3436",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7221cdb8-e0fa-4c30-8965-2b85830b5dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1cbfad3-2647-4fe4-835e-d5a20f99f148",
        "cursor": {
          "ref": "b3d08e92-bbef-461f-a131-4bd0fdf77a4d",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dc5e30d6-1add-40ae-b4bc-93f80b44fd51"
        },
        "item": {
          "id": "c1cbfad3-2647-4fe4-835e-d5a20f99f148",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "db9ef684-0451-4aae-b868-a86cf923752d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049f7cf9-8242-4f12-b677-a8d1c66dd61d",
        "cursor": {
          "ref": "6e8b0218-2837-417a-b170-a6c4ff2d16f3",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d37efc26-d9df-4424-b306-b4f499d70ff9"
        },
        "item": {
          "id": "049f7cf9-8242-4f12-b677-a8d1c66dd61d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "24faac04-5eee-44fb-86ea-737ce6025d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c12633-6882-4809-91fc-db9662efa159",
        "cursor": {
          "ref": "148f081c-6ead-49cb-9043-85095066de53",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "be52fe11-7f5c-4459-8657-065577d79c5c"
        },
        "item": {
          "id": "b4c12633-6882-4809-91fc-db9662efa159",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "daa8aa08-1c87-42af-9c11-9c676a63ca17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883eb4ab-4fb8-4c02-bcc0-4f3e55e0e34e",
        "cursor": {
          "ref": "27e2cfa4-6561-46dc-9c59-e42edf9b2cb0",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cf0844b4-5c3b-46bd-8042-6720b9e8e1c2"
        },
        "item": {
          "id": "883eb4ab-4fb8-4c02-bcc0-4f3e55e0e34e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "35d6724b-a9a9-4063-8467-046124bbd8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7185789-5fe0-4713-b76f-e9390d471711",
        "cursor": {
          "ref": "79c9cb69-a02d-48db-8138-776844ff3ff1",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a845f1a1-2475-4d39-9e38-48d0861b3711"
        },
        "item": {
          "id": "c7185789-5fe0-4713-b76f-e9390d471711",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "746df3a7-8f09-4f72-a6f5-427b74d63905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488b46f4-4ca8-44a7-b72c-66083c8c6ea3",
        "cursor": {
          "ref": "cc044973-0c0a-4283-bf81-8ea0ae299618",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "30d71aaf-55db-489e-867d-b5efd1597cdf"
        },
        "item": {
          "id": "488b46f4-4ca8-44a7-b72c-66083c8c6ea3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "102f5f5e-b800-4d01-a04c-9bdbfce9017f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8163d3f-5d4f-4d0d-8a6e-975326e94e4d",
        "cursor": {
          "ref": "5aac5f6b-c574-4555-8e93-8e4995af0570",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f3eae37b-a9cf-45fc-8ddd-cbdff6a6dd55"
        },
        "item": {
          "id": "e8163d3f-5d4f-4d0d-8a6e-975326e94e4d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "59fc5856-464d-4bc2-bf34-8bb24dd56981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfd491c-a117-414a-bb49-a08572c3116a",
        "cursor": {
          "ref": "ceb8468c-98c1-42cb-baae-6dad3abf286f",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "987b023c-b84d-499f-a142-593f8b6dca2c"
        },
        "item": {
          "id": "dbfd491c-a117-414a-bb49-a08572c3116a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9f466c7f-616c-4362-896d-1706e0a011b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf254ab9-23a7-4c94-83a8-05bc10515b8d",
        "cursor": {
          "ref": "f5be8387-4e4e-4960-8a2d-c7f086d94b9d",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f7e97ce3-5fa3-4436-99eb-2e010ddda380"
        },
        "item": {
          "id": "cf254ab9-23a7-4c94-83a8-05bc10515b8d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0fb79287-89be-441f-b226-41d267c22193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcbfae06-8e59-4b03-a9ee-fec28cbcddeb",
        "cursor": {
          "ref": "ebb19d7d-4fa3-48f0-8efc-3e77f156525d",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "08eea88e-89d6-4fb4-9c38-b771b8a7cfb3"
        },
        "item": {
          "id": "dcbfae06-8e59-4b03-a9ee-fec28cbcddeb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f986112d-6451-4d3c-a74d-66e1243d7887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e30de0d-f6ca-4f25-8537-74eb1416cbaa",
        "cursor": {
          "ref": "13c2835b-3ddc-4247-b67b-adcd8998bba3",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "561a685f-7693-493e-848c-257b67daf39e"
        },
        "item": {
          "id": "1e30de0d-f6ca-4f25-8537-74eb1416cbaa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9ce0a677-a693-4183-932f-dfb8480903e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8e0e56-283f-4911-99eb-d2b993fb96f8",
        "cursor": {
          "ref": "149a7ff4-bd9e-418c-9170-646d1cf0788b",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c347cbe6-ee14-47da-987b-7741751298dc"
        },
        "item": {
          "id": "ee8e0e56-283f-4911-99eb-d2b993fb96f8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "637f016c-6212-49b5-a403-6677ac882d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d177c008-107c-4951-80fb-0d45afc0f895",
        "cursor": {
          "ref": "c13bb85a-1352-4ff4-a860-f4b34dbbe98c",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "70b21399-1e79-4f95-a85a-610eb17cc2f6"
        },
        "item": {
          "id": "d177c008-107c-4951-80fb-0d45afc0f895",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e708962b-b038-4e39-9e5e-ca072b9bd5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343b2a42-3608-4a81-a65f-9dd3b225ad63",
        "cursor": {
          "ref": "63e5c59d-8eb2-4270-88db-99a0c9528918",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "77cf1956-90ab-4d76-b3d3-d35d0a603dab"
        },
        "item": {
          "id": "343b2a42-3608-4a81-a65f-9dd3b225ad63",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fef09e1e-ce13-482a-a3d9-3f7f77482245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0b3559-8f05-44e4-93c1-dfb79947bfe8",
        "cursor": {
          "ref": "f0067cf1-9dec-48c0-b5e3-7f854cff8ef2",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d75265b8-8b1a-45a9-aea9-a3166b32287b"
        },
        "item": {
          "id": "6c0b3559-8f05-44e4-93c1-dfb79947bfe8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9a5bf212-5bb5-42e8-95f3-9114ed905bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad0e901-505e-4995-a196-17477fd09f4e",
        "cursor": {
          "ref": "1b268126-8501-4b20-a0f3-824fe7bcb7b2",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e415ef3c-3f36-402f-b24d-9c07f6b395ad"
        },
        "item": {
          "id": "4ad0e901-505e-4995-a196-17477fd09f4e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7f1e50df-8455-4d46-97c0-003c075523d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4b9b3b-c1cc-4ffc-a448-8cd254e098a5",
        "cursor": {
          "ref": "961d98a4-7fa0-496f-8657-c3531512c8a4",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f48bb0f1-a8b7-48cb-b989-3a97c58a338f"
        },
        "item": {
          "id": "4e4b9b3b-c1cc-4ffc-a448-8cd254e098a5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c07ac683-be65-40ce-8b82-7e7a48a7c0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc6f7bb-947e-4440-988f-263fa6bce42d",
        "cursor": {
          "ref": "ec8ff49c-f165-4272-a3b9-5af45a6c9957",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b596576f-9234-4c61-85c4-db1c69093dc9"
        },
        "item": {
          "id": "3cc6f7bb-947e-4440-988f-263fa6bce42d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0163a600-9c06-411c-a151-b371c8f3492a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5591920-1bc0-4469-b529-c56112a355e5",
        "cursor": {
          "ref": "fe820dd2-ff4a-4f9d-9f8b-8c9b5481b972",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f52a8f11-664a-46b6-abee-b05074d0ad9e"
        },
        "item": {
          "id": "e5591920-1bc0-4469-b529-c56112a355e5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ee0eba01-88b3-4ce3-8704-d2a72f179969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebac4582-5bd6-443a-8968-927a7a800cb0",
        "cursor": {
          "ref": "7e338bbf-602f-4929-bc91-f1a8218eae40",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e9312d37-90b3-4f00-be0e-add41de67e9e"
        },
        "item": {
          "id": "ebac4582-5bd6-443a-8968-927a7a800cb0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4bab40ff-a8b6-41ef-a6eb-185e7f13b142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef92dc35-ac5c-48ea-a3b0-342011c57e15",
        "cursor": {
          "ref": "f70f6f2a-43e9-41e2-837d-34d1622bd452",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "32bc4713-dea0-42dc-b7d3-0492d518064e"
        },
        "item": {
          "id": "ef92dc35-ac5c-48ea-a3b0-342011c57e15",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7f527d31-446c-4dde-ae94-49f5a98edae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77500a34-62ca-4b2b-9eb5-58c03c287026",
        "cursor": {
          "ref": "73a714e5-6ccc-4c90-956b-24b10cc6244e",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "53480900-20f4-4275-b350-3b35136f6856"
        },
        "item": {
          "id": "77500a34-62ca-4b2b-9eb5-58c03c287026",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "38c20536-c067-4b7a-a764-c0bf6c4d2b24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6a210c-21c2-41db-b628-e0b05d94af41",
        "cursor": {
          "ref": "d9ae9541-1f7b-4379-afb6-bc9a73f11627",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "261854dc-4f97-41d5-9614-2d17f54d3fbc"
        },
        "item": {
          "id": "df6a210c-21c2-41db-b628-e0b05d94af41",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a0bc7af2-5861-4398-8cb9-f4874a0d91ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039d539a-0156-47ed-ae4a-cbbbc7008678",
        "cursor": {
          "ref": "9e4be6dc-85ae-40ae-b2ad-432df7ee28d2",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "25aaae38-7f02-47dc-9e1f-4ac56bd7db3e"
        },
        "item": {
          "id": "039d539a-0156-47ed-ae4a-cbbbc7008678",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b822e87b-9f1e-4bbf-8f17-84e1b331243d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce76bbe7-209f-40ef-ab8c-4b6eacba9655",
        "cursor": {
          "ref": "78259cff-c83b-4999-a784-4184df54fb6d",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1e8efc1b-383d-4227-ae3c-584e5d1dbe4a"
        },
        "item": {
          "id": "ce76bbe7-209f-40ef-ab8c-4b6eacba9655",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8d4dd58d-e872-4c78-9681-e51d1207e60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb33564-7fef-47a9-8fd4-24c078cdd2aa",
        "cursor": {
          "ref": "e466d97b-712c-414f-a2a6-79d80c8c2b2f",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bde472f2-72d2-4fab-b1ff-78d52899505c"
        },
        "item": {
          "id": "5eb33564-7fef-47a9-8fd4-24c078cdd2aa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f32207c8-b505-4da0-86d9-d018f2f33d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4300d261-aea5-46de-8baa-fc5f2e41b4e7",
        "cursor": {
          "ref": "c4e848e8-521f-4796-9864-528ce6d12111",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2d5fec92-aca1-4519-a0c0-dc20daf7d36f"
        },
        "item": {
          "id": "4300d261-aea5-46de-8baa-fc5f2e41b4e7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d3dbd841-ccf5-4ae2-844a-bd3e26c50780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca453c7-d4be-4391-8c15-971c568e966f",
        "cursor": {
          "ref": "d2a4280c-0dab-4dae-b77e-d2b89e80da60",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1eea47ab-97db-4575-9c56-4fc3478a547e"
        },
        "item": {
          "id": "0ca453c7-d4be-4391-8c15-971c568e966f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b808a9df-c781-4069-a324-670b8be56339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9669ff7-e243-41d5-81cd-b5427bf63f61",
        "cursor": {
          "ref": "c2f9a038-ccd1-4358-bf55-62c8a72fca3a",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "10814c10-6ff7-4f97-8cd3-9b61319daffe"
        },
        "item": {
          "id": "f9669ff7-e243-41d5-81cd-b5427bf63f61",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "aed7b5c9-e041-40fe-bcc8-774c1a7b5a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c39b17-46f2-44dd-b716-26cec9202e3c",
        "cursor": {
          "ref": "502ef44c-b0fa-4b40-ad46-f11f970e0a7f",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0ce103fd-4275-4fad-9dbd-be4108d5ae3f"
        },
        "item": {
          "id": "e2c39b17-46f2-44dd-b716-26cec9202e3c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ba21425c-d4f8-4d21-b4a4-8944bf1e2b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68593f64-cc17-4c70-9ce0-5515d42a96bf",
        "cursor": {
          "ref": "2c6cc820-555b-415d-9ab4-b31e74092871",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "74c9a4d4-2c59-4cee-80d8-39773c178448"
        },
        "item": {
          "id": "68593f64-cc17-4c70-9ce0-5515d42a96bf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f0eb8c74-d08f-4b5a-aeee-83965458d178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c340f7-c556-475d-b5a1-cef614785e03",
        "cursor": {
          "ref": "a7c9fba9-66d1-4613-80f1-9309176843cd",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fb9fe65f-02a5-4f63-a9c5-830e7ab4b3b3"
        },
        "item": {
          "id": "58c340f7-c556-475d-b5a1-cef614785e03",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "60c858ee-7771-48f6-82f8-8b6e5e70cffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e7017d-f676-4b8b-b32f-cb19d2105f69",
        "cursor": {
          "ref": "d89d2426-4560-4b49-9983-e1253721a51f",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2e38b682-2ef9-4b0c-96b4-4cdd23ba3662"
        },
        "item": {
          "id": "b4e7017d-f676-4b8b-b32f-cb19d2105f69",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "256e96c9-224a-4579-a9c2-a8fbc39075f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b8e2e0-036e-4de5-8904-06d2ebeeec5c",
        "cursor": {
          "ref": "0df43896-1a8c-4096-9381-6ec92813fce3",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a929f40b-53ca-434d-8fbf-4a69f4057da0"
        },
        "item": {
          "id": "63b8e2e0-036e-4de5-8904-06d2ebeeec5c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "34a178f7-e7a1-47a3-b4de-b068cef61ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd11f22f-0439-4fea-bd7c-b0e47013347d",
        "cursor": {
          "ref": "aebcfc9e-fd00-4fa7-8deb-ad8407dcd040",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d5c64aac-5b0f-4558-b12d-b07d30009d4b"
        },
        "item": {
          "id": "dd11f22f-0439-4fea-bd7c-b0e47013347d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2717a176-644f-452f-a24c-4aa4554303a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8749e76-2b5e-41f5-9cdc-8129af6531c7",
        "cursor": {
          "ref": "84d3a71a-c7b3-4681-9678-939e2123fe9a",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "92cd1636-3428-4997-8ed7-ce3b42ca20eb"
        },
        "item": {
          "id": "b8749e76-2b5e-41f5-9cdc-8129af6531c7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0bd930ab-fbb9-441d-8995-076445d4436a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acea726-b8e5-47e4-aef6-66ddc7e66b13",
        "cursor": {
          "ref": "f7285495-108a-49fc-9a1c-37547d8cf0e3",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9f2e5d53-ba97-4d7a-a008-f0602d2bc33e"
        },
        "item": {
          "id": "6acea726-b8e5-47e4-aef6-66ddc7e66b13",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "118bb1d5-8472-48e1-b5f8-bdb4e215f436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6494050d-4c3f-4cd7-a8f7-dfcd675604fd",
        "cursor": {
          "ref": "a9442ead-8f93-48a6-8b90-e6cb566497d4",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6db0dd31-f856-4263-a1b7-03805b3170df"
        },
        "item": {
          "id": "6494050d-4c3f-4cd7-a8f7-dfcd675604fd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d093e0c6-2a00-4d08-ba53-4334029db843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076323f3-6ca3-42c5-a179-6167a04748b1",
        "cursor": {
          "ref": "3c41bac2-f9e8-4c35-ae48-b5c22ac5288f",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "49dbdcd6-552a-45ee-8fe9-9df343a9d55f"
        },
        "item": {
          "id": "076323f3-6ca3-42c5-a179-6167a04748b1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "453bb577-04f6-4a44-8f0a-fbb1d6f822b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3689953f-0b01-4681-8907-44bace90c276",
        "cursor": {
          "ref": "0a28681a-1e1b-4be9-ad8a-67f832fe0490",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bf757bcc-d42e-4550-ace1-432ad04f20e8"
        },
        "item": {
          "id": "3689953f-0b01-4681-8907-44bace90c276",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "370ad593-70f5-49e6-a7df-123b84bdb0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c0a63f-a31b-4abe-980e-8f2431a6cced",
        "cursor": {
          "ref": "5aa16988-bc68-483a-bf91-2c4aca7ebd1d",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1348a3a2-f090-4354-885a-cd17f84f76b2"
        },
        "item": {
          "id": "43c0a63f-a31b-4abe-980e-8f2431a6cced",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "22ccfb94-efdd-468b-968d-75eb382880f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08d153d-6268-4774-bfcc-4eedf71f19ff",
        "cursor": {
          "ref": "67bf8309-b0c7-4caa-907e-c9a3100183fd",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1373470e-b74e-4f40-8fbd-48868faa3536"
        },
        "item": {
          "id": "d08d153d-6268-4774-bfcc-4eedf71f19ff",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1e99d114-441c-4ea0-9ea8-0f3d5bcabb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d29a56-f93a-47dc-ab18-099f0a112ce2",
        "cursor": {
          "ref": "0bb6eea9-3348-46c3-920c-4df87e1c4c43",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "54610ccc-caa2-4c41-9dbb-8a561ec0b5d4"
        },
        "item": {
          "id": "a2d29a56-f93a-47dc-ab18-099f0a112ce2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ad686a4c-752f-4e49-a75a-d81f8d9551a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc31d2e-c82f-4a1a-8820-93976e333e48",
        "cursor": {
          "ref": "030ac589-6bcf-44c2-9c45-8a23d3179eb8",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9554d72c-b3e2-470f-8487-1794bdc6cf3f"
        },
        "item": {
          "id": "0dc31d2e-c82f-4a1a-8820-93976e333e48",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "af4d95af-15d6-447e-a4f9-fedec84ec0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3144daec-3ee2-462b-a12f-450ae462667b",
        "cursor": {
          "ref": "4a3b3f49-0302-403f-acae-53750b8938c3",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "be0eeff8-824e-412e-ac7f-2a6ba58a4277"
        },
        "item": {
          "id": "3144daec-3ee2-462b-a12f-450ae462667b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4f0452ef-2ec6-41b8-8dca-de5d631c951a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81550f37-b791-403a-8c00-18117e051849",
        "cursor": {
          "ref": "410b8dbe-b376-4c8a-995b-8654009d9626",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "48976ff3-84f7-4c3d-970b-20335e50a211"
        },
        "item": {
          "id": "81550f37-b791-403a-8c00-18117e051849",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b64aba5a-f260-4790-9e22-a560153021af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe7f97f-b431-4872-b23a-b82471907c65",
        "cursor": {
          "ref": "3359fcb1-faac-4bd2-9f6b-ce4700eca55d",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6602644f-5c35-47a3-a95b-a0955ef66ef2"
        },
        "item": {
          "id": "ebe7f97f-b431-4872-b23a-b82471907c65",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bf1260c5-05d6-431f-8e52-55717e6500ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0309e0-2742-4df1-9940-a4036942c8cf",
        "cursor": {
          "ref": "c348a4e3-bcdc-4dcf-8d44-d9dc3ada3d2c",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6df39ee4-1b6e-41d5-8fa2-a177d154419f"
        },
        "item": {
          "id": "0c0309e0-2742-4df1-9940-a4036942c8cf",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7b52a8ea-9782-4498-b601-0dd01327cb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4525e286-2552-4980-8587-9ddd1b1ce162",
        "cursor": {
          "ref": "6aa44c1c-2d76-4e7d-81d4-655d0d313f94",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bdc8d01a-c2d8-4a7c-b80d-1f737637b36e"
        },
        "item": {
          "id": "4525e286-2552-4980-8587-9ddd1b1ce162",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "66e27a87-61f7-426a-a7b5-83233f21f908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef46b927-dc0d-4b3d-8677-3e93af16a135",
        "cursor": {
          "ref": "92465773-6952-4ae9-99c7-7de3451904e0",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2aa12cb5-0f46-436a-91bf-04a749ce0448"
        },
        "item": {
          "id": "ef46b927-dc0d-4b3d-8677-3e93af16a135",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fec0dc40-21e3-409e-bc34-94f942b509d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e956becb-342e-4552-a920-66118d4b5889",
        "cursor": {
          "ref": "3296fa9b-895e-40e3-bfeb-e7fdac0d351e",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f04220df-a736-40ea-a9fd-8b2df4e94531"
        },
        "item": {
          "id": "e956becb-342e-4552-a920-66118d4b5889",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2342e1ee-5e99-4678-a7d4-5b2daaf1d184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8ac5ee-4903-41ee-82bd-604f3de381ad",
        "cursor": {
          "ref": "998d76c6-6863-436a-8d33-cb47e449a83a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5a075d9d-fcb4-41f5-8f07-6bc27db4d9d8"
        },
        "item": {
          "id": "2a8ac5ee-4903-41ee-82bd-604f3de381ad",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0168ff37-ca84-4822-be6b-8de100774368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce05780-8b80-4aa5-8c01-29f4c7d92446",
        "cursor": {
          "ref": "e3b9cafb-5ca7-473c-9c55-5fd8c63d70e6",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "143e6d02-8591-48c4-a704-ec511d909fe8"
        },
        "item": {
          "id": "cce05780-8b80-4aa5-8c01-29f4c7d92446",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fa38fb03-9474-4626-826b-5a714de9a599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146524ea-b33d-4a8b-a79c-c685c6f96bfc",
        "cursor": {
          "ref": "cf28b058-2d99-4f0b-8222-02206a40b607",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "49c95e28-b2eb-4032-a3ce-bfc417114419"
        },
        "item": {
          "id": "146524ea-b33d-4a8b-a79c-c685c6f96bfc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "624b3bcc-aff8-44b5-a1ee-d55b54f2a3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0c0dc5-35a2-4cba-b7ec-13d5d39808d8",
        "cursor": {
          "ref": "2993659f-009e-4a05-9962-46918995fb34",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cd50c1c8-d20c-480a-8d5d-9d39af0288f6"
        },
        "item": {
          "id": "1a0c0dc5-35a2-4cba-b7ec-13d5d39808d8",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1a71f9cc-2523-4560-aa98-fa50ce4f745a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e6f6b2-90bf-4405-80b2-6eaccaebd0f9",
        "cursor": {
          "ref": "54776bb8-3b41-4977-98f1-389b894e6135",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "352feb2d-5885-4532-93f7-1948ac1fcee5"
        },
        "item": {
          "id": "d2e6f6b2-90bf-4405-80b2-6eaccaebd0f9",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "74616b2f-9d01-474d-bbc6-6aead6abb6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4061af2-1bad-47ca-97b6-a0acc9e8c04f",
        "cursor": {
          "ref": "5b3f408b-0692-4cfd-99c2-e222f70f7bd8",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "018346e4-734d-4c2c-bbd4-bd75ae20da55"
        },
        "item": {
          "id": "c4061af2-1bad-47ca-97b6-a0acc9e8c04f",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d70adcd2-726c-478e-b6b9-56647869e243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f313e015-8459-4056-9753-1a8bf191d40c",
        "cursor": {
          "ref": "4e194ef4-7078-469c-9de9-866b5987cc5a",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d4050d1a-38eb-4609-bdb1-f3d2bc3dde46"
        },
        "item": {
          "id": "f313e015-8459-4056-9753-1a8bf191d40c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "83397398-d8f1-49a6-bb3a-b8209fe0a1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee04bc3b-87cc-4cbe-946c-1fef93e8c392",
        "cursor": {
          "ref": "057d03b9-f3e8-430a-94ae-e16d5a9c694d",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "edae42a3-f17d-47d6-8801-2cd3427bf054"
        },
        "item": {
          "id": "ee04bc3b-87cc-4cbe-946c-1fef93e8c392",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1116b7dd-d0e6-426f-8c6d-734578db721b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391ab315-55cc-482f-b09e-877f4909ad1e",
        "cursor": {
          "ref": "7b1b5b69-d763-42b2-a722-215f14bdeb1d",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4e933854-0520-4934-b867-35f71159e548"
        },
        "item": {
          "id": "391ab315-55cc-482f-b09e-877f4909ad1e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "805e7135-16d4-4781-a2b1-937c5756dc3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6606085a-e4fe-4887-972a-59519d159042",
        "cursor": {
          "ref": "59d20e15-77ca-49cf-8431-9f27ff82783b",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e744295e-01b5-45ff-a222-803206889919"
        },
        "item": {
          "id": "6606085a-e4fe-4887-972a-59519d159042",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c87425a4-ac39-4ec3-b728-c4759f35a810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23782d49-1465-411e-a7c5-d8e3104f2dc6",
        "cursor": {
          "ref": "95cbf29a-e4c8-4ab2-ac3c-d6e0c7c9b6b4",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "16174bb7-3397-4fc8-95dd-97d8052390cb"
        },
        "item": {
          "id": "23782d49-1465-411e-a7c5-d8e3104f2dc6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1a7b4b6f-550c-48cb-b7a6-dbec23f049a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184e895f-763c-4021-a0ef-3a819300f4ce",
        "cursor": {
          "ref": "8978e076-bad9-4db3-a9aa-ff9d3915e631",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a8b04dcd-057b-416f-83be-70c241a42fa4"
        },
        "item": {
          "id": "184e895f-763c-4021-a0ef-3a819300f4ce",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "79938c44-b2a7-43ba-afad-ab639b8f3556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4244b9-7a9d-43a5-ae73-eb5a11324c7e",
        "cursor": {
          "ref": "eef24382-77a3-4767-856e-2a4ee829570b",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a8cad659-e312-4a96-bfe5-160f8ebda95d"
        },
        "item": {
          "id": "3c4244b9-7a9d-43a5-ae73-eb5a11324c7e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ac3f9f61-ac33-4c0a-a3fa-5931c0abd7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d9b1cc-40ff-4e0c-a726-35d805bd2258",
        "cursor": {
          "ref": "b797e51f-b939-4065-8a1b-28217d7db426",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4e89a05c-d4b1-4a15-b0d2-b8a3be08d227"
        },
        "item": {
          "id": "b7d9b1cc-40ff-4e0c-a726-35d805bd2258",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7338a2dd-e5b1-426f-8771-bbd7d84f9aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8ed040-0a87-4b22-b943-d38f384e258d",
        "cursor": {
          "ref": "76d4a623-ae6a-44e6-90bd-bbd05d5e0485",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6af0e276-8912-4c75-83ac-d00d96bb8493"
        },
        "item": {
          "id": "9d8ed040-0a87-4b22-b943-d38f384e258d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "97505017-73de-4cbf-b6a5-0e95f9e21190",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3b64f8fc-fad9-49b7-8b4a-f90f65d87b7d",
        "cursor": {
          "ref": "92b93df8-5fcb-425b-a7c1-5884872640c1",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a99cae4e-a338-4d81-a078-e9012343d672"
        },
        "item": {
          "id": "3b64f8fc-fad9-49b7-8b4a-f90f65d87b7d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d4444e4f-9031-40e8-865d-e80446a07e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf9f2a4-e3d5-4fcc-b73f-8dccfe463209",
        "cursor": {
          "ref": "8387573e-33cd-4d0b-9152-037de4c959be",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "416eb458-f354-48fe-bac0-21b90558af88"
        },
        "item": {
          "id": "fdf9f2a4-e3d5-4fcc-b73f-8dccfe463209",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "79f4cb8d-aade-465c-8f8f-26ac0e1314e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93da101a-6cd3-4b74-9006-98dca740ba80",
        "cursor": {
          "ref": "3cfd407a-45e0-4cef-ac81-2368378ce67d",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f23fac70-0bb6-4181-915e-465a39a18667"
        },
        "item": {
          "id": "93da101a-6cd3-4b74-9006-98dca740ba80",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "29a5bccf-1e8a-4d62-8d1d-d67be913305a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a399b79-8ca2-4e6e-affe-8a4ef35cc913",
        "cursor": {
          "ref": "fa54eb82-c17d-46b5-9ebf-6c3c80b8174e",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2c52578c-aa8e-4b87-b98b-fc933f618950"
        },
        "item": {
          "id": "9a399b79-8ca2-4e6e-affe-8a4ef35cc913",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3c5cbe64-b66a-405e-9a14-41a44dd004e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bea9e2-4bf2-40ff-9f97-bb3a98768b2f",
        "cursor": {
          "ref": "a806da88-ca29-4c58-ad10-99c364cbb972",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "461f7d76-e660-4c1b-9a64-2b564e4007d8"
        },
        "item": {
          "id": "44bea9e2-4bf2-40ff-9f97-bb3a98768b2f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "09308eca-3409-4342-aa89-178f770a1b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2758e428-81a2-4525-b0af-144cd9352705",
        "cursor": {
          "ref": "f0492400-c3cf-4050-8051-c08aa5dc4ff7",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1b7aea31-248f-4e1c-9b53-c0edc875cf40"
        },
        "item": {
          "id": "2758e428-81a2-4525-b0af-144cd9352705",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2c543ec7-82e9-4bea-be23-bb9d6885995b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be942a2-5717-4c54-ba0b-53e5e5f01b95",
        "cursor": {
          "ref": "1291a408-ff52-448f-b9c0-0b8d3848130e",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e3af3b41-caf7-4682-ac45-a4c0b9de97b8"
        },
        "item": {
          "id": "0be942a2-5717-4c54-ba0b-53e5e5f01b95",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "45efebd1-4c7f-450d-8b6e-bbc7d04d1cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44086b7-39e0-4a6c-89c6-42536ab3459b",
        "cursor": {
          "ref": "81405e5a-35e1-4791-8280-a7918d6040c5",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "26c84089-a447-4d29-b5a9-161362c67993"
        },
        "item": {
          "id": "e44086b7-39e0-4a6c-89c6-42536ab3459b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1dd36654-9024-44d8-83f5-e2f5838ee65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9fcc11-e9de-47ec-8d66-66f79d4d4857",
        "cursor": {
          "ref": "12ec9b24-feea-4e21-9c20-b47c25177dc9",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1433c917-a2f6-4a5a-b691-a2ef7df7bfe7"
        },
        "item": {
          "id": "dd9fcc11-e9de-47ec-8d66-66f79d4d4857",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "027e6e1b-c80c-46e0-a54d-08550c2583c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e83b095-4c11-41f8-a613-60ca4c14763d",
        "cursor": {
          "ref": "a4477edd-ea2b-4090-a0c4-73c5280efa87",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bd474062-fff4-4e17-8f09-9bab22d6e13d"
        },
        "item": {
          "id": "4e83b095-4c11-41f8-a613-60ca4c14763d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4efa3e3e-147f-469b-b6f8-fdef039ddfe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350e4dd0-f79b-4c1c-81a3-cb22b6ff5bf4",
        "cursor": {
          "ref": "10315c9e-88e2-4bcd-8f0e-eaba28a64c79",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8c469824-36e7-4aa1-adf5-0e754fd2fbfb"
        },
        "item": {
          "id": "350e4dd0-f79b-4c1c-81a3-cb22b6ff5bf4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "be3afaff-9bd5-436b-b204-9139c84bc25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162ac63f-a050-4f50-9811-19d8a664851b",
        "cursor": {
          "ref": "5896fcc8-71eb-481c-9d4f-4cbe3f6456b4",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f0661816-cf4d-422c-8204-b075c996c747"
        },
        "item": {
          "id": "162ac63f-a050-4f50-9811-19d8a664851b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "613d40c4-720b-4724-b027-7063f8104921",
          "status": "OK",
          "code": 200,
          "responseTime": 1334,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "c44066bd-71d8-49eb-a1ca-5c57f1de95f6",
        "cursor": {
          "ref": "358a090d-e6a8-4c1a-879d-2a902f0c54a5",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c92004cb-0d78-43c1-95a1-3a827e52c8fe"
        },
        "item": {
          "id": "c44066bd-71d8-49eb-a1ca-5c57f1de95f6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3589344b-4fbd-4d20-905f-fe76337819c7",
          "status": "OK",
          "code": 200,
          "responseTime": 794,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "1437aa7b-1be3-4380-9cbb-ea2f4147c9a7",
        "cursor": {
          "ref": "94026f04-e40a-4c26-a707-187f62877f66",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "275b993d-de0f-4796-8ea2-895dda45e06e"
        },
        "item": {
          "id": "1437aa7b-1be3-4380-9cbb-ea2f4147c9a7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a5d6efb5-51cc-41a8-ae99-f90ed3c2e00c",
          "status": "OK",
          "code": 200,
          "responseTime": 830,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "160be669-a494-4574-80f8-0dc067efa24b",
        "cursor": {
          "ref": "015ae591-1e40-4cf9-abf3-972df4503078",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d1bb3586-390b-49b7-8e75-e64519846687"
        },
        "item": {
          "id": "160be669-a494-4574-80f8-0dc067efa24b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d886aa79-3384-4b3b-96dc-8f9db452ee78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da38d0b5-0bd6-4aba-bb4c-5c474b7af8a4",
        "cursor": {
          "ref": "3986f15f-d9e7-4b49-8970-0722001d1d4b",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d75be9af-bf9b-436d-a4fa-7b099b360fcf"
        },
        "item": {
          "id": "da38d0b5-0bd6-4aba-bb4c-5c474b7af8a4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "92b40010-d5de-4e0c-bdb7-0e05e3817d65",
          "status": "OK",
          "code": 200,
          "responseTime": 841,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "fc925fa5-7b12-445f-ae46-0585d58c67b5",
        "cursor": {
          "ref": "11d7f289-e825-4871-acee-3173b685c2dc",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "63fa3193-81f4-44c9-bdf1-73bdb7303100"
        },
        "item": {
          "id": "fc925fa5-7b12-445f-ae46-0585d58c67b5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2941cdd6-e319-41b9-87fd-467835b0c596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867a13c6-a0c7-4775-b4cb-8a22919434b1",
        "cursor": {
          "ref": "01a2e230-3431-4daa-adfd-d7a73bd96048",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7da15c96-62c7-44d2-8785-4f5ef1a3d994"
        },
        "item": {
          "id": "867a13c6-a0c7-4775-b4cb-8a22919434b1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "141d12e5-c6e5-432b-a444-8c724d5b10b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d43da57-61f8-45ab-980e-9118067d13a4",
        "cursor": {
          "ref": "2657e0da-69e0-4f68-a0c8-bb5cbecfb4a8",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9e1170f8-5bda-453b-8088-669a024107c7"
        },
        "item": {
          "id": "3d43da57-61f8-45ab-980e-9118067d13a4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0bcf33cf-2bce-4818-9893-6c508c07bc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2891062b-9788-44bc-a195-d19be63fa836",
        "cursor": {
          "ref": "9b33c97e-0a5e-454c-8d9a-170d67e0b55c",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c8ae6323-1bf4-4f97-bc99-dc025262d7bf"
        },
        "item": {
          "id": "2891062b-9788-44bc-a195-d19be63fa836",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "86ec58d7-7d00-442b-9d98-079ba87a1983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923bf05d-92bf-490a-aa9a-ae90a0ab4504",
        "cursor": {
          "ref": "91174ca7-b40c-400a-b740-e2058a5129e9",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cd1e62c6-2e2d-4915-81ca-dec5b2d7ec71"
        },
        "item": {
          "id": "923bf05d-92bf-490a-aa9a-ae90a0ab4504",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "80ce69d4-9979-49ec-9964-82d18669cc0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598296e6-73f5-4399-b8ff-154930fce6a0",
        "cursor": {
          "ref": "10d1e020-0bc0-4a6a-9335-90e516d5836a",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a56cf483-d687-454c-942b-53c5d1977d97"
        },
        "item": {
          "id": "598296e6-73f5-4399-b8ff-154930fce6a0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "26ffbfde-3f17-4012-a07e-a118f32ac988",
          "status": "OK",
          "code": 200,
          "responseTime": 841,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "9102eb6c-ee96-413d-b5b9-8b1a932623ed",
        "cursor": {
          "ref": "62872817-242a-4347-9fb0-6b6c4f9eddef",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "60a92f2a-9aeb-4c23-90d8-83ee995c24e9"
        },
        "item": {
          "id": "9102eb6c-ee96-413d-b5b9-8b1a932623ed",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "13afd09e-6706-477b-ae68-3838aaa92438",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "3e83dcf5-8b8c-45ad-b07f-db99d5ba3261",
        "cursor": {
          "ref": "2d77e0e8-06a8-40ff-a9d6-eaf138b5f43e",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f77f7e0e-8ed9-4e0d-af69-8fa240224607"
        },
        "item": {
          "id": "3e83dcf5-8b8c-45ad-b07f-db99d5ba3261",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "46bd3e45-1a56-4501-98e8-09dd36018cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cbca04-e2c6-4b5c-b8a8-c363e26175af",
        "cursor": {
          "ref": "2d6dbd51-5660-4e65-a541-d84dae7c3bb7",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "088c5cf7-7ea4-41e5-a912-12592604dfa3"
        },
        "item": {
          "id": "53cbca04-e2c6-4b5c-b8a8-c363e26175af",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d8ad1596-08e1-488c-8e0a-6c6f4ba217c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fa3799-cb56-4628-907f-88abfb1d9505",
        "cursor": {
          "ref": "f9cba435-16e9-47ae-b4d2-cf8dca011240",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dbc045ac-20e5-48a9-8169-d003b651e2f3"
        },
        "item": {
          "id": "44fa3799-cb56-4628-907f-88abfb1d9505",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "be40b98e-093a-48d5-a7a3-6cd9a0dcb524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da95955-a473-4cd2-8c5a-3b02cd11dc3c",
        "cursor": {
          "ref": "850feac6-193f-4ca5-87fb-90f516cf367c",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "18087c8a-f8ff-449a-8e09-ce3562288ff4"
        },
        "item": {
          "id": "7da95955-a473-4cd2-8c5a-3b02cd11dc3c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b9b34a8b-e1bf-4ed3-9ac3-b1b74b1aadab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b04442-c6fb-48a0-bbaf-a63af36e934f",
        "cursor": {
          "ref": "fe3bcec8-28f7-462d-8198-6492fb07c5f6",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c1e189c4-1267-4549-a5ae-7bd6ba489c1b"
        },
        "item": {
          "id": "12b04442-c6fb-48a0-bbaf-a63af36e934f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7be6ec43-71fc-4e5c-b909-30652b92f7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115f0c11-d3c3-4fee-9ce7-c601e9cc66c8",
        "cursor": {
          "ref": "6809fce1-0391-4ce4-83e3-a85eae19e260",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4042821e-c53d-4c53-a6e8-59d33c0685f4"
        },
        "item": {
          "id": "115f0c11-d3c3-4fee-9ce7-c601e9cc66c8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d9cd53a6-7b94-4150-a33d-3d4a5ff8c581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f40bf0e-adb2-48da-bf40-261dbe05ce80",
        "cursor": {
          "ref": "af05d3c6-5c54-4966-8a16-1ed0ea3a1c5b",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bf08df93-3ae8-4053-aa9e-34862b134b75"
        },
        "item": {
          "id": "4f40bf0e-adb2-48da-bf40-261dbe05ce80",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1426a39f-5db3-4fc0-a32e-e37c9ce6d6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22cc2c6e-8abc-43f3-853b-8a9bb45707d4",
        "cursor": {
          "ref": "e2525573-f3d3-4d1b-855d-e6eceadf4ab9",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8bb24e7d-1c9b-4c01-bb80-aaff457fa766"
        },
        "item": {
          "id": "22cc2c6e-8abc-43f3-853b-8a9bb45707d4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d2884514-5312-4833-b958-cc310df33bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b603020-149f-4472-a1eb-7fcd94a1b911",
        "cursor": {
          "ref": "a97cd246-fffa-4fd6-9a0e-def53e1cd6ff",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a28df6e4-ee39-4657-8fcb-af74abfcbe5e"
        },
        "item": {
          "id": "2b603020-149f-4472-a1eb-7fcd94a1b911",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b02e5aa2-5001-417f-a82b-b71963eea766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f48190-7fec-4a2b-8b49-a8fa26c35125",
        "cursor": {
          "ref": "a1807ff3-0123-4c8a-b0ac-23a96be2bc18",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1a28d9d6-5dff-4341-83bb-247502f67c0e"
        },
        "item": {
          "id": "28f48190-7fec-4a2b-8b49-a8fa26c35125",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d155cc45-a7a2-4425-9675-e249aecb435b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c608d1c-0221-439b-8342-ed82394af85f",
        "cursor": {
          "ref": "10fb2a48-aa2e-4221-8996-9d8a8c494335",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8e54626b-3584-46ef-af9c-648fe903b2b8"
        },
        "item": {
          "id": "6c608d1c-0221-439b-8342-ed82394af85f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "98dadae3-2bb3-4b6c-9e50-7a2ad2c8c551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085fcd57-dfc7-4a38-86aa-8fbe0682dc86",
        "cursor": {
          "ref": "396c1478-a131-488b-ad76-c9bbdf3587b7",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "01ad0ecd-5fde-47e7-9c08-bdbed068d3e3"
        },
        "item": {
          "id": "085fcd57-dfc7-4a38-86aa-8fbe0682dc86",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a15edc47-d73b-498c-b225-d5b2d504f992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d5a09b-0463-43e6-9dc3-fcc6227de744",
        "cursor": {
          "ref": "0e379377-7cab-4f98-aa83-bc174c1a1cc7",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "47d1d21e-cbd8-406e-965f-7b5454462bc9"
        },
        "item": {
          "id": "70d5a09b-0463-43e6-9dc3-fcc6227de744",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "811e0c47-5815-4f3d-86d8-6cb213f7b600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cca894-12b9-466f-b2d0-3907415d6243",
        "cursor": {
          "ref": "2bd9473a-9d05-46c9-926a-fd883b3f880d",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "090c32b8-1ae7-4120-bf4c-194ff482e2a7"
        },
        "item": {
          "id": "e7cca894-12b9-466f-b2d0-3907415d6243",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e0d1dc3f-d580-494a-9c79-a3b5ee97cfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d1a8ac-440d-4f9c-98ab-38f7bb63276f",
        "cursor": {
          "ref": "7fe43789-e44a-4140-826b-42f616a24a50",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6cee4807-4128-4965-83e4-0a567092db04"
        },
        "item": {
          "id": "77d1a8ac-440d-4f9c-98ab-38f7bb63276f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b332710e-8965-407d-a13a-b7fdaa2ccb5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8b0017-5668-4e40-b031-97a443e6b14f",
        "cursor": {
          "ref": "a1b0d2bf-7157-491b-8bb9-376a579bc172",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e5e5d9d6-8f1b-454b-8783-57f838edc885"
        },
        "item": {
          "id": "4c8b0017-5668-4e40-b031-97a443e6b14f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1ed24b87-b9df-4791-a5d0-a051357a5057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2e4fce-b102-4bb7-9479-0fa1d97b291e",
        "cursor": {
          "ref": "37e57d5d-4730-42c3-97dc-1e2e960347ea",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e6ff6f2b-8c4e-45c3-b4a7-a852b7d73e00"
        },
        "item": {
          "id": "4e2e4fce-b102-4bb7-9479-0fa1d97b291e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4654f71b-2621-46e3-b8c4-1ce9693f6efd",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "54bd3e6f-820d-4486-b26d-d6013238984b",
        "cursor": {
          "ref": "e020094d-5a9f-4b8b-9146-684fb8b7a493",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c426b804-55a9-4b33-b9fb-15e52f42b567"
        },
        "item": {
          "id": "54bd3e6f-820d-4486-b26d-d6013238984b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f8694cc1-7253-43f2-a5c9-dea0df042f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695112ce-ef8e-48bc-a456-dab049554851",
        "cursor": {
          "ref": "ee4309ad-c637-403e-8607-36db073e1453",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "754c1cf1-b6d7-479b-80cd-eb9ad7dcf86e"
        },
        "item": {
          "id": "695112ce-ef8e-48bc-a456-dab049554851",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1a7dce01-b95c-4915-96ef-c601f75a781f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4df5fd-c489-4450-9fd5-1be35bc59835",
        "cursor": {
          "ref": "2d07cc57-8949-492a-bd8d-e49bea6d670b",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "28d46fe3-6e9c-4a1e-9ac2-82c6bc746722"
        },
        "item": {
          "id": "df4df5fd-c489-4450-9fd5-1be35bc59835",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "91af450a-fcfe-473a-9857-117058d57e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff5bd2e-d03b-40e7-9244-3f30951c7067",
        "cursor": {
          "ref": "37e98a1b-4b89-4a2c-aef9-1ac1d591b569",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "855f6517-7a77-4696-bde9-c00a8e1bfefb"
        },
        "item": {
          "id": "3ff5bd2e-d03b-40e7-9244-3f30951c7067",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1606bfd7-bada-4321-9548-d0f8af4d8c5c",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "40b25647-43a1-465d-b4c8-1080a1e968a3",
        "cursor": {
          "ref": "ba730aec-9cf8-4f9f-96ef-5216efdb43d0",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "40d63e32-fe80-457c-aae6-051bf7062ea9"
        },
        "item": {
          "id": "40b25647-43a1-465d-b4c8-1080a1e968a3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ded5a465-137a-44b2-b225-498684cd776a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4adbdd9d-2b0c-4c84-944c-2ac76078600b",
        "cursor": {
          "ref": "6a5f9255-c52b-425a-bbde-3fd6cf799008",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f30239f0-77e6-4438-bf60-6f45bb183782"
        },
        "item": {
          "id": "4adbdd9d-2b0c-4c84-944c-2ac76078600b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b309deca-75ab-4e08-81f7-2da370d5c642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012123a8-9b10-42d3-9063-775da423db60",
        "cursor": {
          "ref": "cc12cb6d-f97c-4bdb-8a2a-db81f95e122d",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "74326b02-bb13-4e25-9f99-36b2e96040ff"
        },
        "item": {
          "id": "012123a8-9b10-42d3-9063-775da423db60",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "72efe184-121f-4ef8-a620-756982d0aacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4157b3-af0e-4c9b-aed9-93efd4fb9b10",
        "cursor": {
          "ref": "74bd91e4-3ed2-4bc2-a20f-629d07cea808",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0ea8e707-576c-4c65-9cf1-221e3f55bf62"
        },
        "item": {
          "id": "7d4157b3-af0e-4c9b-aed9-93efd4fb9b10",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "409d9883-4161-4edb-9d10-afa20ee5b070",
          "status": "OK",
          "code": 200,
          "responseTime": 834,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "b66fd628-85ea-4114-b96a-0c73a5fcc7b3",
        "cursor": {
          "ref": "e93d7299-a8f9-416f-b53c-8fcafc301a01",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "21d30465-d668-4064-bdde-bb29d2acc272"
        },
        "item": {
          "id": "b66fd628-85ea-4114-b96a-0c73a5fcc7b3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "203f5fc5-4746-468d-943f-62075254becf",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "2ccbfb91-7040-4941-b8d9-ceb32a0f6d0b",
        "cursor": {
          "ref": "1acf5a1c-452b-4a8d-8643-06404826ef48",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fe00db7a-3cf0-47b7-84e0-738e06f4f3f2"
        },
        "item": {
          "id": "2ccbfb91-7040-4941-b8d9-ceb32a0f6d0b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7fb5dfbd-2641-4b8d-874c-b455ab52a57c",
          "status": "OK",
          "code": 200,
          "responseTime": 1270,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "3ffc41b2-de38-4ed1-a4d5-db7ecb426a69",
        "cursor": {
          "ref": "1e632120-77af-449d-b982-588698e3ef1d",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "eb2e6f63-a904-4584-8749-40fdae41d815"
        },
        "item": {
          "id": "3ffc41b2-de38-4ed1-a4d5-db7ecb426a69",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3af2e472-2360-4a2a-83d8-41fe6421202f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279e2c74-02bf-4b45-9fca-73b70174c5f9",
        "cursor": {
          "ref": "6f8104a1-8e99-4291-ad9e-5c0267a3e555",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1166ca1e-99bb-4031-92c7-20e82d28724f"
        },
        "item": {
          "id": "279e2c74-02bf-4b45-9fca-73b70174c5f9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "decc5ffe-3399-4e72-93c5-05a080bf1d66",
          "status": "OK",
          "code": 200,
          "responseTime": 801,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "55943c4d-b2cc-47c2-bb33-6d9f385c9a47",
        "cursor": {
          "ref": "d04e129c-8e7a-49ac-bf92-d37c5b2107a6",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bbf40566-f788-4e02-9f18-89d5294f61e9"
        },
        "item": {
          "id": "55943c4d-b2cc-47c2-bb33-6d9f385c9a47",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a0fdb40c-3fcf-47d0-8e5a-265698c3e1db",
          "status": "OK",
          "code": 200,
          "responseTime": 827,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "05ee9e8e-356b-4603-8c3a-0d00f25a71df",
        "cursor": {
          "ref": "11ee0782-a258-4863-a079-49299ef61194",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7ccea68f-dedd-4768-b223-d1ddfa7fa974"
        },
        "item": {
          "id": "05ee9e8e-356b-4603-8c3a-0d00f25a71df",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c9f07fa4-9631-42f1-9ab6-f9b231ccdf2b",
          "status": "OK",
          "code": 200,
          "responseTime": 878,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c19d5280-f609-4055-ad1e-80d94581371a",
        "cursor": {
          "ref": "2521a02a-307d-4be4-8230-77e5a061cf19",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "34a13788-5358-4658-beaa-8e1b096f428d"
        },
        "item": {
          "id": "c19d5280-f609-4055-ad1e-80d94581371a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f02b16a9-018c-4e53-8560-daab652541c0",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9700f76d-008e-4e72-97bf-878d81837579",
        "cursor": {
          "ref": "2ab652d8-e374-4537-8f47-382eb5a83153",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "752ba404-e7b8-4b16-8273-056305d77a9a"
        },
        "item": {
          "id": "9700f76d-008e-4e72-97bf-878d81837579",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7d10828c-b7a2-43a1-833b-d436261e511d",
          "status": "OK",
          "code": 200,
          "responseTime": 814,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "20da8e93-3eb9-4920-b3e2-2d0de42c134b",
        "cursor": {
          "ref": "5f2637f6-7343-4685-a8d2-7c2d0aa2ed4a",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e801f646-4b53-4bf4-97b0-0e584e4ff0f2"
        },
        "item": {
          "id": "20da8e93-3eb9-4920-b3e2-2d0de42c134b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "01565775-477b-4fb5-9e31-e6cb00bd28af",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7c2adfde-a343-49fb-aa4b-472c2abc0ca3",
        "cursor": {
          "ref": "6ed186da-c715-4b69-afe0-9caac01e3b74",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "578e7b44-5fee-441e-b19c-9851ee2b9d4f"
        },
        "item": {
          "id": "7c2adfde-a343-49fb-aa4b-472c2abc0ca3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5142b5c3-d1ae-4b6e-a31f-219bb0313240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a48c6e-87fe-451f-848d-bf5fd1559142",
        "cursor": {
          "ref": "6249ff5e-92b6-45a0-afc0-826c9c0708c6",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1bb9e8db-be6b-42f0-b5e3-528b7fd5d759"
        },
        "item": {
          "id": "87a48c6e-87fe-451f-848d-bf5fd1559142",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "84945d99-ac35-49e3-b030-563c74f30980",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "229fb2bb-d129-4fe2-9e45-2cab906e1fd8",
        "cursor": {
          "ref": "10e12654-25c3-4118-815f-fe7b0db2f2a7",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2416cb3d-aca2-4834-b305-17586165939b"
        },
        "item": {
          "id": "229fb2bb-d129-4fe2-9e45-2cab906e1fd8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "76526a46-70ad-4f88-875c-fa63866dbd67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce429a2f-a100-40e5-ae1d-8ac245d9b4ec",
        "cursor": {
          "ref": "a80b1896-30e8-4f34-9f5d-34065e579aa8",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "00576e08-806c-4ada-bf3e-54f94369d3a7"
        },
        "item": {
          "id": "ce429a2f-a100-40e5-ae1d-8ac245d9b4ec",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "859f99da-1db7-48c7-b0e3-9bef0e3e1bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85eb281-db72-4453-8ab5-1150dd36ed19",
        "cursor": {
          "ref": "5c87d760-9e46-4083-84fd-0e359ef2ee4d",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2e1f591f-0067-40e7-ac16-86413bc4ba00"
        },
        "item": {
          "id": "f85eb281-db72-4453-8ab5-1150dd36ed19",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ca41497d-7a19-4696-9f39-a0a958d76ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8481c0a6-d0a7-4f24-943e-56d823ebacca",
        "cursor": {
          "ref": "7d77910f-3236-4094-a049-95640f583d22",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f4ba5a91-aecf-4164-bd18-cf65606b2435"
        },
        "item": {
          "id": "8481c0a6-d0a7-4f24-943e-56d823ebacca",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "676014bb-0ed5-40c1-b139-9fc51b644556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc43a8d-d75a-420f-92cc-a124c27fac4a",
        "cursor": {
          "ref": "0f7f7780-6c72-454c-9e8f-5aaef14e99db",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9cb74a6c-1cf8-46b5-bb1e-c99de940a029"
        },
        "item": {
          "id": "7fc43a8d-d75a-420f-92cc-a124c27fac4a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4748c778-b06d-451c-8a14-d68a850d5bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fa1bc8-a93d-4c3c-89f1-3929a199160f",
        "cursor": {
          "ref": "7dbeb552-da89-43b5-b490-3b1d901545d8",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8105317b-b6ea-45de-a93e-550a7d85e4aa"
        },
        "item": {
          "id": "55fa1bc8-a93d-4c3c-89f1-3929a199160f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "32cbd694-40be-4fea-ac8f-3556600519be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babbae77-d873-4840-ba13-fb5cbe5c7ee0",
        "cursor": {
          "ref": "3d3d0c5e-4284-46cf-95f9-f199a3076418",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5dc92c1f-cb8b-4950-89d0-c60d56eecd1c"
        },
        "item": {
          "id": "babbae77-d873-4840-ba13-fb5cbe5c7ee0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "afb591ac-6d89-4ab2-969d-5b8d8872f359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad19a81-862f-4017-99b2-105d5ff55e5e",
        "cursor": {
          "ref": "da00b075-0d0f-449f-b212-6efe96e9c598",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8bbab492-df47-4011-a3ab-d88c8e0da5e8"
        },
        "item": {
          "id": "aad19a81-862f-4017-99b2-105d5ff55e5e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c9ac8935-3aec-4def-81a8-c696f27b1758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e077cf7-c453-4b4e-85b6-6862c4e7f973",
        "cursor": {
          "ref": "98b25a5d-52b6-49d4-bf25-7bdb5034e865",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f82a821b-15f0-4e20-bfd6-9d3daa68b7fd"
        },
        "item": {
          "id": "5e077cf7-c453-4b4e-85b6-6862c4e7f973",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3430c5fa-ec70-4c79-9202-570c7f697cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aabcd58-5a8e-40c8-ac9f-22596390fb6e",
        "cursor": {
          "ref": "5ef1676b-7ee7-4f8d-b745-51cfb2e857bc",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2093ec28-4379-4d32-a182-b9077540baeb"
        },
        "item": {
          "id": "1aabcd58-5a8e-40c8-ac9f-22596390fb6e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8078cc0d-3dc5-458f-8479-77967188e2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7be91e-1b19-4369-b536-f1eb86552f55",
        "cursor": {
          "ref": "e99c7fdc-4d3c-469b-a4f2-0da01c2b780d",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "ea69e037-55f7-4e76-86c1-27035b8f1839"
        },
        "item": {
          "id": "7a7be91e-1b19-4369-b536-f1eb86552f55",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2af631c3-24f7-4c37-9f7d-1417e89b748a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d26449-bd36-4275-b735-be2876181c82",
        "cursor": {
          "ref": "715d4e83-75a0-4b63-b5e5-7526ba77e8b7",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c59f5181-f262-4524-9bdc-3f74b4b8cbe8"
        },
        "item": {
          "id": "08d26449-bd36-4275-b735-be2876181c82",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bbd55d69-1e15-404e-a0f3-41f57f17b70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d0339c-dff7-45b0-b300-c05b031a1e02",
        "cursor": {
          "ref": "532937ca-068e-429a-8c1f-ea84d45d1ed3",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "353e472e-118a-400d-91b2-6f85cae7dadc"
        },
        "item": {
          "id": "c0d0339c-dff7-45b0-b300-c05b031a1e02",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e0caa25b-9058-4511-9edd-e169bc74f309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d382896-d655-4ff7-b251-da7d95c3b056",
        "cursor": {
          "ref": "b7621160-59a2-4611-a425-f1c0364f0f2a",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "3bdda1cb-4a62-45a8-adf7-cfaafff65d2d"
        },
        "item": {
          "id": "3d382896-d655-4ff7-b251-da7d95c3b056",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f00ff3ee-1e2d-470c-9d73-c15c3bc08986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0fde7f2-1aad-4fa7-a3d1-a7273db26942",
        "cursor": {
          "ref": "708dc159-6425-4d47-bf26-1bcdd95387e5",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "6c3492b3-4755-4b98-ab91-2c2cccd42ade"
        },
        "item": {
          "id": "f0fde7f2-1aad-4fa7-a3d1-a7273db26942",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ad550209-6d17-4ec5-8cc8-71dc365e1821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9870e72c-b4ba-4e08-b15c-c178efed2f1a",
        "cursor": {
          "ref": "4f2321e6-2513-46c0-917a-bee427ee6051",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "9f5c9aa8-973e-40f7-8a5f-b74601cec4a7"
        },
        "item": {
          "id": "9870e72c-b4ba-4e08-b15c-c178efed2f1a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f88345e6-c410-46e1-aef4-c351f079da87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aed1178-87ad-4a4d-aec3-a9b74ede9c82",
        "cursor": {
          "ref": "6bde6f90-0452-49d7-9337-ebb732d8e1f5",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "94e761cd-02cb-4dff-92a1-77983d8d85b1"
        },
        "item": {
          "id": "6aed1178-87ad-4a4d-aec3-a9b74ede9c82",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "eb3bc78e-40a4-402f-9f1e-ab15724b134c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ec8703-05d3-4488-b9c7-31d989c4cabb",
        "cursor": {
          "ref": "5aa4cc84-6bf0-4c4f-b5d5-a19f1b677214",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "3540ff2d-92d2-419b-b5ec-0c2907be8ac3"
        },
        "item": {
          "id": "17ec8703-05d3-4488-b9c7-31d989c4cabb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d04f421b-200e-41ff-aad7-5d5cd589edbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be91fef9-e405-486f-a82b-19b5feb85652",
        "cursor": {
          "ref": "0d5326d3-5a9d-473d-916d-c8bc2ec2d769",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "363bc7d8-a663-4aa9-92f9-1d9f648eefa4"
        },
        "item": {
          "id": "be91fef9-e405-486f-a82b-19b5feb85652",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "52a2989a-de36-4296-9874-db88fd316c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a274ac-ee91-4102-adb1-3f2764119366",
        "cursor": {
          "ref": "dc43996f-cbff-45bb-9279-22ab33c7a1d9",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7e75133f-1af6-4736-89d3-8c50cf1aeb69"
        },
        "item": {
          "id": "07a274ac-ee91-4102-adb1-3f2764119366",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "34710698-5cbd-4345-9f8f-0d5e3dfaff24",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "28d99288-6aa1-49b7-a6ba-2c0aaa98126b",
        "cursor": {
          "ref": "1e558289-f2ef-4061-85c6-ce0ad6dc3523",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f804fe66-52d1-4845-984e-73fadaabf840"
        },
        "item": {
          "id": "28d99288-6aa1-49b7-a6ba-2c0aaa98126b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a225b7b2-3b0a-440b-b220-77b1af17669e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4a262d-2c1e-4a04-9ee2-a9d64239c9ee",
        "cursor": {
          "ref": "1e0b5608-c0ee-478b-9ad6-fad9f87d269e",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "44ed4ba1-4c9b-477f-8101-a24e42b82ab8"
        },
        "item": {
          "id": "7c4a262d-2c1e-4a04-9ee2-a9d64239c9ee",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "beda148c-543b-4fe5-ae83-81d8912fec45",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "a3b0334a-d65f-4f0b-8f30-89c15c05cfb9",
        "cursor": {
          "ref": "4a2437e8-dbc0-4ee2-859a-7a11443235e4",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "595f481e-7df3-453c-963f-1534e8dc1434"
        },
        "item": {
          "id": "a3b0334a-d65f-4f0b-8f30-89c15c05cfb9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cddcd2e0-13b9-402a-af67-644243c52d12",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "a6808c65-d155-450c-be36-38b71f6b897d",
        "cursor": {
          "ref": "891c63a4-7fad-4eba-a0d9-be3826d08d34",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "230dd5c5-9d77-4d9a-bd26-4991e2a0938e"
        },
        "item": {
          "id": "a6808c65-d155-450c-be36-38b71f6b897d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0180b6bb-60c7-4145-9393-3cd478001a04",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "d51f88b5-5a69-46f8-93ea-d6482ddcedc6",
        "cursor": {
          "ref": "ea18a587-38f3-4344-8d92-7019b170d715",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "1cc36429-343a-48c1-a95e-debc4238482d"
        },
        "item": {
          "id": "d51f88b5-5a69-46f8-93ea-d6482ddcedc6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7cd596d0-f695-43fd-a758-835500fd5c9b",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "1bc342dc-193a-4fb2-83bb-15dea62eda3b",
        "cursor": {
          "ref": "776ef3df-f9cb-4abe-bd5d-061cd96b5952",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3e0eefed-e00d-4758-8e2b-5b4e4dd3b80e"
        },
        "item": {
          "id": "1bc342dc-193a-4fb2-83bb-15dea62eda3b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "99df698b-c6d7-4c96-a58b-048e12b911a7",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "cd6cc0ee-910c-49ca-8ac1-884c9474f427",
        "cursor": {
          "ref": "db33529b-95b5-4dce-8b17-3cea3b079de5",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "46c8bead-0c54-4ad1-aceb-d0c11f63f635"
        },
        "item": {
          "id": "cd6cc0ee-910c-49ca-8ac1-884c9474f427",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7a74ab58-3111-497f-bebd-e065444df357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf4e391-2c90-4a3c-bfff-2d4e4091c849",
        "cursor": {
          "ref": "2186dc6d-00ae-42bc-863b-ee5c294467f7",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "725d2397-708a-41ef-b069-250cc3bc617f"
        },
        "item": {
          "id": "acf4e391-2c90-4a3c-bfff-2d4e4091c849",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "875a3a13-b1d8-47d6-9eaa-6e87147e25f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fddbb126-7834-452a-a905-b42f8954d6fa",
        "cursor": {
          "ref": "441d004e-2951-4f27-9a62-ac2696b1b59c",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6579938a-01a3-4966-961e-e2870bc8b21c"
        },
        "item": {
          "id": "fddbb126-7834-452a-a905-b42f8954d6fa",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "010e7671-85a3-4bb6-a735-ae5b114ea55c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351cbbb7-e6f6-401d-abbc-64ae64a3e7c2",
        "cursor": {
          "ref": "577c3a72-1c7f-4eba-a8a6-6a2cc09f59a8",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "66389507-33e2-4df3-be29-c8f4aea62f02"
        },
        "item": {
          "id": "351cbbb7-e6f6-401d-abbc-64ae64a3e7c2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7e7a4a23-ccf8-4af0-bb05-fb0715eea628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b73614-2746-4244-9f5f-5bc4541d8cb0",
        "cursor": {
          "ref": "0353347e-49bf-4268-a807-e3962b4282b0",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d76b9b86-f770-4675-a7bf-81829c36408e"
        },
        "item": {
          "id": "78b73614-2746-4244-9f5f-5bc4541d8cb0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2c7d6678-d678-4587-9725-5268fa1b9231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79439dbf-1c8c-45e7-ab24-88a89e34dbd4",
        "cursor": {
          "ref": "94322be9-82a3-4843-99af-52cbbccb9c65",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "04620761-97a0-4211-a75d-62fa8f663316"
        },
        "item": {
          "id": "79439dbf-1c8c-45e7-ab24-88a89e34dbd4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "05f88be0-3810-4d51-932c-62acb643146d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4746ec-1b22-4cbe-9f63-6afead189143",
        "cursor": {
          "ref": "1c895968-dc5e-4a40-a4c9-797db81f3814",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "14ce48d6-ffdd-4024-9415-ad518f7cdc9d"
        },
        "item": {
          "id": "6d4746ec-1b22-4cbe-9f63-6afead189143",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8e32183e-6916-4060-acc6-b3e99e2b0398",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df743114-bf63-4945-abd7-522d386a455a",
        "cursor": {
          "ref": "5813c235-fa27-422b-a97c-f381ee5c3da5",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b974ca7f-7be8-4e9d-99b7-443a7d47349e"
        },
        "item": {
          "id": "df743114-bf63-4945-abd7-522d386a455a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "61272544-1f9d-4216-946a-878ea4c2bcf4",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "7410db0c-ef18-4500-aa15-f96ac53f2292",
        "cursor": {
          "ref": "8d0bfa80-0033-4a5a-b504-d3bd6f566bb5",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "21c3637a-13d4-448c-9efa-6484ba72a54a"
        },
        "item": {
          "id": "7410db0c-ef18-4500-aa15-f96ac53f2292",
          "name": "credentials_verify"
        },
        "response": {
          "id": "152f6ba4-426f-4ff3-929c-422f70601467",
          "status": "OK",
          "code": 200,
          "responseTime": 824,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "da52bdd2-93fc-4bfc-8627-4fba98fa483a",
        "cursor": {
          "ref": "43f287d0-966a-4bb9-ba30-2af1e489b6eb",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "30f30129-11c6-4eac-80f0-ee128b47ca79"
        },
        "item": {
          "id": "da52bdd2-93fc-4bfc-8627-4fba98fa483a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8b71ea4d-d1f6-4c5d-a697-a64750a0621c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "e1b27bb6-f48c-4a69-baae-dfead1bd7eae",
        "cursor": {
          "ref": "77482e3e-f0fe-4166-bb3f-123ad052f849",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d7e2c403-87de-4e87-8ce4-c8938b71a866"
        },
        "item": {
          "id": "e1b27bb6-f48c-4a69-baae-dfead1bd7eae",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3a28f533-145a-4ad6-b074-f6681fe6dd36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b27bb6-f48c-4a69-baae-dfead1bd7eae",
        "cursor": {
          "ref": "77482e3e-f0fe-4166-bb3f-123ad052f849",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d7e2c403-87de-4e87-8ce4-c8938b71a866"
        },
        "item": {
          "id": "e1b27bb6-f48c-4a69-baae-dfead1bd7eae",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3a28f533-145a-4ad6-b074-f6681fe6dd36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90af1abd-8da7-41d2-b3d3-c44084d36ed1",
        "cursor": {
          "ref": "5f329913-7b85-437d-a08c-de49ff58c74e",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b4bd1add-f643-45e3-8a42-48f8712e7c7a"
        },
        "item": {
          "id": "90af1abd-8da7-41d2-b3d3-c44084d36ed1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f76d6e08-1b69-49f1-b6e1-bacae25b758a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5496266d-aa57-455e-b5e5-e246c6a57188",
        "cursor": {
          "ref": "990497b3-1606-4769-9e57-58617116071c",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "42c3be6e-bcf1-4ff6-b258-006e9d6cd7c8"
        },
        "item": {
          "id": "5496266d-aa57-455e-b5e5-e246c6a57188",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "85eb531a-36d2-4825-83f9-d6e1a5ada915",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}