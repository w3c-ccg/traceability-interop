{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6f186fcb-1293-4b06-a8cf-6539b7f4ef3a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7de8727d-ebbb-4864-8f85-e945af39e476",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c453807-1f84-46e1-8d56-96119d14c465",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c8e49809-251a-457a-9719-5c1d531b4989"
                }
              }
            ]
          },
          {
            "id": "c5013b26-7845-43d3-b90f-42412dc28e49",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "17c8077f-4cbf-48f2-80c7-22b1d4cc1b23",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "57374806-29a4-4110-b8c8-dd53128c014c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "379db65e-79b9-439d-ae9f-1a4db30cfc35",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "55bb5ec5-8685-44bb-adbc-2d6ac1873610",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3d674dbc-dd24-4c83-b205-3dbe81bcd874",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fdc2fea-2b26-4eb4-96d9-f4cac35c9e40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "834fdbab-c442-4776-8c99-b8279c0f58fe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "937b8990-9490-4851-8f51-a3226161e0f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8126d752-52d3-44d9-a263-4e3a2e87e41c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "14d8f0c7-b449-401a-90cd-860ae4e0b7bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a715b905-e8f9-4fe7-84ef-cf7e51d88001"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a59aa021-f5f7-4dc5-93dc-4200e5552be9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "423367ac-73c3-4263-904d-c7127af735fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb825d4f-08c4-490a-a89b-b4a06e66aaac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49b9502a-2661-4856-8005-2719e5582904"
            }
          }
        ]
      },
      {
        "id": "961413dc-a5d2-4cf3-9b94-48137177269f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "48db67fd-85eb-4b56-be38-6075551daa9b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "82cf35d5-dfe6-408b-8c56-f9be5b673373",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "720c6e7a-b5ff-48e4-92bc-161301957f2e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ecebb6-b515-4495-8068-adf9fa6e268f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93f157a6-b3a5-4be8-bdf9-5a57a348dbcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c0ab06-9d68-4abd-936b-5c2aba0fdba5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ee977a-eb53-45f9-9c64-c8fc754e5f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "825e7d0d-484c-48b3-ac74-6b1c82336e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2efb57-4bc2-4141-9a7b-0f5356b4ac79",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dff6728-587e-438e-ab23-eb7d509d02a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "368c8035-c0c6-41a3-b135-c2c696d03362"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ffe22b1f-988f-4ec8-a7c8-8caf80ec0a66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9eadfc03-a82d-4b05-95dc-c2446c721ac5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6b8411-805d-4c63-b2b9-39719a5e8d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21d0043e-912e-4f01-b544-ae498c2b574e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894f176e-93d0-4624-9942-23da78c618e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8022d091-4d34-4efa-8a3d-1198ec81daac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5809f393-7ee5-4d1d-a482-d88c020675e7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c564f01d-89aa-474f-8242-64660628e18d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cf71525-2a1f-4ad8-8155-83142842527a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a7e7b425-dedd-4200-95a9-bf1131ffb5d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7749384-59d7-4ee3-9370-2fe94d985a63",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "474138e6-52bc-424c-8825-cb107b47c97f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "780313cb-4f85-47b6-9775-814999f65ec3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "945966b1-61e1-40b2-94be-3cb50965645b"
            }
          }
        ]
      },
      {
        "id": "aa430bd3-03e2-4af6-a6b1-9a2d362128d9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "57bf9b38-f6bd-4383-aaed-15c59c6992b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "153cc44a-cf5e-4921-ae61-0f66bd86b702",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5233f996-9ea2-4ddc-968f-879cbeb48ddb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10405dd2-db95-458f-8ca2-651902c8bf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196ef97d-136d-4747-88e8-5e33573cd789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614dd154-670a-42f1-a43e-df90bca92ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "100b464f-87ea-4572-9021-1231ba5a9538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5d91f-bf67-476e-9467-d099f798621f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef61cd3-0aa1-411a-9ca6-44a5c3d182f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f5ed5a-6282-4131-87b6-ce90e2814457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af586db0-7698-48f2-b972-46b86b38d332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1df01588-f01c-4ee1-8bc3-b3e697a68b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ed10ba-7721-4a1a-99af-610792afea38",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c5789-2ca4-4174-a786-f9d49203d8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a83417-1f31-4511-9569-9e731c74bbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b704cb3-4798-4aee-9ada-a64ec720114f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaf7fbb8-0605-4e40-8bda-025b0bdba5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200caae5-c376-4e62-b7b2-16738345c43c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10617f3-ae1f-4cae-ac56-b050fe807d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be59137f-3bf1-4925-9f07-954219350c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ee43d2-7504-48b8-86fd-f5409390721c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dda02774-e38c-4d48-b72e-d051183236b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0b38ce-821f-4f07-bf8a-b3894f02e0df",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad673f02-643a-4cac-b573-67dc0c57b0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766eccb6-fa0c-4a95-bff5-35c3f7cf8001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab247ce-7fab-4c5e-8886-335a8ab273eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e69187d-1c69-4529-9add-af29874a3e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531b2d83-5847-4b6f-b37d-d380249737fc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21d8046-120f-4f3b-a979-63f6031312f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0933937f-d7e5-47a0-b021-f0f3d1728b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a76b44-5f9a-47ba-988f-b0e7e6b693e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc346ec8-0a98-4be2-abef-7c6bbd14677d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f5203c-cc24-4529-8be0-9dc89bd1f6fe",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2ced4c-ab48-4a57-8541-1815dceb2105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad4df23-ad63-46ec-a896-113646bfcfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7feb68d5-5d37-49e4-a103-b0d122783617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50541f9f-c33e-49dd-b7b4-d85d3cf0d643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d46d1d-f342-47e8-8ebc-ea53a77dd9b5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cb8564-1fa8-4763-9d29-a55dc0a332d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde840ce-83c3-4d06-a14e-cc5fed8bc949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59ba6f1-e9f7-479b-88f3-912f5e27e63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "421b96ee-17bb-4f10-a2cd-2ab1ef2050cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09934f60-492f-49f1-98e8-6e7d8e8a31d8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0243cf66-75ed-492e-981c-2a56c9647176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b9fd0f5-f3ec-4ab8-bdd0-b18d785aec12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e333a20-29ce-4bec-9e5f-26bfab7cb65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfd3e892-8282-4108-ab24-0ac96425223a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f5cd04-2eb2-417d-bbce-6d605c90cd08",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5530addb-43f0-4432-8ce4-b3ad99993596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac76380-d3c6-4bb8-9cce-7488fbc28654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa13126-2420-45de-bf63-af821a5d45cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdb756ac-3171-4158-9b6b-eea46f2650cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358611ac-7e97-42f9-8a62-1672f2d47f04",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c805acd5-f27c-495b-b33d-2f671aca9e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a112a15d-8f7a-4ca7-b122-95ee3a64d8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7122b0-5b71-4bec-81ce-d5e86b661326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a9a3c05-983f-4e42-9b25-c6690346b152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85df090d-1606-4c86-bc8c-037e7acd656c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420f1b8e-c39f-47db-aa58-d662d7c993fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c0ca669-9c82-44af-b6a4-046ec4dceab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7692969-7079-4418-8b7a-03f001308b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be671635-cf70-4a55-a810-3c2f611b9136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f5ef9f-2859-4848-920e-535499338cfd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895fba4d-b722-45c6-9adb-c2a7ec51f5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ee139e-d7f1-4ea2-81c0-9c28f9c1a07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dbfa34-d38f-4722-9552-c531c4dcc6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "128b2045-f80f-4026-b15a-abeef17b683c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63ee161-b98e-49ec-b0b0-5ab9f46c64af",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f8bfa1-e16b-4d3c-b6ed-218c61c774b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5842c6f-ea3e-40c6-8da3-6b370503ac23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7762e75c-314f-427c-bced-fb204b0e4e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7a48165-a531-4984-aaa6-92359d809095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d179dc-830a-41d7-9e2f-9a0277d9b26a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fdb0e14-ced7-4848-a4f2-1f88fb293460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cdf33cd-5499-4ef5-a0b6-ff897ffcd5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766e9b6f-7c7f-4b26-9ab1-b7417a75e422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e722f6f-5128-4474-b495-482aecd52c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1228dcf7-30b4-4be5-861f-0fc9dce80327",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1867ae18-bfa2-43a4-b88d-c1d9361f2fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a34a0ed-722d-4528-8d8a-c9eb1b595309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bd22dc-e643-4f7b-9922-4256fdb52840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcfa38a6-b078-40e9-a996-d04bfbf4de0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327a372f-d6cd-4ab2-b84a-c6d4c3f781cc",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fba187-7908-4a65-86f3-17b5662613de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03583819-f6d9-4538-b1c6-7251c0a83a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e479fe8-f9e3-40be-8b04-fcd37f260219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4c040de-f108-4ebe-9079-9712d501dd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13cc8a7-f6b8-4433-ab14-14ec2a85eaf5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe684361-3574-417d-9312-d304fa7839b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7803b635-db5c-4edd-b594-046acaf2dfd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac6dcd6-57d4-430a-8de2-0091a0659495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "42e80f4e-e41d-495c-8551-af21317f96e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2add36f4-0ae5-4c5b-ab3e-a020a1536f5e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66f7cb3-594b-47b1-b65b-bf5fbbbe5417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fe5434-df82-4955-b34f-815b791d7385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb3d359-dfa8-4470-bc4a-d4dbe763fca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8378a32-892a-432d-a40e-1257ae768523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d2a974-3bd4-4765-b97b-58ea27110fc7",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b020c566-8ac8-4507-a9d1-f0764b53688b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b445dd19-676c-44b5-abb7-8faf58a4b210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7130cf4-c848-4ddd-8d5e-57dada1be5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88372b21-03a3-4307-9bcb-39ca0f0fc42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7656e4-0159-4c82-9256-f51dd4b676be",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800900f1-773c-41ae-99e0-4b2dc9fe66f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f6144b-5ec7-4cf9-8724-d3b4d8945f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a03b39-7f3b-482e-b9d6-b289394df09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb18b268-44c7-456c-8c21-84b24f079773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cceb5b03-b067-4343-a264-5fc80548624d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89280e7b-0a54-4657-8fb6-65ec341faf3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5e71bf-8361-43fc-aec1-43fdb64ba808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4bae7f-66f0-4f4e-9196-a3955defeb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa8e558-d713-4a5d-8f49-0c4842fb8ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9598fb71-2f72-4c5c-b1f7-8c320d7d9e5d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f614aff-ea19-46ef-97ab-6d64030913f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ecdc96e-7073-4d35-89dd-44e708321ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4696050-c382-4f90-ac75-c685d9ca8c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb11a05-a35d-4f1b-b9fd-405834c54b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96f30b3-276e-4a72-a898-2912046bb43b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4911dd94-eb2b-4282-b9ac-262a4a8a1772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51def597-decd-439b-a36e-388803cdaac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd6c6e3-6e55-4f7d-b00e-fa33a39a0408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd229292-ec92-4da8-ac72-df1a7055d08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc84c72-207f-412e-873a-9953afe6d9a6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a44918-ceac-4b09-ae57-a483fb05d90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72cf3bf5-3f9f-4533-9ad5-bcf951b57954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04565211-1b8b-42d0-a217-1165b7089950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9669fad9-67f9-404f-baaa-bb487f09fc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07895ce5-a89f-426a-9929-96695862ae8a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23e981f-bf90-441d-be09-e6ddc5ea1203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad05f84-5d32-487f-9445-4255f1b9857a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c355bbc-f887-4c02-9afd-794a8f521fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2840fae3-6d18-496e-9774-0bcb642b6b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ad0a94-1693-477d-b6ec-9262af072f0b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250545c8-72b7-4305-bb4c-f1acea700f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d58f474-b765-460b-9a10-0e57e0c4af85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56301f2c-6668-4de5-baf2-e059b097ab33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0eee23f-273d-4156-bd6d-3bdfdd444145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9725e4ed-6b76-48bc-842a-9c114ee16b40",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41016798-97b0-44dd-82e9-8ef9d43cea15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1121d0-eea3-4ae4-a30a-dd4f5967a1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528759b2-7264-456e-aa60-7e9eb3f803a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dad8c3c-dbea-488a-91d0-c467036f7343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acad1b60-5c6b-4c8b-96f1-a01c9918744b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8687cf-96e1-4e98-8aff-f6b649e49b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2c37fe-7860-48f2-8843-3dd30b63b682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a26f2b-de52-42d4-ab78-27ed7a9177ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "93a64383-9560-4752-86eb-869d1e5ae3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e6efbd-cb22-4b95-8546-39c8bd0e6eda",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fce9c5-4655-471a-b921-09edcfa79c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321a8fa0-e7f7-4cab-b797-8715d3319bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6792c288-dd5d-4a50-82e7-173ea9cfe7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7fb86d5-64fe-4342-8f73-a02844666445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24121b3a-f45e-4ae5-ba68-911777e78692",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee141496-9885-4b82-8be8-b278a8e85aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962c5950-09e2-407e-9036-4955cab9d9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ec5acf-0427-4fb0-889b-3008f2a2fc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f11293de-ad51-4178-b3b2-4b466e65e328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed2c44b-a332-467c-8bf1-ff91385cb6ca",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1e7283-d07a-4d0d-8a79-1eabc6bbeaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbf8c13-6e8c-464b-a857-2e02e400d618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1226eecd-16e5-40a8-b416-b35181395fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd4ff855-f89f-417b-9c12-e7e78f8547ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83de8e9d-d78f-46ce-9075-c8e9ab896392",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a025ec58-81b3-4e2a-b92a-6e48591a904c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "009da287-5202-4225-8075-400cacf39711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a12491-5294-4757-92a3-b53a8d98eb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e62250-5ae8-4264-84c3-161d7cc44520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be81aaa-b057-44f8-83fd-d0e22ad40e1e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c95f92c-8981-4f93-b6a6-f1483bbe3076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc431371-9e19-4811-8fac-afbbbd3926af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddb5fa9-1474-4cc9-9d8c-884dfee3c5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c281fb20-821e-4af0-9485-c398a29b6194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a1f143-cb49-416e-be71-af1853c891b8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7898e2c0-7b14-4725-a51e-a75e28e4843a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e5c249-468c-4869-a97a-f6ca0d0f0c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbd3bcc-8469-4fce-a166-d7457cf9521c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7af90c-b7aa-42f0-a958-4018440f87a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859b23b7-9e43-43fd-9037-5e94ed5c131b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a243a6ac-e266-4adf-a30d-a0ef06a81dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d041a952-ef34-4e92-be87-04dae21fd70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbf4975-9433-4974-b71b-141a71c1b7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8bc28fdb-88ec-4998-ad4d-ee3a6f3a4cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63a0336-550d-4fb6-92cd-5e2e3a87845a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711ab17a-5d52-4b2a-aff0-946175c266f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03499fc8-3e3f-4dc3-9e38-89f86d2e69df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea2e85f-c0f0-421d-83d6-a5a540cb5bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "867f3016-5554-4d9b-9351-0dfd6a531d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23913ca6-7e4b-4c99-b6e8-614ec1f53f3b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9d87d3-a3c0-4b50-b961-6caf454c6c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7072fd54-7557-414e-ac44-c5351c4aa960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73ad9ab-4afd-4ae4-9010-8062451383be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "15d6c86f-ff61-4716-8b8c-dcb57eacec78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c882b3-fcee-4b8a-bf73-b16cbb19a7d9",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779eecb0-7029-486e-b684-cd4ab5351ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6331cfbf-6828-4b0c-a35b-b3e22e9ce8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c81f3b-5e0b-40e9-b070-35d90e4fd203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9904af7-cc4f-45c8-b718-23aed30640ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e28233-79de-4459-a470-e96916f45881",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8d6882-d243-4aa0-824f-1fbaa62b239c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f9f68f-a85f-4a91-b6fe-21ff6ba41006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3040a8a8-8a73-488d-b857-d8d4ad07fe9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "016f8716-2553-4ba5-992b-d8bd8fb57c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2b630a-f059-4953-806c-53f4d6bd8d35",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11aeb2ad-c5eb-4ee7-bfd3-fcbc73466dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0364cb59-3bc5-492e-b00f-79352d554549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c91dd9b-0cd9-4018-86c0-d0f90299da80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cabce823-21df-416c-9cb4-1e08cb8eac10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde89de4-5aaa-4f13-b68d-4bed7c67b0a4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1435023-91a3-47a3-b6e7-8e507c916439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d669ac-b71b-4d90-89c3-2aa52e400eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d93f0c-0151-44a3-886f-e03df2f183ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "320c6f8d-36d7-49dc-b3af-a9a47f7226dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8aa7671-2e0a-4430-a9c4-beed6acb2fcc",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50fb9f5-42b2-483f-b9f1-07e7780fd5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc50ed5e-beed-4646-a24b-cdfbf3a3854e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e0b2ec-8c91-467f-9bff-b8a529aac9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a877f961-80e8-49f4-b452-c88778116fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfd06f6-3ae5-44e9-9a63-df586a5b7a8f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83813c35-4c51-4337-a8d0-5d2b7b4729b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3cc9d72-5991-42dd-818a-36383c093fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660d1498-5c1a-41cd-9435-c87f6461d4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3316c3-cddd-4b7b-bd17-8052baeaeec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eae87cc-437c-42ff-ba4e-bb2c1ce71b32",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7305d5-d715-40b8-a1c2-17b67e903a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "accf3c6e-3575-4afb-8bdd-88cc32c5fd4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36a4586-8cf5-4642-b42e-dcd9409dc790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "faf95f83-2d48-434a-887e-fc298aa780bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdbb0af-731c-48ed-8a78-14c33fccb8fc",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e72949c-1db4-4bbc-ae14-dc2079a479a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4357efb3-071b-42f6-842c-f23d0b8a877c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f87910-4890-4897-8688-a26f4aca50f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ac4626-64e2-42e3-bde5-23035bb5a9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0773ca-1d0a-41ff-8615-8477f58d2868",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c472f0-7462-4a73-af9a-6a9316f7007c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6370ba21-4ba6-43d8-92fe-6964e661f2c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb51343-1fbd-460a-80ed-d4db850c89a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b7a607-6b62-45f8-b8ab-c2ed16b825a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd54a4c-40ce-4e44-9849-6b390279d14f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "022ec7f0-36b2-4c9e-8752-dbff2eb4405a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327a4951-692b-43d5-83ab-bf9da08c5a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbb759b-2555-48ac-bbc5-966588d66a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b571010b-9cfe-4b48-ab89-d0703311b54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa17345d-ff78-4f9a-80d1-2eba90998b21",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3bb8d0-3fb0-41bb-936b-ffc1a2169e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b500db95-b5fd-4c3d-8c57-54a2305b4969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5e0089-8e47-4cb9-8d06-f46509851b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "598209ad-171a-4027-972b-f36d78791632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa19996-27c0-4ee4-a774-ee54765b0b33",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f34799-0a75-47e4-a698-39f76fe60c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1e4527-ed8a-4177-a63a-2c4cc47cdbbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6038cd-ad5e-488c-bdda-91d53f7ae66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba75104c-b036-4716-8ae7-1844c4d86c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9f0c2d-56b6-41de-8c0e-93476b2db981",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1c6c48-a8e2-43e4-9418-c6461af20d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddc484a-8576-4b41-99b9-d95505805bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9575ef-a3bd-40f6-9a97-1e4751a49178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1043e42-0362-45c2-b1ef-660f7319a38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ecfa93-28de-4c10-987d-987ff78c842e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16820cd-1803-4d60-b55c-d0535c503dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53665ec7-5ecb-4cdc-a62f-5af23b222b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689054ef-bce2-4a89-aea2-537800d694b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ed6ee0-a75f-435f-bf2c-58fe28357490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a072deda-2777-46af-93c5-7fab5226ac30",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733d45d6-3507-4f7c-a9ee-e58868b5f14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5c25e5-e4bc-47ea-98ed-3d98117ea985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3aff9f-1d6e-4797-9eb5-568853bc141d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05c8d77e-bb21-4bf1-8508-2186f77e2ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684843f5-f11f-4774-8768-ffad8ab715eb",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fdc968-831d-4b8c-b517-51ab1f6cedaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab52e458-6523-4e19-8517-2a75b3ce908e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6b3241-0dba-4b0c-8d80-326a9b0652a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "260f0160-843e-4df8-8507-824fb3e9d4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1d5b39-2c28-4b61-950d-6e79278f878e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de66940-4b39-45f2-82a2-acee1807b17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb61833-afbf-43d9-8ee0-a2e4a2c2b708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611ffd3b-0b5e-45c2-96ea-b57e7a9fb364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2983365-37dd-45ad-bb69-6129f1e34b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dae3441-305a-4dab-916e-01451e932cd7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1673bd16-0dcf-45ae-b3b4-4b16db20499e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21e330e-6cb7-4f60-93c0-7b2d9264c404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54290594-4290-4a7e-8ca7-44d425d11d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "be693ab1-0c2b-41ab-9136-c767d3c2bb7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfaa93a-2f4d-41a2-86e0-2df91fad2aa2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d8d90f-b76a-4ae1-beca-471add18fbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0005fe19-60d7-411f-bf6d-630976e1fa9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab98fb3-7310-4707-a86d-ad2a6f8d21a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e48dd742-0ba1-4630-a896-fbd6f92736fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858c3729-08de-46b4-a623-ce410c7c7076",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9591d6b-d771-4ba2-b1ca-b4f19f0209f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcc6964-5208-4c35-b3db-c519601c02c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c93164-4757-4132-8a1a-1556c34c4a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ef63f6-35ef-4284-9c69-39d0db6f6a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57cd2f4-e9aa-4cc9-ad0c-29a77184d484",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83907c3e-6993-48c1-a7dd-2f0dc173751e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205de193-e9ad-4e1b-bcec-90301b0be029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcdba690-b578-405a-af25-1d2aed2e6658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b9c396-25c8-4d5a-9454-6a6b3622f292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5baf06c-c708-4d1a-8513-b0ce2808a118",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f7c3a4-693a-46b3-b569-4a9fd2b8237e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081895e1-889c-4681-9dbe-6cbef45515ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f986942-747a-44ed-afdd-d47f37fda65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2888f7b9-1d31-4fb9-9e6b-7adc916ded78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e9208e-1e50-4530-ad86-a836b51dc7c0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb349f46-97c2-4a83-8e13-a079eea174ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20e19d2-6523-4717-8f7b-f63afa130205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92076f46-b7ea-41be-9156-53da69d97b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6c2b99-792b-474a-bf59-a8d6951ad1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bc1af2-c17f-47f2-b323-9cac055d3054",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c121591-3fb0-48a5-9cba-12ab0b2b7fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2de336-8c58-459b-a4d7-1354e13cd4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e417765-af3f-457c-8d40-de9f128c037a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea1b1a19-fbc5-4ee9-b9ac-537593d2bcdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a954b15-85e4-4b0b-9393-bcf3b607a6c7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76d7add-9e96-464d-82a5-e5d1fabe148a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3098706f-61a7-460f-8caa-ec4d8c0aed11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef581e6e-2f53-4f74-a12f-f1c41e41129e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bab4bb08-388c-4775-9674-6868a1931283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca6303e-00f2-4363-8d60-728acb66d5e7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc0bff0-f42f-4241-8f09-570a3fd29416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0772f13-fbbb-457e-8158-7b36f96fe242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e965460-94cd-4957-85ca-f1444eb5971c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34a9d983-e034-49a8-ba29-cba7c4178f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccdfaeb-61ec-4a6c-b552-ec4123673cea",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0f9db7-b5f3-4aa2-814c-b165209830ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b67bbba-3c26-40e4-989f-31b5fc84ecb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8659c550-f33f-46dc-8c4a-1e1279dccfea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fe1d33-e7f3-4cc5-b0f0-821b626d9fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e197bf-f624-40a5-bb47-06083faa7483",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded1711d-fafe-484c-8cce-c3c1ac2d2517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff842e8f-d4e8-4137-bfbd-d4be1204abb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590b41b0-9d8b-4e1b-9336-d52f20b49a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c67d991f-2498-4d26-a416-6a191e935c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eeebc99-82c6-43e4-bbed-f6d49a0e3615",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df459fb-7a8f-4d38-94c5-ee5acc248548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2f9f7e-5463-40e7-aa74-daa8e3746efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4d37d0-f73c-40f6-adfa-123eaf60dbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dfbb7977-970d-48e3-8c8f-4f26109204c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90454bc-b0ee-42c7-9809-69dc1d45f4d9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9fac6b-78dc-4965-8156-7f1a5e80f12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615bb4cd-5162-45c1-b3c5-b289db6a885c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5e74dd-b6e7-4699-b822-fe687058568d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c1aaa5-c8d0-4a4b-8ce3-e9b5a7b1dd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715c83ee-110c-4939-96d8-8c45b160c648",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570ba913-c8df-427a-8107-85b37b643bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0cfff36-920a-4e9a-b3f7-647d5bde79f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f514f163-6c23-415b-aa83-9983efcb03f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa6f730-eb4c-4987-98c7-ad598e8dc6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0f970f-e8b4-4e3c-91c4-d71f041459f4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee58be1-01c7-4da2-bd71-22dd0c6d95ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce74bf1-0ccd-4829-8eec-a90650176637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fac3e78-a8dc-44fc-872d-d51d8d38e880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "606f77fb-2d50-47f3-aa81-df2bd993fa0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a7fe93-dd0b-4038-8af8-4bf3bb210c64",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e494cd-8f35-454f-97fb-3dbcda00c1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fefd8f8e-02a6-4d03-a3bb-4a2d462e8516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3df062-148b-4249-be5b-911505476bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c71cbbae-0f0b-4da7-b7a8-542cfa5d30e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be83cdf8-4c84-4baf-ac97-d3dbb09ad8e8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67cd2cd4-6679-4c34-9187-ca52aa6a37fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3cd6c2-8290-4428-a30e-a72f888ef222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb7df15-65a5-457c-8cd7-0e86a04beef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d48cf43-c676-494e-8917-5ed0f1fe73ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f65b39-9902-4200-bfd0-be978aa0210f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380ffacb-1b5a-4140-8cfc-c39e2c6d0cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22369bbd-fb64-4a1b-a562-3321c3d71d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b419fbb-8a55-406c-9fb4-52fba2d6961e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "51e2811e-69dd-439d-86bf-7c0f6d1c77df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8113dc-4387-49fc-beda-84444dccc5fb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fd8180-a0e5-43e6-8cf4-f53efda320a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711d4555-4551-4fce-8db6-8cdd76efc484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87785f1a-7cf8-4ec8-984c-4c1de43433dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffa7ac9-52f2-413b-a2b0-bd97dd0c6033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612201fe-1084-4c63-a156-718474e84367",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d4470b-6a1e-49a4-93b4-834b741ef094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82521bef-fb71-4aed-aeeb-db076243d4bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae333bea-a163-4eea-b578-d483e4b4a48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1d6a37-55d6-4126-b709-b997570ff674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9556919-1876-41ef-84fb-5643cac48f5f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4108d34-023c-4b15-bc1e-fe8fcc4a8428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa589b1f-315b-4750-8aa1-46c68ec20ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42effb2c-b126-442a-a555-8059173aac8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43ce6118-d8e4-4e6e-afdf-5a63a18c2b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca48845-8b42-47fd-a0af-b482432561a6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6241247a-4127-4f7e-b50d-f7e432996283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf179ee-6f24-413d-a024-0d9e9739d9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630e6e21-e252-4654-b4c3-5d14a46f03d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a05c9229-a544-42f6-b7ce-38bc7a85fc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d315458-c4fc-4d3a-be7c-04d0224e0ffa",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ea16b7-7c33-42b4-bda5-9e7ad27a3dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d90a3e7-f2d7-4ea9-832d-9ac7010aa218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8574916b-52af-4dc8-8922-4abce1ab1431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a00e302-6551-43e2-a07f-64a14679ac78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32d94f5-6de0-43df-9b26-97eda22132fb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5dfa417-87f3-4f00-9ab6-7f5d4ac24f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68be8fa-6c4c-4d78-bb4c-9250b1271eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f2a136-4dd6-4564-a7e7-a68ab6f18e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33cab87d-d20d-4e3f-b1c3-1ca48a908653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf57c0b8-7bfe-4a2a-a38c-1e5aca53e830",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f2e2d6-196b-4b4b-b968-d3dd1a13dccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "613b5ee4-dec9-4ea2-a81a-e6c94585afa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb65d888-2506-4001-8290-d0b5751fb631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cae61958-dc12-46d8-9267-c6fa1bfb0d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0519691-6c28-43f3-85f4-77218994a22f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788629ad-a687-401d-b5ca-ad4aa7ff95bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359d238f-9a0c-43ca-a59d-5b3a23f2e3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbf8372-1a22-44d9-b06b-40d154df7ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2565a0-055b-4418-86f5-b4fbb6f352d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08074a0f-c416-4034-8756-5241a2476e9d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc60e26-e1c6-476c-b19a-c7d999bd0c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69befdad-ec73-42be-a721-7d95bb4a5809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a2d978-e35b-43e0-a943-bb8f79b5edae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ecd279a-474c-4f12-873c-45bf80f47daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcce89c-4c0d-4040-aaaa-610d9a3ddb57",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0fcc47-899b-4182-be7f-cb72a9830d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae625ef-ecad-4d03-9c70-8f32f77c6450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12862a0a-5cba-4b7f-9969-d421d2d82840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82a46b37-541c-457f-9394-afabb98fae74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5958a721-10b4-44a2-a761-8eefa193f7b1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95219de2-8a77-42f5-9026-474bb65e667f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9968ef0b-661d-40e6-9e7d-57c9c0aa804a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3cf6ec-30ac-4159-a875-2aa434679d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a15eb6b-7fd2-46c9-b547-95f4ad41b300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e59654-d6d9-42ea-bbe0-9d2ef848fbed",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe40607c-5e4f-41b5-be9c-e294f9480826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8517b65e-86e1-4701-bbc6-774173811fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7dac0f-16f1-4eb9-bdce-e45b0b012b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e99d87e-1ef7-42f5-84fa-4282948a1990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a92684-f575-49e1-856e-552eb479e7f2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ed59d4-21f7-42a7-8ade-4805d621aa62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2046b9-ddd3-43df-916e-95967b9a494a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d816fe66-e418-4afe-a02a-249e61d182b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e27a36-cc77-4278-85f7-4d33f56ac4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd551f0-c59e-489b-afe8-d94c13469070",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c393f800-7226-4f3b-b242-81ca855296be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389268e6-998f-415e-beae-ebfdd882f1e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15905854-88ec-4c4d-8a3d-c52b3011e62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ca0d4d-4e54-49ba-81ba-87be949be1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd91e79-fb78-4dd9-b2d8-25da4ccaba76",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e2285a-7ac5-4781-866b-cbe66f177839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe90fbe-ac9c-47e5-802b-f6ca3db142fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b01f23a-5011-4d24-adef-b20502728730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb07dcb2-a427-4ad0-94f3-2d98fb862f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7d0d94-a23f-4367-87ad-e8b4e7ec9fa8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e77b737-0339-4a32-bbb4-a57bef3295f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278ac8b0-e2be-443d-9e23-090212d376c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d88b8b3-e138-476c-b256-2fc8ee57a91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f83b0fb-11c0-44b5-bcd8-c22b18a35c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792d96db-2160-4366-8172-b9f7236f304e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d802c92-ff7e-451e-8ad4-da5c15569de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb03eae-7dd0-4958-a714-168fffaff15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dfbd7f-58ef-493d-9b21-b4ca3f006b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "84eb05aa-b8e1-4c5e-abeb-23473bb1ab91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e7a89f-c2d1-4f7c-801d-d3fc3301712a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14e3dd5-adc0-441f-8827-960f7d414b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb733182-edd7-45e7-8fb5-6a6f12e79477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7578e2e-0e2b-4d17-ac56-d89d625a3fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0076eaf-7c7a-44f5-a88f-a0c9a41c77b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11aed909-c6be-42c8-934b-4ddcce13c856",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3869b4-eeb1-40e2-927c-fb1ec2fcfa98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "aea01406-1855-418e-a28c-60e7e2c69e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4965914a-cd72-4d22-a984-7fd2f31b2c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d175942-bd0b-44df-9416-5618bdcfb17f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a5215a9e-f61b-41f7-9b74-219e3d141864",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ad56933-38fc-43ec-8c24-67a989bb5bcd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5add48-a4a6-437e-adda-4daa39b6e954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ceae7b33-7bc9-4689-b34b-8aa2712170fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dc4c7b-b3bf-4d50-84c8-0169a2fa3684",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c9d352a-2f87-46d1-ad58-ec05c6c8d1a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f1c0e8e-27e9-46e1-a4be-0c5b3c49dafb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e4e7db0-543b-4d49-864f-9a387371f8c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "23747226-b311-4f8d-8f64-af082ff4ece5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3c9e2df-644e-4233-a404-1a1a9ee6dac8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eca11d82-1fdb-4990-8e1b-c7139970d9fc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39e60110-ca48-4499-8ad5-a12254c48e43"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "801139e9-a577-40f3-bd86-6cd51533b32a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04120cac-bb2b-445a-9a92-de39d25d5dff"
                }
              }
            ]
          },
          {
            "id": "7f121c71-8123-4137-bb6d-8950588575a4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f40b629-907e-4eb6-9b59-624b712f7fd6",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65d0de6e-e640-4e00-a965-0ad053f0e4f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7dc9a049-7e4c-452a-b468-93b9dffd52b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "309497a1-f49d-402a-bc7d-2d33d1f415dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ce773e30-1f9d-4f5c-9696-a41595fcef7f"
                    }
                  }
                ]
              },
              {
                "id": "76c39a92-2593-4819-ad27-a08192ec649e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abe2aabd-c133-4e4c-bd69-4deaa2b1e3c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "428ef94f-1c5f-4bd6-b1fd-bf9f5fc525d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5653d4c-e9ea-42d6-b75f-fc1baae1c203",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e143b5f1-6834-421f-9955-575e1285dc41"
                    }
                  }
                ]
              },
              {
                "id": "32e46841-8912-479a-b0ec-3144768544b5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8dcb903a-643c-4730-af4a-4e32e9b660cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b4f93a5a-6417-4bc7-8837-2bb189b929ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a8f8968-b1e2-4df6-ab86-25444d4a3def",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2cac249c-aa77-4bcf-9738-d2b6b3ec2fc5"
                    }
                  }
                ]
              },
              {
                "id": "ca4438c2-4385-49dc-9729-1f70afb17f6c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b62ea01f-414f-4dd0-ab7a-377d3d453b01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa70da75-0010-4083-a92f-8dc887b79b3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41bdc411-3f01-4cb1-b27f-28cfdf3e7bf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "340ac7fc-ba9e-4da5-bbbf-8b3027ba9dd1"
                    }
                  }
                ]
              },
              {
                "id": "7b94ebc8-05e6-438b-b4b5-92fe1feb7974",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a80c9164-f13c-4efe-a253-de7ed992f205",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fcb91736-795a-4938-9c41-33b9c72e6237"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ce9fc69-3d26-4edc-a1f6-53c26635e989",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "66cab0a0-2948-42f1-9b26-6c319b7b66ba"
                    }
                  }
                ]
              },
              {
                "id": "df6fe6ac-b652-4d95-968f-36a927bf8aea",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db2b67a8-5ea6-47a1-8956-3a1c9a97e362",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a29813c3-3776-494a-a5ed-90bc126c653d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "691654a0-1201-439a-a5b5-8b8267c64949",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "57751144-b412-4bcc-ae7d-9a808ac2c69b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7e2b695b-b06c-40b3-b033-f50efd637ff1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "76529511-3a4a-402f-a21e-3f723dd21d46"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7f14182e-8d3c-4a55-90a4-8a1f2317cd2a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bce424ed-8a2b-4562-aece-3c31c8f30c78"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10180622-c8ce-425a-b6cc-a3c8712c9559",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "30bdd23b-a4ac-482f-a388-c2fe1072aba9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0d4e97c-c067-4432-abb3-058e705e182b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b92248a5-28a2-4782-a1f1-2bde5c695f3a"
            }
          }
        ]
      },
      {
        "id": "a80e7ac4-2f77-4d02-a023-79687d6c0147",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c45008de-1f89-4c10-99d0-85638c668bb6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f77b8cc5-0c61-4337-9d7d-7dd6db5c3f54",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60914745-8d61-4578-9aec-5f8fee38d9a5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b2e1ca-0847-4b62-bd33-fd991008f5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ed7667-1884-49da-9b19-729b53c2712a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4df5a5-fc93-43a8-8f39-7e6b516fdc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6544b1d-947d-4cf7-8933-988498c2b970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d2e90e-981f-40ec-9ba3-4c52a92676bc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fe7de5-8f47-4581-8e1c-edb5fcd758f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d435566-e12e-4fa9-b376-c98b0141a8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865151ea-eca6-4981-8ba9-ac7720522e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aae044d-2750-46dc-b248-056065da53bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5559170-38c2-438f-b2cd-0f254d1d0461",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7452003-d17d-46e1-a6d1-380e63da3977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578ff862-9d6c-49b0-beae-a468c086fbfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fc82b0-b696-459c-9a5e-092dc6ed28b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "667eeea5-960a-4b0c-b7d3-5e54d438fe93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8ec9cd-544e-4f01-95ac-9919dab4c7c4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97e397f-8f33-453c-9931-c33ab2a06575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678ed1a4-f1d4-4437-bae7-fa2fc5222843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d78703-5fbf-4c79-a11c-9c2860c77d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f3badfd-adc2-425a-99b2-93e978131582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf4f22a-c484-409c-b125-9bef8d40c8a9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79f21ed-7193-4d45-98d6-2c8e7cd7f564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4f2ef7-5f06-42c0-8d72-421dcd828b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7895f0d-3b02-4c38-b899-4f793873eebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab1480a-cb4d-4ddd-a4ce-b1d121e24782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2028ca1c-7829-4c41-a65c-62ec829c1081",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9000f7-71a3-472c-9f45-c83a4a3bc0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b43d0a-3b1b-4035-8452-9db546be9b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce12486-00b7-4620-8af1-63ef83ad93f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "834f8531-8dd6-4bea-9ab2-a1091cf00713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5559ef-7578-401d-bdd0-f90e089c38ed",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f82ba7f-12a7-4754-b3ed-f0af83fb7072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3885d4-54c5-42da-b9d0-ea59a4f464a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0921771-555e-4949-92d5-22eb3b28102f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "443b6482-5270-4ee4-bb81-6be9dea266d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d180bc-27f5-4946-8c96-afb3dd6f1dd8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13b80c4-e01e-4489-a14e-7e772b2de255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084df6f3-918e-48f5-bfc8-64525775e182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6fc6ec-c1cf-4294-b511-5d98a668411c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5065a402-c241-496e-8079-c45093c9fc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb08998-c707-40a9-a08e-43b370c0186d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032104d5-9ae5-4518-81f6-ed962ac32adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d7dec2-ffcd-4d23-b63e-bd9e0d09014d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3813b1ea-9504-4534-8c93-f8c91122352d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ab1ab0-aed3-481c-abfe-f294a85dca8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a693320-4772-44f1-ba54-c69be74a1908",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52f6bfb-e7a7-41fe-b500-4e4137f27a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b6e73d-d457-40f2-b969-527973415670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843cfb4e-c57c-48f4-a549-435a8813f249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79eec716-43da-45a4-959c-ea3ebd1da041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7909e49e-99e6-4c78-8247-a377eab29367",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb732c0b-c76a-4273-8514-7d87ecab6678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d18f059-dfdb-4542-b047-83da8006bf49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fca6c3-1c73-4b11-8aa9-f007660a1b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc57e66-4845-43a2-bbd9-132bc8c6c9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3fd630-c6a2-4a02-a628-056acbaae628",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bc0200-b860-4116-92e7-8761b0c1acf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf50f1a-f2ce-4bff-9505-1f999557a2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4a70f1-e198-4456-ba51-88b7cd6f56e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64f8df80-2b3f-42c5-912c-3311c9507fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984a5bf1-248d-4052-bc0e-a0ea278ea147",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c77b44b-e016-4c9d-93b2-839711cf8184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113669db-2e5a-4062-afc2-fab704114caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7d3ab2-1313-427c-b73e-12c6a2eb75c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ffadde-845d-4799-a1f1-84a1c512eaa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9d2e0b-a9eb-4047-a4a2-36068de40fa4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91d6769-d014-41c3-bd8a-f068aa5d6855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7bb039f-8267-4855-b70b-dba2b794e189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6f0b0b-39aa-4982-b741-605e61de08cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2df1f45f-12ff-4364-af66-afc4092a6463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b36e1f-de6a-4dec-9818-9172c168af6c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54beb894-a9d4-4ff4-b661-0c125cf60e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8244b0ac-52bd-4191-a22b-4a1594951663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec82067-71b7-4706-9d31-067a9bc24721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "261c8fe3-5d30-4c44-ac95-47c07061fb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba3c24a-5838-4824-8df5-d159850f72a3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3e0771-3754-4c83-8495-b7a8a92ba890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75ef260-5a73-49b4-aca7-05b65a24b590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30da725-424e-4cd6-a72a-ee806b7dab32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6349b86-7138-4500-877a-867ef650c38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774ef61c-b30f-4eb4-bf74-52cc311530d8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b14fa9e-54a1-41e2-842b-bfa3359bb2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a315f4-4001-43ab-a60e-2b4c8fcd9b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f4325d-a201-4282-b5c7-36f39de8987a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "347db5bb-627c-4505-bbfe-d469eea85bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3068d5ba-3970-4a4e-9caa-c10456686c4f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c1b39c-4e88-42d3-9804-ef16c3d51581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b21dcb-83a7-4830-b5e6-ce6c8238c994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0284fb-2483-44ec-9368-0dfc0d25534f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "feebf6cb-fcd6-43fe-a67c-6734f03b8f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c96821-11e6-4e17-9777-58181b5c944a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04895fc-1737-4125-9a68-9ea0fa8e8f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53f8b02-12eb-4d99-80fe-ed2eef2dcf11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1701e298-e3a6-456d-aabb-2a0b8b14cdf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab2042d-6c66-49f8-af97-ee7ceeccf948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4571acd-1a17-4125-8d24-ccb2b6608464",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e946a0ac-f08f-4a65-8e1e-5c83a3d635d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dab76d4-a042-4581-b972-f77594d53da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e3a214-ab60-485c-857d-46bc89d11431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5014ac5-3c26-46da-aba9-4d966d53e1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee35e6b1-6f23-45e7-8e86-f087e51756b6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b6274c-f50c-4957-a323-6f244b60d397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0faac53-5712-4df8-aebd-0f9dacf01d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea7f1b3-9b60-4854-8359-fc55255497cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a61e8007-069e-4a98-a608-8e85af3cd224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2990288b-33d3-4264-bb61-cbcd2cafc6e5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49afccf2-9348-43b2-b13a-9ad354a4a100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6252bc-2468-4692-8549-8af953b36835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded65e08-8a6d-4db6-b96f-b5dd596dee39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5975b5c0-f282-4297-ac80-41e3ac59fb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eeec410-cf0b-471b-a1c8-2a1592cfeb66",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1121a303-4233-499a-8b28-fe6caf89a5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29834ef1-54fd-4be1-862a-6b87d531d0a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf49d7c-d8bb-4b0d-a430-df77acda4061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4f60a6-3ca9-4f5b-9d09-7c646cacad98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43dee9e9-9205-4cda-925f-f38a61b1da3e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659ccf3c-6060-4b64-b79e-6ed313073b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13abf0c6-1d81-4aa0-b4da-86cfefd60e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce3adbd-8b1b-40d5-ba49-3e3b83fff35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "927e2e9a-0729-4afa-8ae7-09dcf6cc5b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d2e5e6-2bbe-4d09-9101-29ea4a895fd9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b961e9a7-ca6c-45d6-9419-e2be3ead40be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00174ebd-319a-48b7-8bd6-65478c8ecff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212d72a7-c56a-4ddc-9f68-9cef0a0b3b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd943371-586e-4abf-b1bf-dfaa4812f27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fd4b8a-7327-432e-91d1-383ae7b490b0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee30ca6b-5554-4060-a3d9-024bb45e24ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4136a001-d45a-492e-862c-695a71e6d69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b495fd9-e84c-46b9-8370-07df2a46c49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "397d1175-af9a-4404-be84-64428372b251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb422539-55ce-4034-9b5d-e68e87844955",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5f8796-84cd-4078-94f7-e585b520b630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14209ccd-2091-43ff-bcc4-0165a0d8a16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d8309f-3326-4ba9-b24c-a8cfbe8f6521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a6616a-6400-42f7-aeb2-694c52dce131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693e0059-42d4-4815-8f46-fa34458ec735",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d3c71b-ef2b-4e9b-bc01-9627855074dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fbd18c3-a479-44bb-bb97-23f3f92ba408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca7b0ab-37c3-4132-990e-0f10e6437433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f294ddb-c8b0-49b5-bd4d-ec2a63a34421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87556dc-285d-431c-b505-935a6af80524",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1b9079-42c6-4a17-b34d-08f2d15656bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9031ecb-d1bd-44f4-9e0f-36731d6b0e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8776c27e-9a4a-4b15-a21d-4d4a0f6386fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09489062-bae1-4500-8c85-0b8bed3eac06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a0e7fc-d6b3-4a7b-8410-30925732d188",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacc9c58-b190-4ff9-aaf3-1e4e025767df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38888c6-db77-45e3-bdd5-a335f048e377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2d4197-6b52-439a-975c-ff993f6f1a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faf66eab-8662-4475-87a3-ef34dbfcc69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25dbbfa1-c392-4f64-bc15-278ae05f06f4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda037f9-52a8-43b1-9b39-a84eb7f20ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39ae6c0-74bf-4a40-b819-3e0986eec78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa30ea3-7c38-40ea-a5ed-951c6420b06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c8cdb32-e1b7-45f1-985e-3f6acaeaa7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a692f7-04f7-44f0-8615-20a04e390674",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d95f47d-bf5a-4322-b2d9-102976ce5a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f92aaf-7a4a-44ff-8003-a3108db35a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fee9d2-7025-4d24-96c4-c32a4a0bbfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "670e53e5-1844-4a65-b74e-6eceb700f5b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c298407-5fca-449f-97b6-d8a5019001fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b39eac0-7fe6-4991-a23b-ba1814f7af2a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c117896-25ec-4566-9d60-c43faff13263",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2dac7016-c249-41da-882e-1f4ba4dbdd17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47be65d-6149-43d9-a1d0-e2707e5f261c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daa81add-d456-46f8-ae24-1882d110a93b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb3b5500-89f0-490d-8dfd-313434a935cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fe01823-d91b-4552-b56b-9d82fbeffe3a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85e91ad4-c876-4340-a6f8-d94333eff9a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d204f02-8a57-47b8-a439-0073926501a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1551dfe5-824c-488d-80e8-8c42274e6d2a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bb05ff64-4101-4515-a0d2-0b703dc3e1f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97b51250-66ca-4263-b110-b64fb95586c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fdb8a906-ceec-41c1-95fd-f4b41375d0be"
            }
          }
        ]
      },
      {
        "id": "ab303298-96d2-48e6-8cc3-20fdf5fe82b1",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6e692c05-7fe1-4e5e-b42e-cc17938ef538",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ccc3490a-f6c9-4434-a2f4-61c0a2653a43",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c702eab8-380c-48c7-84c2-a1cd41fe99b6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e09d7a-1123-4696-93dc-9d6523158026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc50884b-8aaf-4a74-b4cf-8707d2661b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c626f076-1470-4ebe-aa3d-78e67d41448f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9363981a-1421-49ef-ac88-b14d080d1854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be114a8b-91e1-4de2-bbbb-0e8c569d8142",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b63ac7-e2f5-4241-9815-861a530af936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e83032-1c9b-4b3e-9acc-27ee34173189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066580be-d55e-414e-9b1c-95b35a15ec03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a30a5e77-8855-4378-ab75-36ca574f548d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9da7f5e-e015-4a55-b363-5727acf20f88",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9daaaf9b-e170-4e83-8db8-8d821ed91a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd3807d-992d-4662-b4ba-e9c0eb8556ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23eed32-b1a7-4893-89cf-b1fc873b777d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e0c244-f880-4c16-80bf-86376c721170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d63ec9-543b-4516-83e1-965ad2ff9f81",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12c199d-afce-4a7e-81c6-966c858e82a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb09ea2-0812-4022-adbe-f82ae5bc511d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987e9098-1d02-4d62-af9c-810bbfc8d992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7cd030e-a697-4562-935f-b9ea4e4c62ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36769068-d5ba-4e77-8ddf-f9290b8e3978",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57d2f3c-c54d-46ad-844b-656443b21c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389cf686-a216-4d39-9c22-c8bd27a383ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a34a2d-0c8c-4cf4-9325-421d455e18bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0acf3a7-0cd5-4dbf-8423-7e5a3d2c9a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485da1ee-513c-4fbc-8ac4-9082a1979d06",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ffd8d9-d477-46a0-b179-7e50c25e372e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7767683e-0340-401a-9095-d7f1ff16e186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2810555b-6a8a-4c6a-99b2-bfb513d22460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a51fe55-eece-46c6-a25b-7b8bc8c81f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15bfa9b-4fae-40a5-a96e-b18104fbda7b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd58f7d-1cc3-4f0d-8faa-df90313ebdfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea70c7a-51c7-47d9-a808-ffba53d801b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7601da5a-0699-47c1-ac07-991f9c5ea0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f78c7ef1-8501-4f2e-a5e9-8c801345ac94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2c2d2e-0490-4bce-8043-939787ccd67d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e85381-4c98-4c8d-92c1-c0de20e0c9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3499509c-f9f0-4b9e-995b-ff56b2b6be23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74219c2-cc66-4411-92a0-9a004031a4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aad97cbd-9fd2-40c5-a12b-87bb6c0d79c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155bcd00-7bb9-495d-9cbb-98217ab1ff9e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c48b1c1-674f-4987-9826-25df487d1001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be179e11-bb3b-4fe0-8d42-2ff72d849588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3e5912-fdf6-46d7-8335-76f6763d87bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e669ebc1-a426-4f18-84ec-53593485875e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c4c8e7-4368-4390-962c-f82179cdb8d8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "213805e2-4873-43f2-a646-35e41da12e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f92514-3497-44ce-9a3b-d5337524c1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55174e81-1faf-4215-9e85-a096d990276e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3d11dc-8bd7-4d6d-b19e-ad3b02bff6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cfaaf0-fd11-40fa-b6b9-9bd753a834be",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65eb19f3-78a7-48b4-a65c-7479d4b06162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0191f2b7-3a23-46a8-bd65-61f97bd5b102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84f6f7f-6899-434a-8465-2af635b348eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2f43cd-37d0-48ae-afe2-a316b23810ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3512f801-562a-4092-a371-b06c200bc01f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f88993-3afc-43d5-999d-8027712227b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8744118-8e6e-4277-8f84-b8eee5782d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08f57a0-7735-49a2-b32f-b02a556ef611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dad45d2d-a5f0-4740-82ef-b5f1772d7887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e46408-1dd7-4e3c-b019-ced5eed2c351",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb2b5d4-23c3-4d48-a187-5a61897fe154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34681fab-b8c3-4849-84be-7e12f824bfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12162ec-c0cf-40e4-83cb-33fb2c8d6854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc82a20-e27e-4f2a-bf31-189b39e3fdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f208f1-9542-48e8-a588-8da50fab5d39",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2778d1a9-4bc3-4302-ab2b-f6ee34355182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b98d63-99d0-4876-b2ae-6a52214c8e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be01276a-35d2-40ef-adb8-4a4b6fc649f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae0baf6-e521-4756-80c0-3e9201b1256c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ec69b6-7133-4ae8-9a7e-b5ff656f5a60",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "889bb304-3d97-42a0-b2dd-f52f48cff86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47feeb02-34f3-40c4-851e-e7b1e595343f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca334984-bd2a-46b6-90e9-c6ea0f47151c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd8d665-4d1a-4144-9290-7ba18608470a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdfd6e5f-8b1f-489a-8c90-5e6e9fee0d9d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb075c7-4d7e-4e80-b6ff-998da57ee0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38852bd3-0a2f-4e65-a520-d3ac94553b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7701e4b1-d2b2-4b18-ab2e-bba40f16d596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8d3988-ce77-4fd4-ba61-9c2ad1271a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b87c7b-3935-4095-856b-b1533bb67e9c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae98ebe-afd0-4381-a819-656d08cb5617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc3858d-6b79-42c3-9617-6dcc5f829c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e42dd6-7c20-4f83-bc41-27833bfffba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "99a29fbb-3aa3-47bc-8719-21e2f4550ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d008ff-0d98-4096-997f-291e7812d532",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52e3aa4-6bd8-4ffd-9659-79ec7cb916f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a123654c-e748-41f5-bc1f-dc7ef9db54c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3256d917-1e1c-4837-8801-f85d8099ded9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4efbde1-86ad-4364-942c-4142734bfd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af352082-2d04-4df3-bc48-0ebdf2eb8b72",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203b300f-a16a-478a-8a60-7c7459af751f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122fb3be-9f24-4c13-aacb-12131f8c3424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91cc51b-7d47-451e-9c9d-26d6fef09202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6cebdc7-e756-4b36-9b24-008ffd705605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41ac0e1-b07a-46ce-a154-38b884055219",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d20d07-9e69-45c5-8ff9-343492480f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3edb63-8649-405c-9117-7d4c34f3ab2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c296403f-1403-4d77-9f20-77876ba22263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "322461f2-c40f-41aa-b731-bcdce48363fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3bd5fa-cd80-421a-a09d-3f269e345671",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc020c98-a592-492f-9e6a-8e2effc178c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d880ef-99a1-4c8e-a5c5-f04b4a9eed77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32246a34-9ba5-4c44-8748-b153ffaae655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6f206e-95af-4bba-a652-f8ae2f7d2580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc033ef1-6130-4a5b-ab94-ae761732b6aa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2490aa0c-d2cf-4689-a747-513ce22e2d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22004ee7-1deb-4443-a35c-447f91fd4de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd65658b-2edd-441a-8647-e9ec4d8e3b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d909890-4bc6-4aae-84c7-2aaac0e4d3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e3163e-fd23-4e68-a74f-4a8b7b8b8718",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f39f72-93d6-424c-8918-7a03a86b0447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1a98a5-d3d8-4e30-8171-7374c603aec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c71b618-c1dc-4625-87d8-a4bd07ba166c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "980f6ddb-01e6-4284-a3b5-457c3be98779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ecc792-bafb-42c5-9e90-18b285950a10",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3620ed4-0e56-4630-90da-07673e31997f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35e65c4-a47c-4ed4-9ccb-1a8796904f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37fe98a-fd48-4a61-9c16-db05cf5531e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d731088-063a-4d03-98b1-4d52ea419d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761f6c60-818f-4db6-9b23-910d20e5cbce",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a7aed8-9a40-4c63-878d-80054945be7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb1eb91-4e04-4ef8-a307-afcb3b734737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95f3808-6289-4bb0-8ae1-edf6985e7bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf38d141-1f10-451a-9283-dd322c422f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b108398f-f413-41d9-ae10-95f6436a2006",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a788d0-4e01-4ac3-b9d2-7b63dde81c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b407cd00-aca0-40e0-b114-fd1470428879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa47798-25b4-448e-be44-b92e6ade325e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54a48098-bcc3-4d44-87fd-81704b3590ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2dc238-de70-4b87-b49b-d04cc14e18de",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759e7ef1-fa5b-49dd-87c0-d5409a6014df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27fc10d-435d-469b-a9a8-4711ab28f8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5867d2c-8533-40f0-8ed5-5e4f96eeb3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c806070-507a-498d-a5a4-b821261a6c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4d7eda-fe6d-4328-8adf-16188d820728",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01296082-dfbe-46d7-a1a6-6f61442a5013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a92de2b-8ac6-4920-98c4-b184cace7eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f601c0d-1eb3-4bfa-abf7-30a4ef433c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e74dd696-e042-4ea7-809d-6c4941252095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8931880-d727-4e17-a655-a718c9fba4a8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1caf4b17-3d4a-4c2b-b95b-ae1aec750486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30f047c-d564-4fcb-b6c2-fdcf2f1b5b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3341a0d6-72b6-43fc-8cc2-5377e4f54bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58b8e5e6-9d2e-4858-b61f-f2236f384692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a93ca84-22f1-4523-9a65-b2b6a951174f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220d8571-3f1c-4480-b556-63b94ca04106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10e1b1f-2175-4443-90c0-39ba476906a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac13971-d534-443b-8d44-74cd89f31cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad386af3-d9dc-491c-aeed-03571604e562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f4eff0-6737-4cb8-b533-f753ff659374",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7978b7e7-e2ef-4494-9f23-a59f7137006e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df5e77f-2587-4c8b-8b00-2bacc428d627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82c6e8f-d0bc-4d68-b506-d2f26e3d1bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "791a7d0d-d28c-4bc3-855c-920983551b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356b3753-fa20-4646-9d39-3f2ae6c036c6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d61c633-bcbc-470b-91d8-3632065fe1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163a0019-3ed5-4d02-8bf1-16600ea0ae40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5450bd9f-3fac-4432-8aa5-7ee393b74098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e9a29d5-cb37-4936-9e7d-b4795c8ccdf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b38aea-2a31-4416-aee3-5b124b735098",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ea4379-ab43-435c-a786-e6233299d962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43714e5-f285-46b0-a708-86b3d4e425b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f440aa31-9911-43e9-9695-f2599ae46803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3a0fc1-aa1b-47e5-935d-ba3f327356c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37ac602-71d4-4097-9f8f-bb0e5136b7bd",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126ee83b-2e77-422d-b577-cef55bc723df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77231711-6114-415b-a5b3-aa3dfa469405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f43435-8316-450b-8a2e-e590594e0dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8181e7c2-b711-48f8-bf69-f50304240a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8132cb58-ba1f-465c-9850-9b86297bbb2f",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0727d1f-637b-4d61-aee9-4b64aa12bf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b27e1537-b927-4883-8e62-c000ffeb4138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb5ae76-19bf-4171-8df5-e76645c03d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "633a1931-4953-4a29-ae73-2b2ebbb07c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70007b7f-eaaa-418b-b465-98af7f91d0b2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d85846-550a-45a3-a504-7b6fc792143a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786b4895-16a7-4b39-8f37-a31b6e56fb27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f154166-9563-43e3-a8ea-e6ff6a13befe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beeee014-b5a6-47f3-8a2d-2c53d1713ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7887df46-cd38-41c4-913d-b63217a581af",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffff83c0-ee05-4d7c-8794-2168f7008394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82306bb-8e03-4e7a-85e0-73cd75bb42c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbbe6fe-1631-4729-a436-daf299cc86b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19e880ca-45d9-4fad-98ce-3ae023eee5ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "011293ac-eb12-4708-86fa-aa7ac113cb2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46b8d2bf-3c64-4749-930f-3c1b9f24f00a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56924cb6-cfc6-4818-9ea2-91fc288d4ae0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb150eb-09e9-4bb5-ae1f-730fba9803b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0288c911-63d4-462a-a31f-fb8198128b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "906890af-99bb-40d8-84b5-93a0b6b08a6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae105105-a735-4c16-805b-26a5fe8b1e90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1937bcbf-acd2-4141-a2e4-c5bef78be730"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff294ad7-e1ea-444f-af28-ee21211e3c0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8456f8b0-9aef-4dc9-8c2d-d8b481614d75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36869fc6-113c-4f4a-b4ee-76c19bceaf90",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1451ac42-6f11-47b5-acef-d9af90035ea8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29dd5541-a50f-41ef-a7c9-406aefad7842",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8afe32f-7dce-4abf-853d-1032d55aa83d"
            }
          }
        ]
      },
      {
        "id": "7d778179-f026-4249-a0b3-b6b9e1f61281",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "246e2197-9c2f-4f5a-b5e0-00c7e74c2500",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae1e8a78-83e2-49a4-b32c-a3555b7428c2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e758f9c0-a5ec-4d4c-a794-265dc5c8a6d6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4862c7c-bc0a-4830-9385-1040de259579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f01cf0f-2583-4327-9d46-165a4361d35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7681bb-5239-4a60-b8fb-37a9f84bf9f0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622d95d2-09ac-4ca8-944f-d56a834c6376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1b6198-bb3f-4a3b-9181-5471d60ac7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd357bec-e8c1-422f-ae57-2ed750f81d77",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526b99de-dc8f-4ee1-8105-ae4063ac8441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea37c32f-4ba4-4ad4-9a5f-31af8d21cb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd0d1b6-7e13-4e85-a66a-59eb3b714dea",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f02fc89-b55f-44fa-8a03-41c54e78b1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a98037-ae71-4662-9f55-2fae73d160c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347ada21-90d4-43bc-b7e2-4386b7006a2b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abd1382-58e7-4fde-8142-516b765f3003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04660eaa-6a82-4ce1-9eea-e7590b0cb556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aff3b60-2af5-4782-ba2b-c02d3f278372",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc003ab5-de8a-49cd-8588-1ad757df6587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f383613-0e53-4c78-a2e2-80820a61c54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43114dc4-0c23-4a88-9bcb-87227e07529b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58438cbc-edba-41e9-87ef-ddc884bda327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c9d5bd4-5c13-4392-96d7-8c46431c4641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69302ac-2915-4879-ba0a-d581e166bbca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b59f2ba7-f4f1-40ff-af4d-1401219d6025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62820f2e-a4bb-4b64-8921-309333c78dd7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6f48cc-285b-4a1f-9941-14d0cfb93025",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c349d80-2e6a-4427-a6c6-31e323f98980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe32019f-b985-493a-b5b2-6d4686ef0854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821b67d3-30ca-41e9-8d0f-41c69a88061e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08555c6-90cc-4c53-92d0-ec50cadf31c9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede837a4-553d-456b-8fb3-825dbcc4fdd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff11ad96-748d-41f7-befd-fd0dec8a3e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9ea74b-a329-4875-9a6b-f914c45ad6b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a636f4-7e83-40f6-a5a9-9e7cab7b871d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbe4022-281e-4a0d-8c03-2705b6619022",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2896ce-6289-48c9-bbff-de4b7bd5f767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19fa2902-d0b3-4530-b881-b4c5f27a8f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f76fb5e-8e12-4008-ad54-5ca7da36af06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72eb0b64-e11c-4521-ba8f-c09d105e60d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d9bdde-1207-4fea-a6a6-4c3555b70b26",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abe6296-9955-4190-9622-46d2542d7f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7571c0-1525-42b3-9745-96fd31824ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1ea0c2-8d5b-49c5-911f-504da96b3f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ec5810-2f13-4207-aa22-43a3f67982d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee4597a-51b9-4acc-94a8-83be8cb7b3c3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de78ffee-e065-416b-8677-453f8a123382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f4298f-feae-441c-a273-da155e722ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae77858e-fb0c-48a2-855c-93daa6e35397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ab4bed-2b94-449e-9454-a5bb68bd0c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be65c0d-407e-4407-b833-e3270d178ff5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa95a466-0070-4b60-9dd3-421599f83fce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42dfbc14-bc0a-4250-9393-6f495b5bef12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6e0e8e-bf67-41cb-90a6-ed790f928a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df59bd7-ad30-48a2-80da-2e6f0f754cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5819b492-b363-421c-9cae-691e8d1c153f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f09569a-e899-4f88-8812-2c4bb37a9992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c04115f-2280-4308-87aa-c1f916338cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78747fff-fc7f-47bb-a714-7cc1b7730224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6739d5b-bacf-454c-b367-43980dfedb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbba112-d243-4a6c-a47b-f74b88537a55",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241bda0b-859e-46f8-b91a-e693f1b05525",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b216279c-4cd3-4e73-b3ce-96866e63c547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6c1c39-2dad-40cb-9c77-fcf2cf094dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1785eddd-4a1f-4bf2-8fda-55fa403ffb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3b2120-feb5-4df7-9bc5-40175024fb82",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fb04c0-92b9-4a74-b80e-35a362f36dfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da0bec35-9970-4552-b753-ed92b74cfaf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56b38b5-3cb1-4c40-83f4-603037de4524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de307a0-a43c-48bd-82cb-632fbc139976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1cfb5d-9a37-44b9-83cb-76af77f7991a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbf8fbf-a78a-4b39-a1fd-8413ccb7cfec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a796587-38a2-48b6-a6c4-565d2a476b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6114206a-e3fb-45e9-bef3-82bbaf72ae3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b1dc22-d3a7-446e-8c8e-f78b0fdc4c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b25b16-44ba-4987-b077-06c1000d48aa",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2523a9b-2139-4b1e-b7af-d90f89748408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef695b7-cbd9-4dff-98ec-73b9a4027628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d2dd61-e9bb-46eb-800d-a0b727cb9e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2f9407-f3f6-4d05-8ee4-c030889df2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d68e8a-69b4-4fa3-bb56-83c1b1d2614d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b0cb09-dd16-41bb-9234-9130c57679c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627302ce-e2e0-4904-8a4f-1abfde1887dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e13deeb-71cb-4efa-96f5-fb949714ddbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b93db2-601b-4baf-ab44-13b5c3c6a8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdaeab9-d7a6-4cde-a439-13416f0df501",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f51c23-e09b-4c88-b2bf-1e52cd89f879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96a96a3-4f68-44dc-9aa4-955baa15cdf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f8640f-fe63-4878-a700-e8fc1435f7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6710cb60-76c3-4173-845c-59f46813f204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405cc9f8-bbd5-4514-81fb-28446395646f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc64ea08-f15c-4fb1-a216-710a7355f497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf53322c-9044-48cf-bcf3-48630d4d4b62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3499ccd-2de3-441d-9acb-90dcd852b95c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69917a5f-0194-480e-ac74-2d3534fe2bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b3f39e-f290-4d6c-969a-c9fcd3481047",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6119eff7-48e3-4626-be81-566f064db55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4375fc-07be-4d07-b0ff-a73d96d53ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7cb719-b383-4976-b56c-5e2014717b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3785e81-219b-4c12-a877-c8b2f3959e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93afc41f-fcaf-4933-9478-fc24d7206118",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a804de7d-3150-43ed-b8bb-567f27985945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895cbe2c-6949-4403-8dbd-3e6bafa26c48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e4b125-97cd-4845-9cb1-4c9cf9f1240d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0beff42-ed27-4814-a6e8-8c25d577a8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6730cc-2adc-45ff-b06f-317f31eb3769",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bd0220-328b-4324-9c86-7e83f7ff3dab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a0c2c58-5496-4d47-afff-80f102e330a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cd8bb1-fdb7-4b4b-bd7e-19e07c5c9ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b8994a7-ec1d-46f3-b91b-e3ab1394a084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556cca26-52d6-4fd2-be55-c18a41d95fd0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d11ac1-3034-4e11-9c1c-6cbca3570666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d063f55e-30d9-4f96-905e-34a81f83b4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdcc4f7-885f-4c9f-a8a7-6a47c893b942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e956768-8855-47ab-9b88-be6d34c9c7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f25e34-91f7-4455-8890-1c24670fddc1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f6dc2b-da7d-4554-ac96-a51f2b8ae07b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2feb63b-055f-49c7-98e7-2fd336f917f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefd3f62-4216-4dee-824a-86a0cb503d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7432a564-c51e-4780-ae51-da4d4028c5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc706d21-948a-4755-9c1c-1f6a5a6972eb",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e43a9d-90a6-48fd-8795-66803f8d974e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77281f69-22c1-4fca-b55c-426b280cbcfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a010ece8-29c1-4454-84b1-02cc4e9b3eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95da38c-da3b-4763-adde-b5a029ed125c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6deeb0d2-98b1-4b3d-96c2-ac6229d863fc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a1ce9a-14c9-45a6-b850-1dab0be1c48a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2a2299-95a2-47bd-a520-44da52a8bbb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b159dfa1-691d-430a-a29e-2afdff00210c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0061bc47-6b4f-4f65-8dbf-1715aebdb402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee6bdac-6aaa-4aa8-aacd-3fe95da57fe3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06615801-c5cb-486d-bc14-b43671a50649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc04fbf8-42a8-4d3e-b991-193f651aad28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417b1949-0932-4c01-b6a5-7af4a3345e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4e7309-8711-4f68-96d9-7665cd4cef94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ef9781-9aea-492f-894a-d5642f042eb7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b029f05-4630-43c1-b0b4-8188418893ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d835155d-5ef6-4b07-a34e-7ecc2f3004e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bbd714-a55c-40d2-9236-161b8a39da6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb2baf1-4268-433b-b1a7-cf1b20d4a90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b7df95-115e-44b0-afd7-e91f0362bbee",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a15e35-39d9-45ef-9c8d-e126e4ba90f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c24f8274-83f0-4ffc-bc34-2b6bbc909cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95215435-21a4-49a5-acc6-7f8978505a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456ccecc-c141-4905-bc1b-b7cb6a46117b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026874e5-924f-45c3-a79d-cbfec00c3fd0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf33661-66dc-4be0-b20f-26703a53dbe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd2122a0-3d02-4d4b-91d4-3ae70770ac69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4045d101-0040-4fb6-aa4e-50b02787b461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94217506-8844-4308-878c-b8bbd25c5835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe36a89-1130-4013-8f03-e2012f0fb501",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3ef4ca-a960-4579-b90a-c7b49a2a40b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd35afe0-3ffd-455c-a527-4b5405c78b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb543e8a-7564-45ab-8c24-0e6e0ec39f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2099450-1eee-4d27-b91f-aa8ded828276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ae4cb3-a754-4a8f-8c3b-05722a31966b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0270b3d-6a0c-46e7-bfa8-ff2feed12701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd11be48-343a-4f90-a6b9-16f002d18c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfa3d66-132f-43d9-9df5-57c61d308ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79cfe21c-245f-476e-9ddd-37b3ff4b6894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef0b60a-9152-418a-85b0-95cbfcedb01f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9761d2fa-4dac-4d6f-be95-65c96a1e7309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0fa61e-1c02-4302-9ee1-d3a44a7d3568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b754550a-a228-4a39-aa22-e7547e1d5206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a97b065e-22d1-4d34-a675-c1b7c3d51f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b91556e-7903-44bf-8f16-5daa0b82a35f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554e7817-dc2f-4430-9075-8ebd16afb58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b70cdde-28d1-403e-87e0-3a14daba5479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42c4d16-f98f-4208-8195-c90429e404d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc4159d-7367-493b-a3ea-d43a886f1646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ae6ff3-3f40-4490-b887-6feeee970e7a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af540039-b87d-4a37-b62c-69b496d9be30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905b9d67-16f0-43d8-b15f-e4e2e7b13ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ff404e-a0aa-411f-9ac2-cf5b1a445e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84563512-8bb8-4c6f-94d1-e95b03a6f735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9835dc3f-03c3-43e1-bae2-7b6671c51df2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38c87d2-4007-4a0f-83b8-c66c3bc2f12f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc0f6eaa-6afe-4d62-80f8-f1f76b48dfb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62270120-62d4-43ad-8abc-944387587591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfc701c-98dc-4781-9f00-0cb7dafa9b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d926b0b-b78f-4f6e-a135-8074c04c70f4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7f9532-0fc6-4dbc-a9a5-83b51c7fd3ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f801d74-c318-4992-b55e-9721dc7ce763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a70c8c7-6de1-4a77-b4b0-c3717865dbc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70709bb1-11fd-450f-bfeb-584593b23b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc10bcc-8832-4f75-a2ab-170ff98fde0f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154ffead-3c90-42a3-bf72-61583b6c0ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af36f7d4-3be3-47d3-af4f-2674d90bb5b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc7ca99-202b-433a-96d2-2bbbffef2d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aba8f0f-e1d5-44ef-aa5b-6a5d4acd9e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de85d500-30bc-4d44-b45a-dbbad4a9fc2c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e879d75-3d71-4ee7-90f9-cabfd0327604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab87d075-9771-458a-becf-44780bdaa263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f55810-5825-48a1-bfb3-6052e71b961e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4020ec47-1ee9-44cc-ba52-263c5dab718f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db850dd-c16b-4b92-b1f6-90f5cbe6a5ca",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8acb48-8591-425a-b22a-c544913dca3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db59051-1f7c-4c49-aabf-48f725ce9f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a581d862-4826-427a-a2ef-925cbb31e5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3052464c-10d2-47e5-bf29-854eb143a4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e17d3fc-b4bc-4ea6-a2d9-dbb1f32aa762",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df668b8-19b6-4244-86a5-f43f554a6514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17418bea-a55c-47be-9582-f9f2d421cd38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efefa172-9751-4352-a7e2-38b1427afdfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08dddb8b-a998-4aba-b12a-85dfc9b4362a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc786bba-5465-4fb6-8273-8473172764a3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94289e6c-15b2-4265-bc63-6881eff918b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e1a67e-f942-4e80-ab5a-cd6af1360c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81f5dd5-09f6-40d7-9acd-555faec89285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6c9106-27e5-4d97-80f5-8be1c8e9fb2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a50000-3fab-4f9b-8e88-3a227d840132",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa3e79c-96a3-423b-b16f-79bb46fc64a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab56bca-6262-4092-9ecf-6a392aa5f60d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15dbba8-909e-45dc-9ea5-4f51b7c622bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "249e564f-b288-419e-a247-5596cbdcb234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6868ff-6cb8-4d0e-8734-3dce1e74e80c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2122d5-9085-4115-8eec-a4252929e1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3570c2-9146-4cb1-972f-ba799a24ffec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23915467-0d59-4f4c-a739-2b0ad85e18e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116c9c74-729a-4623-b2db-0fa947a5056a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1745da9-0877-46f3-95fd-a4d259b0f41c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed7d345-23dc-4989-8717-e7708de9a519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0560d7-3cc5-4fcd-9e2f-fd316f2335bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7118d3-3248-4cc4-850e-dce650cf3533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb1d282-d436-46ca-b5af-efcf107b30cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a0a796-710a-4ef9-b104-2a80ba1ba70c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57f8781-4840-4416-bb93-b03805fddd7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17819b57-302c-4e65-a792-46a6c6cb4b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0915a59b-ac9d-49a2-87cb-2ae8c7092887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c168c3-ddc9-4f1e-afff-6821d0f626f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec44a95-1116-45a8-b195-d3cf9627be68",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa79315-7553-485c-b303-2af5206cf5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45effa8-2e50-48f3-8962-6f574b8d552f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9594f5-6bad-49c4-b751-3a7cb26de384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1ed452-8739-4f2a-968d-fc63fcf5413c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92ba1b4-450e-4970-a290-c4238fedae8c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48448b69-d687-402b-af5c-e552743e10b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d6822f2-0146-4ec9-bb9b-36ccccf96762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b982e06f-fd03-4493-a901-7a42a3b66033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d97df43-c98f-4037-9151-14094fd070a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcd6e3f-ae0b-4e45-a8b4-804a830cbfd3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa907b71-b485-497f-bc76-78a9a4b9582f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6e8c4e-ad5c-4d7b-b687-57af9cb397d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7957c741-df8d-4b57-b044-5464e01a3770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69afe1f0-5856-4a2f-83a8-b422ad822e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc77d4fa-8745-4e53-858f-0ec2c8eff625",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1d0347-74ad-4193-98e4-1ab108092f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f678f207-795d-426f-9c73-5f69149e2b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa089c49-c460-4126-aa4f-f564d37c073b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c6813c2-745d-41dd-b3fe-25393b31ca14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42848f27-4108-474d-ada5-85bc2e9a82fc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b687ebf3-87bd-4608-8559-46dcb0904dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a73135e-f100-4285-8a1f-3a248aa84cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47eb356-30de-47d5-afb9-3f33ea5c07bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64745bf-4ccd-475d-bae1-7e14be1fea61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72851e52-b8c2-4d01-874f-7e3e167452ab",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5b8d99-ce31-4ea3-a783-f12cd067c44d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f9b08c-a926-481c-b178-320a4e46fd6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3ed6c3-2d0c-4c9d-87c5-66d05274317e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b3a341-740e-430b-ac6c-382927ab8e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae14e0c4-1dc8-4505-99be-d6463ee91a3b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12a62f7-9a7a-4f1d-a223-01e38e9091d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ba370a-1279-4ec8-80a0-149f1d731d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3793450-7298-4bb4-86c0-eb565f88f208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c53f29-7bf9-4676-921c-4c439df2ecac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e54fa6f-c27e-4323-8f61-e10d7216e916",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96b8eb8-cb60-439c-9881-a1d3146ee2f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a786d4cc-f331-4f9b-9039-8aaf84b871ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c05808d-eab4-46ff-a0b5-104b8f4e6dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821fa61c-d2c8-4cbd-9829-2f67dea29e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d741428-bc08-46b4-b4f7-5c3d8d199b31",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09542d6e-db5a-48c1-bc70-1fb4aca6dfdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47c74bf-6218-4d18-8110-b65c1a584f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0601cb8-14c6-46ff-9859-7cd4a8c19975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2521a8c-7699-4b3c-8bc3-6bcd101a14a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc7db35-2573-4c38-a95e-aa5d773f4b67",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d74e3a4-1a41-4d17-bec5-47a4e0cb1d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60bfca25-b4a3-4424-8a3a-59cb51ec8daa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "905ad272-5493-472f-abb8-3b61d534798b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09669f1-7c30-4726-b336-d3eee197aa37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6ecac6-d991-423a-90f4-2713d14455da",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45457695-dc5c-4619-8a6a-54c989b52966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856a4a17-e323-49aa-92bc-f1c205a1fc8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d33ec59-0027-4725-aef7-0d510b6f1024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe62964-c657-47f2-9ce9-0d62cb8828e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c4b355-18ca-40ef-8528-9a3530cb9d0f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c3be93-84a4-4494-8f49-604c939b4577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "101d1546-0655-47b6-950d-ec39af8de87f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692ccf4c-9fad-42b4-b449-3339f46433b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e7f342-a44d-4bfb-b3e3-c439439132df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3dc194-2e7d-4c5c-9401-89a888dda260",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd268baa-d582-4ebf-ae82-766efbd2e086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c4748b-f054-4a8f-b383-2fdae0739baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f043ad-316d-4615-b2a0-0b125ade130c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100b6495-c932-4ac7-bf18-1b162dc77768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33f9571-a940-452b-a3fc-bed9b02de57c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6394513-8152-46dd-a736-cebd7cb81d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd96771-eff2-4144-bc46-8d04989bca7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57787e5-1e67-45fc-8bfb-37774d08da66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3901e9c3-b04d-4f8b-8771-3e24041aeb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbea3cdc-6c96-447f-93b0-7cafcf0baf7f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3745283f-bb8d-45ce-99bc-5c9ae46436f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42b9c89-7e0d-4636-b10b-a8df826a09bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92cbf26d-6b6c-498b-82a3-7aa3a20184b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b0dd6d-33ce-4269-96ea-d693a7b89862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3448de09-4261-421d-9d58-35a5fd1a5356",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa050d5-56cf-40fb-96e9-0734abb1e530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a34ac11-a512-4491-a55b-c605efd5599d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bf4506-8221-464c-8c57-9ce9e0305346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1427fad-3447-4fcf-8192-c675e2cf3968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c02a40-55eb-4ac4-bb61-7aed99d49016",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f7087e-28d0-45d5-99b7-c17409046131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd8199dd-0db7-4e17-926a-3c04f57c9bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7f5215-125d-454f-a962-d75d306da5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8798eec1-799f-4131-9b2d-3d21cb54187a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa1789e-b2a3-49a1-a81e-0ac51b006249",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15eb088-e911-4c9c-ba82-7f8a51fe49c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d335417-bfb9-4e34-ba24-501731827b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "467d2bab-6441-4072-8554-90d08cdf8013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7210c087-c543-4a7f-8924-088cf5d7cc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcccd48-c141-4653-9a4a-f04fbac637a0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd4e694-2716-4aa0-9219-a9a366bb90cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caa9917b-f53d-496d-af9e-210d61969e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35258c2-d343-451e-bb8f-946c4e150a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d61a59a-c78c-4cbb-90e3-8040ac86de59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33801b7-56c9-4e17-bb30-9f5f7927d047",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7564c7b2-5d02-464f-891a-f3099d1337d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bd44da7-3906-4b49-bedc-2262b1a51101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f4cccc-29b2-416d-8c86-a53c6fed1f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29a2f41-d4a6-4979-bd04-2258705eac20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a88f722-c2c0-4ad8-bce9-176bc6ce04e3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96dd16d9-84ec-475f-9913-a29dc89d8c02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ae88c2-aa5a-4504-a590-c0a14ce9dc8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2eb5b14-5cc2-4cba-b0b8-eaae1cc55361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23a6876-bf9e-46f2-8166-8f71a193ad88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502e0416-2502-4acf-b3a0-e422d604fddf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d02bba-eefc-4440-9c5b-b0adca17c7a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f9b9d37-f87e-481d-b534-d21bae43e471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31883ec-a9a9-4989-988e-88c2d4654acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e73c3b-a467-4d98-9f07-fc82f76a9552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3400a21c-c08c-4cd1-8c53-252f2f55c643",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e0cc0e-84c6-42a4-8c14-c22ff182c7d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a88f8da4-df05-4f43-9d9e-c9575e6598dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f545851b-8cad-4e9b-bb43-cc5afc84464c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "714f93fb-f5b7-4ff1-bca2-cb549b280d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76b9d97-702c-4709-8c35-c1302f977936",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d0dfd0-46c0-46d7-b2c4-5c3c6b258d05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e344f74-d379-42df-8a24-0549c38c6f31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fa7a88-0bcd-4b18-894e-920dc0676a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167045b6-0c80-41a1-9c0b-f9e0ad508bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10520972-a1b6-4c60-9ed1-bb4e0280bb4e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91042fcc-db2c-484f-a9af-41116c0f1c13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c72c071-c7d2-48d9-8566-1fa15fcebc72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45315ac0-f117-4eef-9f49-ae81b48f3dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301d5b59-da38-4881-ba8c-d0f26fabadee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1250209-0709-41fd-8b7f-3a6761aba1db",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f711c4-1b73-4051-9039-809fd99ce442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac82a1e9-2c57-4ebe-af14-49d001a155d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70938377-ae59-405d-bdd9-fe12f8ce94f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edefe035-8883-4da4-ac77-5125eec221c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b4ec7c-8e25-4fb9-a060-8674ccb050c9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9461966e-a94e-4f25-b648-4beb1e8b2004",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e0cd69f-f7b0-49e0-af7e-6bf0f30f0ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2cc60e-2931-4c0d-80ea-c7cc986a4f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7544dc-be25-450e-aa61-cb75c2a95253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba612d4-96b7-4172-a4f3-15bb9f1a9da3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9539219-b1d6-482d-8bc9-15b71c677e28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cfe9280-f8e8-4e76-8ae8-8f4b771774de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a34ac1-e588-4dc0-a5d5-edeb0398a6c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c80519-6086-40ab-a365-1a4df8b72603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8ddea3-0ba4-43c9-8c14-fe53e20497cf",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85ef84c-1196-4f7c-9ddf-05556a29cee3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd370614-cdb6-477b-9f35-eda90146ec22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3122f5f2-fdf0-49d3-beb8-84601bf87585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa5ebf2-9b49-46c4-aa7d-5bf7d52d7a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae14dd3-4b89-48f5-adc3-69606d57d7a5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba50ae3-3d91-4484-bfcf-2d092bbb0ad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21fb8950-21f4-4654-920c-056c2fa23cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d252215a-3f26-453a-a9dc-5bf932e21aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f66298a-f960-4bec-b287-f20f671eaf44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deea3d64-a6c5-4411-b308-64effc2fcc54",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce559624-c0dc-48b5-914d-7db41e4e7a48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16e6ace2-3deb-4ae9-8cb2-74f87608d2f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91de553c-eb14-4cb3-8d90-74dbc95fda66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade16be4-9cde-4a09-85f5-a75844400398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3038c08b-78bb-4823-8a96-412729a8398d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094168fe-bdfe-44ff-8409-ec41e95c0854",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ad20ec-565e-48e8-a5e0-a9a66164d611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca5873c-fd35-483c-b470-005f66fb1ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa8cf45-a1d2-4d09-aae4-561ac965906e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f8962c-235a-4c35-91e2-ac73bf8ccdc4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3d3e7f-040d-4721-8675-909290a9be76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcea9459-e1f1-47f9-b314-60db262a63e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a58553-1085-4ff5-bbd0-4d36518c446f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83a018a-c83e-4537-929a-118c78c310ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea43f3b-2403-4356-89c1-2cea1e68858f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970a03bf-c914-4dd3-a0fa-f8de039a353f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ad0cd22-2180-4741-a4d4-17994ec20177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ff9a48-0cc2-48a0-a940-930b30644d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76195115-4043-4990-93b4-4bd3cfa97d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5128d57-a605-49b2-9d8a-a62aefa031aa",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd353934-09ce-4f90-8f5c-c8283412fc9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e090b2f2-69c0-4bcd-87bd-69c5c3c75a34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "085ec9a6-4bc1-4ef5-a969-f34e92942034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d9c7613-b6b0-4c63-b93c-ed2204d355e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb7d983-2d8f-4ce3-9aca-8a6dae787b9d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8323e2-df97-4be8-9396-7723d55519cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c77a657b-44de-4da4-9b28-f64bbd1c3ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa17ef5-14ae-4f84-8609-8156b8818f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf97dd6-bfcf-4ed5-8d58-c9e4b2e75312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef332bb-0d2b-45e1-8dd2-6a621cce8b09",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84e844c-a76a-4378-a58e-508acf76b926",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "804872b6-ea46-468a-8fdb-727cbc8d0214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa582fcc-ce08-4ebc-bf20-84ec7fa96e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6359b2-29f8-48a2-a609-477dd057ceab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f040cb9f-a210-49bd-844a-9387a51e6f89",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921a6b7c-b49e-4576-966c-90d87449427b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f855d9ad-75cf-4065-85ff-45298bc493c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e704761c-78e7-4e0a-9d9a-dbd978f2d27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89be858a-3f9b-4ec0-a559-e05e3a23f901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f61eb9e-a6ec-45e1-bec6-f6cac556259f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d8568d-ccd2-45e1-ae1d-dc0621186955",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34bf4536-0879-4860-8b25-e4d853349eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c104c00-3a08-48b1-a958-8add7f790403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17405157-b316-43d5-ba19-c2e57ffbe2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075953e5-8891-4169-9aa7-25bdde22fefe",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03c868a-b6ce-4e1a-be04-8d86388ac05e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f907724-3ffc-4b01-9643-7ab95c2960f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89149bc2-e8f5-4a48-80a2-4256711a58db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b919d7-ca12-4b3b-8d6a-11d4276cd252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054a148b-c460-4be6-84f1-3b56602580b3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dde36e5-ac87-4d40-bd15-da2725172164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "029acf23-a6cf-4d71-8ebd-e424f55ea307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef901954-235e-435e-9205-f24c66d52fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f54afbf-d500-48d4-811a-cd3e57aec006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c622d382-e17e-42c0-8cee-c620adbc8b23",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d9161d-3d24-4fae-a103-62b04e0cea17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4f7377a-3608-45de-bf7a-d35082c7050f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "365022cf-5403-42e1-86d8-2c2f0fffa105",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a0477a-468f-440b-a635-94ec63715f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bad85d0-af73-467a-849d-71b0efaa35fb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97de160-5fc0-47b8-be63-1d42c40eda8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccd20ac6-4333-4ed4-9ec5-39f97a2cbe16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67673481-8061-42dc-9da1-1b76512df62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b923bad-5f10-44ca-941f-a4d20a0ef881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b90775-179b-4b9d-9f80-124d53fdc4b7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f274ba00-e185-41a4-b267-174e740c7e93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64e310ec-3e74-4d1b-949a-cade7f2f3fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331d9d45-1d0c-4708-96c4-970aea54b4a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4925324d-859d-4a7f-83d2-85b7430a2452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69f6573-5c3c-4c50-81b2-81117c292a82",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85aa1254-2091-4043-a280-019b1c0208d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82d7356b-99fb-4a27-8e22-e7018f6dc6a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32f435e-e459-45c4-a89e-7830f3e4187f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948f595c-f39c-40a6-9e2d-e477441cdf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c3093f-93db-4dc9-ad6c-b9e53fcff57a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6864d2b6-8f46-4035-b7b2-b359a7859e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2df4ebae-6a1c-4a0f-bb18-01a24d9efc67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "088074c8-c7a2-4d36-b0a0-08f08bb0c81f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba6b023-faa4-460c-80ef-6f6ec9c1e697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2092ffe7-6bfc-4032-a548-73e293f9e671",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cb7be0-3fc9-4a58-b939-65f13088c019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff66b924-0966-4215-9e32-77c2c0874d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30a36f5-969a-4ea1-a399-3eaa73dff6e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec87c03-9283-44d6-8daf-d2bb3651b850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14542b7-9b33-4824-98af-f2b9a18f031d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83cd2b5-1dae-4e8c-9cca-a5ce467fc106",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3d73e6f-708b-4d3b-b552-b8c102bbf726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3616b102-1ca4-4086-88ef-9443143d306a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86107987-dc10-4020-b860-70d8272b7389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37385161-7588-486a-a000-6157c755480a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bee5d4-dd57-44bd-80cb-5ded28abef4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29685ad4-a7da-43b8-8e31-fb33519bafac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cb7fbd-f2dd-45c0-93c8-3220990d4b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58a0d6f-0d8a-41b9-8774-7603fab6a5b1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cacf07a4-791c-460b-966a-7c999e7a1a14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cdd78a8-541a-4f42-8766-d1e322575a19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e26b3952-423e-423c-a72b-0141dce59e16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d1e66707-1ee2-4810-bbf6-a4200c98491f"
                    }
                  }
                ]
              },
              {
                "id": "d77ed741-5028-4f3e-98f2-05b49f1ff424",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e1a4380-8f56-45de-abfe-c19e522b82c3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabab52f-8e5b-4d08-830f-82e98ff87d52",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "15a7e47e-c3e2-4c33-8916-013395876acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e78bb2c-7292-4f65-91b7-ba1b72904c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45009f87-15a4-4e73-a161-db3caf16b2f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5684a1a5-a875-4840-b49c-95cc06adf0c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "192eeb39-fa52-4f36-8cb1-034ef641602c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10a4aecd-a1e4-47d7-ab29-303c2804a463",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cbea437-8faf-4b16-8d4b-667011270613"
                    }
                  }
                ]
              },
              {
                "id": "9f8b5e52-c26b-4b9b-8e64-08f3fedeaa9b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a80f6f08-5a0c-42d0-b3d3-73cc83489e9b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43af980e-03cb-4eca-8a87-fb1cd8e10e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9dd4108c-e11b-46e5-9fa2-5c3d13a8329c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac65567-0c49-4b53-960d-6650debb1223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d6c667-bcb7-4780-a178-70b3242ac710"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "371cd7bc-7e94-461f-8597-c19bab6e9c45",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f900eaae-83b7-465a-ad64-72270a258ef5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12ae30ec-81c9-4567-bb26-92176fbd4cec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9d97af85-d538-463a-a7aa-48bca7ffdd00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e3c9742-28d7-4901-a8dd-60afa783fee0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01cba159-a566-498d-9b39-c023e7d416cd"
                    }
                  }
                ]
              },
              {
                "id": "9938aec3-3b65-4ef4-916f-da28f8c65ff8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b865b67f-f87c-414a-9711-e2bd0253083b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "07b7a31c-9cd9-491f-b8f8-dfe2fe859322"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f2e0114-0dff-4dd4-81bb-5e0fd8dde54c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c947e242-e304-4df0-8fdd-a5a5aadd87b2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "353035cb-4c66-48f2-bc38-849038836566",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9f8e3d13-a223-4a38-89f5-7bc01b2950ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aeb2cfb2-0d62-4faf-9b69-c8fdbbec4dc9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e40a356a-82b9-4323-8d20-f5c55ca7e01b"
            }
          }
        ]
      },
      {
        "id": "79e25564-d946-4f8e-a52a-de4e109d17c5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8a68cc5f-5c80-4638-9aa0-4e77157a7258",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f285b526-4c41-4340-b724-8e131062ca04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c67c5f0-7119-4afc-b5ef-b73d3b3aeb13",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78119a53-966f-45d7-8976-4cfb99e9381f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "27856913-f8d3-40eb-a388-a1fdd17df9f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b4d2d0-2319-4c8b-ad56-36a24e3eb621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6b10289-8dd6-48ef-b1f3-a547b52727f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "161a2e93-0fa4-4b0e-944f-c207d27b23d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "807e5390-c058-45ea-a921-9bf9ab8b68a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfa8be39-c491-41e0-bf75-4ecdfd228485",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52fe92d8-fa69-4663-a80c-8aa21bd07ea0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "864ac878-37d4-441b-bfe5-1f32eb5d0d99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "da2df9a5-fa27-40fb-9b75-73950f719fa5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dab0d3a3-f173-4b36-b5b0-f952702ea9c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0ce0743-a97e-4757-a1ca-4d5568ab17d2"
            }
          }
        ]
      },
      {
        "id": "449daed4-6746-4378-8c58-1f9035fade07",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dcf52f80-45bb-4cba-b87f-4add61f866b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37e239ef-b8a0-4286-9101-96668e03eed1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "10dc9a99-5af9-436f-8865-bae4d3ca54c9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e95d08e-0861-4da2-b01e-c5a9575b1c7f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f11b168-f83b-4b89-b8ce-04db23f6008e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "098af271-0b70-41ac-9d09-8f04dbe99df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0049959a-27b3-4d4c-8e7c-4d5ae8b13f98"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7872afe-683e-4278-b347-7e62baa242fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77c8d6b7-c13f-478f-91ee-8e470f15a0e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cc56f4f-a76f-4d0a-8ecf-9fd7b8ba93ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4449b11-b0d7-4de7-bb79-eb0109a9f225"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf029046-d128-4cc0-ad78-d871ec021c18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6a20639d-b531-4671-99b0-bb1927a56b1f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3b2622b-bcab-4da9-8f6a-cf9ea112356d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a495e96-d345-4263-9800-5c50b859fb45"
            }
          }
        ]
      },
      {
        "id": "0630e25a-6114-4b01-89c3-2915b814a182",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8cefc212-1da1-4e39-99c0-2ec04ec4bce0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "769849ce-cf17-4d15-aa71-869e550ad271",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d14a274-76a8-42f3-92cd-28b252ee4c8f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c671f5c-410f-4ddf-8cb0-6a4bfa5e1c1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39b551b5-43ad-44ee-831b-a1a4081ccecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d5453b-10be-417a-ac91-6b2c0cfad580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5f9551f-0cb0-4ba0-b5b9-1626cb5cedae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52c7e833-0e21-4718-81e6-ef6cd6beeb58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "725a310a-be48-49be-8edf-ccfecf977d1f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a671cf60-980c-438b-a399-d3bc81a3595e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ca2bbc5-3dc2-4fe5-a16a-e187329d7dbf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2396e169-5b69-454b-b397-6eada8edc72c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0e170cfc-7676-4acf-8c66-97f3f6ae5694"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1a6559b-f774-412b-9e8e-2a8a5e613b36",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc119492-5aac-4575-8b38-56595889c8e8"
            }
          }
        ]
      },
      {
        "id": "558259d3-0fdc-4c37-9a17-9b413cfd7069",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "338508bf-16be-4d73-b65c-1506bde14146",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20899dac-1bcb-45dc-b4d0-9816f64008b0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2f49d85f-5b44-4778-bbfb-5061da564db8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea1d3405-ac2a-43c1-bb31-3f2e4171f1c9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df5e0499-5c37-4a93-8acb-d1df2a207d20",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 141.0211267605633,
      "responseMin": 19,
      "responseMax": 1879,
      "responseSd": 270.6207644383729,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691023190680,
      "completed": 1691023243041
    },
    "executions": [
      {
        "id": "7de8727d-ebbb-4864-8f85-e945af39e476",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f4f388f1-dc00-45be-8ad2-4fb03d72a057",
          "httpRequestId": "5097f033-1e0a-4a25-bb48-bc847f180de4"
        },
        "item": {
          "id": "7de8727d-ebbb-4864-8f85-e945af39e476",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fa23b0e7-3aff-437a-be57-40d134ee849c",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 0
        }
      },
      {
        "id": "c5013b26-7845-43d3-b90f-42412dc28e49",
        "cursor": {
          "ref": "b4adccbb-d20a-4013-a5b2-f4c8597c71cf",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "714409a3-76d7-4e93-b8d8-d7c97634b118"
        },
        "item": {
          "id": "c5013b26-7845-43d3-b90f-42412dc28e49",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "18a84c50-fb1c-40f5-ad5d-5f2de28c2f86",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "3d674dbc-dd24-4c83-b205-3dbe81bcd874",
        "cursor": {
          "ref": "2803a320-b831-45bb-bd90-1dbf3fae4c80",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b062684c-e0e8-40a2-adfd-7c82ac6a6227"
        },
        "item": {
          "id": "3d674dbc-dd24-4c83-b205-3dbe81bcd874",
          "name": "did_json"
        },
        "response": {
          "id": "d2d6b39b-c49f-4f88-8236-eb22eaeccf41",
          "status": "OK",
          "code": 200,
          "responseTime": 604,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720c6e7a-b5ff-48e4-92bc-161301957f2e",
        "cursor": {
          "ref": "83324d02-d77e-4ed4-ac13-7921d010aa06",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6ecb8cb9-4677-467d-b36b-5497ebf71fef"
        },
        "item": {
          "id": "720c6e7a-b5ff-48e4-92bc-161301957f2e",
          "name": "did:invalid"
        },
        "response": {
          "id": "d4696780-a06d-42d2-9ad8-27fd217a4fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720c6e7a-b5ff-48e4-92bc-161301957f2e",
        "cursor": {
          "ref": "83324d02-d77e-4ed4-ac13-7921d010aa06",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6ecb8cb9-4677-467d-b36b-5497ebf71fef"
        },
        "item": {
          "id": "720c6e7a-b5ff-48e4-92bc-161301957f2e",
          "name": "did:invalid"
        },
        "response": {
          "id": "d4696780-a06d-42d2-9ad8-27fd217a4fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c0ab06-9d68-4abd-936b-5c2aba0fdba5",
        "cursor": {
          "ref": "61dd1619-54c4-4f93-8758-6e6955beea91",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fadbf7a6-c5fc-49cb-b0f6-066a4f63d910"
        },
        "item": {
          "id": "e3c0ab06-9d68-4abd-936b-5c2aba0fdba5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ac126f31-3e7d-44e4-b0da-2c4c30b61e31",
          "status": "Not Found",
          "code": 404,
          "responseTime": 118,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2efb57-4bc2-4141-9a7b-0f5356b4ac79",
        "cursor": {
          "ref": "104ecb28-8c6e-460e-bd21-1ac58e483225",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0bef2233-13e7-4422-941f-7811a02b29fa"
        },
        "item": {
          "id": "ae2efb57-4bc2-4141-9a7b-0f5356b4ac79",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bc90f187-a760-4a8d-921b-2d54d4f39c54",
          "status": "Not Found",
          "code": 404,
          "responseTime": 60,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eadfc03-a82d-4b05-95dc-c2446c721ac5",
        "cursor": {
          "ref": "ac1b448d-7c63-4143-bd48-80a517e2ddf0",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "641a33be-3db2-4af0-8b9c-5fad6086f2a9"
        },
        "item": {
          "id": "9eadfc03-a82d-4b05-95dc-c2446c721ac5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f02a3eaf-b716-4345-85ed-0fa75918d00f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c564f01d-89aa-474f-8242-64660628e18d",
        "cursor": {
          "ref": "9f750033-32eb-4a3e-97c4-69f89c817502",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fde5a682-d261-45e8-9002-d2712fff358b"
        },
        "item": {
          "id": "c564f01d-89aa-474f-8242-64660628e18d",
          "name": "identifiers"
        },
        "response": {
          "id": "b2ffd759-f377-4741-90d2-f1de1c19bab7",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5233f996-9ea2-4ddc-968f-879cbeb48ddb",
        "cursor": {
          "ref": "e98d3a35-5270-45a3-88ee-7457d26a2a54",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "211c47e2-2d50-4c9e-b000-cec99a075253"
        },
        "item": {
          "id": "5233f996-9ea2-4ddc-968f-879cbeb48ddb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e057cf57-9c07-41aa-827b-eed9934f7fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f5d91f-bf67-476e-9467-d099f798621f",
        "cursor": {
          "ref": "9e46524e-39ab-4943-a3d3-dc8a2d0b5880",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d2ec56a5-0c8e-40f3-b3f5-06fd7799473b"
        },
        "item": {
          "id": "56f5d91f-bf67-476e-9467-d099f798621f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cf6c8940-ead4-4a14-83be-2798648b8e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ed10ba-7721-4a1a-99af-610792afea38",
        "cursor": {
          "ref": "2d20c4e4-dd5e-4cc1-965e-c54c7515e2ea",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6c024ed5-77c0-4727-aa80-843d5dd2affa"
        },
        "item": {
          "id": "11ed10ba-7721-4a1a-99af-610792afea38",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f123e8f2-316a-4bef-818f-45ac2c67bd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200caae5-c376-4e62-b7b2-16738345c43c",
        "cursor": {
          "ref": "3a2ce3da-dec1-46fa-af04-4697fe34c84e",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b1ec1f3a-2cbd-48af-afca-2bd59db72697"
        },
        "item": {
          "id": "200caae5-c376-4e62-b7b2-16738345c43c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fe43880e-f62a-4b5c-bd84-8ae748da9496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0b38ce-821f-4f07-bf8a-b3894f02e0df",
        "cursor": {
          "ref": "dbd26bb0-5493-43ce-91c6-b6a9798bc9b4",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a7f0f898-791c-4d10-99e8-64d2b7db7317"
        },
        "item": {
          "id": "8a0b38ce-821f-4f07-bf8a-b3894f02e0df",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "406570e4-2363-4627-a653-1157830fd03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531b2d83-5847-4b6f-b37d-d380249737fc",
        "cursor": {
          "ref": "89af0288-5261-4b2c-8bc9-2f8e424fd9b0",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cf139f61-94fd-4830-a77d-d8e5d23b5eb8"
        },
        "item": {
          "id": "531b2d83-5847-4b6f-b37d-d380249737fc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0eb4f5d4-dd9d-41c7-8c75-aa8a5593cc15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f5203c-cc24-4529-8be0-9dc89bd1f6fe",
        "cursor": {
          "ref": "953c20bd-ceb9-4e0a-988c-0a0212ae513e",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "da7c13e2-1828-48f2-8f33-bd442dba3873"
        },
        "item": {
          "id": "b4f5203c-cc24-4529-8be0-9dc89bd1f6fe",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "55b6e732-82d7-458d-b16f-e527198eaf6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d46d1d-f342-47e8-8ebc-ea53a77dd9b5",
        "cursor": {
          "ref": "a76876ec-dd19-4f8e-a1a6-4fdbb4ac3d30",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cd3ce7fd-814d-48fe-ba16-d9bbfd74fa10"
        },
        "item": {
          "id": "33d46d1d-f342-47e8-8ebc-ea53a77dd9b5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7ecf1d15-735f-4ad7-af20-87dd89ce5a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09934f60-492f-49f1-98e8-6e7d8e8a31d8",
        "cursor": {
          "ref": "a86e3ae5-9331-450b-a401-056abb7a3a1a",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0beb668b-e6f7-4b17-a260-bd2462b52db2"
        },
        "item": {
          "id": "09934f60-492f-49f1-98e8-6e7d8e8a31d8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c3141c1f-b93e-4294-98f4-369815bd741e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f5cd04-2eb2-417d-bbce-6d605c90cd08",
        "cursor": {
          "ref": "01a29f15-9380-4772-8f10-b060f8c7489d",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c4b89612-b15a-4037-969b-69d7a274fd96"
        },
        "item": {
          "id": "d9f5cd04-2eb2-417d-bbce-6d605c90cd08",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "17b5777c-1237-4b32-907e-582e8377e4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358611ac-7e97-42f9-8a62-1672f2d47f04",
        "cursor": {
          "ref": "28bbd6da-83d6-4c2d-b33d-90ba4ccb0510",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c0466261-1416-4ffe-b106-13045e901a0a"
        },
        "item": {
          "id": "358611ac-7e97-42f9-8a62-1672f2d47f04",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4e6b587d-c246-4ac3-bf7d-f604a4f621ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85df090d-1606-4c86-bc8c-037e7acd656c",
        "cursor": {
          "ref": "606591a4-9b5c-4055-803a-750732b8fe5c",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c3c94c38-8561-4866-abb3-b4177020be19"
        },
        "item": {
          "id": "85df090d-1606-4c86-bc8c-037e7acd656c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c24b9da7-166f-4b6f-a8d2-c2ee5394e58a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f5ef9f-2859-4848-920e-535499338cfd",
        "cursor": {
          "ref": "c951536c-ac31-44f3-a352-fbee1138159e",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1932c3fb-8bcc-48b8-8238-57e4225e7adc"
        },
        "item": {
          "id": "67f5ef9f-2859-4848-920e-535499338cfd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e1e83d8c-4fa5-4a30-8f4c-69830e356357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63ee161-b98e-49ec-b0b0-5ab9f46c64af",
        "cursor": {
          "ref": "dda9117f-e4a8-495c-8587-f7bb95b1d611",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dccc8f61-c2e0-4002-ac95-a3a7e8022729"
        },
        "item": {
          "id": "f63ee161-b98e-49ec-b0b0-5ab9f46c64af",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8aa31870-a67f-4fe0-b20b-35367de18a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d179dc-830a-41d7-9e2f-9a0277d9b26a",
        "cursor": {
          "ref": "22b76451-ebcc-4bea-b0e7-643606facd78",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "81246330-5572-42ab-b070-d90416dc9bf9"
        },
        "item": {
          "id": "f8d179dc-830a-41d7-9e2f-9a0277d9b26a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5bb3c827-6be1-434a-9c19-927d4ac6fc86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1228dcf7-30b4-4be5-861f-0fc9dce80327",
        "cursor": {
          "ref": "ec5fd248-0bac-4a44-9c2d-4b79a21fdc46",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8e345351-2545-491a-8a3c-84b2eea2e83e"
        },
        "item": {
          "id": "1228dcf7-30b4-4be5-861f-0fc9dce80327",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a6855f29-4d58-4eb7-a4dd-901e866d085d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327a372f-d6cd-4ab2-b84a-c6d4c3f781cc",
        "cursor": {
          "ref": "3b285515-6fe2-4d91-a1bd-7515332b175b",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "18e36be5-f295-4628-b95e-ffda4218f3e4"
        },
        "item": {
          "id": "327a372f-d6cd-4ab2-b84a-c6d4c3f781cc",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "33960023-52d8-4e83-a2ad-a1890460d846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13cc8a7-f6b8-4433-ab14-14ec2a85eaf5",
        "cursor": {
          "ref": "a78dd575-d7e7-42d1-916e-b1f46fb489c3",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "259f818d-bb0b-4a10-b357-c4ae3e131dd7"
        },
        "item": {
          "id": "d13cc8a7-f6b8-4433-ab14-14ec2a85eaf5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f6cb9254-6f79-49be-8290-bb4594f128d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2add36f4-0ae5-4c5b-ab3e-a020a1536f5e",
        "cursor": {
          "ref": "51d129f3-2367-4288-8b98-085cf9b4c86f",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "163a7cb5-4167-446a-9b6f-dc802461ba7e"
        },
        "item": {
          "id": "2add36f4-0ae5-4c5b-ab3e-a020a1536f5e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fc4bb2a9-70be-4f3a-b3b5-e85936e6d01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d2a974-3bd4-4765-b97b-58ea27110fc7",
        "cursor": {
          "ref": "cdb27ddb-62c3-4c5c-b2e1-6f44c328c041",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e0a6ac38-8eb3-4feb-a4e2-3307d3afe280"
        },
        "item": {
          "id": "76d2a974-3bd4-4765-b97b-58ea27110fc7",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "062f3964-fda6-491f-9950-c3e5076cf2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7656e4-0159-4c82-9256-f51dd4b676be",
        "cursor": {
          "ref": "edfbac61-aded-431f-ac7b-02c7da040f90",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "677ed50a-709a-4f76-834f-14318d5e4b49"
        },
        "item": {
          "id": "5d7656e4-0159-4c82-9256-f51dd4b676be",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "260b5205-fad8-4de2-80da-c85f57d5ee80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cceb5b03-b067-4343-a264-5fc80548624d",
        "cursor": {
          "ref": "1bdacca0-84e7-467c-bbe7-2660fedc0165",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "35413290-7c22-45c9-ab67-4e058ec6a998"
        },
        "item": {
          "id": "cceb5b03-b067-4343-a264-5fc80548624d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "05ac6625-ec22-4dd9-8495-9a0fdf7df706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9598fb71-2f72-4c5c-b1f7-8c320d7d9e5d",
        "cursor": {
          "ref": "40c96591-67f0-401a-a53c-3dc21bb1dbc7",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a15ee6af-76ba-4aed-8c58-b8e137228c50"
        },
        "item": {
          "id": "9598fb71-2f72-4c5c-b1f7-8c320d7d9e5d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "49867bc7-fe41-468e-8c1b-4b61bc6cc03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96f30b3-276e-4a72-a898-2912046bb43b",
        "cursor": {
          "ref": "679fe81f-8c21-452b-977b-a0c4b0d8271c",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "713b7553-4953-4937-9f6c-a29b0d08062e"
        },
        "item": {
          "id": "c96f30b3-276e-4a72-a898-2912046bb43b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2b20e5f1-c7cf-4083-ad4f-0e6f8c49ddec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc84c72-207f-412e-873a-9953afe6d9a6",
        "cursor": {
          "ref": "b1078ea7-c9a6-4c16-acff-82c30db5364c",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a27bbf21-a502-450c-b35c-f9e2353998f8"
        },
        "item": {
          "id": "cdc84c72-207f-412e-873a-9953afe6d9a6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5ca46031-cf24-4baf-9758-63c44049c440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07895ce5-a89f-426a-9929-96695862ae8a",
        "cursor": {
          "ref": "783732aa-611f-472f-ab21-fde2b6494daf",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "28d6add5-58cf-4087-877d-c6bc1a79b57f"
        },
        "item": {
          "id": "07895ce5-a89f-426a-9929-96695862ae8a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c5ceabe4-c274-4a21-9893-cde145d07f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ad0a94-1693-477d-b6ec-9262af072f0b",
        "cursor": {
          "ref": "ee57199e-fa0c-459c-8b84-5ac2b196b5bd",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5c02b4bc-3021-4d14-a124-88138c6bc34e"
        },
        "item": {
          "id": "24ad0a94-1693-477d-b6ec-9262af072f0b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c432036d-ba93-4175-b846-bf076e8260b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9725e4ed-6b76-48bc-842a-9c114ee16b40",
        "cursor": {
          "ref": "9d2cad02-44a8-469a-97dd-eef4caaa0319",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "94e4e417-4024-4791-9d72-5787d6797497"
        },
        "item": {
          "id": "9725e4ed-6b76-48bc-842a-9c114ee16b40",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "28c16da1-ceb6-4759-913b-4b5735626556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acad1b60-5c6b-4c8b-96f1-a01c9918744b",
        "cursor": {
          "ref": "527e85a0-bca2-47ba-858a-d7e32fabb65b",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "af183460-b64f-4cd1-929e-7ec17dc49fc9"
        },
        "item": {
          "id": "acad1b60-5c6b-4c8b-96f1-a01c9918744b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0589bb96-2904-451f-98f8-8f13778def02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e6efbd-cb22-4b95-8546-39c8bd0e6eda",
        "cursor": {
          "ref": "46db4f66-e465-40ad-81fd-792da3d5a8c3",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "720435fb-2212-4e1a-b885-0129b5efd28a"
        },
        "item": {
          "id": "20e6efbd-cb22-4b95-8546-39c8bd0e6eda",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5771fcd8-1c31-4332-a943-19d6e265c28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24121b3a-f45e-4ae5-ba68-911777e78692",
        "cursor": {
          "ref": "7550805b-7b3f-4766-8d9e-81a522119cea",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "89bfc478-d666-4510-8d33-49e2e1667dc7"
        },
        "item": {
          "id": "24121b3a-f45e-4ae5-ba68-911777e78692",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ef4efeb2-a130-4ab5-adf5-6fa8ae4a1684",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "aed2c44b-a332-467c-8bf1-ff91385cb6ca",
        "cursor": {
          "ref": "cfafae08-207b-4e14-89cf-ee0e912fee5f",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9f8bd5ba-3db3-4490-93ba-a32b5b47178d"
        },
        "item": {
          "id": "aed2c44b-a332-467c-8bf1-ff91385cb6ca",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d5d78614-e21b-4f32-a183-2645d2ccdddc",
          "status": "Created",
          "code": 201,
          "responseTime": 1879,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "83de8e9d-d78f-46ce-9075-c8e9ab896392",
        "cursor": {
          "ref": "0735bcff-7691-45e7-bed1-08da409930ab",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7b7c543f-c5d3-4f4d-aea4-41446280d24c"
        },
        "item": {
          "id": "83de8e9d-d78f-46ce-9075-c8e9ab896392",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "43448222-33d3-40f9-a238-5638cb19f5f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5be81aaa-b057-44f8-83fd-d0e22ad40e1e",
        "cursor": {
          "ref": "e9785973-e9dc-42bd-9bf9-c38645395408",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a03dd2bd-2d66-4ba2-b663-14a23e99b35d"
        },
        "item": {
          "id": "5be81aaa-b057-44f8-83fd-d0e22ad40e1e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "55e82a37-762b-4743-a3c8-04fb9097d467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a1f143-cb49-416e-be71-af1853c891b8",
        "cursor": {
          "ref": "ae909910-d1d1-41eb-a7ea-6cba7dc69acf",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "67b7488d-cd97-4c82-8483-d34b2cc79f34"
        },
        "item": {
          "id": "60a1f143-cb49-416e-be71-af1853c891b8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "95a3dd03-2dd0-4f8c-81c2-4002a70e1110",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "859b23b7-9e43-43fd-9037-5e94ed5c131b",
        "cursor": {
          "ref": "2749dc3a-1a1d-4ddb-af06-e15e038c84ee",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a74b50fb-676e-4bdf-a3d1-d35be2857d49"
        },
        "item": {
          "id": "859b23b7-9e43-43fd-9037-5e94ed5c131b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e06c0005-409c-435a-8ef8-85a31d003eb6",
          "status": "Created",
          "code": 201,
          "responseTime": 1549,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c63a0336-550d-4fb6-92cd-5e2e3a87845a",
        "cursor": {
          "ref": "a38a3be0-681d-4050-ae84-32df3d42eb7a",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f88a68db-20c4-42c3-9dd2-323acd82da30"
        },
        "item": {
          "id": "c63a0336-550d-4fb6-92cd-5e2e3a87845a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d7a465d2-c248-484f-a3ea-15ed5a71c011",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "23913ca6-7e4b-4c99-b6e8-614ec1f53f3b",
        "cursor": {
          "ref": "4dab2f5b-bbc2-4320-9c1c-148a009cdefe",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "df66ac40-09c3-4d7b-bc0d-bd7a4870d803"
        },
        "item": {
          "id": "23913ca6-7e4b-4c99-b6e8-614ec1f53f3b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ab3f330d-d124-4839-80e8-437da30ac3ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 769,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "23c882b3-fcee-4b8a-bf73-b16cbb19a7d9",
        "cursor": {
          "ref": "0f7eaa74-f3f9-4c31-a3e7-fff8b217eb1b",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b489ee93-91d7-4798-bff9-f5996359c837"
        },
        "item": {
          "id": "23c882b3-fcee-4b8a-bf73-b16cbb19a7d9",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "38a061dd-cec7-4b6e-864a-d71a67f30c1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "05e28233-79de-4459-a470-e96916f45881",
        "cursor": {
          "ref": "252fc1c6-4944-4e6f-817b-8b5589f6ea65",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0d7c3775-94aa-43a3-b0ea-f0494af4d279"
        },
        "item": {
          "id": "05e28233-79de-4459-a470-e96916f45881",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3f542449-7638-44cc-babb-de97dd081211",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8a2b630a-f059-4953-806c-53f4d6bd8d35",
        "cursor": {
          "ref": "999b0132-d080-4822-b241-0a976004d9da",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a3e603bb-c3cb-485c-b67c-5f7a1b26e4aa"
        },
        "item": {
          "id": "8a2b630a-f059-4953-806c-53f4d6bd8d35",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ba1dfcd0-7022-47bc-bf66-dbbbcfe1a1f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "bde89de4-5aaa-4f13-b68d-4bed7c67b0a4",
        "cursor": {
          "ref": "0b78b696-0159-41ec-9ecc-cbd279bafebf",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2804d18b-b8df-4dae-bfb6-0c643f213a3d"
        },
        "item": {
          "id": "bde89de4-5aaa-4f13-b68d-4bed7c67b0a4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b42c2620-179f-429d-a6c4-ada4aef682bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c8aa7671-2e0a-4430-a9c4-beed6acb2fcc",
        "cursor": {
          "ref": "27c3068f-a18d-46be-b9b7-634144e94db4",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5fd63e44-5a46-4d7f-b242-69513c32fa4a"
        },
        "item": {
          "id": "c8aa7671-2e0a-4430-a9c4-beed6acb2fcc",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1490df28-d6a8-4d96-9387-087b77985fe7",
          "status": "Created",
          "code": 201,
          "responseTime": 967,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "dbfd06f6-3ae5-44e9-9a63-df586a5b7a8f",
        "cursor": {
          "ref": "4727ca04-03e5-4cd7-9907-cd947dd91a71",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c2eece8c-afad-41e8-8d12-51d1bfdcf83c"
        },
        "item": {
          "id": "dbfd06f6-3ae5-44e9-9a63-df586a5b7a8f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2512ba5b-941f-4eb1-80cb-6cdcfd0b6b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eae87cc-437c-42ff-ba4e-bb2c1ce71b32",
        "cursor": {
          "ref": "179bfb96-44c0-4d9e-8c97-1e60f3749e4b",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "596229cd-37ff-483e-919d-f32271e6e8d8"
        },
        "item": {
          "id": "2eae87cc-437c-42ff-ba4e-bb2c1ce71b32",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "72810609-c8ba-4238-9588-7dc534d82163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdbb0af-731c-48ed-8a78-14c33fccb8fc",
        "cursor": {
          "ref": "057627d8-1fec-4caa-841f-8fa974885521",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "de27bd89-8cf9-4061-a6e8-de5678d416b4"
        },
        "item": {
          "id": "1fdbb0af-731c-48ed-8a78-14c33fccb8fc",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "97396ff8-3659-4297-b091-ed7ed69bc6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0773ca-1d0a-41ff-8615-8477f58d2868",
        "cursor": {
          "ref": "b73cf8e7-6629-4ba6-9bdb-d8847d40f8d5",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "359578a0-54fd-452f-b34e-643bec183059"
        },
        "item": {
          "id": "6e0773ca-1d0a-41ff-8615-8477f58d2868",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8c1c689d-bbce-483d-a8f6-c5ed46ddb18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd54a4c-40ce-4e44-9849-6b390279d14f",
        "cursor": {
          "ref": "1fd4324e-8bc6-4e06-a946-ccbd0b0825aa",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f1c53f01-70c1-427a-b98f-f05b23482b8b"
        },
        "item": {
          "id": "8bd54a4c-40ce-4e44-9849-6b390279d14f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "fa9577c3-1b4c-4318-b5a6-c39488ebea86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa17345d-ff78-4f9a-80d1-2eba90998b21",
        "cursor": {
          "ref": "ce8cf49a-b80f-4b09-84c0-67a740ea4a77",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bbd6f3db-ba22-4c36-bf50-31ef3217df6e"
        },
        "item": {
          "id": "fa17345d-ff78-4f9a-80d1-2eba90998b21",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9b9927e3-9d29-47cf-85f5-4ab3c4edd27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa19996-27c0-4ee4-a774-ee54765b0b33",
        "cursor": {
          "ref": "7b2f50e0-71f8-4e79-b397-62a83e20c54b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8b37db72-291f-498b-a992-d7667de7369f"
        },
        "item": {
          "id": "ffa19996-27c0-4ee4-a774-ee54765b0b33",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e6263a48-949a-4680-9056-48ea131ff135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9f0c2d-56b6-41de-8c0e-93476b2db981",
        "cursor": {
          "ref": "f17c3055-1ef4-4dc0-b14e-308d570a96e8",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f447bf8f-6b33-48b0-a68d-b0c088f1c540"
        },
        "item": {
          "id": "5e9f0c2d-56b6-41de-8c0e-93476b2db981",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2db12581-e391-49c6-ac4b-f526a68960a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ecfa93-28de-4c10-987d-987ff78c842e",
        "cursor": {
          "ref": "04f203ca-1972-4b72-8074-583171db2aa5",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2d58b7a4-150f-4985-912b-a223fa471642"
        },
        "item": {
          "id": "c2ecfa93-28de-4c10-987d-987ff78c842e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7c1f0189-57d8-4e54-b166-510b333c4cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a072deda-2777-46af-93c5-7fab5226ac30",
        "cursor": {
          "ref": "4ee916a2-93a8-486a-b13c-0a03be7714b1",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "96561e20-d7ce-4c37-a2f8-94b72162dea5"
        },
        "item": {
          "id": "a072deda-2777-46af-93c5-7fab5226ac30",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "515a33aa-92ce-4c89-b3be-9c01680b34c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684843f5-f11f-4774-8768-ffad8ab715eb",
        "cursor": {
          "ref": "921949aa-0740-417b-b84f-1bb2b94ac6fd",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6d3b5efd-2fa2-46b5-945c-5c4032d57a7e"
        },
        "item": {
          "id": "684843f5-f11f-4774-8768-ffad8ab715eb",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "70b81f44-18d5-491c-9b3f-520fdc737ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1d5b39-2c28-4b61-950d-6e79278f878e",
        "cursor": {
          "ref": "c023f9b9-c425-4126-9bba-2d611f3807a4",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2f44f492-7fb6-4dd8-9d2a-f905b73d9b64"
        },
        "item": {
          "id": "8e1d5b39-2c28-4b61-950d-6e79278f878e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d36d1c70-fe2d-4fdc-a090-56b859fc37de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dae3441-305a-4dab-916e-01451e932cd7",
        "cursor": {
          "ref": "c00cd728-6da3-45bf-a233-4c736565f906",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4dc88aec-2709-4bb2-960b-17bee45fcee2"
        },
        "item": {
          "id": "9dae3441-305a-4dab-916e-01451e932cd7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ffd62caa-10bd-4550-be09-1ac0a944c6ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfaa93a-2f4d-41a2-86e0-2df91fad2aa2",
        "cursor": {
          "ref": "1482696a-b165-4c4a-8c6a-9b213c9edbab",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bf54e4da-1c5d-4632-944f-26450bb74c50"
        },
        "item": {
          "id": "4cfaa93a-2f4d-41a2-86e0-2df91fad2aa2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "19b2b220-f14b-406a-a36f-e23aca87ba74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 769,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "858c3729-08de-46b4-a623-ce410c7c7076",
        "cursor": {
          "ref": "2c9c4c6c-2f59-4527-a6e8-92fce9b32b14",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ee9f2d45-8a75-4d29-b03c-1e23d217533d"
        },
        "item": {
          "id": "858c3729-08de-46b4-a623-ce410c7c7076",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "244a1e31-a2ed-41e4-814c-c064dc68d797",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 767,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f57cd2f4-e9aa-4cc9-ad0c-29a77184d484",
        "cursor": {
          "ref": "db82aa1d-e030-4fcc-9e34-f6c6333286fd",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d98e881e-0b5b-4146-9e19-aebc1118e356"
        },
        "item": {
          "id": "f57cd2f4-e9aa-4cc9-ad0c-29a77184d484",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "812c8dc8-4a88-45a2-9aba-200b2c0a3836",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e5baf06c-c708-4d1a-8513-b0ce2808a118",
        "cursor": {
          "ref": "750f9de6-245b-4098-ba7a-b0aad2a516cf",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "77d392b3-1f95-40bb-81cb-222b9fec998c"
        },
        "item": {
          "id": "e5baf06c-c708-4d1a-8513-b0ce2808a118",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0dbee71d-6702-455b-a17d-c1572eccca65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 807,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c5e9208e-1e50-4530-ad86-a836b51dc7c0",
        "cursor": {
          "ref": "04c1147d-f1d9-4065-90e5-3439f539f87d",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6c9cfb6d-2af6-4b5f-9808-dd009146497c"
        },
        "item": {
          "id": "c5e9208e-1e50-4530-ad86-a836b51dc7c0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8bd27335-7874-40e3-806d-499e9d93ffff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "58bc1af2-c17f-47f2-b323-9cac055d3054",
        "cursor": {
          "ref": "717a9b8c-e7c3-47b8-aa23-8a7d8e32cfe6",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "faee7bd3-cac7-4d50-b06a-d5131b7b3348"
        },
        "item": {
          "id": "58bc1af2-c17f-47f2-b323-9cac055d3054",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fc210630-75bd-4b51-8645-ab94da82a1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a954b15-85e4-4b0b-9393-bcf3b607a6c7",
        "cursor": {
          "ref": "5395e0c3-7175-43be-9db1-a3011ba3492e",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c62207a6-6ef6-473c-9e4f-899d358584f7"
        },
        "item": {
          "id": "2a954b15-85e4-4b0b-9393-bcf3b607a6c7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bc711437-70ff-4ca0-a7bf-bf4d15510799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca6303e-00f2-4363-8d60-728acb66d5e7",
        "cursor": {
          "ref": "dbcc556d-9ce1-4bc4-8223-188067bf7614",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f17f8514-8ec6-46b7-9fd0-d4ea1f0ee9ab"
        },
        "item": {
          "id": "3ca6303e-00f2-4363-8d60-728acb66d5e7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "aa666bb2-9d3c-4e4a-9c5b-364b37b7c570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ccdfaeb-61ec-4a6c-b552-ec4123673cea",
        "cursor": {
          "ref": "a29c9179-1ced-485d-9345-539ef3cb2f8b",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d4593c76-abda-4bd5-b6d7-44fb6329303f"
        },
        "item": {
          "id": "5ccdfaeb-61ec-4a6c-b552-ec4123673cea",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a85d2d72-29cf-4834-94d9-515281007aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e197bf-f624-40a5-bb47-06083faa7483",
        "cursor": {
          "ref": "0be44fda-38a6-40bb-9a2b-8ac55611cc63",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "119a7c37-034a-41ad-84d2-ee9bb37f291c"
        },
        "item": {
          "id": "17e197bf-f624-40a5-bb47-06083faa7483",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "422e9347-211a-475d-aad9-a29c80c590a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eeebc99-82c6-43e4-bbed-f6d49a0e3615",
        "cursor": {
          "ref": "ca68614a-3f4f-44e8-b854-e1d17d2a38a9",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "40e24ebe-fd40-4786-95c6-b0ef93d03892"
        },
        "item": {
          "id": "0eeebc99-82c6-43e4-bbed-f6d49a0e3615",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "752ab046-d903-460a-b537-cb76708af0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90454bc-b0ee-42c7-9809-69dc1d45f4d9",
        "cursor": {
          "ref": "bc544aab-b1b9-43bb-b3f2-f00b750cf9ef",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5cf0ed03-65f3-4174-bdcd-7195b681fc20"
        },
        "item": {
          "id": "a90454bc-b0ee-42c7-9809-69dc1d45f4d9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e072ea80-5da2-4feb-9090-473dd2053f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715c83ee-110c-4939-96d8-8c45b160c648",
        "cursor": {
          "ref": "31a9f4e9-56ea-4902-b62a-ff03f7afc917",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c03a902d-9a5d-49c8-976a-c89452aa562d"
        },
        "item": {
          "id": "715c83ee-110c-4939-96d8-8c45b160c648",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e8bd0c15-105a-4807-b51e-3274f029c3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0f970f-e8b4-4e3c-91c4-d71f041459f4",
        "cursor": {
          "ref": "225eddd4-19b9-4255-bd62-2172dc45ae31",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7ffd1e9e-8072-4ab8-9fdf-9571a8ca692d"
        },
        "item": {
          "id": "be0f970f-e8b4-4e3c-91c4-d71f041459f4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7d23d7ca-9ea0-4d5e-a0bd-e2705d983f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a7fe93-dd0b-4038-8af8-4bf3bb210c64",
        "cursor": {
          "ref": "8ee2bd97-af0e-4216-b7ba-0dc73fa0bcfd",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9034dc08-d7d9-46eb-91bf-bf86dff108e7"
        },
        "item": {
          "id": "13a7fe93-dd0b-4038-8af8-4bf3bb210c64",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d1f21fab-5e34-4787-b9a1-2caec3fdb4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be83cdf8-4c84-4baf-ac97-d3dbb09ad8e8",
        "cursor": {
          "ref": "88fc4cf9-e7d8-4fb0-9756-3a6bab8dcf8d",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a699bc54-d24a-4773-850d-20256e211b8f"
        },
        "item": {
          "id": "be83cdf8-4c84-4baf-ac97-d3dbb09ad8e8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7d4b7df3-17a5-4792-961e-70e20f3dc7f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f65b39-9902-4200-bfd0-be978aa0210f",
        "cursor": {
          "ref": "870f5cb3-b65e-4967-a8b0-90207d2e0634",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "51f62a52-6e73-416c-9d70-707c455a8624"
        },
        "item": {
          "id": "99f65b39-9902-4200-bfd0-be978aa0210f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "493be10a-b907-4577-bdc1-82274583f0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8113dc-4387-49fc-beda-84444dccc5fb",
        "cursor": {
          "ref": "8a11a689-7d7f-462f-bce5-5c3e1f2c8b45",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c240d676-4916-4e33-a480-a2f94aa92534"
        },
        "item": {
          "id": "fd8113dc-4387-49fc-beda-84444dccc5fb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "05f0c590-0ea0-48f0-8327-967d6076de32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612201fe-1084-4c63-a156-718474e84367",
        "cursor": {
          "ref": "c53797f1-0c00-47b2-b356-2d90eb769b3d",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7a309211-3e78-476d-8819-7aaaba973761"
        },
        "item": {
          "id": "612201fe-1084-4c63-a156-718474e84367",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "fd073047-5c4b-441d-819f-41b503da86cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9556919-1876-41ef-84fb-5643cac48f5f",
        "cursor": {
          "ref": "1b35bb00-6526-4c01-ab96-e819fd741c76",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8b555253-36df-4747-961e-2b157d28dd39"
        },
        "item": {
          "id": "c9556919-1876-41ef-84fb-5643cac48f5f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "06028c31-9994-4075-a75d-423f3796eaab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca48845-8b42-47fd-a0af-b482432561a6",
        "cursor": {
          "ref": "2b760f9a-66d7-4095-a71e-6e5773763d13",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e8c33d08-86d9-4345-b4c8-49b49c0059f4"
        },
        "item": {
          "id": "cca48845-8b42-47fd-a0af-b482432561a6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "431c2a31-11e1-418d-a6e2-81a54f41d508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d315458-c4fc-4d3a-be7c-04d0224e0ffa",
        "cursor": {
          "ref": "6922a5db-3743-4937-939c-9099a7f1d610",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "94021a2d-9299-4d97-b4c3-ac8dbc59e4b7"
        },
        "item": {
          "id": "4d315458-c4fc-4d3a-be7c-04d0224e0ffa",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f3aaeafc-3637-4bf5-973c-0617d1837413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32d94f5-6de0-43df-9b26-97eda22132fb",
        "cursor": {
          "ref": "29fa4608-f10e-4ea4-ac08-09255432a8e8",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "77c8c4dc-cbf5-4263-9623-c20ceb32c21e"
        },
        "item": {
          "id": "d32d94f5-6de0-43df-9b26-97eda22132fb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "02c73554-80ed-4767-b620-130d18ebfff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf57c0b8-7bfe-4a2a-a38c-1e5aca53e830",
        "cursor": {
          "ref": "44e00fae-09aa-471b-ad83-e70db53b7b58",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cecccc57-1523-482a-9dae-08f55f978de1"
        },
        "item": {
          "id": "bf57c0b8-7bfe-4a2a-a38c-1e5aca53e830",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6007a5cf-3fbf-4485-a134-6e15d9c73bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0519691-6c28-43f3-85f4-77218994a22f",
        "cursor": {
          "ref": "c8e2caf0-95df-44be-a9fe-39bc7f1c8256",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "aec692bd-2136-4a5d-9db2-24c781cd42f1"
        },
        "item": {
          "id": "f0519691-6c28-43f3-85f4-77218994a22f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "038e258f-cfc8-4445-938b-4129b87f477b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08074a0f-c416-4034-8756-5241a2476e9d",
        "cursor": {
          "ref": "5b36c86a-62c3-421b-9ff8-d3b82583ba8b",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4e747f29-e278-4c59-9bbd-ef1fd6681b32"
        },
        "item": {
          "id": "08074a0f-c416-4034-8756-5241a2476e9d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6d8699fb-95b7-4972-8e19-cb3fd5233dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcce89c-4c0d-4040-aaaa-610d9a3ddb57",
        "cursor": {
          "ref": "5de33797-e6b9-4350-8926-b2e50e4dcee4",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "256e37e0-3fbc-40cb-8c46-99ef68cbcc9b"
        },
        "item": {
          "id": "3bcce89c-4c0d-4040-aaaa-610d9a3ddb57",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fcf3425b-5885-4dcc-bd88-b02ba74ecfd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5958a721-10b4-44a2-a761-8eefa193f7b1",
        "cursor": {
          "ref": "b2857322-7cc6-4d89-8a16-b4b9be7ab89e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "bf6ad328-e0bf-4995-b002-dbe4b6d37ff5"
        },
        "item": {
          "id": "5958a721-10b4-44a2-a761-8eefa193f7b1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "62901882-c42d-47b3-b983-0cafdcd272c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e59654-d6d9-42ea-bbe0-9d2ef848fbed",
        "cursor": {
          "ref": "5a86fe84-21c9-4ef1-b2b8-59e9f3d86399",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fb72dd78-9c52-44cb-ac6b-f4a9bf5f8838"
        },
        "item": {
          "id": "18e59654-d6d9-42ea-bbe0-9d2ef848fbed",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "87a95fc6-5839-4582-97be-595dbf3e6b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a92684-f575-49e1-856e-552eb479e7f2",
        "cursor": {
          "ref": "adf34885-fd8e-422d-8e01-bae6bcf4c146",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "37368cb4-07b6-4276-bd5f-7e6df95fa1ba"
        },
        "item": {
          "id": "00a92684-f575-49e1-856e-552eb479e7f2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e3b573e5-7fce-4b41-a7d9-06f01698dc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd551f0-c59e-489b-afe8-d94c13469070",
        "cursor": {
          "ref": "2e40846d-7439-4d9e-b386-00ae3f37bdd8",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "641ac399-23eb-404f-ac0d-c311dbc65a93"
        },
        "item": {
          "id": "cbd551f0-c59e-489b-afe8-d94c13469070",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "521013bc-4780-4215-81f4-b2b662342d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd91e79-fb78-4dd9-b2d8-25da4ccaba76",
        "cursor": {
          "ref": "9c609124-87a2-4b91-bbeb-ed6ec3ac0b96",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4108c81b-b8d3-48a3-b1e2-1305c373a40d"
        },
        "item": {
          "id": "6dd91e79-fb78-4dd9-b2d8-25da4ccaba76",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "db0ff118-ace0-4935-8bc8-73aba2e7f0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7d0d94-a23f-4367-87ad-e8b4e7ec9fa8",
        "cursor": {
          "ref": "025a1dea-f3a8-4687-a0f7-2c385f69fb5c",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d90d7c20-ff5d-4cfe-aca7-a604e9845c94"
        },
        "item": {
          "id": "6a7d0d94-a23f-4367-87ad-e8b4e7ec9fa8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f0850ea4-150d-41e2-a5f9-c777d3ca6f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792d96db-2160-4366-8172-b9f7236f304e",
        "cursor": {
          "ref": "648a535f-6fff-4205-afe3-8dae3a420a50",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5d0f17a8-15f4-4ad4-b788-cf2ec42ae2ff"
        },
        "item": {
          "id": "792d96db-2160-4366-8172-b9f7236f304e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d154efe7-2f61-4515-b9ed-f822bfe368d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e7a89f-c2d1-4f7c-801d-d3fc3301712a",
        "cursor": {
          "ref": "397956c7-874e-4abe-a8f1-3d622522e740",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "726d8714-6fdc-495d-9c44-d52ce9b6698b"
        },
        "item": {
          "id": "b7e7a89f-c2d1-4f7c-801d-d3fc3301712a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c8c7c3be-2b26-45f9-8a05-94f84da4396d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11aed909-c6be-42c8-934b-4ddcce13c856",
        "cursor": {
          "ref": "1e2e3345-8fce-4eb2-9871-8e93a047cc7b",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c056c32e-3a43-437e-affd-e9e7d4264263"
        },
        "item": {
          "id": "11aed909-c6be-42c8-934b-4ddcce13c856",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "15929435-5a9d-46b0-b300-06a5db0578fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad56933-38fc-43ec-8c24-67a989bb5bcd",
        "cursor": {
          "ref": "3eea53b4-d275-40f1-a0c2-dda24b2740bb",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9819669b-4c4d-4856-b72b-405d11d48839"
        },
        "item": {
          "id": "7ad56933-38fc-43ec-8c24-67a989bb5bcd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dddcb5f0-24a6-425a-8ba7-8d87c2228c8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f40b629-907e-4eb6-9b59-624b712f7fd6",
        "cursor": {
          "ref": "6842d43a-59b0-43cf-8955-9b42cac11252",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a8174e14-83f0-4555-8d83-de7a1c6370b1"
        },
        "item": {
          "id": "4f40b629-907e-4eb6-9b59-624b712f7fd6",
          "name": "credentials_issue"
        },
        "response": {
          "id": "593ef02d-2c72-4203-98bf-60d6318bcb26",
          "status": "Created",
          "code": 201,
          "responseTime": 1525,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c39a92-2593-4819-ad27-a08192ec649e",
        "cursor": {
          "ref": "b0320ace-3ecc-4387-ac5c-5be58968fbc4",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "17f89cf9-c893-4b5b-8f7d-099e5032e528"
        },
        "item": {
          "id": "76c39a92-2593-4819-ad27-a08192ec649e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "567fc4a6-81db-4b42-8908-d29282db2c4d",
          "status": "Created",
          "code": 201,
          "responseTime": 972,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e46841-8912-479a-b0ec-3144768544b5",
        "cursor": {
          "ref": "59d446aa-3c7f-498c-8c4f-5ac0b4c83f31",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6244d0e6-e8f0-4ae1-a81e-19c46a2a6d84"
        },
        "item": {
          "id": "32e46841-8912-479a-b0ec-3144768544b5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "02a0abc6-d677-4999-a750-3e34c824a6d9",
          "status": "Created",
          "code": 201,
          "responseTime": 961,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4438c2-4385-49dc-9729-1f70afb17f6c",
        "cursor": {
          "ref": "c4a7c85e-51f9-4990-9e7d-536ad2af6d09",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "41792906-9d15-41cb-a70d-89dd9094ce84"
        },
        "item": {
          "id": "ca4438c2-4385-49dc-9729-1f70afb17f6c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "560d1c19-609f-4cd9-987b-4d6773331f63",
          "status": "Created",
          "code": 201,
          "responseTime": 957,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b94ebc8-05e6-438b-b4b5-92fe1feb7974",
        "cursor": {
          "ref": "9d272794-793a-4a35-8ee5-f4f0ae8a2538",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "384f6e17-6c4c-4ac4-b579-416dec841ccf"
        },
        "item": {
          "id": "7b94ebc8-05e6-438b-b4b5-92fe1feb7974",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e3670b85-cdcf-4fdb-a9a7-797a58c7f5bf",
          "status": "Created",
          "code": 201,
          "responseTime": 959,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6fe6ac-b652-4d95-968f-36a927bf8aea",
        "cursor": {
          "ref": "845d8e19-8e4a-490d-a556-29fbd0e25b3d",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "734fff1b-45b6-460b-9f6b-68bb434988ad"
        },
        "item": {
          "id": "df6fe6ac-b652-4d95-968f-36a927bf8aea",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "dda340df-00f5-48cf-b25c-f961aa39b55a",
          "status": "Created",
          "code": 201,
          "responseTime": 1070,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60914745-8d61-4578-9aec-5f8fee38d9a5",
        "cursor": {
          "ref": "bf5eea2a-d1c7-428d-b111-fc7a9a23e67f",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ccaa4457-1d7d-4e6c-9674-c8cf2fea94c9"
        },
        "item": {
          "id": "60914745-8d61-4578-9aec-5f8fee38d9a5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cc8cd6fb-41c2-469a-8e63-95973129a078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d2e90e-981f-40ec-9ba3-4c52a92676bc",
        "cursor": {
          "ref": "6e5f595e-7c51-4a2a-9f9a-58534833b5df",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "013c3438-6cd7-4f99-976e-109446c3dd3a"
        },
        "item": {
          "id": "28d2e90e-981f-40ec-9ba3-4c52a92676bc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9e0c2bf6-9370-4965-b212-eae39b28bbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5559170-38c2-438f-b2cd-0f254d1d0461",
        "cursor": {
          "ref": "d99307f6-93c1-4f4b-9313-08f06bd91295",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5595f1d1-d1c7-4f22-a49f-54d2ad47c559"
        },
        "item": {
          "id": "b5559170-38c2-438f-b2cd-0f254d1d0461",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "30af3fc0-a0b8-4e0d-8f92-225e45e94b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8ec9cd-544e-4f01-95ac-9919dab4c7c4",
        "cursor": {
          "ref": "7ab1238b-3d83-4c15-b07d-d01ecc9e82c5",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fd1770be-2c00-4e7a-bf2b-af5f912fffb2"
        },
        "item": {
          "id": "ff8ec9cd-544e-4f01-95ac-9919dab4c7c4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9044b848-8d34-4872-afd1-e6c236a0d91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf4f22a-c484-409c-b125-9bef8d40c8a9",
        "cursor": {
          "ref": "c431aec4-34b4-46b3-8ca7-098ae9f5d224",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e90fb874-2703-40f8-9fdf-6a62fe015714"
        },
        "item": {
          "id": "caf4f22a-c484-409c-b125-9bef8d40c8a9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "401a19e7-db55-4213-af42-0d0aaca0d242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2028ca1c-7829-4c41-a65c-62ec829c1081",
        "cursor": {
          "ref": "d38f67f1-ac0b-44f9-8ee8-bd5c51858a11",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "eccc45be-814d-4933-bb0c-f734fbeb7cc0"
        },
        "item": {
          "id": "2028ca1c-7829-4c41-a65c-62ec829c1081",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "613948ea-0156-4a1e-be17-5aa5124e52b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5559ef-7578-401d-bdd0-f90e089c38ed",
        "cursor": {
          "ref": "b5361edd-8196-4751-adf5-ab62f337497f",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2925321c-2a70-4682-addc-e83c180428b8"
        },
        "item": {
          "id": "1f5559ef-7578-401d-bdd0-f90e089c38ed",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8ec34308-18c8-4205-844f-5d66adac0afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d180bc-27f5-4946-8c96-afb3dd6f1dd8",
        "cursor": {
          "ref": "2ed1cdcd-732e-42ac-bb50-33b6800046ae",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "66f09383-093d-458b-a03d-e91103944b10"
        },
        "item": {
          "id": "59d180bc-27f5-4946-8c96-afb3dd6f1dd8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "92b422e0-173b-4d41-8b61-bd2c6fbab534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb08998-c707-40a9-a08e-43b370c0186d",
        "cursor": {
          "ref": "8cf25faa-f7bc-4837-8833-ac52b9f3f465",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6a655fec-3c2e-482a-b6d1-44bff66483aa"
        },
        "item": {
          "id": "2fb08998-c707-40a9-a08e-43b370c0186d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1376ec26-c05c-46d6-b2bd-9f1cac5735e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a693320-4772-44f1-ba54-c69be74a1908",
        "cursor": {
          "ref": "edcb8737-3245-40c4-9816-30cc536ba1b2",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0264aae0-41d8-463a-9be8-b959452a7018"
        },
        "item": {
          "id": "0a693320-4772-44f1-ba54-c69be74a1908",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "93ffc649-179f-4922-8de1-a0e50f707153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7909e49e-99e6-4c78-8247-a377eab29367",
        "cursor": {
          "ref": "2eefb229-6771-4304-8f4a-dc35a41f9169",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c10184d5-d82d-4d30-b7e1-b530548fb062"
        },
        "item": {
          "id": "7909e49e-99e6-4c78-8247-a377eab29367",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f265ef64-7915-497e-85ac-4d9fa570028a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3fd630-c6a2-4a02-a628-056acbaae628",
        "cursor": {
          "ref": "ad2137e9-ae5a-4f9f-a2ef-0ea382c98e2a",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "754ecc25-4f47-4cb0-a919-0dda35568855"
        },
        "item": {
          "id": "ce3fd630-c6a2-4a02-a628-056acbaae628",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8b1f8a4b-400e-4d95-abe0-3a215a792330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984a5bf1-248d-4052-bc0e-a0ea278ea147",
        "cursor": {
          "ref": "21423e84-6a7b-4b02-b2c5-4ae45c365bdf",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0d99b997-93ba-49b6-9a96-c0a78257abc5"
        },
        "item": {
          "id": "984a5bf1-248d-4052-bc0e-a0ea278ea147",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0fde282c-16ff-4f48-8d68-fba5d93f1678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9d2e0b-a9eb-4047-a4a2-36068de40fa4",
        "cursor": {
          "ref": "af2db180-9c99-4b92-a35c-46621b1ee28c",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "987e6cf8-7975-48e5-8ac1-2812650ae1ea"
        },
        "item": {
          "id": "fa9d2e0b-a9eb-4047-a4a2-36068de40fa4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "967666fc-25cb-4a15-a3d0-f9646ff3f559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b36e1f-de6a-4dec-9818-9172c168af6c",
        "cursor": {
          "ref": "7ec53f06-c6d6-4b84-9cee-fb6c280b4404",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "428283aa-c93f-4cc0-8266-7a39f2899254"
        },
        "item": {
          "id": "27b36e1f-de6a-4dec-9818-9172c168af6c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f661d73d-d51e-4c38-8faa-32c42f6290c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba3c24a-5838-4824-8df5-d159850f72a3",
        "cursor": {
          "ref": "c1e7a3b0-8b80-47a5-957f-4f7db21efc3e",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "60ce4748-edf7-483f-b8ee-fccddc2cb337"
        },
        "item": {
          "id": "1ba3c24a-5838-4824-8df5-d159850f72a3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f96d376f-68b3-4c13-b334-00342180d596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774ef61c-b30f-4eb4-bf74-52cc311530d8",
        "cursor": {
          "ref": "4bcfeee1-f2a4-4b03-adba-82ee37d33682",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "19453457-9431-4d02-8b2f-4180f6783533"
        },
        "item": {
          "id": "774ef61c-b30f-4eb4-bf74-52cc311530d8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8122babf-2863-4a47-a848-4b76efd9ea7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3068d5ba-3970-4a4e-9caa-c10456686c4f",
        "cursor": {
          "ref": "e0892025-b436-4b6d-bca0-ebc59682a3ed",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "822396b7-dbd5-45c2-b07a-c0dc7eea685a"
        },
        "item": {
          "id": "3068d5ba-3970-4a4e-9caa-c10456686c4f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9940987c-81b3-40c4-b0ca-5788d7090f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c96821-11e6-4e17-9777-58181b5c944a",
        "cursor": {
          "ref": "cae17d19-4095-416f-88d3-367749280f08",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "476d2ce3-be59-482c-9bdb-25486ff4400e"
        },
        "item": {
          "id": "a3c96821-11e6-4e17-9777-58181b5c944a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c5b55bf0-a281-425e-81f7-a594df7dac13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4571acd-1a17-4125-8d24-ccb2b6608464",
        "cursor": {
          "ref": "fa346c90-2891-4446-bba2-d03b60c667f8",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e298793f-1189-4f77-a54c-bf7fedc242d6"
        },
        "item": {
          "id": "d4571acd-1a17-4125-8d24-ccb2b6608464",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "986cb270-dd37-4193-bf0f-3e7dd8ef075a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee35e6b1-6f23-45e7-8e86-f087e51756b6",
        "cursor": {
          "ref": "6b3f212d-e0d6-4501-850e-0bb7c734fa77",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "65b0dfe9-3ced-44fa-a0cd-65b7baab89fa"
        },
        "item": {
          "id": "ee35e6b1-6f23-45e7-8e86-f087e51756b6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "04ac8878-ab17-4172-9022-cd04fbe9e56a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2990288b-33d3-4264-bb61-cbcd2cafc6e5",
        "cursor": {
          "ref": "5f848e66-39ea-4efd-a47d-0290112cb6c4",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f6106092-eaa5-497d-a371-bc9200de6960"
        },
        "item": {
          "id": "2990288b-33d3-4264-bb61-cbcd2cafc6e5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2ad71030-9621-46c7-b679-96c33985e79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eeec410-cf0b-471b-a1c8-2a1592cfeb66",
        "cursor": {
          "ref": "78865d13-2cb9-4f67-b84c-692b7cf92f3e",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6a7838a8-423f-41c3-91d6-e997a8b8d6eb"
        },
        "item": {
          "id": "1eeec410-cf0b-471b-a1c8-2a1592cfeb66",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2528be56-4cbf-4f41-83cc-0c7d10197ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43dee9e9-9205-4cda-925f-f38a61b1da3e",
        "cursor": {
          "ref": "90ee3819-8215-4184-ae42-049b0be81f44",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9c7b11a9-3de0-4d97-8db3-58e0ac616105"
        },
        "item": {
          "id": "43dee9e9-9205-4cda-925f-f38a61b1da3e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "971ec5ef-ab7c-48ad-9b3d-254acca96548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d2e5e6-2bbe-4d09-9101-29ea4a895fd9",
        "cursor": {
          "ref": "ac23ce2b-236e-4e87-acc0-b44d630d44d0",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1543f566-6f77-4ffc-836d-aa54265aadd0"
        },
        "item": {
          "id": "48d2e5e6-2bbe-4d09-9101-29ea4a895fd9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "08d2e5b4-8b11-4856-8387-d0db60d320bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7fd4b8a-7327-432e-91d1-383ae7b490b0",
        "cursor": {
          "ref": "c3e2d46d-e750-415b-b5b6-a5d41441ae1f",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "413ae4fa-b223-4f11-b332-61e50df9ec5d"
        },
        "item": {
          "id": "b7fd4b8a-7327-432e-91d1-383ae7b490b0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5c0e9794-e3a8-43e8-8ba8-994ccc4f8de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb422539-55ce-4034-9b5d-e68e87844955",
        "cursor": {
          "ref": "248d0928-cb1e-4a20-8268-7af527734ac9",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b7ca87c4-774c-48f1-adfa-ef280c3821da"
        },
        "item": {
          "id": "bb422539-55ce-4034-9b5d-e68e87844955",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6a55e3dd-64ad-4745-a26c-e220ac66dc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693e0059-42d4-4815-8f46-fa34458ec735",
        "cursor": {
          "ref": "cf79e0e2-ac79-4923-94da-84c8d0545b32",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fbcf2867-8cbb-4ad8-8d9b-0475413041bb"
        },
        "item": {
          "id": "693e0059-42d4-4815-8f46-fa34458ec735",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d96b9db4-d1e4-4b06-8521-a68b5947bc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87556dc-285d-431c-b505-935a6af80524",
        "cursor": {
          "ref": "9f789f95-29d8-4194-a2d0-41b5467b7ea8",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "56d5cb42-042c-44a8-9ab8-8ea079ecae7d"
        },
        "item": {
          "id": "d87556dc-285d-431c-b505-935a6af80524",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fc6f3b29-b08a-4333-9d80-fab5d72aa176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a0e7fc-d6b3-4a7b-8410-30925732d188",
        "cursor": {
          "ref": "7c44f3c3-fbe3-425b-be4f-8c8d02698590",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a0682820-7a76-4faa-929d-5dd9e987e9aa"
        },
        "item": {
          "id": "87a0e7fc-d6b3-4a7b-8410-30925732d188",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "60ecde46-ece5-46d7-88a5-fdfd2be5e03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25dbbfa1-c392-4f64-bc15-278ae05f06f4",
        "cursor": {
          "ref": "23f849f8-4c2a-49e3-ae75-5133000f7bab",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "04907d92-9e35-4843-b9bb-75aca7411f61"
        },
        "item": {
          "id": "25dbbfa1-c392-4f64-bc15-278ae05f06f4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "61568a69-743c-46e9-83b6-b691b3a40bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a692f7-04f7-44f0-8615-20a04e390674",
        "cursor": {
          "ref": "e388c46a-b7f3-4b5f-bb70-4a0225d02aa3",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "25a81105-bf5b-4a52-a260-971aa357542a"
        },
        "item": {
          "id": "02a692f7-04f7-44f0-8615-20a04e390674",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "624f4cf7-717e-4c87-b08e-cb6c6297e8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b39eac0-7fe6-4991-a23b-ba1814f7af2a",
        "cursor": {
          "ref": "0856eb7d-1964-4f44-8d1d-c3efd42487c0",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f62deba7-9928-4a74-a34b-de1ef4d6d3da"
        },
        "item": {
          "id": "4b39eac0-7fe6-4991-a23b-ba1814f7af2a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5ea5bae6-6e4a-46a4-aa64-87a5fc366b08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c702eab8-380c-48c7-84c2-a1cd41fe99b6",
        "cursor": {
          "ref": "fe136c55-40a8-4b33-8309-bf574f3596fc",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c9e53184-bd6f-4f20-8bc5-bc601c3d975b"
        },
        "item": {
          "id": "c702eab8-380c-48c7-84c2-a1cd41fe99b6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "98de1a19-24fb-4076-a109-5deaee182a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be114a8b-91e1-4de2-bbbb-0e8c569d8142",
        "cursor": {
          "ref": "b5cb58f0-a859-482c-8ac2-755b8c35cf01",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3418b39d-e826-4c04-aa64-000365543b5c"
        },
        "item": {
          "id": "be114a8b-91e1-4de2-bbbb-0e8c569d8142",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "29430fb8-a5c8-4094-b2a0-a299e965e32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9da7f5e-e015-4a55-b363-5727acf20f88",
        "cursor": {
          "ref": "2ff4b6c3-10b0-44f4-ae3f-4f5d039837ee",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "148d19cc-5572-4870-a214-97b1b6e80b9d"
        },
        "item": {
          "id": "c9da7f5e-e015-4a55-b363-5727acf20f88",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "eb6a48c6-8fd8-49c6-977f-8ebb9efeacf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d63ec9-543b-4516-83e1-965ad2ff9f81",
        "cursor": {
          "ref": "7f9cf228-bda7-4f04-a1cc-ec7ed2e4c81f",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2bd672c2-1967-45d2-9c3b-baa58ca632c1"
        },
        "item": {
          "id": "a8d63ec9-543b-4516-83e1-965ad2ff9f81",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2a14faa9-304f-4453-9139-255bfe508f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36769068-d5ba-4e77-8ddf-f9290b8e3978",
        "cursor": {
          "ref": "cc7a1f2d-1476-44bd-b1ab-38463a8cec9d",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e4f875a7-732d-4622-bfe7-6286ea553c6c"
        },
        "item": {
          "id": "36769068-d5ba-4e77-8ddf-f9290b8e3978",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "549b1358-fe85-4e8f-9faf-005ff8f50205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485da1ee-513c-4fbc-8ac4-9082a1979d06",
        "cursor": {
          "ref": "c347cd80-c981-446b-a78b-e64a55b88843",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cd3b4487-ce2b-4419-8f79-733b1a5a1d1d"
        },
        "item": {
          "id": "485da1ee-513c-4fbc-8ac4-9082a1979d06",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8ae7293e-d15f-4fb9-a1f5-b774400ee5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15bfa9b-4fae-40a5-a96e-b18104fbda7b",
        "cursor": {
          "ref": "560b9bf6-146f-426a-ba9d-94b33204068f",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fa553d2b-956b-41fa-abc4-0e44a97f17a2"
        },
        "item": {
          "id": "f15bfa9b-4fae-40a5-a96e-b18104fbda7b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b067f177-1a17-4c21-9306-8d526eb6d81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2c2d2e-0490-4bce-8043-939787ccd67d",
        "cursor": {
          "ref": "f557e8fc-54d5-4b83-9d52-b743b9e9d6a4",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2702abdd-8293-464f-ba87-40a6d9751c2b"
        },
        "item": {
          "id": "ca2c2d2e-0490-4bce-8043-939787ccd67d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2bd98ee5-30ff-43e3-a5b8-1cf2125389af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155bcd00-7bb9-495d-9cbb-98217ab1ff9e",
        "cursor": {
          "ref": "9fbf7bac-5686-4b37-9c62-d1a940cb5f73",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1bb049cd-159f-48a8-86af-abdc0dbfaaa8"
        },
        "item": {
          "id": "155bcd00-7bb9-495d-9cbb-98217ab1ff9e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f05e887e-d422-4dc4-8389-60950a8e257a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c4c8e7-4368-4390-962c-f82179cdb8d8",
        "cursor": {
          "ref": "e02176cf-edf4-4a84-bbf1-d4cab4c94247",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5624bedd-ae05-4cc2-a2d8-68bcd6850db4"
        },
        "item": {
          "id": "46c4c8e7-4368-4390-962c-f82179cdb8d8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "411ed683-6740-4d5d-bace-495a75e0ef78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cfaaf0-fd11-40fa-b6b9-9bd753a834be",
        "cursor": {
          "ref": "dbdac75b-4b1c-4b2b-a13c-ce29374bfc3b",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e214c23d-46b8-464e-ab09-ae22675cc071"
        },
        "item": {
          "id": "50cfaaf0-fd11-40fa-b6b9-9bd753a834be",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4febb800-d358-40f3-8830-e22c90c971e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3512f801-562a-4092-a371-b06c200bc01f",
        "cursor": {
          "ref": "321b8188-f441-4d90-9a51-ef2ad26fb775",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "eb2f1c16-74e0-48c8-b88a-c84ee668fa4d"
        },
        "item": {
          "id": "3512f801-562a-4092-a371-b06c200bc01f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4bc81a62-12ed-4c2b-8722-5ae4e9f82678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e46408-1dd7-4e3c-b019-ced5eed2c351",
        "cursor": {
          "ref": "96784648-2d30-4381-89d4-c7cec4939a60",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b3643076-b26a-4b82-b041-3c2308602f1d"
        },
        "item": {
          "id": "74e46408-1dd7-4e3c-b019-ced5eed2c351",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "829423e9-6dee-4d90-bbe4-70525ece335b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f208f1-9542-48e8-a588-8da50fab5d39",
        "cursor": {
          "ref": "fb0b4c5a-7bd7-425c-a2a5-f556f7cc66a0",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "eb5acc4a-ea2b-4553-b4df-0b9a42de85e7"
        },
        "item": {
          "id": "a3f208f1-9542-48e8-a588-8da50fab5d39",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9df75e4a-c87d-4770-b6ee-2a2b7e06fb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ec69b6-7133-4ae8-9a7e-b5ff656f5a60",
        "cursor": {
          "ref": "04981d38-6394-4ff5-bf4a-cbf5a5e3e7df",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "850d5bc8-ee65-4621-a9ae-21d5e31d80a7"
        },
        "item": {
          "id": "43ec69b6-7133-4ae8-9a7e-b5ff656f5a60",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7e40fdb8-566b-4498-bb50-f4689a0a99f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdfd6e5f-8b1f-489a-8c90-5e6e9fee0d9d",
        "cursor": {
          "ref": "df9b975a-17be-48db-921d-08b0c03050e4",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "46d400fd-8040-44ce-9ed5-3803b42f8326"
        },
        "item": {
          "id": "fdfd6e5f-8b1f-489a-8c90-5e6e9fee0d9d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c185bbae-f830-4cf0-a7d3-72eda793c0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b87c7b-3935-4095-856b-b1533bb67e9c",
        "cursor": {
          "ref": "acd440a1-4574-4cd0-ae07-5ebea4462758",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f3fc6c61-e91c-4c3a-884e-44af339e5194"
        },
        "item": {
          "id": "f2b87c7b-3935-4095-856b-b1533bb67e9c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "338a52ba-95ba-42ef-b1ed-fb59e5722616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d008ff-0d98-4096-997f-291e7812d532",
        "cursor": {
          "ref": "f35c06b1-bc49-4f1a-a120-eee8376cd2fd",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6481e347-9668-4c66-8e6d-3ac392cbefe6"
        },
        "item": {
          "id": "a4d008ff-0d98-4096-997f-291e7812d532",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9d5f5f35-0dc3-4aab-88a7-3c8f01a24f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af352082-2d04-4df3-bc48-0ebdf2eb8b72",
        "cursor": {
          "ref": "c9db255c-4469-41e6-95ae-8f846f663bb0",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0747902a-8c3f-46b6-877a-8989da0ab9ef"
        },
        "item": {
          "id": "af352082-2d04-4df3-bc48-0ebdf2eb8b72",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8422a68c-450c-4dcc-ae86-1b6d6e5529b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41ac0e1-b07a-46ce-a154-38b884055219",
        "cursor": {
          "ref": "ac69b57b-4644-435b-9400-c1e54aea5654",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9b6214d2-4fe9-4ddf-b8ae-99c90615353a"
        },
        "item": {
          "id": "e41ac0e1-b07a-46ce-a154-38b884055219",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4f62688e-58eb-4dd5-8ddc-3db78ee61eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3bd5fa-cd80-421a-a09d-3f269e345671",
        "cursor": {
          "ref": "21c48dc4-f574-4a01-8cfa-24217adce823",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ca4b165c-d28d-4cbc-9b4b-a4067892a957"
        },
        "item": {
          "id": "0b3bd5fa-cd80-421a-a09d-3f269e345671",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d1b6f409-f417-4c15-a8d7-e01e26b94367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc033ef1-6130-4a5b-ab94-ae761732b6aa",
        "cursor": {
          "ref": "6fec07c4-ad62-4b4e-a1b6-14d2f07bd557",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0ef77691-ed51-4ead-b139-b33ce5cab6c3"
        },
        "item": {
          "id": "dc033ef1-6130-4a5b-ab94-ae761732b6aa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "714ec6b3-8ff9-4930-8e97-359afdc5eaee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e3163e-fd23-4e68-a74f-4a8b7b8b8718",
        "cursor": {
          "ref": "cf9a3875-2201-42ae-8de9-518d7119823e",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2b286e74-a1ba-4fac-9d31-f1c8a09b184e"
        },
        "item": {
          "id": "18e3163e-fd23-4e68-a74f-4a8b7b8b8718",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "aed31617-6eab-43ed-9e5f-3e931f126ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ecc792-bafb-42c5-9e90-18b285950a10",
        "cursor": {
          "ref": "44f97b8e-bd56-439d-ad20-1c7f17a4e9ed",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f013925e-fd41-4316-a44b-adf0db7d2007"
        },
        "item": {
          "id": "86ecc792-bafb-42c5-9e90-18b285950a10",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bbaf3fa7-c816-423c-bdff-bbb18c3829a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761f6c60-818f-4db6-9b23-910d20e5cbce",
        "cursor": {
          "ref": "6953659f-df10-490d-b0cc-b9cc4f36f6b9",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "68b0b454-1432-4675-8ffe-a6ad34324019"
        },
        "item": {
          "id": "761f6c60-818f-4db6-9b23-910d20e5cbce",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c5ac683b-25ca-4d43-9b98-55904983669f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b108398f-f413-41d9-ae10-95f6436a2006",
        "cursor": {
          "ref": "b5d33b76-ca4a-4276-9e56-36506303556f",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e5061ed4-40d0-45ce-a998-67cbe41cf26b"
        },
        "item": {
          "id": "b108398f-f413-41d9-ae10-95f6436a2006",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "77b75521-b065-4c1e-8242-59a046fe18d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2dc238-de70-4b87-b49b-d04cc14e18de",
        "cursor": {
          "ref": "83246a06-80c9-4605-80b6-19bb2f99d030",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7a90477a-f4b7-4696-b42b-725df4a0d943"
        },
        "item": {
          "id": "5c2dc238-de70-4b87-b49b-d04cc14e18de",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "815f9af6-1404-4f66-a9b1-08c207e35a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4d7eda-fe6d-4328-8adf-16188d820728",
        "cursor": {
          "ref": "9e0bbf77-b7da-4b8a-818d-c9b1711136e9",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c8cc4cfe-5166-4bc5-86b7-6415fab773bd"
        },
        "item": {
          "id": "dd4d7eda-fe6d-4328-8adf-16188d820728",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "443059c4-8eed-49c1-99fa-ca8672740dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8931880-d727-4e17-a655-a718c9fba4a8",
        "cursor": {
          "ref": "5dbd248c-5b29-440e-87b1-a853d7e7c92f",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "37a81674-b097-417e-86e1-0051800311d3"
        },
        "item": {
          "id": "d8931880-d727-4e17-a655-a718c9fba4a8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9279c072-18ac-4944-abc2-47e3bfae49c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a93ca84-22f1-4523-9a65-b2b6a951174f",
        "cursor": {
          "ref": "ba982968-9a83-48af-9d48-5e0c7022fe3f",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "afc44207-b62e-4bb7-94e4-1a127f157b70"
        },
        "item": {
          "id": "5a93ca84-22f1-4523-9a65-b2b6a951174f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8c6fcd14-18c6-4f46-beed-a96391673211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f4eff0-6737-4cb8-b533-f753ff659374",
        "cursor": {
          "ref": "fdbd1f94-b2a5-4f29-9167-0dbc1e61b8d9",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4dd483b5-0b73-4420-aa44-f8c5515c6996"
        },
        "item": {
          "id": "09f4eff0-6737-4cb8-b533-f753ff659374",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "873008a2-08a1-4dd0-8e7d-03edbe2a8834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356b3753-fa20-4646-9d39-3f2ae6c036c6",
        "cursor": {
          "ref": "7d1da2a1-5b09-46a7-b3c5-a3c18ed19528",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "15c0b4ae-b284-418a-a681-ea5cd5174252"
        },
        "item": {
          "id": "356b3753-fa20-4646-9d39-3f2ae6c036c6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b4513b42-d14f-45be-88d6-93c25c67d967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b38aea-2a31-4416-aee3-5b124b735098",
        "cursor": {
          "ref": "a5149fd3-497b-48d8-9bf2-e999c0f65eb0",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "62814d23-f99e-4ea5-bb1f-d2e6730a5bb9"
        },
        "item": {
          "id": "18b38aea-2a31-4416-aee3-5b124b735098",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "85302693-910e-49e6-a3e6-3a06e544ad2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37ac602-71d4-4097-9f8f-bb0e5136b7bd",
        "cursor": {
          "ref": "a2c580fe-12dd-4d86-bb20-62dca106cc6b",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6ce0accc-dd22-4b21-96c1-f58732c515e0"
        },
        "item": {
          "id": "a37ac602-71d4-4097-9f8f-bb0e5136b7bd",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6a6c4817-c734-4fe3-b10b-19fbc8a773f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8132cb58-ba1f-465c-9850-9b86297bbb2f",
        "cursor": {
          "ref": "e6f87253-601b-4ae9-9031-106036c2fd02",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d28ca49e-1104-46e9-becd-b76b06c791ec"
        },
        "item": {
          "id": "8132cb58-ba1f-465c-9850-9b86297bbb2f",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "66a2ee6c-2f2f-4232-a336-fdb986dc9142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70007b7f-eaaa-418b-b465-98af7f91d0b2",
        "cursor": {
          "ref": "a944aef3-bef1-4484-806a-b8c0f3103e35",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "88322c52-237c-43e7-9de8-4f52d53f9a69"
        },
        "item": {
          "id": "70007b7f-eaaa-418b-b465-98af7f91d0b2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "fc35755e-405a-4a5f-acbe-942ddf1c9672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7887df46-cd38-41c4-913d-b63217a581af",
        "cursor": {
          "ref": "2bfe58bc-dc6b-4db9-af96-9ae445085bc0",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "58d2918d-cb33-4235-80bb-8855d265ae3b"
        },
        "item": {
          "id": "7887df46-cd38-41c4-913d-b63217a581af",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "da71aa3a-e935-4acb-8c8e-d9ecd082a2bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b8d2bf-3c64-4749-930f-3c1b9f24f00a",
        "cursor": {
          "ref": "8d6118d7-9a3d-4834-8f6b-8658150f1743",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "04dab7be-f0c7-4707-8336-8caed7d13442"
        },
        "item": {
          "id": "46b8d2bf-3c64-4749-930f-3c1b9f24f00a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5d300259-ed8f-40ee-9ba6-480fb41743a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e758f9c0-a5ec-4d4c-a794-265dc5c8a6d6",
        "cursor": {
          "ref": "d4b3ef46-8a0a-4c67-bde5-1b99a357b1de",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c3b8876a-10cd-4991-aabf-49170a73197e"
        },
        "item": {
          "id": "e758f9c0-a5ec-4d4c-a794-265dc5c8a6d6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "70bed168-89f1-4acf-aa86-7635e09760fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7681bb-5239-4a60-b8fb-37a9f84bf9f0",
        "cursor": {
          "ref": "72dc457b-8421-4817-a745-e28be7cc2943",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f8b9f30e-4041-4dd3-a897-1b6b9660e48b"
        },
        "item": {
          "id": "4b7681bb-5239-4a60-b8fb-37a9f84bf9f0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "84998860-5fee-44f3-b401-75683d21d538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd357bec-e8c1-422f-ae57-2ed750f81d77",
        "cursor": {
          "ref": "56a2214a-4a57-473a-a83a-ef338fd414e4",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ccfac7d7-39d7-4d35-97d9-39e834910b06"
        },
        "item": {
          "id": "fd357bec-e8c1-422f-ae57-2ed750f81d77",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9b67cef8-5663-4f5a-ba68-2ed5db8bed36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd0d1b6-7e13-4e85-a66a-59eb3b714dea",
        "cursor": {
          "ref": "22a1b777-b569-4319-bd7d-ad2722ffd18a",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5e175dd1-7a0e-4add-a905-5a57d65f1f33"
        },
        "item": {
          "id": "3dd0d1b6-7e13-4e85-a66a-59eb3b714dea",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d8614033-6ba0-4aad-bf58-a28c8e6a0002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347ada21-90d4-43bc-b7e2-4386b7006a2b",
        "cursor": {
          "ref": "3832d3d9-578c-4c42-9827-08c87c1eb8f2",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9bcc67b9-4d57-40bc-8ae8-21afacb999d0"
        },
        "item": {
          "id": "347ada21-90d4-43bc-b7e2-4386b7006a2b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fb3d8d40-c6f3-4771-aa53-71255139d586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aff3b60-2af5-4782-ba2b-c02d3f278372",
        "cursor": {
          "ref": "35ffb05f-9470-4377-b3e9-a3d211e5d0fd",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4ca98861-179f-4077-b7fd-cb283c6987b6"
        },
        "item": {
          "id": "7aff3b60-2af5-4782-ba2b-c02d3f278372",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f983339f-dcc0-47fd-a22c-e1df73f1673a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "43114dc4-0c23-4a88-9bcb-87227e07529b",
        "cursor": {
          "ref": "3b8463f8-a02a-46dc-bf61-e8059801452f",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b041db9a-09dd-432d-a15c-ab4579099bde"
        },
        "item": {
          "id": "43114dc4-0c23-4a88-9bcb-87227e07529b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8d4ece4b-d50c-4c06-8751-2fb87e102e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62820f2e-a4bb-4b64-8921-309333c78dd7",
        "cursor": {
          "ref": "fbd2146a-1b44-4efa-83a7-8eca2ff83bbe",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c360b996-19da-41c9-b6f6-29389561ada6"
        },
        "item": {
          "id": "62820f2e-a4bb-4b64-8921-309333c78dd7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "98d00d78-1f62-4417-b175-7b6125bc4881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08555c6-90cc-4c53-92d0-ec50cadf31c9",
        "cursor": {
          "ref": "5133d3e7-e6e0-4015-891b-075d85d39cf5",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1a6d5c45-6e3c-4cca-8805-2c6112aabccf"
        },
        "item": {
          "id": "d08555c6-90cc-4c53-92d0-ec50cadf31c9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5ce70837-e74e-4559-96b6-c24b554d6230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbe4022-281e-4a0d-8c03-2705b6619022",
        "cursor": {
          "ref": "08b5b41a-7e34-446f-8df0-60143b4c6499",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2d4599da-aebf-4b30-923f-ffc0c5bbdd73"
        },
        "item": {
          "id": "1dbe4022-281e-4a0d-8c03-2705b6619022",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "98079177-f758-4aaa-8aad-74b38204dd2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d9bdde-1207-4fea-a6a6-4c3555b70b26",
        "cursor": {
          "ref": "e7a07adb-4244-49fd-bdaa-bdaa5755dbb2",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5f8d1b79-db3e-4a34-9e59-e8acacad83d5"
        },
        "item": {
          "id": "d6d9bdde-1207-4fea-a6a6-4c3555b70b26",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8f17c0bf-90b0-49a0-88b8-b7364cdc5e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee4597a-51b9-4acc-94a8-83be8cb7b3c3",
        "cursor": {
          "ref": "dc41d690-cc7d-4922-9f72-f5953912fd8c",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1f8d9c51-20ca-4895-987f-aaed4baf7ff3"
        },
        "item": {
          "id": "5ee4597a-51b9-4acc-94a8-83be8cb7b3c3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d72fa01e-d2c9-405b-bacc-333ace6e9cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be65c0d-407e-4407-b833-e3270d178ff5",
        "cursor": {
          "ref": "1de37ee2-25cb-4145-ab29-331563a90df1",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "86a26377-663f-4cc7-ac6b-23396da5a64e"
        },
        "item": {
          "id": "9be65c0d-407e-4407-b833-e3270d178ff5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e8bda129-87bb-4f4e-8e13-8ee586b989f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5819b492-b363-421c-9cae-691e8d1c153f",
        "cursor": {
          "ref": "cd44d0f2-4b54-4934-96be-05daea3476da",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "834caa7a-2a60-4760-b54b-658956a45a25"
        },
        "item": {
          "id": "5819b492-b363-421c-9cae-691e8d1c153f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9d43b04c-ee00-4b3e-9ec8-8097643163d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbba112-d243-4a6c-a47b-f74b88537a55",
        "cursor": {
          "ref": "a0c11f79-4bfd-496e-9d43-354a9f31c8ac",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "72899750-a19e-4b73-8b3c-30b9a461c8e9"
        },
        "item": {
          "id": "8bbba112-d243-4a6c-a47b-f74b88537a55",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8de8611b-aa05-4f36-ac34-4d5778a6ddb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3b2120-feb5-4df7-9bc5-40175024fb82",
        "cursor": {
          "ref": "b559130b-d22e-4e09-81cd-c2df4d2713b1",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8309cb91-40a8-4ea5-92b3-085132b7fa12"
        },
        "item": {
          "id": "fc3b2120-feb5-4df7-9bc5-40175024fb82",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d00f6bbd-eea7-4822-872e-0c6b7bfd40e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1cfb5d-9a37-44b9-83cb-76af77f7991a",
        "cursor": {
          "ref": "ec365690-b6d1-4e1c-ae06-4f9202bc8bb6",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "741e42a0-b623-474d-a821-4ce9174ae952"
        },
        "item": {
          "id": "4d1cfb5d-9a37-44b9-83cb-76af77f7991a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f9a819b6-9e8b-4e78-be4a-72c88b9edd12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b25b16-44ba-4987-b077-06c1000d48aa",
        "cursor": {
          "ref": "400d2147-524c-4304-8c8f-ae88a9fa821c",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "44fb9f27-3c88-49d0-a65b-880cfcc19beb"
        },
        "item": {
          "id": "e1b25b16-44ba-4987-b077-06c1000d48aa",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ece4e212-9d9b-495e-9c98-106e3821fb4e",
          "status": "OK",
          "code": 200,
          "responseTime": 1238,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "b5d68e8a-69b4-4fa3-bb56-83c1b1d2614d",
        "cursor": {
          "ref": "6df7f54f-448e-452f-a1b6-ede4970bab63",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a8082da4-3dde-4a03-beff-c9e91076eced"
        },
        "item": {
          "id": "b5d68e8a-69b4-4fa3-bb56-83c1b1d2614d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ef1e568b-9a86-4fb8-9fac-62cbd74e6e43",
          "status": "OK",
          "code": 200,
          "responseTime": 771,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "fbdaeab9-d7a6-4cde-a439-13416f0df501",
        "cursor": {
          "ref": "05bd3844-5281-44cd-b9b5-1e38213c5f84",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "87c1e55a-eb45-47bb-a786-61d431b8949a"
        },
        "item": {
          "id": "fbdaeab9-d7a6-4cde-a439-13416f0df501",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "63c4153c-fcbe-4275-819c-53669e33e9c4",
          "status": "OK",
          "code": 200,
          "responseTime": 777,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "405cc9f8-bbd5-4514-81fb-28446395646f",
        "cursor": {
          "ref": "75977f97-5b43-4203-84f0-1c2cb83f53ee",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "dfb8f338-da54-4757-851f-5ca0da46f27b"
        },
        "item": {
          "id": "405cc9f8-bbd5-4514-81fb-28446395646f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f2a361ba-27ab-4abe-ba4b-eee1b2c08c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b3f39e-f290-4d6c-969a-c9fcd3481047",
        "cursor": {
          "ref": "322914ea-a5b7-42bf-9454-c89fe6d1d9b7",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "478c617e-0b2e-4d87-8bf5-3c066620ee25"
        },
        "item": {
          "id": "f6b3f39e-f290-4d6c-969a-c9fcd3481047",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "222fc055-8970-422c-ba58-0b2fd0eba060",
          "status": "OK",
          "code": 200,
          "responseTime": 799,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "93afc41f-fcaf-4933-9478-fc24d7206118",
        "cursor": {
          "ref": "afa8cf2a-3c47-470b-baec-f63308497062",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c92e790f-6176-4431-8285-2f30b93527a7"
        },
        "item": {
          "id": "93afc41f-fcaf-4933-9478-fc24d7206118",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2a95a768-fb62-41b6-b421-edf69cec3b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6730cc-2adc-45ff-b06f-317f31eb3769",
        "cursor": {
          "ref": "f084d3d5-bf2e-42ca-8b51-d6853c6388b5",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "48eb003e-8a2b-4542-bca7-4ecb6dd4eb01"
        },
        "item": {
          "id": "1d6730cc-2adc-45ff-b06f-317f31eb3769",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bd1699c6-59cf-4e18-8ac2-dbaae1ff9f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556cca26-52d6-4fd2-be55-c18a41d95fd0",
        "cursor": {
          "ref": "8b6cc4a6-fc04-4f1f-9b28-89930fe7fd8b",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9db0fb04-c969-4714-8dbb-415fd98a9874"
        },
        "item": {
          "id": "556cca26-52d6-4fd2-be55-c18a41d95fd0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "974ef039-6be6-476f-a938-d15e5ebc9024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f25e34-91f7-4455-8890-1c24670fddc1",
        "cursor": {
          "ref": "9eea9d01-e21a-4291-9a93-7ee9d7019919",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f0327aec-7eea-4094-8973-a5b17cf04863"
        },
        "item": {
          "id": "c8f25e34-91f7-4455-8890-1c24670fddc1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f1c0f5b7-0f34-472b-b6db-ce5a1c55e31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc706d21-948a-4755-9c1c-1f6a5a6972eb",
        "cursor": {
          "ref": "8182d3ee-9a3a-48bb-ad8c-21fa471a2799",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a56d0e5d-52cf-4163-981f-e02be818051c"
        },
        "item": {
          "id": "dc706d21-948a-4755-9c1c-1f6a5a6972eb",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "92e0264b-5d3b-4d37-8da8-e43800a1e11e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6deeb0d2-98b1-4b3d-96c2-ac6229d863fc",
        "cursor": {
          "ref": "4ffd564e-075c-4cc7-b5a9-f0171429b90d",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "dcc23084-e5d4-4166-b8c7-e306a78f6c86"
        },
        "item": {
          "id": "6deeb0d2-98b1-4b3d-96c2-ac6229d863fc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "07405024-5304-4c37-8010-caaa7e195dbf",
          "status": "OK",
          "code": 200,
          "responseTime": 791,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "4ee6bdac-6aaa-4aa8-aacd-3fe95da57fe3",
        "cursor": {
          "ref": "b4a55eae-4c58-47f3-8467-35da3e88c5bd",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cab554ec-a483-4521-8cc0-dcc1f25af738"
        },
        "item": {
          "id": "4ee6bdac-6aaa-4aa8-aacd-3fe95da57fe3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "857441cf-26a9-4698-8067-998ba4759be5",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "45ef9781-9aea-492f-894a-d5642f042eb7",
        "cursor": {
          "ref": "d7367372-19b6-40db-8a5b-8c50ba44bbab",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b71bd94f-de8f-4b24-a94d-1763ab664d71"
        },
        "item": {
          "id": "45ef9781-9aea-492f-894a-d5642f042eb7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ae1485fd-9d23-460d-bf43-8bffb6217667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b7df95-115e-44b0-afd7-e91f0362bbee",
        "cursor": {
          "ref": "58eacec8-7157-4737-a741-2cfa4202b8f0",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "22ec40ef-cf00-4c1e-bf5d-29c1e1b1210a"
        },
        "item": {
          "id": "f5b7df95-115e-44b0-afd7-e91f0362bbee",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b39560e7-73b9-4345-a743-02dca6cbcaa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026874e5-924f-45c3-a79d-cbfec00c3fd0",
        "cursor": {
          "ref": "75d9b22c-78fc-42e6-913d-d4df2e8e439f",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "926fb1a0-3198-428d-854d-52a25e369664"
        },
        "item": {
          "id": "026874e5-924f-45c3-a79d-cbfec00c3fd0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "50f1754a-924b-45bc-ab1d-f151e2acc6b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe36a89-1130-4013-8f03-e2012f0fb501",
        "cursor": {
          "ref": "c4be2cc2-f1a1-49ad-a4f4-910daed4cccb",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e0a3b927-5df6-4350-a4cb-b5ac42710342"
        },
        "item": {
          "id": "dbe36a89-1130-4013-8f03-e2012f0fb501",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f468787b-28b3-428d-9856-14bbe956e186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ae4cb3-a754-4a8f-8c3b-05722a31966b",
        "cursor": {
          "ref": "1786fc19-71ec-4fef-9a17-f1c740b8088a",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "86044bc6-fe13-408b-8fd4-fc7c5dff38b1"
        },
        "item": {
          "id": "26ae4cb3-a754-4a8f-8c3b-05722a31966b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "76ce0600-feac-42c1-bcd4-b2cb407a970f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef0b60a-9152-418a-85b0-95cbfcedb01f",
        "cursor": {
          "ref": "58d8ca89-cf13-49ae-903d-36c1952143b9",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4a8c16a7-60ce-42f0-a19a-6333c0804782"
        },
        "item": {
          "id": "cef0b60a-9152-418a-85b0-95cbfcedb01f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "79df1edf-0f75-47b0-b548-19b072323fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b91556e-7903-44bf-8f16-5daa0b82a35f",
        "cursor": {
          "ref": "2038a48e-2926-417a-ae12-84d0cf929e97",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8fc89e6c-d160-4fbd-b1cb-14efba33b035"
        },
        "item": {
          "id": "0b91556e-7903-44bf-8f16-5daa0b82a35f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a3ebc87b-8625-45b7-bd3b-0f635ea96749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ae6ff3-3f40-4490-b887-6feeee970e7a",
        "cursor": {
          "ref": "3bb704be-e62d-4128-bf0a-f8c422012445",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "038ea3dd-e0e2-4c43-8648-daab13df53c5"
        },
        "item": {
          "id": "42ae6ff3-3f40-4490-b887-6feeee970e7a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6aad299f-2d81-4449-aad2-2b1233b9e2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9835dc3f-03c3-43e1-bae2-7b6671c51df2",
        "cursor": {
          "ref": "d6d11601-af2b-4287-94f5-210ad0623dc9",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6d43da69-847e-4117-bb35-99ef22c87ac0"
        },
        "item": {
          "id": "9835dc3f-03c3-43e1-bae2-7b6671c51df2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "66976731-c6fa-4a7d-8ea2-e6dd41c1530b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d926b0b-b78f-4f6e-a135-8074c04c70f4",
        "cursor": {
          "ref": "12823aaa-72af-43fe-ac84-412b290c4c2d",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f928bc96-8a20-4b17-ae3f-85546645182a"
        },
        "item": {
          "id": "2d926b0b-b78f-4f6e-a135-8074c04c70f4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "35909368-9d50-43d8-a8f9-c5c007dbf3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc10bcc-8832-4f75-a2ab-170ff98fde0f",
        "cursor": {
          "ref": "b78e21ae-0ff9-48e2-95be-933813d3e726",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "684d91ce-c324-4f7a-a2d5-ec41f5a11732"
        },
        "item": {
          "id": "9dc10bcc-8832-4f75-a2ab-170ff98fde0f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2e82049b-7dbd-477b-9aa4-ef9bd3891145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de85d500-30bc-4d44-b45a-dbbad4a9fc2c",
        "cursor": {
          "ref": "2aba2648-26e7-4d25-b437-b378429a3058",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f8c3e1a9-7d9f-4643-bd6a-da5e814a53e4"
        },
        "item": {
          "id": "de85d500-30bc-4d44-b45a-dbbad4a9fc2c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8504a808-d9d1-4626-8b94-8768a6c6ae0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db850dd-c16b-4b92-b1f6-90f5cbe6a5ca",
        "cursor": {
          "ref": "3d33e49a-d6bf-449f-b9bc-f5371c44b6bd",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "254c2050-fdd2-47ec-9786-3d283506351c"
        },
        "item": {
          "id": "9db850dd-c16b-4b92-b1f6-90f5cbe6a5ca",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7b180134-3779-4a6f-a112-1fb26466c9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e17d3fc-b4bc-4ea6-a2d9-dbb1f32aa762",
        "cursor": {
          "ref": "112b859d-1c0b-4bf4-a963-283ac3efab70",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1be49e1c-d977-4653-b347-fc381176c5b6"
        },
        "item": {
          "id": "0e17d3fc-b4bc-4ea6-a2d9-dbb1f32aa762",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4393c3e8-2e2d-4d46-996f-b8d0b9a9ea50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc786bba-5465-4fb6-8273-8473172764a3",
        "cursor": {
          "ref": "94cc6e6a-c6c3-4486-bd75-77b7e0cd18d3",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f8789137-d256-401b-8b6e-0cafe0037c34"
        },
        "item": {
          "id": "bc786bba-5465-4fb6-8273-8473172764a3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0e036298-49b5-40f8-8946-470907ae88fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a50000-3fab-4f9b-8e88-3a227d840132",
        "cursor": {
          "ref": "d58ad8ad-79f8-42c0-b9e0-e02fed38746d",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1ad241c5-2868-414c-873e-09d0f2e078d7"
        },
        "item": {
          "id": "e1a50000-3fab-4f9b-8e88-3a227d840132",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0a53c1b8-7ffc-4ce3-bae9-41bec788c92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6868ff-6cb8-4d0e-8734-3dce1e74e80c",
        "cursor": {
          "ref": "fb93d4d7-d144-4eda-8dde-95d1b72fd12b",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9f1277fd-e746-459f-9a74-fc990b099e29"
        },
        "item": {
          "id": "5f6868ff-6cb8-4d0e-8734-3dce1e74e80c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ff80fcc3-4382-4e29-8791-42651e744c47",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c1745da9-0877-46f3-95fd-a4d259b0f41c",
        "cursor": {
          "ref": "b42530f6-8785-4fc3-8a1c-55bfc4c88df3",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6dca6186-c199-4a50-be4b-30dc824a3b16"
        },
        "item": {
          "id": "c1745da9-0877-46f3-95fd-a4d259b0f41c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "97d5b806-9f3f-4438-a63d-fbab342c8175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a0a796-710a-4ef9-b104-2a80ba1ba70c",
        "cursor": {
          "ref": "8fa0fe56-1baa-4dd5-bca3-b0e544e2012e",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3f0c0af5-9990-49fd-b065-c120b7a96dc6"
        },
        "item": {
          "id": "e8a0a796-710a-4ef9-b104-2a80ba1ba70c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8d3f5e03-c191-4251-8419-b0041cf11c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec44a95-1116-45a8-b195-d3cf9627be68",
        "cursor": {
          "ref": "bfef7d2c-ebc9-4204-ab04-da5460c83cd6",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "28f25df1-e030-4846-9d6d-7324ddd532d4"
        },
        "item": {
          "id": "dec44a95-1116-45a8-b195-d3cf9627be68",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7f8e7db4-b6f8-4132-94bd-d9d367629d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92ba1b4-450e-4970-a290-c4238fedae8c",
        "cursor": {
          "ref": "0c81003c-0a9e-4095-9e03-429a9af5b547",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3679477d-70d6-45c8-9141-ea6777620aa8"
        },
        "item": {
          "id": "b92ba1b4-450e-4970-a290-c4238fedae8c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ef16e763-9871-4b41-b74f-7999db9d455c",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "0dcd6e3f-ae0b-4e45-a8b4-804a830cbfd3",
        "cursor": {
          "ref": "a2e26fce-c5c3-4b59-b066-e4450281ac1e",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4c18b7fe-9ac7-4541-920e-4c9844901bea"
        },
        "item": {
          "id": "0dcd6e3f-ae0b-4e45-a8b4-804a830cbfd3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "02119578-64ab-4531-a7d5-2e98eea6c431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc77d4fa-8745-4e53-858f-0ec2c8eff625",
        "cursor": {
          "ref": "27b5846b-c6e7-41c1-acfb-c1f4e2a21bca",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "35c06042-2197-4548-8324-ea7d55f5426e"
        },
        "item": {
          "id": "dc77d4fa-8745-4e53-858f-0ec2c8eff625",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3cd8400f-6524-43b0-bed4-5816278d8685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42848f27-4108-474d-ada5-85bc2e9a82fc",
        "cursor": {
          "ref": "487964ed-ebaf-4d08-a8ba-c7bc6e3044d3",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a59f87d1-73d5-4dfd-bf83-0ba0b4ca5010"
        },
        "item": {
          "id": "42848f27-4108-474d-ada5-85bc2e9a82fc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2fbac95b-e3a1-4179-90b4-36c17fbe00e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72851e52-b8c2-4d01-874f-7e3e167452ab",
        "cursor": {
          "ref": "2953cb01-8f18-4f66-af03-420f945ba629",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "81ba5cd2-10ee-4244-9aaa-172d088551e5"
        },
        "item": {
          "id": "72851e52-b8c2-4d01-874f-7e3e167452ab",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cadee95d-b85a-43de-aeb7-de7638497d90",
          "status": "OK",
          "code": 200,
          "responseTime": 721,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "ae14e0c4-1dc8-4505-99be-d6463ee91a3b",
        "cursor": {
          "ref": "82dc04db-83ca-4644-a4cf-0e4a4400a2fa",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fc9fae6c-8309-459d-82e3-dff0d85222a2"
        },
        "item": {
          "id": "ae14e0c4-1dc8-4505-99be-d6463ee91a3b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4d97cfb1-1342-4ba3-90ae-2ea131ec0a0c",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "0e54fa6f-c27e-4323-8f61-e10d7216e916",
        "cursor": {
          "ref": "341fb8fb-0afa-4035-821b-3246ac6a9ee4",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "63a42405-e77f-4838-8831-7709fe97cc44"
        },
        "item": {
          "id": "0e54fa6f-c27e-4323-8f61-e10d7216e916",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e63a77f1-caf0-446c-b22e-19c599206473",
          "status": "OK",
          "code": 200,
          "responseTime": 866,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "0d741428-bc08-46b4-b4f7-5c3d8d199b31",
        "cursor": {
          "ref": "065a8127-16d2-4ae1-84fe-db6740df05a4",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "627af52f-1954-4447-939c-a8d282360bbe"
        },
        "item": {
          "id": "0d741428-bc08-46b4-b4f7-5c3d8d199b31",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "639dabc8-f9e9-482c-a574-49a90eb78105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc7db35-2573-4c38-a95e-aa5d773f4b67",
        "cursor": {
          "ref": "f37929d6-7736-4580-a006-7563bdc2b910",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "737fd6bb-cfd2-4992-abc1-dcbf7338b22b"
        },
        "item": {
          "id": "9cc7db35-2573-4c38-a95e-aa5d773f4b67",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ad43f772-eabd-46a6-b7f7-11d48b82e45d",
          "status": "OK",
          "code": 200,
          "responseTime": 768,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "6c6ecac6-d991-423a-90f4-2713d14455da",
        "cursor": {
          "ref": "a6b61697-6b5a-4cff-ba99-b0479f612491",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1fb2cdb8-4b72-4e2f-b705-bae55b2b51b6"
        },
        "item": {
          "id": "6c6ecac6-d991-423a-90f4-2713d14455da",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0215eaa5-48c5-4cc9-891f-7d30205b4f41",
          "status": "OK",
          "code": 200,
          "responseTime": 811,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "54c4b355-18ca-40ef-8528-9a3530cb9d0f",
        "cursor": {
          "ref": "3f26adee-58f0-4597-9518-5fd198b0ffbb",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5bff381f-6e8c-44ca-999a-14d30fe0addf"
        },
        "item": {
          "id": "54c4b355-18ca-40ef-8528-9a3530cb9d0f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "63c855a6-d980-4576-8e3b-f17d4e9ced15",
          "status": "OK",
          "code": 200,
          "responseTime": 789,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ea3dc194-2e7d-4c5c-9401-89a888dda260",
        "cursor": {
          "ref": "29d1ce13-3561-49a0-81f7-00d32e3967a8",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f25c952c-6cef-4ad6-ac40-6a75ebafc119"
        },
        "item": {
          "id": "ea3dc194-2e7d-4c5c-9401-89a888dda260",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e2d5c331-b488-459c-922f-3a747e0f6856",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a33f9571-a940-452b-a3fc-bed9b02de57c",
        "cursor": {
          "ref": "e847d604-2cd9-4a86-9a4f-914d0138387f",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fab663a9-0426-4a6e-b274-3941d9bda4a4"
        },
        "item": {
          "id": "a33f9571-a940-452b-a3fc-bed9b02de57c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "14951826-0fcf-4128-89aa-457878b01d9c",
          "status": "OK",
          "code": 200,
          "responseTime": 844,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fbea3cdc-6c96-447f-93b0-7cafcf0baf7f",
        "cursor": {
          "ref": "6ab2f9a1-c68d-4ef3-84ce-05722e72a023",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a96c7761-d4fc-4682-babc-61a432ebba20"
        },
        "item": {
          "id": "fbea3cdc-6c96-447f-93b0-7cafcf0baf7f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3bbc86f5-7f45-4685-a1ca-37151c0c5b02",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3448de09-4261-421d-9d58-35a5fd1a5356",
        "cursor": {
          "ref": "12a4a387-0022-42ca-88d6-c84b25272699",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c9076278-192e-4d84-a9a0-ce8b38185819"
        },
        "item": {
          "id": "3448de09-4261-421d-9d58-35a5fd1a5356",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "841bce8f-ede6-4c9e-bad6-ba7e87a1a7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c02a40-55eb-4ac4-bb61-7aed99d49016",
        "cursor": {
          "ref": "0c0159f4-9d0d-4a6a-8b40-d1d87b69ecbb",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a9cf5f4b-e121-4c47-a81c-f9c9400b45b1"
        },
        "item": {
          "id": "62c02a40-55eb-4ac4-bb61-7aed99d49016",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6a4daa20-426e-46af-8396-035f5d71e825",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "1fa1789e-b2a3-49a1-a81e-0ac51b006249",
        "cursor": {
          "ref": "6ae05bc6-ba13-40e0-ad81-2a02c02fb512",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7b3b90f8-c07c-4ebf-90a2-f3b0a5a8e753"
        },
        "item": {
          "id": "1fa1789e-b2a3-49a1-a81e-0ac51b006249",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b75301d8-bac9-4fc1-8252-a4c4793b61c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcccd48-c141-4653-9a4a-f04fbac637a0",
        "cursor": {
          "ref": "46bd602d-4897-45e1-a16f-1491fa88deea",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "36fb742a-61d2-4631-9308-c49e60d424c5"
        },
        "item": {
          "id": "9fcccd48-c141-4653-9a4a-f04fbac637a0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "134d0cb2-7a0e-4c37-8b38-2adcde5de208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33801b7-56c9-4e17-bb30-9f5f7927d047",
        "cursor": {
          "ref": "0288db22-22b3-4212-b8f5-db8f21bc9688",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d9524956-71f1-4ee5-979c-ef77cb406f51"
        },
        "item": {
          "id": "f33801b7-56c9-4e17-bb30-9f5f7927d047",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b2e7d534-dbcd-48cb-8c40-2a6c1e72bcf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a88f722-c2c0-4ad8-bce9-176bc6ce04e3",
        "cursor": {
          "ref": "a8dd3011-10bb-428d-99e3-93d76f10fa30",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6536e2a8-f0f8-407d-8826-8d68cecc9c5b"
        },
        "item": {
          "id": "0a88f722-c2c0-4ad8-bce9-176bc6ce04e3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "26804b83-3a61-4dfe-858e-0ccdf1a008e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502e0416-2502-4acf-b3a0-e422d604fddf",
        "cursor": {
          "ref": "8edc8200-4fd4-4acb-aef4-eaff22835206",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fe578448-fbdb-44b5-89f2-2cd1376c0eec"
        },
        "item": {
          "id": "502e0416-2502-4acf-b3a0-e422d604fddf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "35cd8ee5-afde-42c2-be9f-44e19cc11248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3400a21c-c08c-4cd1-8c53-252f2f55c643",
        "cursor": {
          "ref": "e497543c-ead0-4a1d-8df7-5de8d7b0fe6c",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "16e4d7f4-89b4-474b-a478-39377cb5cafe"
        },
        "item": {
          "id": "3400a21c-c08c-4cd1-8c53-252f2f55c643",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4e85dba9-0590-419a-aa49-c86a5010b937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76b9d97-702c-4709-8c35-c1302f977936",
        "cursor": {
          "ref": "0391799f-baed-488a-85c3-57a12f8614cd",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7a940ab5-ad8d-4e5e-81fd-31b966568564"
        },
        "item": {
          "id": "d76b9d97-702c-4709-8c35-c1302f977936",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "860e1d63-3c84-4952-ab27-8d0dcfb32e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10520972-a1b6-4c60-9ed1-bb4e0280bb4e",
        "cursor": {
          "ref": "a5658b30-7387-4d3c-ade2-36ab637fe55b",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "813e75c8-3f66-4fb4-b1e3-5b747e09b027"
        },
        "item": {
          "id": "10520972-a1b6-4c60-9ed1-bb4e0280bb4e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2df4dc20-0de3-44c7-adaf-67451711d4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1250209-0709-41fd-8b7f-3a6761aba1db",
        "cursor": {
          "ref": "81a6193c-f0d3-49a1-b5a6-55b27c144d9d",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b35f9410-bf8a-4f2b-8a96-16450d9e83e5"
        },
        "item": {
          "id": "c1250209-0709-41fd-8b7f-3a6761aba1db",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b2437e5f-a40a-46c2-b3c1-7213708396bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b4ec7c-8e25-4fb9-a060-8674ccb050c9",
        "cursor": {
          "ref": "7f9755df-637f-4427-99ca-e056b8331bf9",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "45d6d955-4e81-4b30-839d-2bb8f755797d"
        },
        "item": {
          "id": "54b4ec7c-8e25-4fb9-a060-8674ccb050c9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3a9736c3-34a9-44e1-b94a-ed5f3e0cafa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba612d4-96b7-4172-a4f3-15bb9f1a9da3",
        "cursor": {
          "ref": "38772ad9-db48-4f54-8477-cfea6c447761",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "89d521ee-5809-42f1-b1c6-86ce89bea23b"
        },
        "item": {
          "id": "0ba612d4-96b7-4172-a4f3-15bb9f1a9da3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0e9745d7-14e9-4176-acf2-a4afe8681418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8ddea3-0ba4-43c9-8c14-fe53e20497cf",
        "cursor": {
          "ref": "68fa51c6-1ed0-4037-a16f-75e60f9063e9",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4da03063-0eb3-4c4b-9202-3fa60a1da519"
        },
        "item": {
          "id": "7c8ddea3-0ba4-43c9-8c14-fe53e20497cf",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3a1fb469-b64c-46ad-b250-3b92e4bdb97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae14dd3-4b89-48f5-adc3-69606d57d7a5",
        "cursor": {
          "ref": "46aba90a-175c-478b-947a-19f1abec6fd8",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "157ebd26-4c63-4886-8be8-a9a975c087c9"
        },
        "item": {
          "id": "dae14dd3-4b89-48f5-adc3-69606d57d7a5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "20fdbf1f-7f7b-4004-89c9-c17691e7d89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deea3d64-a6c5-4411-b308-64effc2fcc54",
        "cursor": {
          "ref": "f6a16f62-ff68-406b-a894-90b0b599978c",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c135462a-84b0-46a0-9cfb-7c6d864ad236"
        },
        "item": {
          "id": "deea3d64-a6c5-4411-b308-64effc2fcc54",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f5470884-07d7-4dc5-8051-0954da7a4e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3038c08b-78bb-4823-8a96-412729a8398d",
        "cursor": {
          "ref": "763e3790-4002-4346-9966-aa7745b8538a",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c14d962d-b421-4865-9b2e-b5ecf523e523"
        },
        "item": {
          "id": "3038c08b-78bb-4823-8a96-412729a8398d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9fe0f3b7-e79c-4065-9b26-393faffddfda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f8962c-235a-4c35-91e2-ac73bf8ccdc4",
        "cursor": {
          "ref": "4cc23811-5a25-4ed1-8a58-bcffe86038b0",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8bf57c2d-74b5-4722-86b7-f2019c0865f8"
        },
        "item": {
          "id": "b1f8962c-235a-4c35-91e2-ac73bf8ccdc4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e6650a54-fe1f-462d-ba8a-fbb906320d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea43f3b-2403-4356-89c1-2cea1e68858f",
        "cursor": {
          "ref": "672aded0-9655-455c-b5ae-1f9e3776fbcb",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "7407e1a8-27d3-4d37-9e73-a982d6f206ef"
        },
        "item": {
          "id": "4ea43f3b-2403-4356-89c1-2cea1e68858f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e313c46e-d604-4bd0-9c14-7a649bae2e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5128d57-a605-49b2-9d8a-a62aefa031aa",
        "cursor": {
          "ref": "f660daa1-7751-4475-8997-761572f104a9",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "bf9fb2cd-b110-42f2-93d9-bcb55f9285d1"
        },
        "item": {
          "id": "f5128d57-a605-49b2-9d8a-a62aefa031aa",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "847649b7-bf0c-4258-b4fe-13ea324438c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb7d983-2d8f-4ce3-9aca-8a6dae787b9d",
        "cursor": {
          "ref": "a11116c2-c3a9-4e55-bf7c-12434d39067a",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "662adb7c-0414-48ea-bdaa-1c4e4fba06fe"
        },
        "item": {
          "id": "2bb7d983-2d8f-4ce3-9aca-8a6dae787b9d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "11016282-f23f-43f5-a60b-93e82e2e7850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef332bb-0d2b-45e1-8dd2-6a621cce8b09",
        "cursor": {
          "ref": "9730c813-5cf6-4eef-aa32-654f41bf957c",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7b82b681-6637-4f15-a491-70909aef9312"
        },
        "item": {
          "id": "9ef332bb-0d2b-45e1-8dd2-6a621cce8b09",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "257d2fad-c211-40ab-9977-6e86f2fec421",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "f040cb9f-a210-49bd-844a-9387a51e6f89",
        "cursor": {
          "ref": "b2704343-67fa-46fe-a9ea-c2546597fee4",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "fe7638d2-ff5a-4f89-9835-901d9e55f674"
        },
        "item": {
          "id": "f040cb9f-a210-49bd-844a-9387a51e6f89",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6762d176-48a5-440b-b727-89b295667cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f61eb9e-a6ec-45e1-bec6-f6cac556259f",
        "cursor": {
          "ref": "c8beb64d-6438-419e-aae3-342bc2704870",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0ef9200e-e0dd-4b98-94da-1f9b2a54bac6"
        },
        "item": {
          "id": "9f61eb9e-a6ec-45e1-bec6-f6cac556259f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "df601e77-0fb1-4d9a-a70a-c7935c8d93b4",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "075953e5-8891-4169-9aa7-25bdde22fefe",
        "cursor": {
          "ref": "e41e3425-d238-4951-8178-4cebf0957922",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "30193077-08e1-4923-9086-4c6f86c1ea81"
        },
        "item": {
          "id": "075953e5-8891-4169-9aa7-25bdde22fefe",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9a3a37c0-f54a-417e-96f6-1b07c0f7a416",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "054a148b-c460-4be6-84f1-3b56602580b3",
        "cursor": {
          "ref": "9f1e82d3-8bce-4d4e-aee9-720182cb9859",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b5f349a7-36c5-4bc8-9268-63d4e8a8647a"
        },
        "item": {
          "id": "054a148b-c460-4be6-84f1-3b56602580b3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7a13a29f-56ec-4db9-8c9a-d2596d2e9538",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "c622d382-e17e-42c0-8cee-c620adbc8b23",
        "cursor": {
          "ref": "066a43a6-2e88-4781-830e-c00dd98768b0",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4186090e-c4c6-4d80-9211-7ba0ea8664fa"
        },
        "item": {
          "id": "c622d382-e17e-42c0-8cee-c620adbc8b23",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8a27709d-bd31-4a07-a995-12d604e582ac",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "7bad85d0-af73-467a-849d-71b0efaa35fb",
        "cursor": {
          "ref": "fa52fc07-2181-4588-b3bf-f92790bf7eca",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "91e6024a-bb78-4dc5-ae45-c210c145df73"
        },
        "item": {
          "id": "7bad85d0-af73-467a-849d-71b0efaa35fb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b9ec2db7-b82b-4e3c-8e57-130aa3e97b49",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "b2b90775-179b-4b9d-9f80-124d53fdc4b7",
        "cursor": {
          "ref": "4ea7d594-fcfa-4b8b-9c7b-9e0d67b7840b",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b755c89c-135f-403d-ac13-5dc9fee8095b"
        },
        "item": {
          "id": "b2b90775-179b-4b9d-9f80-124d53fdc4b7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c1bf944a-e8ba-437e-8543-9a74dc23ffd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69f6573-5c3c-4c50-81b2-81117c292a82",
        "cursor": {
          "ref": "9ca1881b-aa3e-4ee9-9a9f-c58a75848409",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "690e012b-f114-4f7d-bd28-8e5f79094f23"
        },
        "item": {
          "id": "e69f6573-5c3c-4c50-81b2-81117c292a82",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "afbe77fe-31bf-4b90-9e58-10bc4de45cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c3093f-93db-4dc9-ad6c-b9e53fcff57a",
        "cursor": {
          "ref": "59ec73e1-a8a8-442d-9bbb-4e884576c09b",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "80ba37d1-852f-4066-b714-c7ac99877972"
        },
        "item": {
          "id": "81c3093f-93db-4dc9-ad6c-b9e53fcff57a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "727ab179-67eb-4f07-8561-0bb7af412d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2092ffe7-6bfc-4032-a548-73e293f9e671",
        "cursor": {
          "ref": "92ba837e-e81d-42ad-a0d5-91ea8c259a5f",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "9968dda5-2d8f-4213-a487-324cc54fd27e"
        },
        "item": {
          "id": "2092ffe7-6bfc-4032-a548-73e293f9e671",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "86781cf8-2759-4ee4-b884-aaea7ecdc6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14542b7-9b33-4824-98af-f2b9a18f031d",
        "cursor": {
          "ref": "716a8bef-3cd7-4a28-8df3-47cb7d5844f0",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f86b54e6-063b-4543-bbb7-eda9612898c4"
        },
        "item": {
          "id": "f14542b7-9b33-4824-98af-f2b9a18f031d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d2b66b2d-e5cd-4c04-9d46-0bfdbda63878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37385161-7588-486a-a000-6157c755480a",
        "cursor": {
          "ref": "2bcacd7a-100f-4f2a-83f9-0da0d7b10da7",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "19977b57-6453-4dde-bc5c-e7bd22352ead"
        },
        "item": {
          "id": "37385161-7588-486a-a000-6157c755480a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "52790baa-2290-451d-8d68-efdce205a19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1a4380-8f56-45de-abfe-c19e522b82c3",
        "cursor": {
          "ref": "3ffbae5b-eab3-499e-bc56-b2507559f7fa",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "062a8ca7-db1d-4389-847d-543e35869026"
        },
        "item": {
          "id": "3e1a4380-8f56-45de-abfe-c19e522b82c3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fc6219c2-6ebe-4cb7-aa4e-12883e3436b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80f6f08-5a0c-42d0-b3d3-73cc83489e9b",
        "cursor": {
          "ref": "f42ef0cd-36a4-4b95-81ee-b17ff7e71e72",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "a7adb3f6-58c1-453b-828d-50ee27794348"
        },
        "item": {
          "id": "a80f6f08-5a0c-42d0-b3d3-73cc83489e9b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "86a99151-d243-4188-b96e-587bbacff556",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "f900eaae-83b7-465a-ad64-72270a258ef5",
        "cursor": {
          "ref": "5b3f160f-f58e-4e98-82f4-6ca9dfec4a90",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2228e7a8-5f69-4a2c-a76e-18d47c44c33b"
        },
        "item": {
          "id": "f900eaae-83b7-465a-ad64-72270a258ef5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "94cd180a-d368-4074-858e-c0a7695e0ac0",
          "status": "OK",
          "code": 200,
          "responseTime": 883,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9938aec3-3b65-4ef4-916f-da28f8c65ff8",
        "cursor": {
          "ref": "6ce1d668-788e-40b2-a0ef-0f4f3b931f6c",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6ea88c30-1bb6-4fab-b224-3da7ceffb9be"
        },
        "item": {
          "id": "9938aec3-3b65-4ef4-916f-da28f8c65ff8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "10a72fa0-197d-49e7-a832-44642314c697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "4c67c5f0-7119-4afc-b5ef-b73d3b3aeb13",
        "cursor": {
          "ref": "8703da02-c373-48da-8764-3a44ad5450e6",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "de3ced80-c4ff-4ca8-b147-b7b02c89d124"
        },
        "item": {
          "id": "4c67c5f0-7119-4afc-b5ef-b73d3b3aeb13",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "277fffa6-e44b-4bd6-9aed-b946bcd10ad4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c67c5f0-7119-4afc-b5ef-b73d3b3aeb13",
        "cursor": {
          "ref": "8703da02-c373-48da-8764-3a44ad5450e6",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "de3ced80-c4ff-4ca8-b147-b7b02c89d124"
        },
        "item": {
          "id": "4c67c5f0-7119-4afc-b5ef-b73d3b3aeb13",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "277fffa6-e44b-4bd6-9aed-b946bcd10ad4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10dc9a99-5af9-436f-8865-bae4d3ca54c9",
        "cursor": {
          "ref": "1ee21ac5-6206-4093-9ed0-3476482c08af",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "90d4599f-57e2-4e06-ba1d-16ff04348ceb"
        },
        "item": {
          "id": "10dc9a99-5af9-436f-8865-bae4d3ca54c9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "16a08082-1f9c-4320-bc62-a8f20913e1aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d14a274-76a8-42f3-92cd-28b252ee4c8f",
        "cursor": {
          "ref": "d8ee34b2-67d1-44b4-937f-ebeaa985c646",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "728c5404-3efa-4648-bc81-88a23df25193"
        },
        "item": {
          "id": "0d14a274-76a8-42f3-92cd-28b252ee4c8f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "50eebae8-a23e-4397-a721-48c6328282d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}