{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "939b14aa-5403-4cc4-93c8-7015702de117",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ad32d161-7c60-4626-9a3e-b031e553b3ac",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fccc59ca-ef04-4a38-90df-e77d0464002b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a0334c36-a502-4ce3-960e-d23c9de8b6e5"
                }
              }
            ]
          },
          {
            "id": "5597a2de-d3d7-44f7-8643-68220db55e57",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5271562e-8add-4aee-86ea-a30cc6f77967",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a42582ff-c22b-485c-b2ea-8958bccc5f84"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4a81c4fb-be83-4f35-ad70-013b8ab77700",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6b2ec293-a99f-4c1d-a809-fa0ba9edb805",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1217165e-259c-481d-9d2d-7f2f77e32d4d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c37fdcc7-a5b0-4992-a62b-62764825aebd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20746e6e-4eed-4d7f-bd29-07b388c19771"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "053c03e4-621f-4ba5-8464-f52b98d84673",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b9821702-4e87-4874-9b05-77f357d1a863"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "39d1277a-ce47-45e5-bf19-c2131d3b1ab6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0a20d61-0b79-46f2-8013-5f0bee8bd3cc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82671b7c-7492-48f9-8d66-b5e21e9710da",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fe70d1af-bfc1-431d-9816-30603db0f4ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c96a46fc-029e-4843-9df7-c6008e38c424",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ee111a6-0009-4db5-8368-32f0b78bde09"
            }
          }
        ]
      },
      {
        "id": "a13dbcb5-3b6c-484f-bbea-394b3c0a47a2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3da69fd1-20ea-4038-be4f-ede74e3fbdd4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12c9f8ce-c96d-475c-9295-049a481067b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "98b8c384-1dbc-474c-b1f6-4550ad468901",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d3827f-f448-4fc4-b23b-19134c604bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80df8f7b-e7be-40c7-a027-efedc19796a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e864bf-c69a-49f4-a252-7ff7269d2ace",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06a04af-6bf4-482b-874e-ed2321a14ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c19d34f1-25bc-4d53-b361-a19d36df299f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac77b3a-07ba-4f71-bf75-f9ebc9036f14",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1efbf6-21b7-44ef-b450-fc500701c68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3de63e8-e8a1-484c-8505-4e4cf1f87737"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e1803c7d-7742-4edc-85a8-c617369f67f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f203e1d7-8470-4eeb-a675-2f4cde55f4c3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144b8c91-a9da-4faa-ae48-b6f8c0fd7146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4a306c4-54fc-4388-88c1-ab52ca02e543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea92fe3-69b9-4e61-8a40-bdad50d4923a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3b127d-d807-4f7f-b367-c28732f65cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8edeb0ad-c1d8-4160-945a-78a1dd5c4fad",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccead145-35da-4c8c-ad3d-10c03141f5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76ac0978-716c-4171-99fb-4f975cf01396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aaccf7a-5f3c-446e-b89a-945719732cc0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "71fe0b72-32c8-4262-9d99-862b6f95c1ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3183ce7d-a5d5-4749-aa2a-a8f027c78f7a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e9a61630-47af-4b72-9c84-592ff9dc4273",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c105b41-2abd-49f2-906a-2766d85dca75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0957e344-a7cc-4933-92f0-15d2eb426839"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d3be19c-d49b-4e3b-a923-aac5da462a94",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "23f1d611-5a9a-4f4b-95a1-9c1ed32fd199"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a07a67c-b2c0-4e75-879a-c1551bd1065e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "985c44e7-cd1f-4ea9-ac19-341fa9100c1f"
            }
          }
        ]
      },
      {
        "id": "033f44ef-334a-4926-961d-a4ba6c9da830",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d716e2b6-5243-4bd7-9311-8c90905b0362",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10999ede-a0fc-448b-8d11-afcb59248c04",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "015fa497-632b-4f90-94ad-f03988f26912",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784c95d5-765d-4f3c-9a8a-d58bd7758792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f929afb8-5ac7-4baa-a513-a3522f16154f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eee2391-15aa-4df8-a8ff-0b91ca430bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ff2f75f-c022-40c3-82f4-d4f72ae5efef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32179bef-0d96-469b-90c2-8da182e0e8a2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5def69e-47db-432a-986f-c8b884fc9c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd25c8e-9a32-4d74-93fd-aa3fd46293c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69105f8b-f4ef-490f-b580-b091aacb3703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fd3ccd4-9861-4dd6-9dd2-c8edd00d8473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757096f3-f4e8-4f6f-afab-6463c4518c29",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9793d0-187d-4653-bee5-5bdbf9ad1f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb79de9-4169-4a02-a312-aacaa3063a5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f636284f-22d2-4233-9d2e-472eed04dfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ed600a5-20c6-4fe9-8846-696b108ae91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b475937-9639-458e-91b4-8fe1e402c3ca",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db0c5e8-f124-47d2-b227-67b211e0d194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812ea79b-8972-49c1-92e7-a9a4ea192b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bcb6f1-c95e-4e24-bf0e-48837e3fd939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5377c367-b3fa-4386-9f80-a5f9fa1f7868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abc4c87-48b5-4428-9799-c74ca86b5524",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d253e3db-f249-4415-9f79-21ddbe3b196c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0f2b68-0f85-4726-b28e-f86fe5d517f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c09eb6-1847-4cbe-aeba-8b4f09d5064b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8887d2b-5475-49e0-8f3b-b6613d58b1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c1c4ea-3ee9-4a8b-9a02-1d95feba3df4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437cfa47-ddb6-4170-8c5e-b69b7372a1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a32bc9-e127-4670-96b1-37c563149c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065f3f32-e2ea-4a29-9398-a2f541928959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c22ba32-835c-41ad-ba0e-15542aa6c541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cdd8cc-0f04-4171-9507-1ae75a0e3ccc",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83817230-e280-4222-9b36-65ce0ec84e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2666389-c072-45b3-974e-13c44c4fefea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8dd1d39-70eb-4213-9e53-927fc0bf3df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62c8010e-0dbc-45ad-a731-8991cd0bfa40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbafa1f-57e9-448d-89c4-9a06425dc61a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4183f00-bd06-4c69-b0b6-65eb15fb040e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b3adb4-e66f-4241-9614-dbebed47c377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790265af-b8e3-4d46-be69-b4272f3a5d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c82dadd8-b33b-411a-a070-f661a7ef58d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713d3cbb-7c6e-4813-bf53-4ab97cd98aa3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67117347-cb05-45cd-ba1c-92b35d8cb250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e259c34c-75fa-40fd-bcef-cae3e7bd23d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd23ad75-a8ee-4733-80ec-0c27382449de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc94a4c5-5193-47ff-a76d-a58bd8a43a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86782b4-c9cd-4eea-be98-de15c6fba217",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e18479-6686-4cc0-a245-d9954ee0b095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3751f65-8f46-4b84-9cee-e6f93953fdfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5385b382-d23c-496f-a05d-3196edee15c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76c97ac2-60fb-4e45-a470-950fa5c63be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebce98cf-34fa-4bbf-9a83-c46b58ce6d2c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74314a8e-dad1-4e86-9e12-acca0d27c073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5424d03c-bcc0-45d7-bd83-0129bfe03dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c3d1c6-42a1-44fa-8624-5174605f53f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70a8f9f2-8a13-40b3-9e35-bfe2af848f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ee8ce6-cff3-4aa0-ada1-0275f3d17ccf",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40998144-6abb-4338-9ad0-a783ab7fd6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7aa4244-ec57-4a03-8b72-dcb8c9e59850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105f8d2d-c813-4b8e-9be6-39fd6c3a171a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70e64248-9cfa-4e0a-b84c-486db72a7294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6605110d-0a62-441f-b107-2a6ed4aaa6d0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f3ed0f-61b0-47b4-909a-829582560856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9354bb-f934-4cc2-8538-27bcbd253c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf2542d-8f1e-4277-9682-ce630304f4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98b9aaa4-ea01-4970-8290-7588b41978fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea59ef15-286f-4075-9fbc-f00d1fac5129",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a754a765-8eac-42aa-8497-9a2ee83fb965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e4774e-69cc-4bc7-9dff-2ec868360339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c5fb5c-7fa1-44a1-883b-957e4f497315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "037edc57-6379-4ec4-8dd9-9fab38f4159e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8c2e2d-ff49-4052-b779-24bef1caea67",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfda28a-2215-45ff-9399-5cebc51976a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82bd08a0-dec5-4092-90f7-49524d94c4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e812ef4c-e85e-4095-a788-d06ace13998c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1304528e-b7b1-4f65-b455-ca241d309013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d20f88-8778-4ce0-86a1-49a21f9e0655",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a41e44-2293-4d5d-add4-eca57ba54042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f403b0af-cb6a-4557-9805-43316f0b5abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade532f0-d496-4e2c-a58a-5256219e5390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "186961a7-f84a-4905-b6e6-a2d1de1eea8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f20daf2-b77b-4f69-a8b1-c9fbc57b8b66",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe208d1d-15ca-478e-bfc4-6fc60229a6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c5fd9b-17d4-43f6-89af-c334d7d82068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170614df-4fef-44a1-b933-cf333a3362de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd7f5a6d-4bc1-4bbc-87f1-b98b5b739024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f331f5f-4d71-471a-af5b-dc8575f87751",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bef0170-4842-48e1-99fb-8bad97018cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10381d4-aecd-4a4e-91cf-b81b902d5ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58c0fbe-c7ab-4089-ab2d-ccb3f1bdb4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7515478-8162-47ad-a2b9-40210a554b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5090560-a84e-4a47-8138-6910344d0690",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e776ea4a-e4b5-4a31-9480-b39feb597cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72eb9f3-cc35-4cc7-8aea-8f4903bcfee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc53361-f1d1-4f17-9a6c-6a2893f03340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed0411b-9102-4f67-b29e-afabe4ae6730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5114f262-fd7d-4607-89be-e1cfeeabd961",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8632d2-8332-49f5-aa8d-9f41611a4d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38132c8-85dd-4811-8e41-bbfff42aeda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da239a62-24c8-4640-901c-8879f37d29a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05f26297-9e4f-41d1-8489-dba99e703d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b580dcd2-8bd6-4ef5-a902-922ce9592797",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb92cc89-7599-4faa-91fa-651d0b3aebdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc84997-5113-4ed1-b45d-a597def30c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac8f2de-cec2-41ac-9630-1d3e0a8a247b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f29d885f-e292-431f-8a93-63de05cafffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b408ab-f0ad-495c-9b95-aee711262238",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07537fe3-34c5-4f59-8ea1-1fe5855acd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c159887-0353-43a9-9d20-76ca5701abe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04f971c-d97e-44bb-81ab-96f4a50ffcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95c1a3c8-c935-4647-b23b-2e7890875fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af00cdb-d6c0-4e71-872e-9125d795582a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b5bcc6-b8d1-4296-a8bf-b4d2c83b59ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d766fa4-a6be-4b86-8488-d7a28f76a78b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d17e659-fc6f-4418-a13e-30f05bb3cdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a64e10d4-fbd2-4a65-8a40-ef9dcd7db717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be95fca8-4d02-41b9-b676-375732d821b6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a95877a-7958-4720-b155-36c6b920158a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36aeb520-ad6b-472a-9a8d-1c6dc0ff6e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f38442e-efb9-406b-82c5-b2abf2c164e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7567837-a065-4c0a-9a9a-a8e7e4f0a362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b923b3-cefa-4fc3-994a-0f19e33a56b0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "851f43dc-095f-428f-beed-41d79d27c857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee69a6e2-526d-45ad-86b2-e84eecb119d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becf118e-29a1-4821-a13c-08e74c7d6cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d7f53a0-a033-478f-88a5-eb486e921240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdeeb7c5-b9c8-4c7e-9f34-5f07255af207",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14a1e30-e1e8-4c39-bfe8-2382e33064f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b186e475-c333-4e88-8c8f-d12112257d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20887e5a-10af-4b51-ad4b-488c5b3de44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f08a5c2f-125e-44d0-94c8-721e05e8d155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459da25b-35c0-40a4-bb9c-5f6b4cc4b5e4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20021e7a-352a-4de4-9103-be5e0affb332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93bc81ea-6c1f-435b-89bf-d7e77e10239f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fd8ffb-0868-47d1-a838-0d873846e127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9a54f8b-fe9b-4402-8471-4ebe5223c5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a807a7-89a1-4458-9719-5c13195aec7f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3cfac6-3b0e-4653-a349-75ebbb016ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f857560-3a0c-41bd-b8c3-1081f6d8bc49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865ece04-636a-439b-93bd-ba1dad535816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a524e3-6a6f-4aa2-b034-548a9ef5525e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe89303-117d-4583-a4a5-8d22a27b8d16",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92cb909-34cf-4876-9f7b-95936987032f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27030c96-2b95-499d-a833-e28ff9fcdcc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b93174-05f4-4c91-b27f-a793fbccf072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed04fcfa-2ffd-452f-bcd9-930286aeeb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1204e52f-e817-4c35-8c57-f9e09c7bb235",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd104937-b733-4777-9d74-72bc23ba633d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375e9d94-82b4-4f1d-b6f0-f205ef67cb51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8997817e-e49a-4989-884a-389e7a54b1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa092120-ff96-4f81-abd5-929f01ae162e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d65ff7-0bb8-4484-bbb6-461e7932592d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf70de3-eda6-427a-b349-c268043919cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78561c2f-60e9-4789-a508-59147867d0b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ccef1d-d676-4c9c-bdb5-8a39957f1de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aacb0396-4353-44b0-bcbf-41b18f4bc2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa01166b-5942-422d-b80f-4df8eb98c1db",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cf8adc-ceb4-49d8-bbd6-81c63c5e8430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5071a12-5b9c-48d0-b97c-c0a0aefc1264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f9d8ec-6ec3-4da4-afb3-e8b55de8d5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4ba50d-b053-428a-a004-b57684ab5043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b2d6d9-49f3-459d-bda3-665d57b05c49",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8133865-f846-486c-a062-c780b61ac285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf85f067-9355-4310-a343-230ae9e631a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42165ad4-5877-44ef-8baa-8652d6ca709c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1be56f8c-3670-47b9-927b-130102604084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90959694-c721-4a61-95d4-686245471526",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5832d678-8892-401c-9435-32891909f037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519a7c7c-322b-4269-9e03-3b7ff73e100f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d98db2-04eb-4fa1-90a8-a7d7a5e814f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f61a214-3a08-418b-8b3f-5d879780c342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43057e7e-69bc-4ac0-b40d-f808f59df940",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a59f88-096f-414c-bb98-18799701a8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ae4b4d-37a8-4f80-b14d-e0a52af0a604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1fe38e-6d8a-412a-8abb-d2db139ea638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "dd7f7251-0f7b-4512-a4c7-f21d574694ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c385aca-09fb-45c7-a803-dc3588647ae8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15d01c8-fb59-46cf-9f1b-c0bce74b333c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bd2b7a3-8134-4e13-8ff2-8e64d8b45e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637e7986-6ba9-4520-b798-de57f58cb53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7958dfdb-9adc-4d42-a1ab-234ee11abe0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785902cb-04af-46fc-b165-116de6333bc4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50948c13-1035-4f0b-abe3-786348c22b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a7f8bf-349b-49f3-96f7-0f1d3ae84231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f889ce8c-5217-40f8-8843-37e0dd7ad3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26f88b36-2f44-46bb-b0a4-5f229a581064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95208095-0213-4b36-82f2-13232fd0ccaa",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70fdfce-a14d-45f4-bd12-ac58e6cbd1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce5806b-3518-4a82-8fad-5de9424f20d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9cd50a-78a6-4802-9197-e7b6d0119129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bec7a34-7c0d-480c-a778-5e7647e6ac62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5c456b-8c30-449f-b136-fed4b6a99e9e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f414544f-ad77-4735-8c35-d0af21930f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12911080-54e7-40e1-a155-a62eb4d612a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac6f5d0-b7cf-4ceb-9b97-6fef9b297339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c8bbc4f-96d1-4b18-ae4e-bda35c981daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab9fc58-106b-4974-ae9c-58cb3b6cc4e2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b641ce8-3663-49ec-ba9e-f919dde5b09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250387e6-b8ad-4a1e-b50f-d47b5acee92e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c3ce79-62a9-4537-b58a-60fe2fca1ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa985686-0208-40a4-8733-67118742eff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a47d7c-3ee8-4580-8ea3-253b386613f2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd91ecf-959b-4a31-a214-ec4314c5c1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8be0da-467d-4a1d-99d0-2f04e6c4934f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7e8072-ba42-4595-bfc7-127aca2a881c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d7ae87b-f35d-48e6-a4f5-626922f07209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a85342c-43ef-4c8c-a6c0-10406cfb11fc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4480bae9-1cca-4219-a538-018e39e8a022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d4f4c0-61e9-4857-ae1f-76ce824fe156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8c4788-448a-4473-8bc5-41e7c3ca80c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4dad15-a4be-47f7-b83b-c25834912703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a270ad1c-7536-4b54-ad05-f065f4b98f47",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c93b116-3d24-4754-8007-4e2c454f1b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6225196e-e2b8-42d3-83ec-c3ca3489f5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd82108-492f-478c-8ee5-204a96f40aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a6d3178-78df-429f-b29d-9d96ee38119c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65b0728-e3f7-4d86-8edb-fada3bf74a82",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5db2109-75b3-416d-bbc1-756ac49810cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea65afe3-cb7d-4611-b5de-10937aa77db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf90c5bc-6906-4272-afbc-4cbfa609bd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "94b4c8ee-1a15-4875-89e4-9cd172088c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c94fcb8-600c-4abc-8f8d-ead2e59f9c53",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5d99de-7c12-4ded-9728-56fc88bab22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2193a05-292d-4e93-a37c-9380a08d1e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066d255d-7882-4dea-bbe0-38b282785fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c08f21de-280c-489b-9749-8a1b214602f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d4a19c-0441-4163-9935-f0dfacef1896",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66542da1-6e25-4dd7-8088-6c21c6d1444f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d6271c5-83eb-4707-9bd8-d88ef950bb05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e8065a-602b-4107-8504-16e0cceffa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e72753a-9d0b-4f07-b98c-a80a43b06956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdb6fa9-ea8c-4d8e-a385-13aec3588a5a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2824a14-da84-4b4b-8541-e05098f9a175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304600a3-9950-498e-ae99-27426d4e1c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5406943f-c756-4216-b8c4-5ba2a4311dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31e9b453-9432-430e-bdff-fba7ee6ae9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0045d9ba-0483-4b2c-b351-59b806e8005c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64eff8a-f405-4151-9d8d-d2a36c3ce9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd3efef-d1d9-4470-8d7e-9f77f8cfd463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60caa26-2cbc-4cfc-963e-266b7bb44f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f1fa2a5-a6ef-42ff-a628-5f15c7d94d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363b11c7-fd37-4f32-a487-f81eebbcba1d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e096d62a-d684-4ce0-a4c6-d92a436ce6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12978d78-9b2b-42a4-ac80-f8bfafe86b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343cf49e-3fdb-439f-93dd-4cb716dd5e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c52b0d6-0e47-4869-ba8b-080986f47d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25c875c-7ef4-4345-b091-7c52953baf21",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677c3a98-106e-4396-ac45-b93aedf41835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c56695-22fb-4084-b1f5-0de50788ab48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d906a5df-fcc3-4f3d-ad02-222c53931df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19b81e66-3104-4ba1-a31b-29a4a4dc84d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f19fd22-786f-4c44-bb4c-8d2b4417a208",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac79f214-24c6-4931-a690-88c71400a6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c8999ba-000a-48d4-89d8-364eb4753b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ff5dfc-85d1-4cf6-8f14-babe26c08dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "af7141db-1662-4ada-91a3-4f94e084b3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d46d1e-bbed-47a5-8ead-b428432d39ef",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda8111e-877f-4df8-bb5b-b1f995455df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f5f646-358f-432e-8e1e-438b5662e329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c860b6-751f-4e45-83d6-5b3f132255cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af570776-8875-40ec-a885-c024dbd506e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4806b4e9-de16-46d5-ba01-83339909e320",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32cbe43-6885-43ce-aad0-deb46abad92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e30e2e2-820f-4e20-850b-01cd5830000a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bcfce2d-0a76-45d7-9f70-9f0e949be8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "257cb8de-8d44-48f2-97d4-92c22d232a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e6c106-eea6-4f2c-8b46-bced1f899d14",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9822d92c-6682-4ca2-b73b-f4c5d230d0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a22cc9-cb27-4ed7-bab5-e29e630c9644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40e6017-78f4-4fd2-b83b-16f62355a491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "66cbdea3-7bb3-4b92-bedf-8f675ddfb8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b224bf8-8b3a-4855-9075-b6c88f24e4ed",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e992da05-feca-4a70-9004-2c999d2cc3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bd9c19-f026-4c7f-8e7e-fe6aee98be9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e906da-7ece-43ad-998c-6950201c86d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc04c0c5-bd31-4577-af44-a35d91f07949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658eb9d2-81e4-41af-b9b2-cb211319d80e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983797c2-162b-40e7-b8ed-bf387058eb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3199f3c4-87da-4765-ac59-c4ea2de91e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fd2ab0-c714-4d3e-9e34-33434262aa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "25f00e28-b65d-475f-94bf-65c3be856f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd63b1e2-ecd2-4d6c-8131-deba9fbff6eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042aac74-5f60-4df6-8768-5dff04511de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3316fca0-7fc9-4cde-8e9d-0736f11c1773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f083be09-0359-4e86-8e80-e0f88d602e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f51be83-2032-4f59-a6a3-a9bd0f665f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f899965-da8f-4c8f-8537-4066450f7d8e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f30659-569e-431e-b48b-01eac5a41641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2642052-1d3a-43fe-ab97-34dbaa9ae62b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a825a61f-4a07-4dbe-a2a5-ff3fce529820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8aa1d83-c8d2-4103-9b5f-0bfc9a0f81c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7c9d11-8a1b-473a-bce3-e28d7e860205",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0603180-3028-40e5-9d75-813a33cd5dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dde224e-d469-4a2d-ab05-85689180f558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a748afc-ddf0-407e-b29d-9d3c36ad56c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a78223-20e3-46a9-aeee-60b6d238d362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379509d1-93ba-4690-b243-bb60296ff3e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19807b93-b836-4477-9cbd-25c7d0c0ba9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120fab1a-2da5-4d52-9bca-386126220ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f93a3fb-63a0-43a2-9b7f-441108146eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "374e7857-784f-49db-aba1-5323f7916b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8e4726-0e3c-4a94-8639-f2231756da38",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e20c8ce-2856-46bb-b91b-aaf5f9edbf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bb709d-28e5-4f8f-b57e-36a6241fbc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcdf726-c600-416b-9589-becb721438a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae899f8-3b60-497b-a033-f90a396fc4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07077218-2bea-4172-a194-f8e7efa8b284",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afa2d4f-ff12-4c1f-b387-5c91edd70991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8eef73-cb4a-4087-95ca-2de3a6735d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef891891-f58f-47e5-b6eb-e82d63372b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fef3794-18e2-4b96-91bc-fe65cc16cfd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b97f4d1-eaf2-433f-9eb6-3159af098d14",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365c8a9f-357e-4cac-bd6d-13ad89cc180d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf888bc3-4454-48d9-823e-9abe1d94713d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670455a6-499d-453d-97c7-f1a168f16fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e82953-b2ff-4eb7-ad28-9e68f887f19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800fabb9-9b8c-4afb-8427-9862a6cfcba9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e114eaba-08f7-4acf-84f8-235561acc328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bca0c69-d91b-4a15-9369-864701f4e11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040775f4-e155-4c93-bc30-bea24631c195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79409eeb-1d43-48f3-bdda-811a76bc15e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0389a733-ef52-4836-ab40-5c3261b7bcb1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0502e55-a282-4c44-8d34-ac2c178588cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc8ab59-9161-4f0a-9fd2-4e131a666eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3e4efa-df15-4fa7-83fc-fddde9b2bf5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9e6f29-2b74-45d4-be16-5bc65071b057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5770936f-db67-490a-a67d-f6269212ffa2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a0df0b-fa7d-454c-9bd2-a6b79d546184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a90814-5d10-4908-b58f-14610900dc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9481ee2-5426-4ad4-81a3-813321aa034e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "424d9bfd-dfd5-49e8-a535-bf22cc6772c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc260a0-33b7-4408-b991-040dc2e36d71",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3f1715-a000-4704-8757-568a9628c294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235981aa-61aa-4b98-860a-6728647fb1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a94fd6-ff4c-423b-90ab-ae798f2fbe6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed348452-010b-4702-9f21-df5d9fdd1eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29f7cff-48bd-40ae-886f-ce55efd7d4cd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e692ce71-d9bf-4496-8397-e3686452c9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65cc66e6-441f-4d2a-8edb-5f59f85920cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9136bd7-b9ec-4c30-93b2-418f7c0badc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "258a5133-3c46-46b6-8886-d5cbbbfef539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245c6cd5-bd88-417d-a114-81698b66e02f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95c95d7-3bc5-4738-a370-1ac052d7922d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87da00c6-40a4-40fe-b46a-028a25eac0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a73110-182f-4df5-a990-a81ab3495e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "be80eefe-b473-4452-aff0-f997907f7e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3cad97-5a5c-4dda-a78c-71eadd6740b2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4322bd2-057a-4f20-9201-1cd74bae868a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c44b2c2c-bbf1-4586-a1c9-c7604132b8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67648634-c965-42e1-9b01-411bfd76e71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b79fff-8b07-4b38-8736-e9d4f2082655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee66ad2-763e-4607-8467-a943be401cfe",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407adf93-72dc-4fb1-b489-e59fa05acd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06035edf-20b9-4cb1-b87e-43f4f2416748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e0fcc0-d39d-4f5a-a599-07811509749b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3680fec9-ca96-46f8-9561-90cd841e8641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79914ace-9733-42f3-8046-643c845abd6c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ee0921-01c4-43cf-93f5-d5d415999669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac955216-ebe7-4209-bb32-70fec353bef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1e5cc6-153b-487c-835f-2f570342662d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb0ac89-e693-439f-84f6-3d980ccb7c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741c31ab-55d0-4d67-aa56-f9b58d88d126",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865e6a2b-10c3-465f-8354-bd71b843b3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a03684a-2e30-4d96-b4a5-51dbdc5e7b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd24cfbf-2c10-4934-aef3-edd782cd734c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc52cb6-8299-4e6e-99c2-9744049dd258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af29285-ca5f-4be6-b8ad-8d3b04f51f60",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85dce5d4-7351-4e02-8a08-8ce9d4fef7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee791cd2-7a4a-4173-b90b-d13bb5a16b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d99b2c-bce7-4ef0-b81f-65aef802fc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b3512553-a721-48fb-9e1f-526c2a69fc47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d56584-4759-4076-8306-a8eaf7193bad",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d10a56d-378a-4dc6-bd9f-82f616772b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e711e9-c612-435b-b8f8-66eb6b03b445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e95b480-771d-49eb-9384-a3cf2adbe341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3bb2f1d-8161-4302-9b09-b14a9877a88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698a5d78-47bf-451a-a7b5-0ce2b128acec",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a4a40e-7c96-4c9e-9084-0cfbf285d23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea4fd4d-9d29-43cd-bb2e-cb0567a3b8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0491cd2f-ba88-412a-b609-24f180138b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9008b0-54d8-49a8-a2c1-bab04a41ed09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ecfff96-ba0a-4f56-acf1-af6f5933aa57",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a63603-74d0-4dd2-b418-f9be91efb45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6192d855-19ef-49fb-b42d-bdf10dfca47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47db1aa-4f44-4d22-ac22-8656bf59bb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c204c08b-f3e4-4290-b855-f369c4beb84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49d00ac-06be-4a1b-af14-4ed83e2c12b3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300f318f-0eaa-476c-923a-83925737ea81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a879398-f1fd-42ef-997b-b93da2854954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736d7991-ff86-4705-8b59-1aaba9cd618f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "550ca97d-fc84-4f80-9daa-5550df2f63aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e11a9e3-3c85-40a3-9615-cec730cb4b78",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3944dea-b7eb-40f7-9704-9d7553545523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe770345-7b0f-4da5-9c15-dff6f6b7578e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c24e88d-aa8b-4e45-b25f-4cce4da7149c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bafdf64e-e62f-4162-b264-7014b5e7ccab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b372684-a97c-4029-9793-d31c5e1746ee",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4702c713-662e-4f9f-b707-7377380f86d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac80064-a785-4687-a009-bf680edd6f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570a8d60-cb32-4f5e-8e3a-c535e76e375e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b26dc516-4670-4851-94be-503af7a567f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341aba1b-ae8f-4e96-ae51-53a00875acd6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710a9f53-17cf-4fff-9a3c-52fd4b36b076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c5a608-1af1-49ec-ae3d-79f1dd217ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48ec34b-1142-4bb4-92d2-339c83a2cb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b812928-2bbc-4058-bef9-b5272b28fea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacbbdfc-c176-419f-b9f5-e79a940680b9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218f7e8e-f5b7-4220-a7c1-3aa610ed2631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6937620-b153-4ef6-af44-e6645b4b281c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1920dfc-2f21-4e7c-965b-831e1eaa0175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41f670f6-5095-4430-828e-13e817ccb41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4466d3-658c-43fb-b470-1a64fca36d3f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fc5e63-7265-4fe3-99b3-8ab86eeb3c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2185f51b-cbd2-4150-8def-37a6f0ebb025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b4e28b-6c5f-4354-bde6-ae04629e944e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c71c318-f96f-486a-9db6-6fc32477b492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165094f4-d0b5-4c76-9282-1180316511b5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f552747c-7dac-4764-8233-fb9cf7fcb377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4149e645-55a9-4101-8a3d-18d8303b280e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82f2e03-f256-4e35-86ef-80c722086d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4819760b-9470-43e9-9e47-d7ff9c685eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d838b128-a28e-4e76-a9a6-8a03922e26bb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f382661b-ffd8-4ea0-9b04-fc5e9af4d301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3007f57d-66fe-4474-abdf-fd7088f7466d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ded9d0c-a841-4b85-bed7-70ffbbf384c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34e97be2-088e-4a61-b557-a0e882a6d813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3488813-4102-4173-bc6c-e79f809e758d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c209d951-67c9-433e-aa5e-0b92ed2eb3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf511b5-f340-4f50-a3bf-c35df31e108a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ad5a19-c54b-47f5-8f0e-367bdc6f0399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2adee43d-c2af-4cf6-9bf0-6f39353f5bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8bbd8c-0d90-48d5-9dcc-8092b7fc28eb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbfd726-7c33-41ff-9975-101eb44f771a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec4d946-96bf-4540-8905-29261522ca4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ea2868-73f6-444d-9c37-3744dd025b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c239e2-1e68-410c-8233-1929d5709e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e766bf39-1522-440f-8f88-000c8a649b51",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfaee076-140d-4762-ad7f-e6b19e21b5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f34325-34e2-48b7-bfcb-d036f9693f2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c41557-aab2-45f7-99ba-96b8606367af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6300bcce-bf58-44ae-a21c-1f2fe7cf386f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152d1594-ec04-46d0-9840-d61e6c1954f4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9a3c78-3468-42ed-b44a-5b1ddf6bad77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b332a8af-cbe2-4105-99f6-2d7ddfa5164e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d540cf-024d-41c5-a1de-8e35aaa06588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8cc97f-4a3b-469d-8b22-e59d8c171d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c635b08-48c3-47b0-925e-ebea38ceec3c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddcd292-bc01-40b3-a5d0-c54dab3f61f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73fe4495-28cd-4c81-b6e6-80f458b84b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c25d3d-bcff-4769-8ffb-f454ecffa59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "70cef667-5caf-4aab-aa6e-26dae652f57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c326e189-420e-4a08-847c-a759ae0108c1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1ca369-fe00-4f51-a4a3-29fa66747963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65f46da-90e6-4307-bf47-4fe5fe953b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f671daa8-565a-4cfd-ac89-4d3c3b30bc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4f38f2-dc8d-40dd-bbcc-463b9fd6a656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5544f7-44c9-464f-8461-60554a30815a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09cb603-ab53-4298-ade4-d9560def2085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f03cb183-904c-45d9-996a-8ab67d32fccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e75000-0d9f-4129-b50a-2763da8a0a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed42f50-cacf-4bb4-be9d-a1967d3b45ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "89f83c0b-2d5c-4f4a-be10-a055be5fb91b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84040862-2f76-43c7-8855-ffb547fd5fd2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310dd93f-5a61-4061-b1c2-d583709d8877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d9401bb-7980-415d-91a6-5bccdb231df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d2ecb8-63d1-4fed-b793-349b9431c57e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9ecbb69-358a-433c-a7a1-7bda0fb20af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44ef26a-cfbe-4e97-9cdb-caba6e904526",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16575837-5429-42be-83b2-927f1814f183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2350836-19ec-408b-a7a4-9fe77493171b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9427c2a1-dbf8-47f4-a406-3432ea4dae09",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e22066a-b515-4cfc-ba82-7caad453a55e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9101135-b46e-4cad-8775-085eb76d290b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c307414-ddc6-4b6c-84b9-60ccd6355638"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c145c728-c35a-47f4-a639-1b63cef5f105",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "857473b5-cef8-4393-b381-09f3fc126021"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64b21b4c-72bc-42c1-947a-6d3aa50b5323",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56588583-05ae-43ba-8d52-174f3202cf8b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "28156fdb-8789-4758-b824-29151cc5c747",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "576ff212-6959-4378-b2a1-7e9c51d82121"
                }
              }
            ]
          },
          {
            "id": "a5fa1b7e-3f63-4398-bdba-33b71859b8ac",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ffa91ada-8890-426c-82c1-fb4cea58be70",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ec7dd43-f9f2-46f0-87fc-34af1797d366",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35261fa7-d303-4c17-88ef-b7f83e27684b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f25a08db-c364-449f-aa5e-366dbb6230a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bde088e4-3b7f-4bcc-8e86-bbb75d04016f"
                    }
                  }
                ]
              },
              {
                "id": "e1bed7ad-8e1d-4f3e-ae82-0885dc6f9d93",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df4753d8-b470-4d88-aa42-4179fe053143",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82cd05e1-825e-4d3c-befd-afc58d273cbb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef0fc421-5dfa-442c-a03b-8f9172756432",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f33981ba-650d-4133-9b4b-8bca464a645f"
                    }
                  }
                ]
              },
              {
                "id": "951d2d18-e7b6-4856-99b1-d6f94a0fe0f6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ca4c557-0bc0-457a-834e-f90f121ff366",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db86917b-2f3b-493e-b320-abc651db9b7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d33ee850-bd11-4e38-93ce-1a718207f7a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0fdc62e5-f657-49ed-86db-c25e6b7c5136"
                    }
                  }
                ]
              },
              {
                "id": "f54941fc-bf00-4641-9f23-b1a4a8ed2afb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dafabc41-6087-4e48-9b0f-8327aba13780",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2bc176d8-3cea-42b8-abd1-b4fdc0f0d2bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85a9fc8b-90f5-4d48-bf1b-381d26aa4f92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7f989c03-fd4b-4d3e-9d9e-7ed41b5cb61d"
                    }
                  }
                ]
              },
              {
                "id": "4d96eb34-8b0f-493f-9817-e83d995819bb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f8361ad-0a0b-4c48-8f69-26d7fd45e5b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aeb57b2e-8b73-4658-9c32-da26aa0ccffe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f19c37f-1e3a-4042-8fd5-0e2186c51c6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "76e1f72b-5e50-4557-80a0-8d73a5ac057e"
                    }
                  }
                ]
              },
              {
                "id": "f7795920-9a7f-454e-b80b-e3639b4bbb00",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8906802-32b0-4298-a11a-f94771438fff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d790fe7-9928-4ee8-bf1b-b3ec02aafa4d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b372d84e-a399-442d-b55c-6fa608dc7c2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5333d340-99cf-490c-ac84-ad123593fa49"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb88c90f-14c0-4dd2-887c-17e236af5064",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8297b4cd-8f07-474b-93b3-8e120e351312"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc2c708f-4186-422d-af39-93e06b257a0a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0177cabf-6fe0-4dd2-bf1c-8cb0da5b3261"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "024a2601-b113-4018-b486-67e216d1aff3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2dff2ecb-313d-4431-a538-046334872952"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0378ebdd-fcb6-4b62-a3b9-6b4490ca3327",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3c2144e-59ff-4457-a973-d7a8fe53c56c"
            }
          }
        ]
      },
      {
        "id": "a8971fcc-1683-4fcb-ac17-f7f5ea82aabd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6c0cdd3c-e4f4-47f2-9499-406051128b36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e4e9c63-6dda-4eaf-a2e3-fb64873b27dd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "253416f6-f93d-4ae8-9298-4be910dcb7a7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f6e9c5-a3ab-4447-ae5b-a7abfa357f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5c9896-5f9a-421d-b9af-834240d63c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd12ed06-fe95-47a4-839a-be886c96bbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "55bab19f-1a1d-4bcc-90bf-051c81c9d21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4cc73c-e7b7-4712-8850-772149765505",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e37c6a4-6e53-4a9b-9804-0d1913dd6ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b3f5e3-eb19-4948-997c-1f31f9e9b2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545c4f50-59b9-4920-92fc-443ad84eab20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a894362-b3b6-47fc-b416-dad36bd2fe50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10972801-3f99-41da-ad83-37939b994bc2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e317d5-63ad-449b-8675-a968eb8f84e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e85be2-2df9-43ee-80f2-af73b0dc9fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d07700d-6f30-4986-9a9b-520d5b3b3fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "583b29a2-5c0a-4609-ad8f-4b1fff8af4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502c9d1b-af28-4ebd-a408-eca56ee6b17f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac07c64-3c39-431f-9321-072af8e22542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee353da-2ff5-4859-ab09-8095d64afa88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f55245-7f52-4cc5-a91d-2cd082c001d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "26becd19-29df-437b-8963-cffb5fe9fa6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82aa2197-d4b8-4650-915d-2345be14d06a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb81c6a9-6a8b-4f3a-b6e8-af70144c7eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e353f4da-1119-4eef-b228-76f0831ee3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f5b75b-81d7-4f7d-ae9d-c4c6d5a41386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da47220d-a652-4b12-819b-d77d6c93ffd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a7e17c-c04d-4d7c-b1e7-2e40f2f50928",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f7df58-a5f8-40af-9026-6642ce6f7d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f43082-4df3-4284-b4fa-fe3bb54582d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c719b5-8446-4c38-9ccc-da62152434d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6817e6c-4c02-4ea1-9346-2f2941974f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf7fd5f-f568-4626-a3b2-6b2a1fad2347",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d8d02b-2096-43a9-aec0-aa4ea6fc29fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb26efd-c46e-431f-a5ff-b7469c86c6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f07079-ec10-45b3-bed3-2fbe90f9fc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6b2eb6-2d87-4f1b-8154-5e110935c657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5227ad75-23a8-40fa-b1e2-96f1d6990253",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1af675-f722-4882-87ac-1123596e519f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a054dfa-db41-481f-bbe9-10803c810864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5b5b53-2269-4d0a-8cca-9cc9babd5619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94da2cba-8f26-495c-ae99-2b7ccd91433c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e4c1a7-8029-43c8-a5a0-60f191e56096",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81672f2f-f3be-4103-a7f4-bdc041e0c8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734ca087-05c5-479d-90ab-cf53ad3ff6cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d22145e-64bb-41f5-850e-cd52d740b399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "760704ea-ce53-45ca-9178-5ada158624c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8e011c-6fea-43bc-880b-2d3e2909489d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c779d7-11fc-4a99-9053-0303292dd38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8979095d-965d-43bd-9485-a8f00b325c97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7ca5e9-2e32-4161-b8a8-bad5a8440066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c05e6ce-e329-4dc9-be52-fa91ace88fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b926147b-d2f8-4d05-9be3-bb3bef186e79",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c50c6d-88c0-4b21-b348-6fd4660cde0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b8f357-175d-4dbc-aaaa-05bab18f80be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593a385a-0223-4774-9f48-1ff28739780c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8b25b1-680c-4524-8e04-a6db7318d429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e45108a-bd28-4444-8469-ecc98a4dd98a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef86a2a7-fa8c-4b0d-b6fe-6258832ec225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e56d31-fa3f-4db3-b94c-2fef77c101a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f901c8-a788-49d9-8db9-0f94e6841902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cbebdf0c-63e3-4a47-a8e5-5f2a0fe9462a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee34d3a-7492-4b14-bf02-fb075b3a66ff",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef823517-dcaf-4369-be98-a1012651c583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b9e4ee-56bb-4b86-83fa-c2094841d2e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96ba256-5bae-4a79-942c-04b7260b7524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f07f94ff-3360-4eb0-bdfb-ed48d66ca9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c496679-ffa1-46da-b8e2-728262e190a8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef34512f-ca73-4970-962f-168d86756a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2820f42-5655-4170-8d43-d71c6403432b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ef5995-ae6f-4d53-a458-0917d0d6b17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f811ec5-78e9-4be5-854b-d766c868cd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16827469-ca6c-46c6-a648-beb2db16270f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7978c57-369b-4653-b5a0-0348b2d08300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2883ed5c-fce7-48a6-aae8-5df372d2f145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbaeacb-8488-4610-86b6-9f52569b0f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a7b8cde-fb7b-4d61-b84a-9046372fe95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356be447-9bf6-4a3c-ad6d-14bed31c18b3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d09d70-6f60-4945-afb7-b65ce9cdc503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d78e43f-631b-4609-9056-1eafe328542d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e119f4-3617-4af8-831b-91edd2b72fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b132b225-e6e5-474f-9f58-0a23658a51a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80b92fd-846d-4fc2-a328-d84e0e77e46c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a769104-1d71-4c88-ac26-662254969be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c59f961-24a8-41b1-86b5-c246411f7321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62a5bec-17ed-468a-8ce1-8a11cf0bc42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "710ed767-1e9f-4435-8cb7-fd664180aba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3690190a-37e1-4c7b-8d53-b6096767252d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2206f238-9613-4198-a0a8-d2c3028d4dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf23d15-039e-4516-99c9-f3faf163779c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b387bd7c-4166-488d-8e0d-77ada61b893a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0dadc8-5bc7-485e-87ea-aab60ce746e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62049d07-a9a3-442e-8f69-436b4cc3af1f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62231bc-2bcd-46a6-9bba-3a00064a4da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e3f696-11ee-46cf-8d43-1e7342f36e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ca7fe7-8bfd-4a6e-a292-d23b3f001ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "313ffd05-d9d2-4ad5-bdd9-6efb76aea7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afe594f-01f3-4e8a-90e5-221e0fd7df95",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e446474c-55ea-4c1f-96aa-ae2441abff64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0267717-d8dd-4ce9-9417-cbfc7ffad528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfea1565-f460-4705-aa62-1e92a0142a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "838c2a32-7bec-4d17-8bb7-d457f6b0228b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aeb22e9-61cb-4f82-9ece-bdb4f7348b77",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650aa1f0-d4cb-496f-9382-e728cab98b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba816b73-e0e1-478b-b91a-f8f44aaf6cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b8dd99-9e8a-4c0d-aee8-013f0d4ca942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5676771d-e37b-4a40-b55f-4bbfd5522ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb7bf92-c9e7-4fa5-95f5-4053efd0fdd6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a74d5e-f71d-40d5-b7af-035b10649ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614c0125-8986-4e99-a5b7-177a5cbbdc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bc7b4a-e992-47ff-8017-9f64b3e3fe3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6073c187-6f7d-4f9e-979d-df19e333c658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52cd5f7-a687-4a1c-91dd-947c25847cdd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d7c500-a0a8-4465-adbd-df3d0df827fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bde7c10-6ea1-4e71-8565-525488e65b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817400a5-dde9-4509-9df7-61227f62a12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75d91d48-17da-4627-b6b2-ae45c6e926c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb832828-cca2-46f3-9516-fe0e8ad346b8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f87dbf8-609f-475e-9fab-ba20dc43f420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c27c48f-6680-42d4-a2f1-3405b5adce6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4db79d-ce66-4fd6-801c-75097b9eaaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fac9f783-fae2-4344-8ac6-aecd1d57ddc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e60ee2-330f-4769-8c59-3761cb6467ae",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48671c9-22d7-4b97-af06-ee1a96fe038f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b5b3ce-d187-4018-a9e9-1e07fca556b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2653a3-6cda-41b4-ab51-cab7ad95864b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f138337-089b-44f1-a981-373ad8685d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcae7f6-661e-4fd7-8244-89b619fec046",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76db1ee-9f4b-4728-bb3a-4ade7f655db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff4a034-d020-4c91-90be-d2054dbd94db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e57873c-9299-404d-b33d-2c5d55841e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45ba7a75-af52-40d6-8b17-1e72c12d5184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7eddec-d7a2-4561-a484-9de5d9809135",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b4d0ba-dbcc-422d-abf2-d981dcda85f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1bb4ddc-097e-4f7b-9dd6-c546266f2144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9889f423-1071-404a-bcaf-b4c368f92304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33605c73-0594-439e-ac54-47ee4966f9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c52f07-6fae-47af-9831-f3ebd9c14b3d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97caecb3-5b8a-4483-a96c-d2413edee377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84364b89-d65a-48a1-984c-910cfdb18884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e992bb-05a3-46be-a21f-4f4e591d4154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbfa978-371f-4722-b767-05f0e058e03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a5b79c-fa4a-4486-aa4b-12ec47255a22",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c22499-b717-44c9-aa2b-7885b0c17bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8fc8867-6ef6-455a-8080-6fa75c225f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a794a8-1baf-4de0-b00b-d059174e559e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed6759f-0409-40ad-a85c-ede8d6f4ab26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777bf068-88a6-4588-b5fc-dc162ddf2a8c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280cefc0-0c1b-4667-bf9f-9094fcc45ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c5338d-ac58-460a-a7c6-a42792bfd84f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ad8e42-e674-4f33-811a-f616bd0f6575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82557a47-cedb-47f1-9b91-ae30b8e8fc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1401ed1-9a07-41f2-89b7-dbf51cb782a1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685dca83-e2fa-4cc4-a22f-89f617296e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae51024d-f33e-4315-bc1a-4087d99669d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f0ffd7-bd1d-4994-bce4-ae571b6263bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a66a0dae-ac92-4aee-9e13-823554957681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ddc8f8-14b4-4855-a9c6-818b9bab9f7c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acbe786-709e-4219-8e4e-98a2bf4a0eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d3d18c-99b6-497d-9916-e0e2240a7f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f639da9-69a5-476a-8b70-c9b65af3af35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73bde5d8-fa1f-40fe-a1b7-586cc0bfde28"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a73e7b8b-ecdb-4076-93c5-7861f98df604",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dab1aa7b-4bf1-4fcd-a6f1-b12abf5e1851",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7a4084-f70a-460c-b098-f4e4108f5e72",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0b584b61-c039-4b1b-bbff-161cf12a9f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d56705-c731-495e-8e50-82d4d7847f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4d99b56-c411-4184-8341-db15a6dd6c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e51f176-d44c-4294-9594-0be30c47161f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc2ddba-e081-4763-91ca-a06d6d6b6395",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4e215cc3-e67a-46ab-a60f-41867a7fee84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce42753-4809-4210-baf0-e892198bd442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cf223b5-6227-4375-b11e-6235a2f634c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c5ebb4f-e227-447c-9c59-e4cae7b6238c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd13e9c2-021c-4d75-9e22-b573ec44d7c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f17aa98b-1e7b-44c5-a1e3-d01ccbda708c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66806d50-1956-4794-9e03-bf45d05d9757"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02dccbe4-8754-458c-b8e7-51b2d8d664ca",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8cd7bd34-8ef8-40f7-adfd-72d82403a879"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "087b267b-b9ad-4ad5-a7a0-77c2cb804d5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8af74f77-64c5-496a-a26e-6e3ae6984575"
            }
          }
        ]
      },
      {
        "id": "7a94a982-8683-486e-8e75-9da307729912",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ed44bb02-8858-44b4-bd76-9aa35fc90962",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f811bad-e30f-4616-8b1b-6775f549e499",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "11b588e5-b788-4d73-b232-cb285d108961",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19be049f-b90f-4a89-87f7-264e42ffa537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ed9b59-e59e-4d64-aa8b-61d3a20308a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24271f72-57a0-4bf8-ae7d-c5a8bb64b8ab",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f668b7a-51e2-4528-aff0-4952ebcc36cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e81a74a-7700-426a-89a8-bf9403a1b04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5083d428-02bf-41d8-a682-c55929ab5b1a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07b397d-2160-4126-a5da-d483f5d77b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14944552-3d0b-4a4b-9a1f-8425b71e3845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aafcfd5-a1ac-4bd8-93ff-e16520d3cd31",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3cccdb-4735-4fdf-8cdf-6b3262514e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d684fc-1569-42e0-b6bd-d49463d6be8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c8294c-7389-4841-8ed7-e77bae0ec064",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482d2ebf-d72f-48ba-9138-c44e5b6a5d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d9027d-0944-4875-b3fd-fac101221f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c24a5c1-601a-4bcb-b112-ece5dbc8ad8f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17238dfe-123f-49f1-a337-86f9973a3df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea31f4f-7987-4160-85f9-3e6ad2d1e5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762e4a65-eee7-49a5-a3d0-a51f40b5cc7e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96726c29-1233-48da-867b-c17f2860f20a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa7e4b9-4904-49ba-9002-16cabf8da91b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786ac369-8ef9-414a-b88f-4f8f9477f31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a392961e-f190-43c8-a313-bd11db51248d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0b6dfe-b410-4597-8366-4659da33b44b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506b659d-1d8c-45df-b971-3ca4feed689b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9995323-1497-435b-ba03-0399631a4b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8942c33f-4160-4ddf-9f66-9a9cce6f5b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509a3c78-b823-4fe6-83cb-810f78fcf01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71dea716-eef3-4ae8-8b9c-80d1f5c07785",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d046d067-91d8-47e6-b985-ecff8cc0e546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11989bde-0ea7-4b0e-8e2a-220160b99d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2b372a-6931-48bb-9f43-f8fcc659ab8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe84c50-8109-4092-9cba-4c8954351929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b88bd9f-a8b4-4bb2-a73a-84cdc25a51b8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29120776-9902-4546-9a24-a4bb104515e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c1c30ab-b707-404f-9653-ce600438a087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630b36a9-3325-4a74-be79-eb87f513f28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75d8a44-ff2d-4b0b-b476-f67a312b1295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfdb176-420b-4fb2-b629-9822bc4daebe",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db796ec-3118-4276-a874-e03480e1b283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e1d803-e247-47c5-9dad-d8261c7040dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbb6db7-67f2-4a27-926d-2f6b805873e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e34aae09-7ab5-43e9-a1df-8210200f67c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f047425-bcd1-4f91-827a-4e5e8ee304eb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e696d82f-0d1a-4cfb-a855-14f88174424a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e73cc5b-56ce-49b5-a984-3b9ffb2bdff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64551f5d-e8ff-4580-b0c9-01447a36bc24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a37bd10-e663-46e3-bff5-38447f82adfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153799d6-59a3-43f1-a840-7430a5b278e5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6668e7b7-3784-4122-b768-aaf9ffd8b33e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b86394a-7a75-4249-a0ef-9fa9cb69b4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa50e63-9417-4063-867c-bcb8282c501c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e91204-f5e6-4a2a-a602-6d4c59eb470c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0ab85a-5056-4796-ab4e-e16f31ca2058",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05adaee-19d8-4c1e-85b4-fda552aeafd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e01ca296-b493-4314-aef6-60577a0c817d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1c745b-42bd-4c59-8bc2-21ebef652ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f558700-aa4e-4e46-a577-8e6d2838a014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdeb0ed-c22f-406b-94ce-634783165583",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8084124-8a23-46e5-82b0-5291534b516d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0771f758-ae01-4370-ac92-91920fc8d5d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e4fd8b-bfbf-4ec0-a29b-4ed1541b92a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "302fbc28-dea4-4e90-ba58-cc2bb6da4bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a9528d-48e1-4995-ae35-21fa3591134c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffad5145-7eea-4065-9ede-994336ef949f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f11f4d50-ad9a-4513-843a-a564372d0c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10155e34-0e59-4772-9955-2e45e1cc7d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71dd022c-7c2a-48be-80bd-2378226fd4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5068c219-c790-43e2-bce3-9494b82e174f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c732fb8-b29f-4120-8f3b-93812074ad4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22209ae5-b546-4fe2-a1b0-f7686f60acbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "304770e3-4c29-4e07-8962-ea51d89e139a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c31d8e8-581d-4703-916e-b4edad7fba04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30348ff-dccf-4c74-a02d-9de37ac9109a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba20d47-53da-4906-9d53-0ad9d5d38cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7793801-f98a-49d7-a58a-72ac134f95aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea07cc9-68cb-4710-b5ce-2e45d2267161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8a32ad-f48d-46bf-94f7-4bc5a69174fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c663c2-215b-4543-9fdc-47e08700ad6a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ae95a9-fcf8-4447-955b-5f2e7936e61f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3093ad-cd47-4c6d-b522-75f97fa262ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "291a64a4-a7a9-4411-8483-a6fa1b54e3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953377f7-ff5b-4a30-ae6f-b67457323cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550ab4bb-de9f-41bf-8a30-90592da75ca8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc31571-fe34-456f-b55f-b0347b20d161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d2e07c-321e-48ef-ac45-0858e66b9f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eeb8ae4-1ddb-46a4-b5a6-e48ddbded20a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1982259f-b489-4bef-b01e-ec97b7140714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a15a2a-3310-4275-88f0-1000b14eef6d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b11456-cb61-4305-a899-45d5d882deae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f4010c-5ad1-41c6-89c7-3bc90af78e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6916db34-691c-42a4-a570-420535c6b8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba71024-92e9-431e-8a95-d5980b9a99d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9202df0-6649-4e03-9f5f-e9f83e333afd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d859c903-94b7-4772-86ac-2d4862d6dcb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e0ebcf3-4301-4dd4-984d-d32f981fd081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdaa23e-31aa-4f21-95d6-7cebdc0e9fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9222c7-b7f9-4522-ba71-0537d8540844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181568f1-5612-4aa3-9077-4c00ab4f1c9a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4601d1b-aa72-44a1-8de5-c79237cb69b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c17514-5895-41c3-9e03-1541e51fe407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab52a0fe-66ac-49ba-85d3-585f1f3f49fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6e8259-d160-4b84-853b-eb3d76ddd270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8040e3f8-6b07-48a4-b6a7-541f8a38b68d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066fcb8e-44d2-40cc-b98f-23b6c25ea088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2971c027-2fe4-4dab-a6f1-80f34d0db195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78ad159-7916-4b43-b14e-05a6b82a3468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a519464-c921-400e-b9ad-31ddfe6e87d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d80a49-9b54-4394-a39f-28521c61e087",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54020700-eba8-48c3-8ed4-6267c0c5f416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a47e8f25-7ef7-42bd-8a77-c46fb1385816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae286ed-05f0-4836-899c-2d1237312db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8191d0-8055-4068-9268-40f635dcbc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4334f1-1a69-465c-be4c-b63f4fb48f55",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0675ba-e558-42db-a7b9-870da59b1c7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e845d5e-d0b6-4677-ad53-bb4ea0a04d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "911172e9-def2-490c-8eeb-cec1009579ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02825c0a-d91e-4d84-acbf-f3ea2e5b7984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0f1ff7-04d1-41f0-aa3a-ef28840ebfbe",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8997ee-6cce-4afe-95fa-a425426dd20d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa966b4f-eaf8-4f8a-9018-30cc959fc5fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "039884cc-ebbb-4c0a-be52-1f7f9832061b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b274894-52af-4a9c-95f6-537021ac11a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab6a5b4-5235-4423-9cea-022b1b68d3c8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e267d1e7-c1f3-4764-8524-96f6742b1fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a055fad-91e0-4590-b340-4f52c94f655a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25205402-92bd-4b0f-b3c4-f05d46d2b1be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e99445-2672-4599-9dee-38e5ca5f7503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dab822-354d-4968-8b51-b511144472b9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cbd213-565a-445d-9578-9a0afbddd3d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5dbb180-d369-4991-b1dc-87d429bd63d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4abbdc-0dec-4abd-92e2-539555447445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991c0ebc-c110-43fa-b0a0-b83af33f401d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf449bd-df37-4b83-8d4f-ff53dd820769",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ab1d54-c499-4fc6-b189-ad712289a107",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3e3c843-fabe-46c0-94a5-37a40e4b11ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2694d9d8-8166-4220-9104-3dee9fbce78d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f161027-ef56-49eb-95ec-d4ebbc08c652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfc50f0-5f98-4a72-9c02-b3ae20486a00",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1088b89-f9a5-4408-84fd-70eff09a4851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80596458-932a-4ad1-aefc-813992faf74a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0fa3f1-7b39-46cd-b9cf-7502c2951d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "314f1324-acf9-4966-89bb-9b9299fa55f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d206d49-b24a-452f-b2d5-5b431a48fd0f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06dd52aa-40db-4f5f-98c7-0a655dc11736",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d6b9061-fadf-49aa-a1d1-4c3cebe64093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0eff11-8277-4afe-aba5-db502863b62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb78366-5fba-4cc8-bd48-bb1f1841f0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9440a6be-2143-4409-a465-d6597ab69545",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4508f1-05df-4dbc-8556-f9a4f67ed9c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d79bb39a-0c77-46cb-adc7-7abc99170077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56696d50-bf63-4749-a073-bdcc2a9745d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a304b4-89ec-4140-a8cd-25d12a0ccb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9203b3cd-66cf-417e-bad0-b06d1aefc4f9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e13d628-3fce-4636-95aa-613509c85e9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d973e5fa-8702-49c2-bc94-2537b8f9abc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46375e8b-816f-489f-b6d0-72a7b818b631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b22fb12-a8fb-4763-a7b1-9e33f1e1329e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8342ef61-f746-462e-8bec-cae0dd53591b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b825d6-b58b-4485-bdd6-6f03da0bf601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8453f355-0350-4a00-8beb-fce9830c08b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6a96d5-7fed-4b76-8794-abf0a376c9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d616695-6847-4b50-b43a-e5e3f18000f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee4c074-39db-4758-8e16-a57affae11b1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a2d2e9-5c69-44d1-acc7-01387325fd7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0393db-0dd7-4e4b-b184-919eaeb9581b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ce8901-f126-4339-942e-5b5c03e2e6fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5020e55e-1d07-43ca-be1f-8bb60c6a98e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b1b0c8-5ead-4e64-a398-9f95f5ad7c60",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae765880-799f-45b7-9149-2d0c25aa3233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88b0c0d-ef4e-4127-ae8b-4e83f538cbe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2c1e4d-ca9d-49de-873c-c98fad44fa50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d295c0e1-4c9d-4414-ad69-695f2fff217b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f266c016-8dba-4c25-9d60-a1ea592bbb19",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb38687-99cd-42d7-b6af-883503cda5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f332a1e-3c39-4c9d-8ae2-4f1a76c0d8df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20eaa73-578e-4ee4-b962-66d23367c21f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a13ce99-cca2-4397-b2bb-3cc1c419cdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fcd3de-3da2-4f02-84ac-386414a65c28",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b2ed7b-dfc2-4eec-abd3-0196d4027bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4181bda7-a412-43f4-ab63-97f2abb8968d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a135caf9-7896-4111-9dc2-7039d9921b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc69f5bb-c298-4f11-9abe-f187fac1cb12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6d6d32-062d-4754-a22a-d35379bfefc9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f74c197-1f7c-42bd-b09b-ddd0d5b8252c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c4b3657-fd55-4e98-af9f-695883e2670a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "086550b9-7144-46b2-bfc2-4b91e94ec031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24e310cd-2525-4cd7-8c7f-db7c32bc9992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f9aeec-0e73-4481-9f82-6cb58d7a624d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d4107f-934d-40a2-8e0b-551db6ab1c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9411026d-18a1-48df-ad10-dce6ddd07e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34455b91-c1de-4725-90a8-9947b349a9d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "085d8d24-b566-43b2-96af-087c55c16959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82b3746-2839-4b0f-95f7-27eac9e11daa",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002b93f9-79b5-4b60-9fea-12fc07434f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9054b787-c298-4465-9549-637f044ed4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "475f0118-907c-4820-bff0-d8d36f87ee4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ae009a-776d-4041-a512-3c8105339be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a8cc5e-6d49-48db-bb66-b56e13acf468",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce23fd72-2455-470d-af81-b9ffa00822d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5607538-0875-418b-9c8b-0593ad5a7996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de17dd30-49f8-408c-bc1b-838e5d1b8c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630ecea7-0b53-4185-b2dc-ab9968f55d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf681b16-672d-484b-8fc5-f7b7b720f434",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6981edba-b711-437e-9c43-63de8573b2b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07cd2ca2-41c5-411e-a9ed-7ca2315d2c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275bfef4-bbbf-47dd-98fd-a1e377926621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf291887-8ee4-4c1d-a801-2ce083722815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476e4b63-d5a2-488b-b0d3-645763b71882",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cbb2d5-eebc-45b9-9853-df8f8f0d36a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17424885-2fe2-4eab-b473-e2743294d4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07f245c-cf9b-44f0-bedb-755cdeb03732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c34328b-a5ae-4a1f-8e03-0866c48ac4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4449f1f0-a2d0-4389-b3bc-18a1386a46ca",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035db498-5c4a-4e65-9a45-c76ee4b511f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65fbce8-5877-4376-871c-ec9cb7155eb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18109dc-e3d4-4d27-9658-41ed3d608c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1cdc5a-f735-440e-9bc0-7e2885bb5e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3d7423-540f-45a8-9928-e81475504872",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86244875-7dc4-4cda-aabc-0859439f8686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0487c874-2a07-4fd6-9fbd-437249a5aed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b60bf24-d468-4ce1-b435-99878e2962a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d16520-72bb-4a34-a7f3-31ed8e78ba8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3018a1-4826-4904-8010-1a0db3d51f2e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d1a459-af62-4e67-bfac-7cd54edef32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b97818a-63e0-498a-803a-ae8795c7bed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd05c9ab-7606-4025-9b67-3c126122c5bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15bbfabf-4e37-4b22-9ee5-d7bf24e4955d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368d2056-9bcd-4692-a4c4-5d132b9176d9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5cb53b-9aea-4cc2-a0d4-baf9f422fe09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92da1ef-7201-4efe-8f59-e7fb5a5fde5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab98291f-1b15-4f2a-8127-2bb2d4f48f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5512192-3d98-46fa-a00d-0f7758e32cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8eaf3b9-d677-49cb-a365-0b24bac60abf",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d9637f-98c0-4015-94d3-996d0436ced1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f682918-57c5-4f74-9fa2-fbbb045c48d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45b86dc-9991-4c9f-83dc-77bd532629c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed023af-b1d5-4f4e-9150-7489b92b50a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621ad83b-98d8-421e-b703-839ddded7a4f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e62d400-06c5-4c82-a3ce-98384f19bed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bfc4527-7876-43b4-a860-1528f462f69d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef7977f-f7a5-4df5-90c9-4be96c128b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3fcdf1-cefd-4aac-a101-669fe2f5dfe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14db3caa-1e71-41db-922b-cd1e6dcfbd92",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfda1d8-6198-45ed-80cb-3ba310a44724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e5d42c-f795-46a2-8b61-085c8fdcf4d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e40021-1017-404b-908a-c8ac24826f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cdaca91-b714-478f-9304-2ac1db0d41ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ccb775e-9c36-4598-8a8f-2e42d9369067",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a61f8d-4bec-498b-8605-53e0bb500488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24e265e5-99be-4c13-8ee0-f68b28bc7fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8af10c-e5d2-40db-bdb8-d696666bf560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3540470c-bcea-49ad-8aba-ae08ae2aaba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462305bf-7353-45b8-b06d-5aed90bd6381",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729969e1-d12d-40f7-a9f8-bdb66f143a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5df2d13-8e48-43bf-a0b4-5dc2608dc55a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcf21e0-c35c-4bab-89c0-7a1d6807fd78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70831446-6b4c-415a-a34e-bdf737888bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5eb510-d890-4b30-9973-b3a401eb3ea1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ab6dfe-d3fe-4a42-aa14-c4fd52699a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e306b590-bda9-4bd4-ad48-32a3d00a99c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6005540-b0a5-4833-8d64-5aece2f96760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a1ef79-a32c-45e4-92aa-dbb2c788977f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457c3cd4-3c20-426a-8bca-8f7d5dbf5fcb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d2e7cf-5809-4dda-bcc8-e63fa4c4da24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a6d715d-ee94-4573-9dcb-f01020a18605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456b85c8-4588-4d6b-9422-4f2885e413df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7868d237-690b-4269-9eb2-35d66fb120ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5959c1-4379-4c4b-b495-f381999f8499",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22aba248-5e7f-4e97-a877-716d5aeaea6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9155d5c-fb25-4dd1-bfcc-ed15bf305548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72eb5aef-bbf3-4869-bc39-7317db082e75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae67a48-aefb-4531-b7d7-7fd9fb57df23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0dae0a-cbeb-4234-b9e3-0de3784bb921",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ab68b0-3e24-42c6-9c8e-9600fef616d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf11286-4288-4c67-9ce9-440771e2fe7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3cc8167-1226-4a26-ace5-8787c0265559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e1e9fc-0bdd-40a0-acc6-d197e634e6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ecc3cea-e33a-44c3-9d4b-6ba91975e6d7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4f4be5-5194-417e-b750-e45f95f14738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3c7d2e-50c5-4d7b-9435-23950c81f6a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24e1c3a-4917-4119-8762-dcabdbe8b762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562cb8e6-d422-4e5a-af8f-8450913f079e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d160ebe-4b75-40c8-a4d7-3bb14bff4abf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a553fb-7206-418f-9b70-9f36736186a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae532eef-2b42-4364-8eb0-b7a2ad6a6c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3849ad0-d263-4a03-ba19-31f2d0826fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bac214-7053-49fe-9175-248f09ef2d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a760755b-ba25-4007-bdd0-0d29835fc347",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340c251e-3310-4dd8-8f02-6866c5f93a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93913a9f-baa9-40ad-92b5-19f1b26d97de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac5c168-c428-4d40-b72c-c02dbce491a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3083f6f-0335-4d57-be4d-65a3c60bd6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3da6bae-a3f7-41fd-a90a-a81675061f12",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703c3b39-b378-44c9-8de1-52236a17b674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd66f650-a5b1-49a5-a2ca-8b84afcb30df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb9795d-691c-4270-a3c1-b033a5505c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333eb237-af1a-435f-abdf-fab8c492e4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523b0fbf-1e9e-4c6e-aa6a-2b1db3ed9e31",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e12a0e-db66-4a9e-94dd-946cdc953e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bdb753-060b-4852-a1eb-74a2987e2618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ecd2c1-c3c5-4df0-a766-9c53255b5401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f7c38e-6761-4a81-a25a-365e37636f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578026ae-c84d-408e-9700-b90e12bf17c8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f8ec04-a730-4361-9842-d41ccca84ec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c91bd2d-c0f5-4de9-a5ce-26265107f27a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b835912-14a9-4de5-b9de-07dcafd4f8d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3f119d-16be-40e7-ba6e-7042bf366903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15491015-d97e-44d9-993c-a803b5c248e0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba50ae33-7def-4a02-ad05-9ca8604091fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd21cbd8-c6fc-4a65-a804-48575342b4ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a652f4f0-a883-4902-b474-f3d3e071ad69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1a9d82-5e0a-4453-815e-e377ef84a82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116150c0-19ee-4b74-b650-c29d4ca4bced",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49081224-3541-44cf-9b95-ac4ee9d867ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "935e3e42-c559-4b58-b098-dfb668161f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae495f6-f420-4d2e-84c7-819c76190a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25c3b75-2303-4303-9cfb-59e342f16b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbd40b8-653a-4bb5-bfb9-f91d0dcc198c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53868b89-7584-4d0d-90ba-d10834ac0d38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99708530-31dd-4583-87d6-c2feea78e77a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a36376-a94f-4de5-a364-baae1c485b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4de2eb-8ad5-4c16-9492-494579cb3762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c55fb7e-7048-4bd0-9740-6b8e887466c1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b3f387-fdf2-452f-98c5-05f6500472f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7145899-8c40-486e-9704-d41aff20e7a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5401df7-f6df-4fc9-bb89-212e9c593b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa06399b-e516-4fc0-8ce0-9304f7c1aeb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eee0f11-fd09-4cad-a1f4-223607a1a453",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8d1f86-d406-43d5-9b3e-f59b8452470c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf9043e-7d7d-41f4-bfa6-58b943e53cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "044c33b4-38cd-41f9-91cc-de2064081d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332149ad-8ca4-499c-ba64-6c0edcf37d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8f860b-7f7b-447e-ab80-23d9233597b6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4310a0f8-cdeb-49ad-930b-cf4e92041bfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "920589da-976a-4cca-9bf2-9d3d5e15e688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "604a7862-d55a-488d-9b01-a78f574cb491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b00777a-96fa-4401-9718-7a43e69bb29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7e6665-37b3-41b6-bcbd-0770a4447c4f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4b404f-2f05-487e-966f-b9284bdd5114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c8d1520-3b5c-4868-9eca-2448b9d2ce95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8182e056-aca8-4ace-81bb-e4fafbf1e693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef19cc8-d5c9-4cef-b277-c081a7f42048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16f34ef-db12-4620-9599-ba377c547159",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187ad984-d5d3-4ab4-af5e-0f8fb20f4ce3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d7d3d4c-a9d5-4b75-9b0b-8d91e00adf48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0199e4-c363-4504-9d4b-e98cc317785e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fcbad9-e0d3-41cb-86e0-a70fec19612e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc303837-2bf5-471c-9bf7-1f3625b227f0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b0acb1-5e14-4f2b-9ff1-8eabf351454c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "470b566d-fa9e-476e-bd7c-612fe79a40c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa09c5b4-6547-4fee-ac46-ffbcb8e58336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6452cf36-2b14-4433-854b-84ac2f8a37d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d476675-fc1e-4119-a72d-83124776e79f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273c7231-00d8-4a1e-9643-8d0d4f1a7e97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96092786-856a-4a61-8a74-ae94d5f9cd61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda28b7c-cddd-4315-ba96-b8b702612568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a35b7f11-4eeb-42b0-a896-d2a48e3f69a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe22c4e-7969-4e71-b71d-e4f72d4a5179",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f01a46b-7a3e-4ad8-936c-9d0f3d8028c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "251e1bd3-f31c-4945-821a-0a7ec74fb5e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9831aa-b705-4822-b7bd-18a36caeeddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7e4a83-94a7-45cf-97ba-bad4597a56ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bd6912-6df0-4f17-a63a-ef225683dc92",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972243b7-862d-4a52-87e0-3254f9e36b70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d0201a3-ab89-40fd-9d76-d5f7be5a4980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880fba15-825f-47ea-a40d-f8e410cbc44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eba6336-080c-46c0-bcc1-7bb99dd21bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc9b708-23bd-4b3a-9717-5df51785d7aa",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb2bcd9-085c-4c1d-a630-79a36575c733",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1499c7b3-2477-4e75-aef9-34c1ab639eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eefc876-736a-429a-8baf-746672b38a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e11cb90-78b4-480e-921b-1500028f9bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba1e454-1ac4-46f7-a235-2bcc2df98a61",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6849484f-8d35-427f-89a5-a1a3c80d938c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28c2b9a4-1aca-4785-b382-9db4945dda26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038a18c6-8b87-4939-87eb-ac9dc48c378e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df806efa-c35b-4881-b61b-6f9b8cab3d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3a4f3a-2b68-47e2-b94c-df2ed7751f6e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7544616e-9d90-4aa3-b209-6566f6ae1e42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "640437b7-2df3-459b-8563-803d1d5f75c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0163652e-d583-46e4-ac1b-f429b0f0db4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3b04ff-d87c-4d6e-90e1-a1318d86699f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7634c97-ef71-4648-9c4d-0512dc562314",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da07586f-e2ee-4f00-995f-5edbcd8918e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "077e509b-0f99-4fe1-81da-459c026c8854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc35206-a85b-449b-8aff-7864e29fbdda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1ad03e-140e-4845-b175-096d2c355aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59fa17d-5bf4-4054-89c1-e5d28c014ce9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984dff77-e027-4887-8101-9ea7902e2012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce044475-1543-4b14-bbca-bc3bd827a3c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28aa8e01-d033-481a-bf91-cff14f865271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfcc59cc-b238-4be2-a799-5548fb312714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3299908d-5128-42af-a48b-f2d91674c4c5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8adfbb4-14c1-4a18-92fa-6f0a1dbc301b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bdb9fc8-02f8-4202-a8e5-a38d4366d35b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e2578e-e80c-4a12-bf2d-736d733594b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ab65a8-a8bf-45d7-808b-cdda9aa34583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b14c1b-fd44-480a-b71d-76a4a58dbcec",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca133f7-65fc-4878-9443-150807fac2be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "245498d4-fb5f-4c34-be14-89d210b0b2a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f8110a-34a0-4516-b4fe-7f9f7130772c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44dc5942-442e-4d1b-970d-34fd69034a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cc6475-db85-4e8a-90e8-28d5c99586b7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27eeb9d0-c7e5-415b-879a-b77a6e1859a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "994f13c4-7540-4dda-bb3a-bb81ccfea589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "497b231c-b7c9-443d-b463-8bee8a5e860d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27901f14-d6d1-498f-ab5c-a56ba89766ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76491525-0919-4a51-ae1f-2a4115d92f15",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492ceae6-a3d8-49db-9fc1-3d92b620cd6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "264d59d4-3eeb-459e-86ff-6460f1766ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15856ff5-67fe-4c87-809e-2df16be26acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67aedea9-61bd-4fc6-a45e-28addc6032fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d5ef0a-bc53-45b3-98cc-8115081fd862",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584d8ae3-c01b-4c18-b1c1-712948297ffe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c12717c1-f420-45ad-9c69-e5ffadb2c47a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaa9832-0529-410e-a093-9779e7be058d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c743f87d-a21e-409b-8232-64c2801d9fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea9c515-e9a2-4006-a4e2-8522b8ce29a7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03703a76-e470-4a84-a196-02d2f801a759",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7afe3b10-ce8a-49ac-8d3f-15b7b499aac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c038b0-3cc9-48a9-acf2-2e44bc95bba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7979c8e7-f6f0-49b6-a977-185792cf4c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b31879-6430-4b46-9beb-16573f58db6a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f1fb11-d724-4661-8d9c-aedd8017ebf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "608a74b5-7256-4078-887c-39a6c0f79dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d491e15-b699-4509-ae32-6e8254037971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ebce19-b158-4c07-bfe8-31c95996f06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9d37ce-83e8-4b21-b01d-e9bcb9f18a5e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c400e7-ffe3-4951-aed3-9f58e994e2f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1dfecff-a282-470e-9aba-67819628028e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c358d31b-0bc2-4e75-9b60-f1bfdd8088f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cef8215-5db1-48de-80a7-dc05bbcf7f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dab23f5-9a0e-4267-a69d-99540473aa6a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01bd302-7b55-4142-9f54-4fb1e635b420",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd0dc9d5-2ffb-420c-83c8-40543d4786e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81383853-eb59-41bc-b91c-ef7b830b76a6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ada7ef4-5347-4cb7-970a-5b55ee9721a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932d59b7-6c46-4ced-b842-ce631c29494d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7724444-5039-457c-be89-4c2e7f844f63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d72d83e6-3643-4eb4-8e97-13b26c874012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61739f72-6b69-42e3-b41d-e2048d9e10c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca39b024-f439-491b-8aa2-155ce37e8658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f4f900-f857-47df-ab87-717353fcf633",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533e2b2e-120d-44b2-a60b-5f028f341295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77dce3d3-89bc-42b2-a764-78d2367c2f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f991a62-1999-4f0a-90d3-ca2d2299ae51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45502970-20dd-4ae0-b4b0-94b021243875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536cb667-1a23-4afa-a7fa-826863421657",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1266da0-176a-490b-8968-2a3c897a0f80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af0d848c-435f-430f-b587-7acd00707b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002a282e-268d-4c76-bd7c-38a61e52d756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862746b2-b6a9-4cc7-8e25-100f2566b9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e482420-b22f-483f-8bfa-bface7316984",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38e909d-3d29-4cba-bff0-a5763b63017b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bde3c650-30a3-481b-9149-b762ca56f65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3ed1e7-6cbb-40f6-89ad-bd3d0ef4e7a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ba1a1a-f46d-4ccb-9052-7be62876745f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ea8272-ef36-46ad-9651-73531745deef",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc429f76-ebb0-47da-a746-f7dbb4b89b61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95479d50-bde8-460a-b0da-44e4270ba702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351e0bb6-bee7-49de-886d-cee68e84bc49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673c7977-0adb-4613-a907-7af83dd4e8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a492429-e490-4962-99a3-844ca30f5c37",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709e513d-590b-4666-acfa-8139a0ddc30b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd9e616e-b734-469b-93b6-e07f3a1183f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bee315c-794a-4e03-b40c-ab04b3672906",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24d4aa3-12a1-4425-b02d-f06c2441234d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714ba818-a232-4611-89ea-72ce782c9c6f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57e2edb-7e3b-419b-a140-04396fa3cf26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f848025-0c75-4cef-a5fe-08142efb920b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee55dbe-476f-489d-82f8-a8251e030003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d03d8d-8352-4cb2-9def-ef2fd0d28cc0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92eb2df5-e9a9-486a-9c15-71c0aa3cead8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6dead6b-9fb0-4362-b955-a2605f28ce30"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "062cd23e-3a0f-4aae-bbdd-62c98bfc04c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea449315-881e-46b6-bd87-71cb79ec4b5e"
                    }
                  }
                ]
              },
              {
                "id": "b6a02faf-dcfb-4195-a837-7e31df2b7c92",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba7e864d-0cbe-4f15-bc09-4464f34895c4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee721fa-bc15-4aad-9bcc-acbfa993e769",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "180773dd-cb9e-42e2-bc5e-becefb0c6b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c2afad-7662-441f-aedc-abe1cad41826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98535756-bcf2-498d-afe4-726d69ef4a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ead4d32-2a7b-43c2-aeb6-6c4065536c08",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e25f067-cff5-46e6-b7f5-f1a52df92e63",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "39b4ba8a-869d-4b60-ad81-570358a4db89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a2c6dc-516a-4fba-be05-ee1bce59d310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c4c9a8b-40f8-4e3d-a92e-d1868f0af202"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3718f33-8cff-4db5-bece-f78641df51a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50ccfede-7b9b-4237-8a31-1471bf5e83a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "180efadd-6535-401a-b4a3-97d39e5ec82d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fe6add0-6680-4039-97e0-6d95e456fce2"
                    }
                  }
                ]
              },
              {
                "id": "990932ca-a1ea-40df-8a9f-4c0f916d1da5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "559ab519-2007-46ba-b3ef-5b9d38a06c91",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8627eb-f847-458d-a76a-b027da269398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3e0d5560-a59b-4961-9559-2ec7d8a4e253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9fa092-3fdd-4e5c-b78e-9aeedd459598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a132a618-2409-49c3-ae50-3aad4b5c0b76"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "61997d9c-5faa-4333-bc35-0be97baafc44",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b8e8fcf1-fd98-40f4-b71a-937713342f26",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2380eba4-e056-4a46-b1fe-c883fff3704e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a4d6540b-e550-4fad-ac43-ed8ee2b894b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5875db00-256f-4d25-b95c-e5e107ed533d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e41f4087-74d9-42f1-989d-472ccacb4926"
                    }
                  }
                ]
              },
              {
                "id": "70db7919-b309-4003-a20e-703fc167d802",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "745bd6d4-eba1-44a1-ac54-4c97899cca57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "69653c38-52f2-4bd9-bf75-e1480bcb858a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d146ee9b-8d58-4a70-b6cc-cb0a93d09f30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "365ed1db-6d4b-4b7b-8456-c0fe72bdaa66"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f63cf794-3000-44b6-a616-e444b61a6a3f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "73d8f31c-a059-451e-8ac2-1dcccd12337a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c396ca4-687c-445a-8faf-b2100a660434",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7635ac0-1b95-4b50-8cf2-b78404b58663"
            }
          }
        ]
      },
      {
        "id": "d7a5e550-2ca6-4133-93f8-9598c6a11fa6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b10432ff-e3d3-4d7c-9890-57871f145b4e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "58180eaf-308d-4d51-8902-3f355313d39a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "692b6c2f-d46d-45b8-b6b0-96ec4217709f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737db31e-1452-4fd7-9bbf-b108d5e50127",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "860272cc-d395-4c4b-86bb-57ad45b3e803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0706e5a7-a0a2-4532-b13d-57a8bad3575e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1c67465-ccf8-4f35-b331-d6fbd5ac9f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087d2a48-3a25-4be1-8c92-b48697d3754d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31691c1d-d7f9-4ff9-862c-d3e141687854",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1c19077a-9845-4d9e-a092-aab4c2ee51c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900c4e32-ac22-4ebf-b9f4-065d2adb42d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e37596e2-b067-4b61-b2cd-be5dee3cf8e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99a9b4f6-b357-44a9-95af-c4f46255e7fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3418fdb7-667f-4d68-9d5c-594509ca136b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f206b878-1471-4ac7-bc29-0914a6d10883",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c63d4a49-dae5-470e-8cb8-6168042affcc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b2cc109-10a4-4463-9489-0df099b37846",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f5d69623-f4f8-4d6c-93aa-0c77d1099699"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "774f8777-79f5-419e-882b-63ecfc3dcd83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b2bd5f3-9a13-4482-8ff4-ac230e26a244"
            }
          }
        ]
      },
      {
        "id": "67eef307-d3fc-4211-8110-3e64dedbb420",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8559dc53-bf41-4451-9231-38c0b48aa592",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a670dd9a-7ff3-4b1b-959f-7511177a92c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35c4a92c-2ba4-424b-83cc-de192e54cf4e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8995b0b9-bb90-4369-ba23-0992dd9a8e78",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bdaab3c-3184-4388-a77a-71f3dbaa9572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdec70da-6b50-4768-aa00-91386c59775e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2841b88f-a09e-47ee-a2a8-b3cfd657e5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c181a759-54c4-4bb0-b1d4-7bd5c6bc7dda",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62460286-9adb-44ec-a329-d381fb39da5d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "841ca25d-4694-49e7-99da-25adaa73fc03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa76713-bcf0-4577-84b1-0b082310da8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df703076-157a-430c-bcd7-dc7abbccbd3f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a2c5424-7658-42eb-8a30-2a730ff9b64f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a5c69e2-2b82-4178-b76c-c1379c184807"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2725835e-e09c-44c9-90d7-5b24b0ef5eb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58e8c4ef-7836-45ad-99fd-7c5285b63d7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90977d77-fc7c-4b5f-b3df-75d11439b886",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fb2bec9c-11ad-46ef-9fef-803f1873c4ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4d0e70b-657c-4ae1-8536-4ec68d6de918",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b72a7b93-b67f-490e-bb12-367a9ee17bbc"
            }
          }
        ]
      },
      {
        "id": "239b21ca-f289-465e-826c-37abfde6e138",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7d9d76ac-0016-40c7-9f5d-7a2f86b7f0fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cfe795b5-f923-4fe1-9893-ec25c603cc51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "22a13449-4840-41e9-b9ba-a97f2b31dd47",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a4223e-f0b8-487c-bdca-cbe7e781e323",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f699f03-a9fd-45df-8971-d91d98cd8393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1eb59ba-6bb9-499f-a631-1955d00c7878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cae5218e-8b93-45f7-a9af-9e96c483d92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9503e17-4482-4800-92ad-5480bb506eed",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7eb9bfe-2c9d-4921-acf0-1f1608f7a02b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "63d1eed3-6f8d-4e7a-8b5a-2e83283cc2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fda5ea-f6fc-4bf0-be6d-7705d04b144f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6040a06-60a7-4678-a1a7-20522c25ecce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79bd8076-195d-42f1-a00f-6ced38787d33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79024e2d-f808-4c36-a0c0-1e4e351cb6e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4764f4d7-af0d-4f17-a8cf-e1cc732f059a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "021fcfe7-8efd-4a8a-93b4-992c5ee33ff4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e56c7e64-1f45-472b-b283-4f4b1a51f711",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "63132912-0f76-4cce-8406-a4e5d3ac5527"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea8c7b26-63d0-43d3-8d8d-50c091e01ede",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3d59d30-a890-45e2-b6c3-2c93816320f9"
            }
          }
        ]
      },
      {
        "id": "610f29d2-77f4-4ef2-bee9-b0b707575199",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3231f291-88c2-4141-be3c-254d9bf6c696",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47750650-510b-43ab-b9a9-758a79969794",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c0ccd50e-6eb4-47db-865a-53b43a115592",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71406c30-5e7b-452c-9286-5beb608af607",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7b82a5f-2b90-4098-8e08-b04903eb6278",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 335.81153846153853,
      "responseMin": 21,
      "responseMax": 11848,
      "responseSd": 1053.7058262761982,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678840799653,
      "completed": 1678840898297
    },
    "executions": [
      {
        "id": "ad32d161-7c60-4626-9a3e-b031e553b3ac",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f05dddbf-606e-420b-954f-ecc4520c3142",
          "httpRequestId": "bdfad8d9-933b-4f2a-a9c8-b5fbcc93b7c0"
        },
        "item": {
          "id": "ad32d161-7c60-4626-9a3e-b031e553b3ac",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1070fb7f-1262-476d-a4c4-092bfd1ee446",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 0
        }
      },
      {
        "id": "5597a2de-d3d7-44f7-8643-68220db55e57",
        "cursor": {
          "ref": "1395514a-5172-40fb-9c7e-d1e3a75ab6aa",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b1febf4e-cc26-4b59-a02b-bd80e2998ca8"
        },
        "item": {
          "id": "5597a2de-d3d7-44f7-8643-68220db55e57",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "53d45e44-7248-4a68-83c7-158c4f7985b4",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "1217165e-259c-481d-9d2d-7f2f77e32d4d",
        "cursor": {
          "ref": "fbf67202-f074-4702-8003-2bcee21ab928",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ad5c8836-bf75-4956-93b9-59a6044c8a85"
        },
        "item": {
          "id": "1217165e-259c-481d-9d2d-7f2f77e32d4d",
          "name": "did_json"
        },
        "response": {
          "id": "6afc1b37-ea69-40de-b080-ec736b981be3",
          "status": "OK",
          "code": 200,
          "responseTime": 490,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b8c384-1dbc-474c-b1f6-4550ad468901",
        "cursor": {
          "ref": "587df7ba-3aac-4624-a51b-a4c7e9d8fa04",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "274ca668-a0f4-4b33-9a5a-da56192ab113"
        },
        "item": {
          "id": "98b8c384-1dbc-474c-b1f6-4550ad468901",
          "name": "did:invalid"
        },
        "response": {
          "id": "edbcb978-cfd8-43cf-b515-e94bd9762675",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1353,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "98b8c384-1dbc-474c-b1f6-4550ad468901",
        "cursor": {
          "ref": "587df7ba-3aac-4624-a51b-a4c7e9d8fa04",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "274ca668-a0f4-4b33-9a5a-da56192ab113"
        },
        "item": {
          "id": "98b8c384-1dbc-474c-b1f6-4550ad468901",
          "name": "did:invalid"
        },
        "response": {
          "id": "edbcb978-cfd8-43cf-b515-e94bd9762675",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1353,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "51e864bf-c69a-49f4-a252-7ff7269d2ace",
        "cursor": {
          "ref": "7063ad13-5683-4950-822d-c688c654b8b7",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c2b8a91d-6edd-4ba7-bcac-660792ee4241"
        },
        "item": {
          "id": "51e864bf-c69a-49f4-a252-7ff7269d2ace",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b15280ae-907a-45a6-8a67-2ba25d057b18",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac77b3a-07ba-4f71-bf75-f9ebc9036f14",
        "cursor": {
          "ref": "dba32db8-4b21-452a-884d-7af205a09d37",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bcd7f289-e029-4c3f-827e-df83ababfb44"
        },
        "item": {
          "id": "4ac77b3a-07ba-4f71-bf75-f9ebc9036f14",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c4c457ec-4acc-4186-a65b-272e8950b5ec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f203e1d7-8470-4eeb-a675-2f4cde55f4c3",
        "cursor": {
          "ref": "4a8ecf77-afba-436f-8fab-84ca3a4eb10b",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2cad1b03-bed4-43ee-a614-45091936d63c"
        },
        "item": {
          "id": "f203e1d7-8470-4eeb-a675-2f4cde55f4c3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e93b136e-f51a-49fa-a9d4-c897f8adf544",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "8edeb0ad-c1d8-4160-945a-78a1dd5c4fad",
        "cursor": {
          "ref": "42c7182a-3b97-4204-9a16-a76c3eb4f019",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3b6d71bb-e254-4a5c-9e6f-a6e3e361829f"
        },
        "item": {
          "id": "8edeb0ad-c1d8-4160-945a-78a1dd5c4fad",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3c87a1b9-883c-4c57-a78c-7f564afaccde",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8edeb0ad-c1d8-4160-945a-78a1dd5c4fad",
        "cursor": {
          "ref": "42c7182a-3b97-4204-9a16-a76c3eb4f019",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3b6d71bb-e254-4a5c-9e6f-a6e3e361829f"
        },
        "item": {
          "id": "8edeb0ad-c1d8-4160-945a-78a1dd5c4fad",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3c87a1b9-883c-4c57-a78c-7f564afaccde",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e9a61630-47af-4b72-9c84-592ff9dc4273",
        "cursor": {
          "ref": "30635bd9-0045-426b-85e9-f2b5a728f06a",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3fef286f-7a93-433c-b021-14ab5081810f"
        },
        "item": {
          "id": "e9a61630-47af-4b72-9c84-592ff9dc4273",
          "name": "identifiers"
        },
        "response": {
          "id": "0449998c-136d-427d-8187-5456871be2ce",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015fa497-632b-4f90-94ad-f03988f26912",
        "cursor": {
          "ref": "2c999a8b-d026-424f-885b-95db6c1c37e4",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a49ea5e0-2815-4482-883c-e1e9274d9091"
        },
        "item": {
          "id": "015fa497-632b-4f90-94ad-f03988f26912",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "22867bf3-18ee-4d5b-af16-bf288688675a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015fa497-632b-4f90-94ad-f03988f26912",
        "cursor": {
          "ref": "2c999a8b-d026-424f-885b-95db6c1c37e4",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a49ea5e0-2815-4482-883c-e1e9274d9091"
        },
        "item": {
          "id": "015fa497-632b-4f90-94ad-f03988f26912",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "22867bf3-18ee-4d5b-af16-bf288688675a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32179bef-0d96-469b-90c2-8da182e0e8a2",
        "cursor": {
          "ref": "ad4b0395-98a7-4541-9ca4-8410e8fd63cc",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2abb2435-5e1e-43a8-8c63-d0368e714337"
        },
        "item": {
          "id": "32179bef-0d96-469b-90c2-8da182e0e8a2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6054e456-f137-419e-a310-41cf4b19fede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757096f3-f4e8-4f6f-afab-6463c4518c29",
        "cursor": {
          "ref": "c0da2a5f-c6a3-442c-93f9-0854d1fbb06c",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "496a2aa4-cf3f-4d6b-bbbf-f4001ee94347"
        },
        "item": {
          "id": "757096f3-f4e8-4f6f-afab-6463c4518c29",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "89c1dfdf-5c4b-4891-a9f2-1acdfdd1e174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b475937-9639-458e-91b4-8fe1e402c3ca",
        "cursor": {
          "ref": "5b71053d-0193-4fb0-980d-62b3b55e0c3a",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "798df777-db36-4a2f-90d2-8dfb800e9073"
        },
        "item": {
          "id": "0b475937-9639-458e-91b4-8fe1e402c3ca",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b4b99d2a-7a8d-4678-95e3-3a5c829b4f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abc4c87-48b5-4428-9799-c74ca86b5524",
        "cursor": {
          "ref": "809957f7-ef51-467c-a69c-da867c71e05e",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "23712700-8e27-4b6e-b6db-7e89557cc92a"
        },
        "item": {
          "id": "5abc4c87-48b5-4428-9799-c74ca86b5524",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "12dda7cc-b1df-47ce-bb1c-8d4c18caaaba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c1c4ea-3ee9-4a8b-9a02-1d95feba3df4",
        "cursor": {
          "ref": "69759c77-5dc3-43d6-ac25-f1f68871393d",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bfea1595-ca9f-42ea-8503-578d207e055f"
        },
        "item": {
          "id": "69c1c4ea-3ee9-4a8b-9a02-1d95feba3df4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4cec8e6a-7fde-4396-b866-952618ac2c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cdd8cc-0f04-4171-9507-1ae75a0e3ccc",
        "cursor": {
          "ref": "e1562329-b098-46ec-9be9-af1a8e2b0d13",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "35947cfd-7aa5-4f6f-8063-67448d248751"
        },
        "item": {
          "id": "24cdd8cc-0f04-4171-9507-1ae75a0e3ccc",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2730bb2f-a08e-40fa-bbf5-c8eb0e65c13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbafa1f-57e9-448d-89c4-9a06425dc61a",
        "cursor": {
          "ref": "8d8f6016-5f4b-4f36-a1ef-7429772dbc4f",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "27803099-9f7e-4113-a400-e49420e483e2"
        },
        "item": {
          "id": "0fbafa1f-57e9-448d-89c4-9a06425dc61a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "eb7380bd-f424-46f7-aad0-068549b4a67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713d3cbb-7c6e-4813-bf53-4ab97cd98aa3",
        "cursor": {
          "ref": "d0e438c2-501f-4971-abd4-8aa3602c8364",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "39ef082b-7739-482b-a311-0696862c692b"
        },
        "item": {
          "id": "713d3cbb-7c6e-4813-bf53-4ab97cd98aa3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5c36bcb4-ef57-40f5-b632-c82c578151ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86782b4-c9cd-4eea-be98-de15c6fba217",
        "cursor": {
          "ref": "fbc7e0ee-b416-4973-a49e-9529a7f93605",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d0358459-eb5e-4adf-b462-423737bfef75"
        },
        "item": {
          "id": "f86782b4-c9cd-4eea-be98-de15c6fba217",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "06e128cb-5a6b-4329-aa2a-5ee14da979d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebce98cf-34fa-4bbf-9a83-c46b58ce6d2c",
        "cursor": {
          "ref": "dc7fbe76-2240-4d1b-851b-d6a214964d68",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6ba47220-4a6b-40e4-9a68-4827172991c1"
        },
        "item": {
          "id": "ebce98cf-34fa-4bbf-9a83-c46b58ce6d2c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "70b51b2a-cc0d-4d9a-97f9-33b9a8058817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ee8ce6-cff3-4aa0-ada1-0275f3d17ccf",
        "cursor": {
          "ref": "8f146141-6464-4231-bd63-f71636bb4c05",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3a72d076-f83c-4098-a1ab-6fca9eeab4ff"
        },
        "item": {
          "id": "65ee8ce6-cff3-4aa0-ada1-0275f3d17ccf",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e539d955-f462-40e9-8b40-013a6a0d8fc4",
          "status": "Created",
          "code": 201,
          "responseTime": 767,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "6605110d-0a62-441f-b107-2a6ed4aaa6d0",
        "cursor": {
          "ref": "58417b94-0ecf-4681-8147-8179686f44ba",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1fc4c374-f14e-4417-aae0-b3538d34421c"
        },
        "item": {
          "id": "6605110d-0a62-441f-b107-2a6ed4aaa6d0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "78e7b844-d516-407d-b84a-4251160b60d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea59ef15-286f-4075-9fbc-f00d1fac5129",
        "cursor": {
          "ref": "cba563e5-67fe-4f59-936d-60ac1921b4cb",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "03e82a03-57e1-4a9b-ba8d-85ca9fdf4654"
        },
        "item": {
          "id": "ea59ef15-286f-4075-9fbc-f00d1fac5129",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e768d810-7fa4-4e0e-b130-524ac8d8b67c",
          "status": "Created",
          "code": 201,
          "responseTime": 11848,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0f8c2e2d-ff49-4052-b779-24bef1caea67",
        "cursor": {
          "ref": "92ce7676-f03d-487a-baa7-447fc7e20488",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e8a0fc40-bbdd-4b2b-a843-4f466acb725a"
        },
        "item": {
          "id": "0f8c2e2d-ff49-4052-b779-24bef1caea67",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3eef652e-4eef-416e-b288-945f804c9d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d20f88-8778-4ce0-86a1-49a21f9e0655",
        "cursor": {
          "ref": "9a94918c-81a8-4a04-839a-ba7f1b925a23",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bf62f454-7050-42b7-9b19-18f402ebb167"
        },
        "item": {
          "id": "a7d20f88-8778-4ce0-86a1-49a21f9e0655",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7f52935b-90d2-47ad-887d-0b0d9aaaaffd",
          "status": "Created",
          "code": 201,
          "responseTime": 7469,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "6f20daf2-b77b-4f69-a8b1-c9fbc57b8b66",
        "cursor": {
          "ref": "10dc0d51-587e-4772-bb98-5f4929e829c2",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e8a520fb-5eef-4cef-b5b6-8a5f58bf1f9a"
        },
        "item": {
          "id": "6f20daf2-b77b-4f69-a8b1-c9fbc57b8b66",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "33767045-e276-4e24-b21b-5019d00f6c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f331f5f-4d71-471a-af5b-dc8575f87751",
        "cursor": {
          "ref": "f16e4722-1232-4c86-a498-bd4128931199",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3bc8a8e9-7c5c-4ee5-a4d2-ff60a9012091"
        },
        "item": {
          "id": "3f331f5f-4d71-471a-af5b-dc8575f87751",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "acc831c1-1d55-4fcc-a654-4da67c5c5433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5090560-a84e-4a47-8138-6910344d0690",
        "cursor": {
          "ref": "4941e4c5-0a55-4948-9ab9-d98c6d789de2",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3eef87e6-ee55-4709-a902-7385ebc90a8a"
        },
        "item": {
          "id": "f5090560-a84e-4a47-8138-6910344d0690",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2be4349e-67d0-450d-bc7e-2a43d21b562d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5114f262-fd7d-4607-89be-e1cfeeabd961",
        "cursor": {
          "ref": "9354a3f6-4990-4882-a92d-8815799f19c2",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "66b55592-8a9b-490d-b7f3-b773bb5c2f21"
        },
        "item": {
          "id": "5114f262-fd7d-4607-89be-e1cfeeabd961",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8a5df472-90ed-4765-b0a9-fcc1895222d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b580dcd2-8bd6-4ef5-a902-922ce9592797",
        "cursor": {
          "ref": "e149e9fe-c2c5-49b5-995f-1eb93e2a196c",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "646bb554-44e5-49c2-8df0-cdf6abb09ef4"
        },
        "item": {
          "id": "b580dcd2-8bd6-4ef5-a902-922ce9592797",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "214f44df-1d3b-4807-8984-829507c2b975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b408ab-f0ad-495c-9b95-aee711262238",
        "cursor": {
          "ref": "c8721c98-c312-4860-a527-420bf068931a",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "05eb42af-95b4-4133-a274-0c4841418c1a"
        },
        "item": {
          "id": "53b408ab-f0ad-495c-9b95-aee711262238",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b317d169-8cde-4c35-8594-94ef7498afd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af00cdb-d6c0-4e71-872e-9125d795582a",
        "cursor": {
          "ref": "3c6bb3cc-3a0b-4bcd-a0f5-4039fef45cdf",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "69868b31-51d7-4f57-b2ae-a624cddd281a"
        },
        "item": {
          "id": "0af00cdb-d6c0-4e71-872e-9125d795582a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f121b3b9-3952-475e-808c-8037ee54df0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be95fca8-4d02-41b9-b676-375732d821b6",
        "cursor": {
          "ref": "8595f842-073f-4823-bceb-ff8cf296000b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e4514463-6ddd-4587-9b61-29751fc1a1f5"
        },
        "item": {
          "id": "be95fca8-4d02-41b9-b676-375732d821b6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b04a1d13-db2f-4f1a-a588-9cd7988e92c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b923b3-cefa-4fc3-994a-0f19e33a56b0",
        "cursor": {
          "ref": "dc88ec9f-aa66-4255-b3e2-aa2c3fd59962",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f1172bf5-50dd-4cd8-95f0-b65efe968687"
        },
        "item": {
          "id": "27b923b3-cefa-4fc3-994a-0f19e33a56b0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "600d63b3-3bb2-48e5-96cd-e58d9db654ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdeeb7c5-b9c8-4c7e-9f34-5f07255af207",
        "cursor": {
          "ref": "ed51b357-c601-4902-a129-7a3afcac5246",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7ff0e0fa-8033-4f81-9133-2aa3271f2a6b"
        },
        "item": {
          "id": "cdeeb7c5-b9c8-4c7e-9f34-5f07255af207",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "31497953-03ea-4226-9bae-04010992fa94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459da25b-35c0-40a4-bb9c-5f6b4cc4b5e4",
        "cursor": {
          "ref": "07b3c78e-ba35-401e-963c-7abbf5fccddb",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "85f14aec-ea4c-452b-8e1b-6d18e38f977d"
        },
        "item": {
          "id": "459da25b-35c0-40a4-bb9c-5f6b4cc4b5e4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "29cf4c81-eef1-4949-b7bd-d5166029fedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a807a7-89a1-4458-9719-5c13195aec7f",
        "cursor": {
          "ref": "1c2efce2-4a97-41d6-a71f-758c0130b3ef",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "488daf17-f6f1-4ada-8e72-014128f633d0"
        },
        "item": {
          "id": "75a807a7-89a1-4458-9719-5c13195aec7f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c85ad3bd-40e9-438a-ab18-1d1a23488632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe89303-117d-4583-a4a5-8d22a27b8d16",
        "cursor": {
          "ref": "88692d8a-aecd-4da2-834a-1d63d90ff72d",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a6c4c4e0-6919-46b7-952b-bc9f5c45d6b5"
        },
        "item": {
          "id": "3fe89303-117d-4583-a4a5-8d22a27b8d16",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3b72fb43-a11d-451d-9bd5-cd608bd461df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1204e52f-e817-4c35-8c57-f9e09c7bb235",
        "cursor": {
          "ref": "f2a34d13-647b-40a7-9be6-653943074090",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "84e1463d-af5f-486a-acac-4d050582537d"
        },
        "item": {
          "id": "1204e52f-e817-4c35-8c57-f9e09c7bb235",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3dadee2d-03c8-47da-b74c-7b6b70f7e4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d65ff7-0bb8-4484-bbb6-461e7932592d",
        "cursor": {
          "ref": "7987fafb-1cf6-4255-8398-a29cee1842e7",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ff8881a7-e939-49d4-b24f-c61237987705"
        },
        "item": {
          "id": "39d65ff7-0bb8-4484-bbb6-461e7932592d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "05b74798-7ee2-4bd6-89c8-872562f4984b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa01166b-5942-422d-b80f-4df8eb98c1db",
        "cursor": {
          "ref": "92e5aae0-4dbb-4656-b8d6-403b4a6f0b34",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9c028693-8ba3-40f7-a8e9-1cf261a10890"
        },
        "item": {
          "id": "fa01166b-5942-422d-b80f-4df8eb98c1db",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a736f527-fad1-4a49-ad9c-d492cfc9847f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b2d6d9-49f3-459d-bda3-665d57b05c49",
        "cursor": {
          "ref": "a3b7676c-68bd-4d4c-ab9f-5a76f5d26ac6",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3831eac5-9d6f-450f-909f-0de614d92493"
        },
        "item": {
          "id": "c1b2d6d9-49f3-459d-bda3-665d57b05c49",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fb37dee2-9dc4-4d4b-8ec2-eee2a19353a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90959694-c721-4a61-95d4-686245471526",
        "cursor": {
          "ref": "b31fb43b-742a-4425-a5f5-83deedd597b7",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "15de6f5f-d55e-4d9b-b657-a8c485507306"
        },
        "item": {
          "id": "90959694-c721-4a61-95d4-686245471526",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ec2dd6b3-234f-46a4-902a-e8a8dbaec13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43057e7e-69bc-4ac0-b40d-f808f59df940",
        "cursor": {
          "ref": "3ad080d2-28ff-40a7-875a-ea87050027b0",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1641e00d-ce15-4ae0-8c17-37c3deb8b1a6"
        },
        "item": {
          "id": "43057e7e-69bc-4ac0-b40d-f808f59df940",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ce8e9329-2f56-4840-8474-fcabff9a0f92",
          "status": "Created",
          "code": 201,
          "responseTime": 2420,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6c385aca-09fb-45c7-a803-dc3588647ae8",
        "cursor": {
          "ref": "48f35854-ff70-450a-ac32-094998c9263b",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "312e24d8-7efe-42b7-b0ab-ff4770f48494"
        },
        "item": {
          "id": "6c385aca-09fb-45c7-a803-dc3588647ae8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "83c022c3-ac37-45e4-8847-3a0e8bfaed4c",
          "status": "Created",
          "code": 201,
          "responseTime": 2552,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "785902cb-04af-46fc-b165-116de6333bc4",
        "cursor": {
          "ref": "e6a19ef5-0a0d-45b0-9a5a-0c8094d9340e",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "81770997-5f4d-4769-a38b-d3c25e5a9a8a"
        },
        "item": {
          "id": "785902cb-04af-46fc-b165-116de6333bc4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "88e14575-b285-4ab0-8256-b68b95fea007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95208095-0213-4b36-82f2-13232fd0ccaa",
        "cursor": {
          "ref": "016f75ab-1deb-4f8c-8d94-39f2d527babd",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9cd65ad6-18ee-44b1-9076-6f900466239e"
        },
        "item": {
          "id": "95208095-0213-4b36-82f2-13232fd0ccaa",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "85537e6d-70c2-4ca8-aa67-65ddd9556c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5c456b-8c30-449f-b136-fed4b6a99e9e",
        "cursor": {
          "ref": "e1c286c2-a572-4f64-a9be-6345e980450b",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6c346f64-297d-4ef2-97d5-e4a19e54b48e"
        },
        "item": {
          "id": "dd5c456b-8c30-449f-b136-fed4b6a99e9e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7083639e-026a-4f60-8e02-aaa74b4b2be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab9fc58-106b-4974-ae9c-58cb3b6cc4e2",
        "cursor": {
          "ref": "a1de6989-4bd2-4e08-94cf-6afc0774672e",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e0a2d752-cb18-404c-be95-cb555e8a7b5c"
        },
        "item": {
          "id": "1ab9fc58-106b-4974-ae9c-58cb3b6cc4e2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4c819d49-90df-48a7-ae27-c15d5df9d5d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a47d7c-3ee8-4580-8ea3-253b386613f2",
        "cursor": {
          "ref": "9732d145-f3c4-4768-a800-48c3ed954c34",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a9a85c11-44a6-463d-ab62-c3bb7c0ddaf8"
        },
        "item": {
          "id": "c5a47d7c-3ee8-4580-8ea3-253b386613f2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a1aa64b8-a740-42f9-8939-327f8fccbfe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a85342c-43ef-4c8c-a6c0-10406cfb11fc",
        "cursor": {
          "ref": "bd8c10fb-55d7-4a89-95f1-ba9461e374f4",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b4ea5999-78c4-479f-bfe7-10f204e968f8"
        },
        "item": {
          "id": "2a85342c-43ef-4c8c-a6c0-10406cfb11fc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0967afcf-5d25-4032-b5cd-28dd36800d45",
          "status": "Created",
          "code": 201,
          "responseTime": 2424,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a270ad1c-7536-4b54-ad05-f065f4b98f47",
        "cursor": {
          "ref": "20a282e7-5ade-4268-bf74-795829d58b3c",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0b0c20c0-2401-4982-bc28-4bbacb1b0a0d"
        },
        "item": {
          "id": "a270ad1c-7536-4b54-ad05-f065f4b98f47",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "06734840-382f-47ae-9137-19bfe05d4eec",
          "status": "Created",
          "code": 201,
          "responseTime": 3072,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e65b0728-e3f7-4d86-8edb-fada3bf74a82",
        "cursor": {
          "ref": "a31fad59-a365-4b79-97b3-f930aae348b7",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "278de941-cc82-46a4-bdf3-c88e8de0e1d9"
        },
        "item": {
          "id": "e65b0728-e3f7-4d86-8edb-fada3bf74a82",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "274586e1-a63f-464a-bd79-82a371673f62",
          "status": "Created",
          "code": 201,
          "responseTime": 3317,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1c94fcb8-600c-4abc-8f8d-ead2e59f9c53",
        "cursor": {
          "ref": "78923b52-47df-43ae-9910-67529b3de4fe",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6854297c-83b5-4358-8451-931017f27bd9"
        },
        "item": {
          "id": "1c94fcb8-600c-4abc-8f8d-ead2e59f9c53",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ff05bcf1-4689-4bf9-9fa5-23d9d8b9bda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d4a19c-0441-4163-9935-f0dfacef1896",
        "cursor": {
          "ref": "6ad59161-09e8-448d-80b4-b466822e2bd4",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "90cfd972-2b78-418c-b6ff-f63139d227fc"
        },
        "item": {
          "id": "13d4a19c-0441-4163-9935-f0dfacef1896",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "eb245da5-ffbb-475d-9341-ceb5982803b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdb6fa9-ea8c-4d8e-a385-13aec3588a5a",
        "cursor": {
          "ref": "7ad20c4e-cf83-4d76-996f-46fc3796029c",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b9390702-22fa-478a-abc5-3481ac48394c"
        },
        "item": {
          "id": "bbdb6fa9-ea8c-4d8e-a385-13aec3588a5a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "78429224-2377-4368-92ce-3a9d0c08edb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0045d9ba-0483-4b2c-b351-59b806e8005c",
        "cursor": {
          "ref": "af2d3aed-01af-46ea-99de-64227bc438a6",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cacf2d7f-6e16-48db-89f6-31b398c2a468"
        },
        "item": {
          "id": "0045d9ba-0483-4b2c-b351-59b806e8005c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8129362f-1b01-4266-9d14-f9a0740115c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363b11c7-fd37-4f32-a487-f81eebbcba1d",
        "cursor": {
          "ref": "34b51853-9fbe-40ec-ac9a-9e990259f32a",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "dfff0f4d-1053-473b-9d76-ae2c88737453"
        },
        "item": {
          "id": "363b11c7-fd37-4f32-a487-f81eebbcba1d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "51702f0e-61e7-4a7a-8788-970a63ff9df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25c875c-7ef4-4345-b091-7c52953baf21",
        "cursor": {
          "ref": "592e1015-90e6-4464-8227-9240c6466cd5",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "97ff2060-f8ad-4af6-981b-37709bdbbf2c"
        },
        "item": {
          "id": "a25c875c-7ef4-4345-b091-7c52953baf21",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8782071e-66d9-4308-b1c0-ebe701ed0750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f19fd22-786f-4c44-bb4c-8d2b4417a208",
        "cursor": {
          "ref": "dfa9f5d8-3748-46f7-b2da-078ed28574ab",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "30249075-4cb4-435d-b516-e4caa77bdd7e"
        },
        "item": {
          "id": "2f19fd22-786f-4c44-bb4c-8d2b4417a208",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e7a1c798-c42c-4ea4-b233-c5c4f8e79943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d46d1e-bbed-47a5-8ead-b428432d39ef",
        "cursor": {
          "ref": "3734883a-dfd5-491f-9393-ff73fece8951",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f1810ab3-8e4d-4485-9a1f-47248b9c84cf"
        },
        "item": {
          "id": "a8d46d1e-bbed-47a5-8ead-b428432d39ef",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9d121305-ca36-45f9-a896-736d7c7215fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4806b4e9-de16-46d5-ba01-83339909e320",
        "cursor": {
          "ref": "ad72bb5b-178b-4a78-84af-45e4649482ca",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ea61b34b-cce4-418b-be1e-d2854e7346db"
        },
        "item": {
          "id": "4806b4e9-de16-46d5-ba01-83339909e320",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "be482766-05b8-49dd-bcc6-dbd909588fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e6c106-eea6-4f2c-8b46-bced1f899d14",
        "cursor": {
          "ref": "59dbb3d9-f7a0-4191-958d-63542e4e7243",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "accbdd03-cccc-4aa4-80e8-2c64d079acd3"
        },
        "item": {
          "id": "d4e6c106-eea6-4f2c-8b46-bced1f899d14",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d1162206-a6d8-4c1e-b5e3-9b506a5ee914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b224bf8-8b3a-4855-9075-b6c88f24e4ed",
        "cursor": {
          "ref": "a2ffc046-81c1-4f41-8000-342db5a4adba",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "35cd36a3-a645-4be8-b281-3d2355ff3963"
        },
        "item": {
          "id": "9b224bf8-8b3a-4855-9075-b6c88f24e4ed",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bb79715b-2b11-458d-9862-f9f3075a48bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658eb9d2-81e4-41af-b9b2-cb211319d80e",
        "cursor": {
          "ref": "56d5feae-3f73-4a52-bca9-470c389693f4",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "017f8cc2-cade-4998-925f-62f6760d98ec"
        },
        "item": {
          "id": "658eb9d2-81e4-41af-b9b2-cb211319d80e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a104b246-e4b7-4382-9b47-0e2af0d81619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd63b1e2-ecd2-4d6c-8131-deba9fbff6eb",
        "cursor": {
          "ref": "c6f0fb5c-b25f-45af-bc2f-616bc625a552",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c2e74b24-cbef-4175-b4e6-3fb8c714bd7a"
        },
        "item": {
          "id": "fd63b1e2-ecd2-4d6c-8131-deba9fbff6eb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8e24e55f-d502-450c-8f9e-f5b02f843692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f899965-da8f-4c8f-8537-4066450f7d8e",
        "cursor": {
          "ref": "fa06b313-54fd-4405-b4b7-3406ad7126f6",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "25ef172b-6fc8-4944-9d97-6cd6c2267ab2"
        },
        "item": {
          "id": "1f899965-da8f-4c8f-8537-4066450f7d8e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8feee46b-41d1-4224-95c8-04442075d667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7c9d11-8a1b-473a-bce3-e28d7e860205",
        "cursor": {
          "ref": "d6c6fd4c-e1c8-41b9-adac-2a1160141455",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1b4c2ee1-770c-4869-b659-daae91222b13"
        },
        "item": {
          "id": "1b7c9d11-8a1b-473a-bce3-e28d7e860205",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "28cb1cc1-c14a-42a9-9f71-b7e7a509f8b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1274,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379509d1-93ba-4690-b243-bb60296ff3e7",
        "cursor": {
          "ref": "72264515-5453-43ad-b5c2-75f5e72e8bd2",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "883dbe02-02f3-438c-8cf1-ffde7563eedd"
        },
        "item": {
          "id": "379509d1-93ba-4690-b243-bb60296ff3e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e3911ad3-92d6-40e7-81e5-5a22296e2937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8e4726-0e3c-4a94-8639-f2231756da38",
        "cursor": {
          "ref": "bd54600a-4b84-4f40-8cf4-b63c8d15abee",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "89c20763-7c2c-46ad-b857-a958900efdaf"
        },
        "item": {
          "id": "2d8e4726-0e3c-4a94-8639-f2231756da38",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "89bd2493-75b4-49aa-85ad-29c8571f4fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07077218-2bea-4172-a194-f8e7efa8b284",
        "cursor": {
          "ref": "8e7f5080-ea32-4ac5-bb2a-d232351f9fe3",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7156a068-0041-45bb-81f5-2334da76414b"
        },
        "item": {
          "id": "07077218-2bea-4172-a194-f8e7efa8b284",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "390fad47-15f3-48ce-b72b-ca5a46a2928c",
          "status": "Created",
          "code": 201,
          "responseTime": 2546,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "6b97f4d1-eaf2-433f-9eb6-3159af098d14",
        "cursor": {
          "ref": "66cbfe8f-0962-4630-80e6-76ce4ce8a64a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9cbaf1fa-6bbd-40fa-a013-c7c7f02222a7"
        },
        "item": {
          "id": "6b97f4d1-eaf2-433f-9eb6-3159af098d14",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "db04ea1f-6170-4fe9-9aaf-918f6c8fe721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800fabb9-9b8c-4afb-8427-9862a6cfcba9",
        "cursor": {
          "ref": "58e348c0-8c02-4e0d-bf4c-e5e29dbfa44b",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "616c0a03-1eef-49ee-926e-6bdc24118596"
        },
        "item": {
          "id": "800fabb9-9b8c-4afb-8427-9862a6cfcba9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8c0e0c38-2fa3-4c32-9631-bc635d6c649f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0389a733-ef52-4836-ab40-5c3261b7bcb1",
        "cursor": {
          "ref": "23d72af3-1da8-4ede-902d-ed5d6b75becc",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5fb21ed9-a7bc-4044-ace9-ea67935ce10a"
        },
        "item": {
          "id": "0389a733-ef52-4836-ab40-5c3261b7bcb1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8e6adcb7-6848-41cf-985d-969ab8949150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5770936f-db67-490a-a67d-f6269212ffa2",
        "cursor": {
          "ref": "1333f54b-5566-4900-a81f-a990b9323db5",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8b443f16-a790-41b1-986d-34c01e3ad844"
        },
        "item": {
          "id": "5770936f-db67-490a-a67d-f6269212ffa2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0d647ff7-7120-447d-a47b-f8c5f2dc6077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc260a0-33b7-4408-b991-040dc2e36d71",
        "cursor": {
          "ref": "b111621c-ddab-4458-85c7-c2baef080575",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "90654769-4a5f-408c-9306-52a4657009a9"
        },
        "item": {
          "id": "4fc260a0-33b7-4408-b991-040dc2e36d71",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "28ade71e-bac1-441e-88f5-fc35f9dad02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29f7cff-48bd-40ae-886f-ce55efd7d4cd",
        "cursor": {
          "ref": "09e4f8b4-9db0-46a1-a728-f5edd2daa3a5",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4eaea0aa-cf46-4960-89c8-f031b0b0dbba"
        },
        "item": {
          "id": "f29f7cff-48bd-40ae-886f-ce55efd7d4cd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "17f9bc41-8f13-4efa-8aff-75c18f598b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245c6cd5-bd88-417d-a114-81698b66e02f",
        "cursor": {
          "ref": "16328a36-0301-4fc5-a43d-e0cf953ccb1a",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3a917f59-cf46-4314-af43-ba50180ba2e6"
        },
        "item": {
          "id": "245c6cd5-bd88-417d-a114-81698b66e02f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bf64eef7-6476-4904-a292-c8c5c879e3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3cad97-5a5c-4dda-a78c-71eadd6740b2",
        "cursor": {
          "ref": "da5b409e-0c66-455f-8fbf-58497a30063f",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c9781a27-7694-4690-b48c-9b8093405d71"
        },
        "item": {
          "id": "1e3cad97-5a5c-4dda-a78c-71eadd6740b2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b62bcbc4-d9a4-4f94-8d5e-bac6bd50cbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee66ad2-763e-4607-8467-a943be401cfe",
        "cursor": {
          "ref": "c76ba104-8818-4c88-9d79-52869a6d5510",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "111ac16c-727f-428d-ade5-8f0b9763c318"
        },
        "item": {
          "id": "dee66ad2-763e-4607-8467-a943be401cfe",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6c85deca-5bfc-453e-8417-2abdeb8a8f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79914ace-9733-42f3-8046-643c845abd6c",
        "cursor": {
          "ref": "ad60d82d-f817-46b2-b785-ec37ccb6a676",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d7c58c13-627b-4886-83f4-1000ae62cc7e"
        },
        "item": {
          "id": "79914ace-9733-42f3-8046-643c845abd6c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5c841f60-cc51-420e-8f6d-1645d445735b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 370,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741c31ab-55d0-4d67-aa56-f9b58d88d126",
        "cursor": {
          "ref": "49d7605c-d562-4dfa-af09-16ea07c0957f",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1ed42b48-676f-47fe-9a13-46ab0781ad78"
        },
        "item": {
          "id": "741c31ab-55d0-4d67-aa56-f9b58d88d126",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "43818c5c-4a78-4b96-8ae4-951168b4ed33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af29285-ca5f-4be6-b8ad-8d3b04f51f60",
        "cursor": {
          "ref": "43dcda3d-f53f-4803-93b2-97adbd948436",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "495c235c-8f15-4b6c-aee3-ee510eb8ce1c"
        },
        "item": {
          "id": "4af29285-ca5f-4be6-b8ad-8d3b04f51f60",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "64f9bd91-6606-4b91-8cfe-3ed82c0c1507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d56584-4759-4076-8306-a8eaf7193bad",
        "cursor": {
          "ref": "285392b2-e911-4df0-bd01-c1ec53af8ece",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b2364caf-e929-4585-9a53-0d98ef2db52f"
        },
        "item": {
          "id": "43d56584-4759-4076-8306-a8eaf7193bad",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c35f0f43-bb9d-48f0-b071-faca3269045f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698a5d78-47bf-451a-a7b5-0ce2b128acec",
        "cursor": {
          "ref": "efe3b8b8-3ad0-45ea-9d4f-bbc17bf8b293",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4bfb94be-6a6b-436a-9a43-17101d49e49a"
        },
        "item": {
          "id": "698a5d78-47bf-451a-a7b5-0ce2b128acec",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2e93c6b6-205b-40d3-986f-5996c68324d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ecfff96-ba0a-4f56-acf1-af6f5933aa57",
        "cursor": {
          "ref": "5c739285-2855-4607-8a31-fcd6c11035b0",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4f01ba81-9c04-46f0-a4c9-8bbdb52a268f"
        },
        "item": {
          "id": "0ecfff96-ba0a-4f56-acf1-af6f5933aa57",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8e85f9c5-13c3-482a-9da3-3d6f2828a0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49d00ac-06be-4a1b-af14-4ed83e2c12b3",
        "cursor": {
          "ref": "d3c2bc98-8fef-470a-b45e-095cbf75959f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c5d75781-4be8-47fb-bd08-a11e5c2c08d3"
        },
        "item": {
          "id": "a49d00ac-06be-4a1b-af14-4ed83e2c12b3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a88361ab-bd80-4a2d-a4f5-cea2d192b553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e11a9e3-3c85-40a3-9615-cec730cb4b78",
        "cursor": {
          "ref": "7e5b7fbe-26b8-4a3f-8061-48c6be594567",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "01b72b62-392f-4826-8f88-9b234d6a38f8"
        },
        "item": {
          "id": "4e11a9e3-3c85-40a3-9615-cec730cb4b78",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "09b23d30-b574-4a60-8c70-8236063106bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b372684-a97c-4029-9793-d31c5e1746ee",
        "cursor": {
          "ref": "bff0628f-5795-4b36-aabc-f9600460bad7",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fe06482a-6307-4892-ba61-77b9d257c450"
        },
        "item": {
          "id": "2b372684-a97c-4029-9793-d31c5e1746ee",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "69afe8a8-0136-4fd2-9e34-8efe32b74e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341aba1b-ae8f-4e96-ae51-53a00875acd6",
        "cursor": {
          "ref": "cb271e96-1c9d-4b92-8246-c2a4d46dbdd3",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "678640a5-7e1d-42bb-a9e7-6964f7a5da18"
        },
        "item": {
          "id": "341aba1b-ae8f-4e96-ae51-53a00875acd6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0baa6958-61cb-4149-bb48-2035a6590946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eacbbdfc-c176-419f-b9f5-e79a940680b9",
        "cursor": {
          "ref": "167c608c-3528-472a-bc29-ef21e8b40a95",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ec1fa3d5-227a-4ba7-bef3-669be6edda9a"
        },
        "item": {
          "id": "eacbbdfc-c176-419f-b9f5-e79a940680b9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2bb5fcc2-49e2-4c7e-99bb-3a10c2dcc9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4466d3-658c-43fb-b470-1a64fca36d3f",
        "cursor": {
          "ref": "9e5697b2-b9ac-4674-abca-a49659adf6c7",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "481def78-0540-423d-b391-f32b4b6a0989"
        },
        "item": {
          "id": "2a4466d3-658c-43fb-b470-1a64fca36d3f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "67cd551b-02c7-4842-9795-c5e5df9a3306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165094f4-d0b5-4c76-9282-1180316511b5",
        "cursor": {
          "ref": "6885e8dd-09b7-42a0-a27b-207898bdff64",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "87ffd557-a618-4091-93b0-3d1869334af9"
        },
        "item": {
          "id": "165094f4-d0b5-4c76-9282-1180316511b5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b3549c24-7b03-4cda-8293-cb307f2b67d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d838b128-a28e-4e76-a9a6-8a03922e26bb",
        "cursor": {
          "ref": "0ae1964f-641a-49c6-b005-a2084788b079",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "95f71865-4d46-4414-a318-57a9eedc923e"
        },
        "item": {
          "id": "d838b128-a28e-4e76-a9a6-8a03922e26bb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "61d5fcc6-77a6-4eb5-954b-735a7e66466d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3488813-4102-4173-bc6c-e79f809e758d",
        "cursor": {
          "ref": "61f11789-1130-40f1-8799-3e1f176e7880",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0c099a11-b689-4257-a6f2-4764e5d43780"
        },
        "item": {
          "id": "b3488813-4102-4173-bc6c-e79f809e758d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1fb55d3b-8e0c-4a3b-9bb4-6b98b747d17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8bbd8c-0d90-48d5-9dcc-8092b7fc28eb",
        "cursor": {
          "ref": "82ee9e0c-7aef-4f93-aa64-3136833e8335",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b16deefa-3007-4d22-84ac-7d320e14f9c1"
        },
        "item": {
          "id": "0c8bbd8c-0d90-48d5-9dcc-8092b7fc28eb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9de599d0-1f2e-45c8-9b22-5e1f7e1e76d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e766bf39-1522-440f-8f88-000c8a649b51",
        "cursor": {
          "ref": "1d315d12-761b-46dc-9ce7-28e2d9a3908b",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b3f23e8c-d29a-4d78-b0da-3bb97834844d"
        },
        "item": {
          "id": "e766bf39-1522-440f-8f88-000c8a649b51",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0c81e274-da68-48d1-b1f0-885a94251acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152d1594-ec04-46d0-9840-d61e6c1954f4",
        "cursor": {
          "ref": "4692fa22-6c3f-4fa3-923e-f44da74ba2cd",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e789e0c3-95d4-4ffb-b7fa-b99586c25918"
        },
        "item": {
          "id": "152d1594-ec04-46d0-9840-d61e6c1954f4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b788819b-5722-43f3-9af4-df5213ecebf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c635b08-48c3-47b0-925e-ebea38ceec3c",
        "cursor": {
          "ref": "82c6db60-cc92-481d-b68c-d23e5e9484fb",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c7f807bf-ab87-4eb4-b1ef-f6211159649e"
        },
        "item": {
          "id": "5c635b08-48c3-47b0-925e-ebea38ceec3c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "908a99d6-158c-479f-ac94-a4d844608887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c326e189-420e-4a08-847c-a759ae0108c1",
        "cursor": {
          "ref": "f7b85106-f51b-4f1f-b47e-07fe786f3f2e",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1fa160bf-e19d-4a28-bf23-ffebaae36dcd"
        },
        "item": {
          "id": "c326e189-420e-4a08-847c-a759ae0108c1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2b65af92-30bd-472e-963f-bcfc9b1561f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5544f7-44c9-464f-8461-60554a30815a",
        "cursor": {
          "ref": "c65671fa-319b-4f21-a3ee-35c4aaaf2ab9",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "db0a23c3-bd5c-4ced-8d22-dfbd209f039a"
        },
        "item": {
          "id": "8a5544f7-44c9-464f-8461-60554a30815a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a2dd7e93-7110-4f83-b728-5c2eaecf5269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84040862-2f76-43c7-8855-ffb547fd5fd2",
        "cursor": {
          "ref": "0785ea36-e81a-499e-bea3-a136be414c44",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fd0381f8-28fe-464e-b2d2-ae0444d536a5"
        },
        "item": {
          "id": "84040862-2f76-43c7-8855-ffb547fd5fd2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f8664c95-e705-489c-ac1c-5e4f414916d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "b44ef26a-cfbe-4e97-9cdb-caba6e904526",
        "cursor": {
          "ref": "4b608421-5bdb-4d34-8f87-28038ad457af",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9f55455a-a543-480b-b1fd-64181f073437"
        },
        "item": {
          "id": "b44ef26a-cfbe-4e97-9cdb-caba6e904526",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f7634c98-ec60-4c51-a468-dc680f097c28",
          "status": "Created",
          "code": 201,
          "responseTime": 2085,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ffa91ada-8890-426c-82c1-fb4cea58be70",
        "cursor": {
          "ref": "833b9bbe-0d4c-439f-b77d-e5ab1fa2b6ca",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "29e253dd-8113-43df-b320-5b773fec56eb"
        },
        "item": {
          "id": "ffa91ada-8890-426c-82c1-fb4cea58be70",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fbaea161-f2db-48b0-a0e6-a850deb79e5e",
          "status": "Created",
          "code": 201,
          "responseTime": 2345,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bed7ad-8e1d-4f3e-ae82-0885dc6f9d93",
        "cursor": {
          "ref": "3170e329-ab00-4550-ae3e-a87f8798533b",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1a72cf6e-e37a-4b36-93c5-26118e889a97"
        },
        "item": {
          "id": "e1bed7ad-8e1d-4f3e-ae82-0885dc6f9d93",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b7b77ab0-fbdf-440e-864a-315473a1ac06",
          "status": "Created",
          "code": 201,
          "responseTime": 2347,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "951d2d18-e7b6-4856-99b1-d6f94a0fe0f6",
        "cursor": {
          "ref": "1a6abead-ae00-43a5-9ddc-ce5086f6080d",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0ee916c5-587d-47ad-80d9-aef79146ed8f"
        },
        "item": {
          "id": "951d2d18-e7b6-4856-99b1-d6f94a0fe0f6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1ba8d0e1-1f0d-4810-893d-1529351c99b5",
          "status": "Created",
          "code": 201,
          "responseTime": 2817,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54941fc-bf00-4641-9f23-b1a4a8ed2afb",
        "cursor": {
          "ref": "e42c6c2c-8b56-4a3f-a45a-287f242c5945",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0f707885-c473-4347-8532-46b92b0b5b63"
        },
        "item": {
          "id": "f54941fc-bf00-4641-9f23-b1a4a8ed2afb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ee65e1f1-a3ac-440c-b32b-7a6cd4545d10",
          "status": "Created",
          "code": 201,
          "responseTime": 2202,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d96eb34-8b0f-493f-9817-e83d995819bb",
        "cursor": {
          "ref": "db245634-cf9c-4fa9-abc6-29d6f16f20ad",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a76ea5d3-f476-4fff-afc5-2b8d6fe49784"
        },
        "item": {
          "id": "4d96eb34-8b0f-493f-9817-e83d995819bb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "65d57cee-9677-4516-816b-56e7d77d5c3a",
          "status": "Created",
          "code": 201,
          "responseTime": 3807,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-15T00:41:09Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-15T00:41:09Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "f7795920-9a7f-454e-b80b-e3639b4bbb00",
        "cursor": {
          "ref": "fab197e9-3ac5-4dd2-8ca8-fa1e8411d0c7",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "eb12e6f1-ef50-45e7-8550-21a82ba2ac1f"
        },
        "item": {
          "id": "f7795920-9a7f-454e-b80b-e3639b4bbb00",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7165480a-afd1-48c1-8e42-fdd9ef9ff45f",
          "status": "Created",
          "code": 201,
          "responseTime": 1839,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253416f6-f93d-4ae8-9298-4be910dcb7a7",
        "cursor": {
          "ref": "eb7e871f-a5d9-4d0f-8d97-ce2eee622278",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a483b9ef-fff3-4c1c-8d4e-fc3e1bf6087a"
        },
        "item": {
          "id": "253416f6-f93d-4ae8-9298-4be910dcb7a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bddafe9e-89df-482a-a303-59eb238d47ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253416f6-f93d-4ae8-9298-4be910dcb7a7",
        "cursor": {
          "ref": "eb7e871f-a5d9-4d0f-8d97-ce2eee622278",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a483b9ef-fff3-4c1c-8d4e-fc3e1bf6087a"
        },
        "item": {
          "id": "253416f6-f93d-4ae8-9298-4be910dcb7a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bddafe9e-89df-482a-a303-59eb238d47ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4cc73c-e7b7-4712-8850-772149765505",
        "cursor": {
          "ref": "bb82f2e6-6035-4dd4-b8c0-005f54ab1b91",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "401e1b83-52fa-412a-ad0a-5a678fd90b6b"
        },
        "item": {
          "id": "ce4cc73c-e7b7-4712-8850-772149765505",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "95404185-096f-4cc2-b92a-1cb9fa92180b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10972801-3f99-41da-ad83-37939b994bc2",
        "cursor": {
          "ref": "19cf3da6-01ab-469e-928e-4c10447d2c8a",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f3400a00-cebd-4637-aaea-cabc2a6e68dc"
        },
        "item": {
          "id": "10972801-3f99-41da-ad83-37939b994bc2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "815f9f24-6262-44e4-b68d-9a41febcd5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 367,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502c9d1b-af28-4ebd-a408-eca56ee6b17f",
        "cursor": {
          "ref": "8b8304ce-c6f1-407f-bee2-05d3de808c16",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7ff3fd29-cc09-49a5-aa04-634993844c96"
        },
        "item": {
          "id": "502c9d1b-af28-4ebd-a408-eca56ee6b17f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b758b075-e19b-4b41-93d0-f2b8bafb2d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82aa2197-d4b8-4650-915d-2345be14d06a",
        "cursor": {
          "ref": "ea4afb09-7685-48e6-a45b-f49e0fe576b4",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7afeb6a9-b4b7-49a4-8344-184e54439857"
        },
        "item": {
          "id": "82aa2197-d4b8-4650-915d-2345be14d06a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "49122196-64e7-4378-8a3b-5886ee89a713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a7e17c-c04d-4d7c-b1e7-2e40f2f50928",
        "cursor": {
          "ref": "d5b9ae63-7063-4a8d-b7ff-ec125c16ef5b",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5bee3242-bc65-4505-95ca-4f84b5e4281e"
        },
        "item": {
          "id": "e2a7e17c-c04d-4d7c-b1e7-2e40f2f50928",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d9f39097-eb38-45e9-aa1c-defe89c98e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf7fd5f-f568-4626-a3b2-6b2a1fad2347",
        "cursor": {
          "ref": "e58cfed3-930f-4f1d-96ea-220794ff8f2c",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "799f3364-3322-48b9-b205-f80120873292"
        },
        "item": {
          "id": "9bf7fd5f-f568-4626-a3b2-6b2a1fad2347",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0e75cf57-23a9-48d9-9a73-78cf3708dc79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5227ad75-23a8-40fa-b1e2-96f1d6990253",
        "cursor": {
          "ref": "3064a072-751f-4854-9e10-f52050a6d915",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bc22d081-2b1b-47d3-bab2-72da5d721d9e"
        },
        "item": {
          "id": "5227ad75-23a8-40fa-b1e2-96f1d6990253",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f74d98e8-bc2f-4827-a0e0-1dbe4578475e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e4c1a7-8029-43c8-a5a0-60f191e56096",
        "cursor": {
          "ref": "6ef894b5-6771-44db-855e-8610619a556e",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "dbcdb5ef-1432-4920-80e1-af2cbaf04c16"
        },
        "item": {
          "id": "32e4c1a7-8029-43c8-a5a0-60f191e56096",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d7086be3-b62d-4739-bff3-a57fb8833659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8e011c-6fea-43bc-880b-2d3e2909489d",
        "cursor": {
          "ref": "1d7c37ac-3c1d-4d5a-bc4d-e8fb15df2fc6",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "44065a88-79c1-4d62-9a3c-1ea82f898126"
        },
        "item": {
          "id": "0d8e011c-6fea-43bc-880b-2d3e2909489d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "01d528a3-b4c1-4a6b-bdbd-2a58669d3440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b926147b-d2f8-4d05-9be3-bb3bef186e79",
        "cursor": {
          "ref": "dd7149a7-2ac7-40aa-a4bc-d1d270ef139a",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "24aeec97-1a5c-4498-8a9e-d22369a8844d"
        },
        "item": {
          "id": "b926147b-d2f8-4d05-9be3-bb3bef186e79",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b0e3c240-50f3-471c-8060-805c033ff76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e45108a-bd28-4444-8469-ecc98a4dd98a",
        "cursor": {
          "ref": "13d0bc22-7892-4200-a5be-166156d3fac0",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3cdf09d2-1bde-47ab-901d-f0e996a71b43"
        },
        "item": {
          "id": "5e45108a-bd28-4444-8469-ecc98a4dd98a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f64945cc-7280-4730-be9d-43bc2a4449db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee34d3a-7492-4b14-bf02-fb075b3a66ff",
        "cursor": {
          "ref": "1cee8f1e-9a33-4f8a-8f15-65eb6d190140",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "09cc9fef-cc09-4c15-96b3-53efcb2556d7"
        },
        "item": {
          "id": "cee34d3a-7492-4b14-bf02-fb075b3a66ff",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "17f4edaa-e418-430e-8cf7-76a024ff041b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c496679-ffa1-46da-b8e2-728262e190a8",
        "cursor": {
          "ref": "8c43c92e-5b03-4a16-99be-129386926452",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "55cdff68-c079-4f96-966e-a04fe988a7eb"
        },
        "item": {
          "id": "6c496679-ffa1-46da-b8e2-728262e190a8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5f8d8aac-eb1e-47b7-859f-ec44653ba11f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16827469-ca6c-46c6-a648-beb2db16270f",
        "cursor": {
          "ref": "4467abcc-a4fb-41e8-9a1e-16b91ba4cfaa",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9e028d25-cbef-4ccb-bf2f-4d2b95686968"
        },
        "item": {
          "id": "16827469-ca6c-46c6-a648-beb2db16270f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "605eab04-4b39-434b-962d-a31d146ef08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356be447-9bf6-4a3c-ad6d-14bed31c18b3",
        "cursor": {
          "ref": "0765b18b-af68-4e5c-b5f8-86d1f640f77e",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "46367035-1d57-49b5-925a-be6e881e031f"
        },
        "item": {
          "id": "356be447-9bf6-4a3c-ad6d-14bed31c18b3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3f62798e-3e14-4bfc-a5ff-43f4b6c63910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80b92fd-846d-4fc2-a328-d84e0e77e46c",
        "cursor": {
          "ref": "f8dfc354-0229-4f70-955a-17a2a8dc26ce",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "66880393-ec71-4ada-977c-acc60e87b85d"
        },
        "item": {
          "id": "e80b92fd-846d-4fc2-a328-d84e0e77e46c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5ca09cb0-c76d-4607-9d79-3d1b50b5c4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3690190a-37e1-4c7b-8d53-b6096767252d",
        "cursor": {
          "ref": "42db67b9-2ad3-41ad-aaf9-dcdf3569804e",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "814eeb16-823f-41a7-979e-6ca5ba972de4"
        },
        "item": {
          "id": "3690190a-37e1-4c7b-8d53-b6096767252d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9ce9951e-f4a4-42c1-b10d-14033d76ab05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62049d07-a9a3-442e-8f69-436b4cc3af1f",
        "cursor": {
          "ref": "84eb78fc-039d-40cf-98af-f24abd61c31e",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4116a4ef-62ae-47cd-b870-9b208f20c7be"
        },
        "item": {
          "id": "62049d07-a9a3-442e-8f69-436b4cc3af1f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a984925d-7f88-405b-9193-de2decd01b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5afe594f-01f3-4e8a-90e5-221e0fd7df95",
        "cursor": {
          "ref": "e8176486-60bd-4006-b77d-6e198b4ed4ce",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4456ef11-bb93-4a51-8e54-4d04b5e27fb0"
        },
        "item": {
          "id": "5afe594f-01f3-4e8a-90e5-221e0fd7df95",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "20d2a8b9-9bd0-4964-b41b-cda0ca83307d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aeb22e9-61cb-4f82-9ece-bdb4f7348b77",
        "cursor": {
          "ref": "9aa684b6-6a41-4026-b67c-b94b06a92d58",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "dcf37a42-7abe-4bfa-8b99-0fdded248f9e"
        },
        "item": {
          "id": "2aeb22e9-61cb-4f82-9ece-bdb4f7348b77",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8576daa4-cc28-4681-b041-774e57e11482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb7bf92-c9e7-4fa5-95f5-4053efd0fdd6",
        "cursor": {
          "ref": "55ff1fc3-4fa7-4aaf-b209-162eb6dcbffe",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a8361866-26c0-441a-b217-be53dfb62db5"
        },
        "item": {
          "id": "dcb7bf92-c9e7-4fa5-95f5-4053efd0fdd6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5fc3ffb1-e14e-485f-bcea-5ba030b2b3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52cd5f7-a687-4a1c-91dd-947c25847cdd",
        "cursor": {
          "ref": "eab61e59-d4e6-47da-b34b-6d4d585cec4e",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "92e6b38d-ea47-4381-b6d4-7c9a142c73bb"
        },
        "item": {
          "id": "e52cd5f7-a687-4a1c-91dd-947c25847cdd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4d59f7e2-6a8a-48a7-9029-95af3a629995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb832828-cca2-46f3-9516-fe0e8ad346b8",
        "cursor": {
          "ref": "22ffacf5-23cf-48f3-9aae-de9d5a8036f9",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d59cda24-1886-459b-8abf-14bfb4a56eae"
        },
        "item": {
          "id": "eb832828-cca2-46f3-9516-fe0e8ad346b8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1fdf7624-3fc6-4fa6-af84-c4fa73862391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e60ee2-330f-4769-8c59-3761cb6467ae",
        "cursor": {
          "ref": "4105176e-68b1-4c75-89c3-9719eeba5b1c",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "70a42c28-be80-4466-bbf2-3b4daa4cfbb5"
        },
        "item": {
          "id": "67e60ee2-330f-4769-8c59-3761cb6467ae",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e955f2db-b7e2-45ff-8f35-13bb7ea6ba60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcae7f6-661e-4fd7-8244-89b619fec046",
        "cursor": {
          "ref": "31449e7e-803a-42ad-97c1-9fb23ef31955",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0fb71c64-47ed-4352-a974-34058a1e243a"
        },
        "item": {
          "id": "dbcae7f6-661e-4fd7-8244-89b619fec046",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "86147f04-ce11-41b3-9a88-cf0f392cb6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7eddec-d7a2-4561-a484-9de5d9809135",
        "cursor": {
          "ref": "bf8e4b7a-f02d-4c56-85cb-9eb6db31e562",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5eabf478-4ae6-4550-b173-d433449246ec"
        },
        "item": {
          "id": "6c7eddec-d7a2-4561-a484-9de5d9809135",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "abcd745b-2aa4-489d-bb62-cfbf3d01fa78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c52f07-6fae-47af-9831-f3ebd9c14b3d",
        "cursor": {
          "ref": "83b28097-5150-45f2-b60a-af0b754e89ac",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "04830d10-44c3-4885-9f44-cafe7c636934"
        },
        "item": {
          "id": "f5c52f07-6fae-47af-9831-f3ebd9c14b3d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5ce2bcad-c8fb-4a00-be6a-cc6707b45d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a5b79c-fa4a-4486-aa4b-12ec47255a22",
        "cursor": {
          "ref": "6a95cf7c-70d4-4aca-9e5a-88b235f3854b",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "329dba9d-2fcf-4a5d-bcaf-7bdf82ee3798"
        },
        "item": {
          "id": "63a5b79c-fa4a-4486-aa4b-12ec47255a22",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9dafeff2-0e60-48d8-94e6-aad31b93c2bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777bf068-88a6-4588-b5fc-dc162ddf2a8c",
        "cursor": {
          "ref": "cdcfa08d-638d-4fc7-8fa7-2a87ec50a8a7",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "729ebb83-906c-4587-838e-6e7608298c9d"
        },
        "item": {
          "id": "777bf068-88a6-4588-b5fc-dc162ddf2a8c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "48f6dcb4-3dc0-47de-91e0-46c5a798fe7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1401ed1-9a07-41f2-89b7-dbf51cb782a1",
        "cursor": {
          "ref": "be317a9b-c86d-429f-a1f6-6df992e9485c",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "93a3ca05-d698-4946-a173-374927e6811c"
        },
        "item": {
          "id": "b1401ed1-9a07-41f2-89b7-dbf51cb782a1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "21701511-5b79-4362-ac3c-aa515f919795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ddc8f8-14b4-4855-a9c6-818b9bab9f7c",
        "cursor": {
          "ref": "f50c87ef-f1c7-4413-b9d8-b12246f83b82",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "91842c6e-e800-4ea1-90c5-7546060da833"
        },
        "item": {
          "id": "21ddc8f8-14b4-4855-a9c6-818b9bab9f7c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e7f9dd03-e712-4a7b-a2a4-c76f7f891b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab1aa7b-4bf1-4fcd-a6f1-b12abf5e1851",
        "cursor": {
          "ref": "582034f5-2032-4439-ad06-f1f4a180e0df",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fbee1614-6890-4266-a890-e12f7acd98e6"
        },
        "item": {
          "id": "dab1aa7b-4bf1-4fcd-a6f1-b12abf5e1851",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c35abdab-ebe6-438a-9e30-dfd5757af87d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "7e51f176-d44c-4294-9594-0be30c47161f",
        "cursor": {
          "ref": "b0936ef4-e781-45ed-9d41-45ded350828e",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fa7da9ea-d3b9-4cfb-a60d-eb4d725190db"
        },
        "item": {
          "id": "7e51f176-d44c-4294-9594-0be30c47161f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b45c449f-0987-427b-946e-b07506a36687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "11b588e5-b788-4d73-b232-cb285d108961",
        "cursor": {
          "ref": "dbbe2cb6-ff0a-46f7-9a5c-dee6c6f8efb7",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c2b2ea9f-6275-4f59-b71d-6676c2af12e5"
        },
        "item": {
          "id": "11b588e5-b788-4d73-b232-cb285d108961",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5751ba0e-37c8-4231-89b2-3440fd29e34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b588e5-b788-4d73-b232-cb285d108961",
        "cursor": {
          "ref": "dbbe2cb6-ff0a-46f7-9a5c-dee6c6f8efb7",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c2b2ea9f-6275-4f59-b71d-6676c2af12e5"
        },
        "item": {
          "id": "11b588e5-b788-4d73-b232-cb285d108961",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5751ba0e-37c8-4231-89b2-3440fd29e34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24271f72-57a0-4bf8-ae7d-c5a8bb64b8ab",
        "cursor": {
          "ref": "3d33c601-a8b4-462a-ba50-1a1d2af1a07b",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "51c3272f-1f17-4712-ba23-abf392d3eaa9"
        },
        "item": {
          "id": "24271f72-57a0-4bf8-ae7d-c5a8bb64b8ab",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "42ef26b7-aaa2-4877-9ef9-5a93ffba198d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5083d428-02bf-41d8-a682-c55929ab5b1a",
        "cursor": {
          "ref": "a0f9b3f4-1068-4af6-a9a1-5283248701d0",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d5be114d-d20f-40c9-a0b9-1933df047d36"
        },
        "item": {
          "id": "5083d428-02bf-41d8-a682-c55929ab5b1a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "caacce9f-a33a-4e9b-9e2c-3325a4ccc5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aafcfd5-a1ac-4bd8-93ff-e16520d3cd31",
        "cursor": {
          "ref": "616d2db7-253a-4013-94ae-fbe3a06e2070",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "212516aa-5a51-470d-9cd3-48dedf4ee61e"
        },
        "item": {
          "id": "9aafcfd5-a1ac-4bd8-93ff-e16520d3cd31",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4a91a22b-3f57-40bf-98a5-e63ef2bc7fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c8294c-7389-4841-8ed7-e77bae0ec064",
        "cursor": {
          "ref": "d487d076-620d-407a-b60e-bb9e6d065024",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fe052fd1-a0c1-4546-b8b8-d88ede3a3124"
        },
        "item": {
          "id": "e7c8294c-7389-4841-8ed7-e77bae0ec064",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ea19fa45-c4e4-48c4-87ed-f6826f7a4b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c24a5c1-601a-4bcb-b112-ece5dbc8ad8f",
        "cursor": {
          "ref": "df515690-0f33-4d4b-9868-4c852c0159e8",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7596ec0c-32c4-4ba2-bc8e-6f9a3ee70a32"
        },
        "item": {
          "id": "9c24a5c1-601a-4bcb-b112-ece5dbc8ad8f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "17d67227-e32b-4807-bfb5-549b8d3a1fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762e4a65-eee7-49a5-a3d0-a51f40b5cc7e",
        "cursor": {
          "ref": "a65496ae-d8b6-4865-bf82-632b6c2d9da0",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a8e46911-6269-4559-883f-82203e15c65d"
        },
        "item": {
          "id": "762e4a65-eee7-49a5-a3d0-a51f40b5cc7e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c18256e6-17ea-4cf4-a17f-c306c51ac418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0b6dfe-b410-4597-8366-4659da33b44b",
        "cursor": {
          "ref": "69ba7102-0ba9-42d6-886f-45d1907c492c",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f22f6c29-d95d-4bd4-9df8-9eddf1a738ae"
        },
        "item": {
          "id": "2d0b6dfe-b410-4597-8366-4659da33b44b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6e175a60-cc7a-4086-88ce-1319405d9909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71dea716-eef3-4ae8-8b9c-80d1f5c07785",
        "cursor": {
          "ref": "0755041a-d1a6-49cd-842c-d33766e9190f",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "08b2bfbd-03a0-4b26-8f81-0305fe26dde0"
        },
        "item": {
          "id": "71dea716-eef3-4ae8-8b9c-80d1f5c07785",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9db4f583-61bb-4963-af24-3d9d11abdf0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b88bd9f-a8b4-4bb2-a73a-84cdc25a51b8",
        "cursor": {
          "ref": "75fafc5f-c318-4229-b205-6b3e0ef8a5ae",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bd2dcd8e-e585-4d52-8259-69cac219e425"
        },
        "item": {
          "id": "6b88bd9f-a8b4-4bb2-a73a-84cdc25a51b8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2f281ed5-38a8-476c-aa5c-2c7da7455b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfdb176-420b-4fb2-b629-9822bc4daebe",
        "cursor": {
          "ref": "f358ffdb-2d9e-4b27-a9be-8e09c606595c",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "575bc892-8878-4085-9a6f-9a03ed981696"
        },
        "item": {
          "id": "edfdb176-420b-4fb2-b629-9822bc4daebe",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "277ead05-8c88-4b63-8a0b-88e97651c3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f047425-bcd1-4f91-827a-4e5e8ee304eb",
        "cursor": {
          "ref": "0e0add77-4ca2-4a58-b1a9-08046695adaa",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "956855ba-82d0-4ddf-a555-2fb020a8cd3c"
        },
        "item": {
          "id": "2f047425-bcd1-4f91-827a-4e5e8ee304eb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "69445859-5d67-4fcf-838c-e17adf4eadd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153799d6-59a3-43f1-a840-7430a5b278e5",
        "cursor": {
          "ref": "4b936843-0c79-4e46-a73b-6b992baf796f",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6e4af441-3282-4f6a-bfc1-5486259c79a1"
        },
        "item": {
          "id": "153799d6-59a3-43f1-a840-7430a5b278e5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d15e8f70-c92e-4126-a960-de812a8d935c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0ab85a-5056-4796-ab4e-e16f31ca2058",
        "cursor": {
          "ref": "115e1ed7-0bf7-4090-b41b-826521614857",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "12391413-4ee1-4586-82a0-4b8302241c6a"
        },
        "item": {
          "id": "4d0ab85a-5056-4796-ab4e-e16f31ca2058",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fcd328ff-edae-4581-a31b-e91330c40442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdeb0ed-c22f-406b-94ce-634783165583",
        "cursor": {
          "ref": "304dab63-b8ad-4972-adb2-a4c07f2f43da",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7b86c250-99aa-4c08-9363-b145e1d03e75"
        },
        "item": {
          "id": "fcdeb0ed-c22f-406b-94ce-634783165583",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d0b8c12d-e226-479e-8bf0-689575997824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a9528d-48e1-4995-ae35-21fa3591134c",
        "cursor": {
          "ref": "7e79cbe2-8406-48c6-8f45-71fe91228c71",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d4da4189-2e45-4150-86e6-82931356b13f"
        },
        "item": {
          "id": "d7a9528d-48e1-4995-ae35-21fa3591134c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "450cc144-956b-422b-b5c6-5b46ea8b20ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5068c219-c790-43e2-bce3-9494b82e174f",
        "cursor": {
          "ref": "89a720ca-b7fb-483a-91ea-41a8c86b91cd",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a4debb08-dbb7-48d5-a223-91d287b88a25"
        },
        "item": {
          "id": "5068c219-c790-43e2-bce3-9494b82e174f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "10c68178-1bff-4c10-b3d5-0e766fa72047",
          "status": "OK",
          "code": 200,
          "responseTime": 230,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "e30348ff-dccf-4c74-a02d-9de37ac9109a",
        "cursor": {
          "ref": "482b8e9b-d0db-4912-a53a-3e7855097bee",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dde0b581-6a95-46ef-910c-1056b9e82266"
        },
        "item": {
          "id": "e30348ff-dccf-4c74-a02d-9de37ac9109a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "583237af-8575-4786-bebb-3d96d3a61170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c663c2-215b-4543-9fdc-47e08700ad6a",
        "cursor": {
          "ref": "cd80e9ff-6a50-4e24-8fcd-e8f7fff6d511",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fe60f84e-e8b6-4c74-bdb5-901b51e6e125"
        },
        "item": {
          "id": "01c663c2-215b-4543-9fdc-47e08700ad6a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "45579288-8c6c-4f67-87f7-1836b817c4bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550ab4bb-de9f-41bf-8a30-90592da75ca8",
        "cursor": {
          "ref": "7c831477-3e17-44a9-b61f-93db431f9f9e",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "360fcb07-f6a3-4a83-beb2-41c340442362"
        },
        "item": {
          "id": "550ab4bb-de9f-41bf-8a30-90592da75ca8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "69398e0b-b866-4b38-90f1-b3a3997308fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a15a2a-3310-4275-88f0-1000b14eef6d",
        "cursor": {
          "ref": "647cde26-2db9-4623-aa7d-44c7df22964c",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "48edf2f0-25a2-4b04-9cf6-5dafc065cdc1"
        },
        "item": {
          "id": "d9a15a2a-3310-4275-88f0-1000b14eef6d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "65a1a95a-e1b1-4deb-9ca5-5006f95a76a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9202df0-6649-4e03-9f5f-e9f83e333afd",
        "cursor": {
          "ref": "1925c447-0b47-469d-96ef-e0049f37bc33",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4ceae1a2-00eb-4812-8c65-68cf2280b162"
        },
        "item": {
          "id": "a9202df0-6649-4e03-9f5f-e9f83e333afd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e6b281e1-33a8-4889-b589-16dbcb48e88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181568f1-5612-4aa3-9077-4c00ab4f1c9a",
        "cursor": {
          "ref": "6a3ea0c9-cc67-463e-bedc-e249da032286",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a5e3219f-ef71-45aa-b39b-5e9835f3a20d"
        },
        "item": {
          "id": "181568f1-5612-4aa3-9077-4c00ab4f1c9a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "330da278-7efe-4d5f-8137-ece78b305fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8040e3f8-6b07-48a4-b6a7-541f8a38b68d",
        "cursor": {
          "ref": "7fef0705-c85b-47d0-8c4c-6b8cbe4baf6c",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9ae0044e-a530-46c6-9b5f-d4b34e6a3719"
        },
        "item": {
          "id": "8040e3f8-6b07-48a4-b6a7-541f8a38b68d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "75a73ab2-b4bb-46ca-9057-58edeb5865a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d80a49-9b54-4394-a39f-28521c61e087",
        "cursor": {
          "ref": "dd0a3e80-a0ee-4fa7-af43-878935a13b07",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d36c8572-8d5f-4220-9c60-2267ca7608d6"
        },
        "item": {
          "id": "c2d80a49-9b54-4394-a39f-28521c61e087",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f5e1e0c4-f3f7-4746-9a9e-0654c69d1095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4334f1-1a69-465c-be4c-b63f4fb48f55",
        "cursor": {
          "ref": "6f53ee9e-0bb3-44ca-b4b3-49062d17416c",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1e740ddd-ed38-4fea-9637-624e6e3cbb4b"
        },
        "item": {
          "id": "2f4334f1-1a69-465c-be4c-b63f4fb48f55",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9e450c28-1be5-4e65-8a25-4352c7d1699f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0f1ff7-04d1-41f0-aa3a-ef28840ebfbe",
        "cursor": {
          "ref": "3e071d60-61b5-45d2-b970-3587139e9add",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c0e82895-a5e7-48b3-8358-b0ab52d11afb"
        },
        "item": {
          "id": "8a0f1ff7-04d1-41f0-aa3a-ef28840ebfbe",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7fe67eea-25e0-401b-bdc8-f6b09895ca2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab6a5b4-5235-4423-9cea-022b1b68d3c8",
        "cursor": {
          "ref": "c9770521-dd42-4fe0-8734-3bf89084f829",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "43bf79a9-97fb-4638-b576-5aeffd2e0ece"
        },
        "item": {
          "id": "3ab6a5b4-5235-4423-9cea-022b1b68d3c8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7f5e6ffa-5b26-4664-8abc-184028733782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dab822-354d-4968-8b51-b511144472b9",
        "cursor": {
          "ref": "70fd286d-c1bd-4034-88df-e8006119af89",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ff597cb6-7d5d-4c07-860b-d5e53a02bad1"
        },
        "item": {
          "id": "d9dab822-354d-4968-8b51-b511144472b9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "25f501ee-1e82-411d-9eb5-0f893d18a9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf449bd-df37-4b83-8d4f-ff53dd820769",
        "cursor": {
          "ref": "7db381e6-d2ff-4cfd-b585-ee041d5a3cc3",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c1f99cb4-c044-40f4-ae6e-61c8b272aa78"
        },
        "item": {
          "id": "ccf449bd-df37-4b83-8d4f-ff53dd820769",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7a3f1f60-1276-4916-aaaf-d634cfab2600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfc50f0-5f98-4a72-9c02-b3ae20486a00",
        "cursor": {
          "ref": "6614817b-6738-407a-a047-f2731e7766e6",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0dae44ba-47be-413c-bad7-fbc878efd3a7"
        },
        "item": {
          "id": "8dfc50f0-5f98-4a72-9c02-b3ae20486a00",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2379dd62-0185-4899-a094-66758061cd6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d206d49-b24a-452f-b2d5-5b431a48fd0f",
        "cursor": {
          "ref": "68acb9f4-419c-4b35-8c60-c9d7e6c0cbe7",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "19b6ab15-1335-4d90-8386-4a8ac54e5f4b"
        },
        "item": {
          "id": "2d206d49-b24a-452f-b2d5-5b431a48fd0f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0679ea2f-045e-4137-9c8f-16aaf00d95a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9440a6be-2143-4409-a465-d6597ab69545",
        "cursor": {
          "ref": "07059eb8-7bb9-4a0c-a218-10cf2568f721",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9831240e-17e2-4dc2-a981-d7b9b392faba"
        },
        "item": {
          "id": "9440a6be-2143-4409-a465-d6597ab69545",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d7c4f4c0-fad8-4f48-aa7d-7088029860a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9203b3cd-66cf-417e-bad0-b06d1aefc4f9",
        "cursor": {
          "ref": "7f4ef42e-8120-472b-b4c0-1f7da004a7f3",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "89f2da77-2345-4b9f-b41a-68bc1616a070"
        },
        "item": {
          "id": "9203b3cd-66cf-417e-bad0-b06d1aefc4f9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ea771226-54fb-4327-a8e8-455176db5022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8342ef61-f746-462e-8bec-cae0dd53591b",
        "cursor": {
          "ref": "f59626df-0191-4411-9c6e-1b5d0f6b79c0",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2e42deae-0300-48fc-a059-8d1fff3c3730"
        },
        "item": {
          "id": "8342ef61-f746-462e-8bec-cae0dd53591b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9178a1fc-089c-48c3-aa12-a08f6330f0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee4c074-39db-4758-8e16-a57affae11b1",
        "cursor": {
          "ref": "e1f05106-1de5-446a-8076-5937fb647d8f",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9d14a992-b969-4aae-892c-30b48d450895"
        },
        "item": {
          "id": "4ee4c074-39db-4758-8e16-a57affae11b1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "db916333-5bfa-41c9-90cb-f1120d57ddf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b1b0c8-5ead-4e64-a398-9f95f5ad7c60",
        "cursor": {
          "ref": "78c428a5-1bcd-4abc-9a9c-e0c39b0beb36",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "00b1b146-dddf-4f88-9021-7cce52341c10"
        },
        "item": {
          "id": "98b1b0c8-5ead-4e64-a398-9f95f5ad7c60",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "240a39ad-e9bc-41ae-86e3-c96a214240f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f266c016-8dba-4c25-9d60-a1ea592bbb19",
        "cursor": {
          "ref": "7c69780b-b2aa-462c-860a-60be40b9e90b",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b23d637e-7b5f-4423-b60d-6d35913416f1"
        },
        "item": {
          "id": "f266c016-8dba-4c25-9d60-a1ea592bbb19",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6dbeefdb-9e86-46b2-84fe-5733cb7d04ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fcd3de-3da2-4f02-84ac-386414a65c28",
        "cursor": {
          "ref": "4c7c6c93-e891-437b-b3db-f04e95ce7de1",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "208d70c3-5edf-4c92-b367-8a767230eef9"
        },
        "item": {
          "id": "b5fcd3de-3da2-4f02-84ac-386414a65c28",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f272f65b-bb76-4c09-9393-b145cc822397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6d6d32-062d-4754-a22a-d35379bfefc9",
        "cursor": {
          "ref": "e9e8efc0-21de-4839-af77-27d3ae1e9ecc",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "cb1de369-051f-4efa-8d54-5452d1ecfafd"
        },
        "item": {
          "id": "fe6d6d32-062d-4754-a22a-d35379bfefc9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5cd4f465-c768-43f1-9c98-73434905a8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f9aeec-0e73-4481-9f82-6cb58d7a624d",
        "cursor": {
          "ref": "e0ba0b42-79b3-4a45-a644-d0c273935a05",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fd972035-8558-4f9d-a357-b2ec14b71438"
        },
        "item": {
          "id": "c9f9aeec-0e73-4481-9f82-6cb58d7a624d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8dbe85c3-9d44-4d16-8140-63fff2d22c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82b3746-2839-4b0f-95f7-27eac9e11daa",
        "cursor": {
          "ref": "f6080a0f-e438-43db-83e4-caa5d2319ebf",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "28af3147-eb5e-4615-9f4e-89e5bb757cbb"
        },
        "item": {
          "id": "c82b3746-2839-4b0f-95f7-27eac9e11daa",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "57bbd0f2-e957-4630-9029-0b8498f133a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a8cc5e-6d49-48db-bb66-b56e13acf468",
        "cursor": {
          "ref": "6d3e2b72-9261-4cf5-8cad-08065c574f4f",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c596a44f-5a3a-4332-9f89-a7c22843fd67"
        },
        "item": {
          "id": "60a8cc5e-6d49-48db-bb66-b56e13acf468",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "cf890bcc-1bf4-4ca6-9d9f-a2f3c03ec118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf681b16-672d-484b-8fc5-f7b7b720f434",
        "cursor": {
          "ref": "5280ce68-a7b2-46ea-8253-d78e4877529c",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8dd120ef-6c56-4958-93b4-d6b6ae075f18"
        },
        "item": {
          "id": "bf681b16-672d-484b-8fc5-f7b7b720f434",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ebba08a3-9f87-4c7a-91a4-a448488ba285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476e4b63-d5a2-488b-b0d3-645763b71882",
        "cursor": {
          "ref": "15195761-9703-4de6-a0d1-abde2cbf860d",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fb956e25-f787-48de-b3e6-d0e37ca2a8b4"
        },
        "item": {
          "id": "476e4b63-d5a2-488b-b0d3-645763b71882",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "70022e27-4839-49d3-9317-b1d6e5d0dd9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4449f1f0-a2d0-4389-b3bc-18a1386a46ca",
        "cursor": {
          "ref": "1b407532-e96e-48ca-8ddd-6bac753035d1",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2ea4e6db-724f-409f-9209-79696bf6904e"
        },
        "item": {
          "id": "4449f1f0-a2d0-4389-b3bc-18a1386a46ca",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4d6af185-fbd3-40b4-ab73-6dc59f85d620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3d7423-540f-45a8-9928-e81475504872",
        "cursor": {
          "ref": "9c4cf8d5-926b-4879-9aa7-7a74d0a8c31e",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fb5c301d-5a38-4ebd-a903-2fffbfd200f8"
        },
        "item": {
          "id": "0f3d7423-540f-45a8-9928-e81475504872",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "52751157-37b2-4a95-aee5-1b8a2153e2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3018a1-4826-4904-8010-1a0db3d51f2e",
        "cursor": {
          "ref": "8e14f312-d4ca-445c-a620-08f898fee8bf",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b7f90f7e-fd7d-45a6-ad4b-63081664fd59"
        },
        "item": {
          "id": "2e3018a1-4826-4904-8010-1a0db3d51f2e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7308dd05-b1be-415b-93e8-3509ad02a391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368d2056-9bcd-4692-a4c4-5d132b9176d9",
        "cursor": {
          "ref": "c3ea779a-00cd-4628-b8b1-e1d2eca744f0",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d89f4491-c502-4a58-9f9e-a58ca94393ad"
        },
        "item": {
          "id": "368d2056-9bcd-4692-a4c4-5d132b9176d9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c29cfe63-a87b-4383-8161-0c9ac5801e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8eaf3b9-d677-49cb-a365-0b24bac60abf",
        "cursor": {
          "ref": "ce90e9ca-f738-4565-a52b-e91551a14bb0",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "84fe07f0-52aa-4999-badb-1b2133a6686e"
        },
        "item": {
          "id": "b8eaf3b9-d677-49cb-a365-0b24bac60abf",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "28af5a23-f6b5-4c08-a10f-157786dea9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621ad83b-98d8-421e-b703-839ddded7a4f",
        "cursor": {
          "ref": "4a47dd53-4f71-47b6-8001-d5a89bf7d5a3",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cf4822d7-9efa-4188-bb32-9dc3fe43472d"
        },
        "item": {
          "id": "621ad83b-98d8-421e-b703-839ddded7a4f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "add4e292-cbee-49d5-973d-26b5c614a738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14db3caa-1e71-41db-922b-cd1e6dcfbd92",
        "cursor": {
          "ref": "f12593b2-ae1c-4291-aece-16415af61949",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1198f480-228b-4341-822c-75ab44352289"
        },
        "item": {
          "id": "14db3caa-1e71-41db-922b-cd1e6dcfbd92",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "67032047-8abe-46df-b319-d260564d8d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ccb775e-9c36-4598-8a8f-2e42d9369067",
        "cursor": {
          "ref": "265efe95-ab62-4f71-a4e1-61fb935d95a2",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d0dc9e1b-e7d2-40d5-9443-f535d5e71fe8"
        },
        "item": {
          "id": "0ccb775e-9c36-4598-8a8f-2e42d9369067",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8b5cb3ab-c3e7-463c-8112-7067964a89c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462305bf-7353-45b8-b06d-5aed90bd6381",
        "cursor": {
          "ref": "008bba8c-eaf3-4a5f-8348-e25b48713fda",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b357f75d-2d5f-49a6-9ffd-02d64d055cfa"
        },
        "item": {
          "id": "462305bf-7353-45b8-b06d-5aed90bd6381",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c7c06b0e-589d-4b86-ad1a-2ab73800cd27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5eb510-d890-4b30-9973-b3a401eb3ea1",
        "cursor": {
          "ref": "07d09af8-f021-4f34-893a-ac0f2b51809a",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "62aaf88d-2240-42a4-ae69-ba4a84ce7063"
        },
        "item": {
          "id": "ca5eb510-d890-4b30-9973-b3a401eb3ea1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8132bc12-4580-4617-b3d4-1bc823aed3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457c3cd4-3c20-426a-8bca-8f7d5dbf5fcb",
        "cursor": {
          "ref": "f40d5983-e881-4c37-abea-f316680440a6",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "659a24ad-0697-421f-a148-b1620211f98e"
        },
        "item": {
          "id": "457c3cd4-3c20-426a-8bca-8f7d5dbf5fcb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "33bf2a7e-2e5b-4605-9905-c434d8eae2bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5959c1-4379-4c4b-b495-f381999f8499",
        "cursor": {
          "ref": "09ace9a3-d443-4353-9a2f-6b3d80576bb6",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "707b84ef-b967-4695-8348-571802592464"
        },
        "item": {
          "id": "da5959c1-4379-4c4b-b495-f381999f8499",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6fb72ab8-dbd1-49f7-a9c2-57662fa87b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0dae0a-cbeb-4234-b9e3-0de3784bb921",
        "cursor": {
          "ref": "aea8105f-1222-4a33-92f9-0ca927f945b3",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "27cb13d1-ea6e-4dc2-88ec-dc6f89c441e7"
        },
        "item": {
          "id": "5a0dae0a-cbeb-4234-b9e3-0de3784bb921",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6aae0d76-bfe5-4c02-b8d9-54f5a23dadf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ecc3cea-e33a-44c3-9d4b-6ba91975e6d7",
        "cursor": {
          "ref": "e226392e-2272-4153-afe5-1b9be16e79cf",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ceeeebf0-fd33-48b9-9c8b-a5aafefbb86a"
        },
        "item": {
          "id": "0ecc3cea-e33a-44c3-9d4b-6ba91975e6d7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "25159974-db52-4d58-9acb-a139607e1ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d160ebe-4b75-40c8-a4d7-3bb14bff4abf",
        "cursor": {
          "ref": "3a99429f-66f0-48c6-ad2d-aba4db70dc14",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "24467cba-694b-426c-a111-fda1912007a7"
        },
        "item": {
          "id": "5d160ebe-4b75-40c8-a4d7-3bb14bff4abf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "33e4ee72-ae3f-4210-b9ef-33859fed82c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a760755b-ba25-4007-bdd0-0d29835fc347",
        "cursor": {
          "ref": "300d8ad6-bbbd-41f6-9a90-3b5f0e03b5cb",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "70066c7b-ce84-46fc-bcff-09e3e23b44b7"
        },
        "item": {
          "id": "a760755b-ba25-4007-bdd0-0d29835fc347",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6a75cf07-fdcd-4e45-b95c-2886cd8a4cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3da6bae-a3f7-41fd-a90a-a81675061f12",
        "cursor": {
          "ref": "ffda8e98-7977-4e24-958c-f10842a7cab3",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "68e302a2-019e-47fb-901a-597fb3cd3168"
        },
        "item": {
          "id": "b3da6bae-a3f7-41fd-a90a-a81675061f12",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d307e7dc-c94f-4e66-a906-0a40e6debc41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523b0fbf-1e9e-4c6e-aa6a-2b1db3ed9e31",
        "cursor": {
          "ref": "9b2825fd-2d57-4b40-ab43-1d56ebd0b4ac",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e81d805c-af9a-4abd-a192-04806583b238"
        },
        "item": {
          "id": "523b0fbf-1e9e-4c6e-aa6a-2b1db3ed9e31",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f8d40be8-e914-4488-a039-7266f1eecfc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578026ae-c84d-408e-9700-b90e12bf17c8",
        "cursor": {
          "ref": "f2b6adb2-20f7-4ef5-b274-0717d74a328a",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a195a12f-12f4-49b5-8e07-6796dd511cb4"
        },
        "item": {
          "id": "578026ae-c84d-408e-9700-b90e12bf17c8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4c51214f-43dc-4446-b299-bc3dfe0726ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15491015-d97e-44d9-993c-a803b5c248e0",
        "cursor": {
          "ref": "788cb3b8-4902-496c-8dc3-a7580495a197",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9824ffa9-87f1-4bc4-b5d1-e35949cdb892"
        },
        "item": {
          "id": "15491015-d97e-44d9-993c-a803b5c248e0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b0d7bb64-4bbd-4dce-8207-b7fa18332a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116150c0-19ee-4b74-b650-c29d4ca4bced",
        "cursor": {
          "ref": "abf1235b-d340-4ad5-acce-f03339ebe4b8",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8ebdcb71-30db-41ba-a16e-bc03e1731cc9"
        },
        "item": {
          "id": "116150c0-19ee-4b74-b650-c29d4ca4bced",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d319a5bf-f0c0-477d-b905-fdb3d64e4d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbd40b8-653a-4bb5-bfb9-f91d0dcc198c",
        "cursor": {
          "ref": "a9599fce-8e21-4943-b36a-124be4376da7",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "16c59a47-d95a-4357-b1cf-3f5492769b59"
        },
        "item": {
          "id": "adbd40b8-653a-4bb5-bfb9-f91d0dcc198c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "994da8b2-6cee-4cd0-b7e2-3b16f5d1319f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c55fb7e-7048-4bd0-9740-6b8e887466c1",
        "cursor": {
          "ref": "9262e566-4f8c-4a82-b15d-a7e2bfe81ad9",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "76257ad7-3eb3-48ba-9ab8-a93a32d33843"
        },
        "item": {
          "id": "0c55fb7e-7048-4bd0-9740-6b8e887466c1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0f7062ec-ced2-4d16-99f8-0488900c13ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eee0f11-fd09-4cad-a1f4-223607a1a453",
        "cursor": {
          "ref": "eaf66748-cdef-4f1d-be18-8a016f581ce4",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "70219eaa-b7d1-4bbc-b7a6-caf2c5e292de"
        },
        "item": {
          "id": "5eee0f11-fd09-4cad-a1f4-223607a1a453",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "218cbd0d-5275-4055-a549-f8ca29ca0276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b8f860b-7f7b-447e-ab80-23d9233597b6",
        "cursor": {
          "ref": "099c52f0-8b42-4555-9172-ed4da5039f53",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ae627925-fb1f-4db9-91bb-08902283ddc7"
        },
        "item": {
          "id": "6b8f860b-7f7b-447e-ab80-23d9233597b6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5465b43f-583f-4633-a688-8751ff7f8ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7e6665-37b3-41b6-bcbd-0770a4447c4f",
        "cursor": {
          "ref": "ad6f045e-e55c-4fc3-af80-6144b4f11c7d",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9c46726c-1b7e-468f-a25a-61f332889190"
        },
        "item": {
          "id": "cb7e6665-37b3-41b6-bcbd-0770a4447c4f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "73704400-f712-492f-9a9b-6789b9773880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16f34ef-db12-4620-9599-ba377c547159",
        "cursor": {
          "ref": "36319720-d198-4fc9-8076-b27900aaa77d",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "008693e2-ae14-4fc3-97d2-f91c62b5ff7c"
        },
        "item": {
          "id": "a16f34ef-db12-4620-9599-ba377c547159",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8d9875d4-0b02-42ff-9e39-9b639ea3220f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc303837-2bf5-471c-9bf7-1f3625b227f0",
        "cursor": {
          "ref": "b38013d0-f496-403e-b43b-2158bf0c75f8",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2fd5f193-027f-4fc7-b087-2d32384b0070"
        },
        "item": {
          "id": "fc303837-2bf5-471c-9bf7-1f3625b227f0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ae0792cb-e27b-43e2-a1ff-83bad9e5e7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d476675-fc1e-4119-a72d-83124776e79f",
        "cursor": {
          "ref": "8530dee9-1b69-46e9-9639-259c9460bfa6",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9d504785-d917-468f-a97e-cb8c59716211"
        },
        "item": {
          "id": "9d476675-fc1e-4119-a72d-83124776e79f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "199f7571-4a3a-4d3f-8d78-0bc3d8b5c728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe22c4e-7969-4e71-b71d-e4f72d4a5179",
        "cursor": {
          "ref": "3ac5f946-0ff8-4b9b-8ba6-ca7ed793ee02",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bac7db8e-23b3-4b6d-b78b-b5a0357e9111"
        },
        "item": {
          "id": "bbe22c4e-7969-4e71-b71d-e4f72d4a5179",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "aa497425-3685-4106-ba39-4af1435ec871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bd6912-6df0-4f17-a63a-ef225683dc92",
        "cursor": {
          "ref": "8e3aa423-9c3a-4867-80f7-0010a5d73991",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7259d928-6f27-44ef-baf0-1e228ebd0ecf"
        },
        "item": {
          "id": "79bd6912-6df0-4f17-a63a-ef225683dc92",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b673b9c7-32a6-48b2-8eb5-7fa26f0a2421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc9b708-23bd-4b3a-9717-5df51785d7aa",
        "cursor": {
          "ref": "c94adf90-d7d1-4e8f-abf0-5d25ea10325b",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bae81cff-b734-4cde-84bd-87c057751d2e"
        },
        "item": {
          "id": "9fc9b708-23bd-4b3a-9717-5df51785d7aa",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "137c8308-bd43-409e-bdcf-4905866c1d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba1e454-1ac4-46f7-a235-2bcc2df98a61",
        "cursor": {
          "ref": "efeb9a13-c86d-4c42-a666-5c7784529540",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ee3dc3dc-11e3-4908-8244-fe863f19a796"
        },
        "item": {
          "id": "cba1e454-1ac4-46f7-a235-2bcc2df98a61",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4a582ba7-06e5-4253-8976-7bb1109b9cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3a4f3a-2b68-47e2-b94c-df2ed7751f6e",
        "cursor": {
          "ref": "a063a753-66d5-43fc-a676-0b8cb15bea90",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "111573af-4e5f-4631-95b3-fca610985407"
        },
        "item": {
          "id": "2b3a4f3a-2b68-47e2-b94c-df2ed7751f6e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "67f36a8c-4e96-463f-a822-e63173efcc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7634c97-ef71-4648-9c4d-0512dc562314",
        "cursor": {
          "ref": "cd5160b5-dbf8-4c76-8468-9c5848ec6820",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9ad3e1f8-61c5-4af9-857e-ebf7c7870f17"
        },
        "item": {
          "id": "c7634c97-ef71-4648-9c4d-0512dc562314",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2831a61b-3da8-43a9-baaa-d19831c8f091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59fa17d-5bf4-4054-89c1-e5d28c014ce9",
        "cursor": {
          "ref": "8a14f44d-0d66-4757-9866-268e941bf49d",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4807fdba-845b-4757-884a-49bb667cd5d9"
        },
        "item": {
          "id": "a59fa17d-5bf4-4054-89c1-e5d28c014ce9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2d9711a5-ddf7-4846-bc16-5572e3698760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3299908d-5128-42af-a48b-f2d91674c4c5",
        "cursor": {
          "ref": "0a52cc1f-ec4d-4153-9e6c-1cc111d0c439",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7fd665e0-65fc-4900-8ccd-f68ee7bbab03"
        },
        "item": {
          "id": "3299908d-5128-42af-a48b-f2d91674c4c5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2485d6ff-23c6-4426-8bad-411d8e4734fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b14c1b-fd44-480a-b71d-76a4a58dbcec",
        "cursor": {
          "ref": "98cae845-fe98-4c4b-9ba2-d51856f8a53b",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "dc4cb769-ec62-4b50-9b5a-b7c1cc1a3e0f"
        },
        "item": {
          "id": "e9b14c1b-fd44-480a-b71d-76a4a58dbcec",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c74ea0f5-4a16-423f-b8fb-7fd4e4af14fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cc6475-db85-4e8a-90e8-28d5c99586b7",
        "cursor": {
          "ref": "c5ed2872-38b7-4cec-ade2-5e1186961f08",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "df12fb43-20a9-418f-a6dc-6cd83757a3c2"
        },
        "item": {
          "id": "30cc6475-db85-4e8a-90e8-28d5c99586b7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5628ca6d-d263-43fb-a0d3-44ffb3bac350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76491525-0919-4a51-ae1f-2a4115d92f15",
        "cursor": {
          "ref": "48aa24c4-4d6b-4645-a2ce-a75a9c8be20a",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f5c32ad1-592e-48ad-82df-6c45e991d722"
        },
        "item": {
          "id": "76491525-0919-4a51-ae1f-2a4115d92f15",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "26148b19-5ad4-4f42-a876-8e1a4ba69bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d5ef0a-bc53-45b3-98cc-8115081fd862",
        "cursor": {
          "ref": "587908e8-21d3-4ce3-9b52-6e3a693532eb",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "294d2788-4d3f-42f2-81b4-e0c561cbd1eb"
        },
        "item": {
          "id": "c7d5ef0a-bc53-45b3-98cc-8115081fd862",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2a2c6c9e-a7d0-4b77-adfb-cc1ee5d4c128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea9c515-e9a2-4006-a4e2-8522b8ce29a7",
        "cursor": {
          "ref": "f981ed66-b806-4305-92da-2bfc507832e1",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "92012fe9-72fa-42d8-becd-97481d10a361"
        },
        "item": {
          "id": "bea9c515-e9a2-4006-a4e2-8522b8ce29a7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b36bf312-8a8f-41fb-a8f8-8d088a026411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b31879-6430-4b46-9beb-16573f58db6a",
        "cursor": {
          "ref": "d85bd803-a57f-4be6-b253-280c552dba6a",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2545bed1-ae7e-4d03-83fc-1b9fd470bf2a"
        },
        "item": {
          "id": "d7b31879-6430-4b46-9beb-16573f58db6a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "880aa4ac-0f2a-49b3-be9f-1a3e11c87ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9d37ce-83e8-4b21-b01d-e9bcb9f18a5e",
        "cursor": {
          "ref": "8e09035a-4dc0-47a2-b5f5-82e786d7e953",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "111673da-462a-438e-8a5d-864d5c7d7d78"
        },
        "item": {
          "id": "dd9d37ce-83e8-4b21-b01d-e9bcb9f18a5e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "60d8b304-e2bb-4460-bf7d-a7b0f7f22343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dab23f5-9a0e-4267-a69d-99540473aa6a",
        "cursor": {
          "ref": "404fcde0-019c-4d98-997d-aca7170fea3b",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "59accfbc-5993-4df7-981b-fd625e1cc92c"
        },
        "item": {
          "id": "5dab23f5-9a0e-4267-a69d-99540473aa6a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1cec0f0e-60aa-42f4-982c-04a0265480b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932d59b7-6c46-4ced-b842-ce631c29494d",
        "cursor": {
          "ref": "c3927393-489f-4083-89e6-fa6fb3f1e458",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3007f538-33bb-411b-ae32-a2f1f21baba0"
        },
        "item": {
          "id": "932d59b7-6c46-4ced-b842-ce631c29494d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6c1d9007-ecb1-4f8e-b3ea-59ef15933ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f4f900-f857-47df-ab87-717353fcf633",
        "cursor": {
          "ref": "1e7ebc3b-4334-4d03-8d57-c72255c31c11",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9f22f749-0a3f-4968-b733-87302468f7d7"
        },
        "item": {
          "id": "b1f4f900-f857-47df-ab87-717353fcf633",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b158297a-28dd-4dfa-aade-a9603315e3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536cb667-1a23-4afa-a7fa-826863421657",
        "cursor": {
          "ref": "590fb25f-ff0e-4c97-ac9d-bf92883500a1",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "117e8376-883d-4094-b10d-7f4958c3122c"
        },
        "item": {
          "id": "536cb667-1a23-4afa-a7fa-826863421657",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "23706fb2-cced-47ed-b827-e80c79be8a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e482420-b22f-483f-8bfa-bface7316984",
        "cursor": {
          "ref": "b3741bba-5c7e-48ac-a095-1a49ca04f670",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cc00df57-42a5-44ca-bdfe-717cb2add50a"
        },
        "item": {
          "id": "9e482420-b22f-483f-8bfa-bface7316984",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ec78af43-bc53-4599-8925-fe94c21e8897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ea8272-ef36-46ad-9651-73531745deef",
        "cursor": {
          "ref": "dc57d828-6d1e-4606-a391-e1173c3f91b9",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "83fe83f5-ba0a-44fc-99f7-a9b3aea2fa10"
        },
        "item": {
          "id": "60ea8272-ef36-46ad-9651-73531745deef",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6f2ba902-e41e-4021-8c03-8ddcb24f2d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a492429-e490-4962-99a3-844ca30f5c37",
        "cursor": {
          "ref": "3c324dc4-665f-4916-9afb-bddb37b898d8",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "451be953-d906-4289-81a5-007421755b7c"
        },
        "item": {
          "id": "9a492429-e490-4962-99a3-844ca30f5c37",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4c5a5d6e-ec6d-4690-88ac-c97add9b5808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714ba818-a232-4611-89ea-72ce782c9c6f",
        "cursor": {
          "ref": "bef08340-35a5-43e4-b345-ea731cb7b366",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "681a96c3-db8f-4aa6-a99e-67081a2f8724"
        },
        "item": {
          "id": "714ba818-a232-4611-89ea-72ce782c9c6f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1ffa6cd2-216b-4602-b17c-0512cc8ec69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7e864d-0cbe-4f15-bc09-4464f34895c4",
        "cursor": {
          "ref": "ba19d090-2f79-4f6c-b7df-55afffddbbc3",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f21d575c-56d0-4910-a470-47dec1deee55"
        },
        "item": {
          "id": "ba7e864d-0cbe-4f15-bc09-4464f34895c4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7073d7d3-2083-456e-bb6f-0673abcb78c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6ead4d32-2a7b-43c2-aeb6-6c4065536c08",
        "cursor": {
          "ref": "766a63cb-fde8-46f9-9ace-9d03006b02c0",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "978c2718-7698-4941-8ab0-15cd8c13f3a0"
        },
        "item": {
          "id": "6ead4d32-2a7b-43c2-aeb6-6c4065536c08",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e73a698f-fc64-4c0f-8010-b6bea89f04c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "559ab519-2007-46ba-b3ef-5b9d38a06c91",
        "cursor": {
          "ref": "20c0b73c-43b8-474f-8fc0-0a9019faf3af",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "687de72e-b672-49df-a0f6-e014de8d0144"
        },
        "item": {
          "id": "559ab519-2007-46ba-b3ef-5b9d38a06c91",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fdac183e-dfdb-49e3-801f-62f8f4cad9c2",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e8fcf1-fd98-40f4-b71a-937713342f26",
        "cursor": {
          "ref": "ea8c69a3-06fb-416c-bf25-659c623bfb50",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "cdf3fe98-5ec6-4d53-a70e-51431d84303a"
        },
        "item": {
          "id": "b8e8fcf1-fd98-40f4-b71a-937713342f26",
          "name": "credentials_verify"
        },
        "response": {
          "id": "760a5531-f3a4-47aa-8a0c-ac8e26dd521f",
          "status": "OK",
          "code": 200,
          "responseTime": 2197,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "70db7919-b309-4003-a20e-703fc167d802",
        "cursor": {
          "ref": "46b03999-a1d8-4712-be33-6aada04a60d0",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0cf597ca-9e83-40f9-b2c1-dd4d83c8ff25"
        },
        "item": {
          "id": "70db7919-b309-4003-a20e-703fc167d802",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8edaee23-3380-4b72-9885-8f1e4870da46",
          "status": "OK",
          "code": 200,
          "responseTime": 3166,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "692b6c2f-d46d-45b8-b6b0-96ec4217709f",
        "cursor": {
          "ref": "868d286f-ae1c-4976-b255-d0ddffd26bac",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6ce25f48-b0ab-40ff-9e14-7a772112af97"
        },
        "item": {
          "id": "692b6c2f-d46d-45b8-b6b0-96ec4217709f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2437c145-b560-49c0-81f5-4732e6f5b948",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "692b6c2f-d46d-45b8-b6b0-96ec4217709f",
        "cursor": {
          "ref": "868d286f-ae1c-4976-b255-d0ddffd26bac",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6ce25f48-b0ab-40ff-9e14-7a772112af97"
        },
        "item": {
          "id": "692b6c2f-d46d-45b8-b6b0-96ec4217709f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2437c145-b560-49c0-81f5-4732e6f5b948",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "692b6c2f-d46d-45b8-b6b0-96ec4217709f",
        "cursor": {
          "ref": "868d286f-ae1c-4976-b255-d0ddffd26bac",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6ce25f48-b0ab-40ff-9e14-7a772112af97"
        },
        "item": {
          "id": "692b6c2f-d46d-45b8-b6b0-96ec4217709f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2437c145-b560-49c0-81f5-4732e6f5b948",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "087d2a48-3a25-4be1-8c92-b48697d3754d",
        "cursor": {
          "ref": "341e776d-58f5-40db-b711-45bcaf1a63d0",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "328ac1d2-2ff4-46a7-a5a6-ec7920b02a44"
        },
        "item": {
          "id": "087d2a48-3a25-4be1-8c92-b48697d3754d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a5531547-fa7c-4a68-9b66-0d4abfb714e2",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "35c4a92c-2ba4-424b-83cc-de192e54cf4e",
        "cursor": {
          "ref": "ebdbd53b-02e8-447d-92e4-65c44beb6ab9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a51c9884-233d-4c53-8c4e-207982d693f7"
        },
        "item": {
          "id": "35c4a92c-2ba4-424b-83cc-de192e54cf4e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2fed38e8-3215-405e-9582-5d638f7bd485",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "35c4a92c-2ba4-424b-83cc-de192e54cf4e",
        "cursor": {
          "ref": "ebdbd53b-02e8-447d-92e4-65c44beb6ab9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a51c9884-233d-4c53-8c4e-207982d693f7"
        },
        "item": {
          "id": "35c4a92c-2ba4-424b-83cc-de192e54cf4e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2fed38e8-3215-405e-9582-5d638f7bd485",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c181a759-54c4-4bb0-b1d4-7bd5c6bc7dda",
        "cursor": {
          "ref": "4007b430-20c5-4c6d-b6c1-01e23dd4e4ba",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1cf01a9c-780e-4a8e-a92e-2b1e189bff4c"
        },
        "item": {
          "id": "c181a759-54c4-4bb0-b1d4-7bd5c6bc7dda",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "047f7a52-c5de-4d7a-8691-d023db08e3d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 182,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "22a13449-4840-41e9-b9ba-a97f2b31dd47",
        "cursor": {
          "ref": "f96f590f-e8bf-444d-81b5-62c1fb0b2ee1",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4bb895b2-c01f-4499-b7b7-24e7da994348"
        },
        "item": {
          "id": "22a13449-4840-41e9-b9ba-a97f2b31dd47",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "04b6c65b-ef1b-4f4e-af9c-040a5b32af04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "22a13449-4840-41e9-b9ba-a97f2b31dd47",
        "cursor": {
          "ref": "f96f590f-e8bf-444d-81b5-62c1fb0b2ee1",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4bb895b2-c01f-4499-b7b7-24e7da994348"
        },
        "item": {
          "id": "22a13449-4840-41e9-b9ba-a97f2b31dd47",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "04b6c65b-ef1b-4f4e-af9c-040a5b32af04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a9503e17-4482-4800-92ad-5480bb506eed",
        "cursor": {
          "ref": "dd4abc2f-1933-418b-b547-5464b5c29ec6",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "51779b62-2a86-4c63-941e-5e5e1eb5281e"
        },
        "item": {
          "id": "a9503e17-4482-4800-92ad-5480bb506eed",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "eec9a2ba-e0c4-4586-b5ab-01bb353e653a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}